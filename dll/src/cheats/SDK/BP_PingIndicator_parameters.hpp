#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PingIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_PingIndicator.BP_PingIndicator_C.ExecuteUbergraph_BP_PingIndicator
// 0x00E8 (0x00E8 - 0x0000)
struct BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PingIndicator_C*                    K2Node_CustomEvent_BP_PingIndicatorRef;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_LinearColor;                    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location_1;                     // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_CustomEvent_IconTexture_1;                  // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_CustomEvent_IconTexture;                    // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UTexture2D*                       K2Node_Event_IconTexture;                          // 0x00A8(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget_PingIndicatorWidget_C*          K2Node_DynamicCast_AsWidget_Ping_Indicator_Widget; // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARRadarManager*                         CallFunc_GetRadarManager_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARRadarManager*                         CallFunc_GetRadarManager_ReturnValue_1;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator) == 0x000008, "Wrong alignment on BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator");
static_assert(sizeof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator) == 0x0000E8, "Wrong size on BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, EntryPoint) == 0x000000, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_BP_PingIndicatorRef) == 0x000008, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_BP_PingIndicatorRef' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_LinearColor) == 0x000010, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_BreakColor_R) == 0x000020, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_BreakColor_G) == 0x000024, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_BreakColor_B) == 0x000028, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_BreakColor_A) == 0x00002C, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_Location_1) == 0x000030, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_Location_1' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_MakeColor_ReturnValue) == 0x000048, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_MakeColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000058, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_Location) == 0x000060, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_IconTexture_1) == 0x000098, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_IconTexture_1' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_CustomEvent_IconTexture) == 0x0000A0, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_CustomEvent_IconTexture' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_Event_IconTexture) == 0x0000A8, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_Event_IconTexture' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_IsValid_ReturnValue_1) == 0x0000B0, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_IsValid_ReturnValue_2) == 0x0000B1, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_GetWidget_ReturnValue) == 0x0000B8, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_DynamicCast_AsWidget_Ping_Indicator_Widget) == 0x0000C0, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_DynamicCast_AsWidget_Ping_Indicator_Widget' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_GetRadarManager_ReturnValue) == 0x0000D0, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_GetRadarManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_GetRadarManager_ReturnValue_1) == 0x0000D8, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_GetRadarManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, K2Node_Event_EndPlayReason) == 0x0000E0, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator, CallFunc_IsValid_ReturnValue_3) == 0x0000E1, "Member 'BP_PingIndicator_C_ExecuteUbergraph_BP_PingIndicator::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.PlayVFX
// 0x0018 (0x0018 - 0x0000)
struct BP_PingIndicator_C_PlayVFX final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_PlayVFX) == 0x000008, "Wrong alignment on BP_PingIndicator_C_PlayVFX");
static_assert(sizeof(BP_PingIndicator_C_PlayVFX) == 0x000018, "Wrong size on BP_PingIndicator_C_PlayVFX");
static_assert(offsetof(BP_PingIndicator_C_PlayVFX, Location) == 0x000000, "Member 'BP_PingIndicator_C_PlayVFX::Location' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.PlayVFXMulticast
// 0x0018 (0x0018 - 0x0000)
struct BP_PingIndicator_C_PlayVFXMulticast final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_PlayVFXMulticast) == 0x000008, "Wrong alignment on BP_PingIndicator_C_PlayVFXMulticast");
static_assert(sizeof(BP_PingIndicator_C_PlayVFXMulticast) == 0x000018, "Wrong size on BP_PingIndicator_C_PlayVFXMulticast");
static_assert(offsetof(BP_PingIndicator_C_PlayVFXMulticast, Location) == 0x000000, "Member 'BP_PingIndicator_C_PlayVFXMulticast::Location' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_PingIndicator_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_PingIndicator_C_ReceiveEndPlay");
static_assert(sizeof(BP_PingIndicator_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_PingIndicator_C_ReceiveEndPlay");
static_assert(offsetof(BP_PingIndicator_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_PingIndicator_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.SetIndicatorIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_PingIndicator_C_SetIndicatorIcon final
{
public:
	const class UTexture2D*                       IconTexture;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_SetIndicatorIcon) == 0x000008, "Wrong alignment on BP_PingIndicator_C_SetIndicatorIcon");
static_assert(sizeof(BP_PingIndicator_C_SetIndicatorIcon) == 0x000008, "Wrong size on BP_PingIndicator_C_SetIndicatorIcon");
static_assert(offsetof(BP_PingIndicator_C_SetIndicatorIcon, IconTexture) == 0x000000, "Member 'BP_PingIndicator_C_SetIndicatorIcon::IconTexture' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.SetIndicatorIconMulticast
// 0x0008 (0x0008 - 0x0000)
struct BP_PingIndicator_C_SetIndicatorIconMulticast final
{
public:
	class UTexture2D*                             IconTexture;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_SetIndicatorIconMulticast) == 0x000008, "Wrong alignment on BP_PingIndicator_C_SetIndicatorIconMulticast");
static_assert(sizeof(BP_PingIndicator_C_SetIndicatorIconMulticast) == 0x000008, "Wrong size on BP_PingIndicator_C_SetIndicatorIconMulticast");
static_assert(offsetof(BP_PingIndicator_C_SetIndicatorIconMulticast, IconTexture) == 0x000000, "Member 'BP_PingIndicator_C_SetIndicatorIconMulticast::IconTexture' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.SetIndicatorIconServer
// 0x0008 (0x0008 - 0x0000)
struct BP_PingIndicator_C_SetIndicatorIconServer final
{
public:
	class UTexture2D*                             IconTexture;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_SetIndicatorIconServer) == 0x000008, "Wrong alignment on BP_PingIndicator_C_SetIndicatorIconServer");
static_assert(sizeof(BP_PingIndicator_C_SetIndicatorIconServer) == 0x000008, "Wrong size on BP_PingIndicator_C_SetIndicatorIconServer");
static_assert(offsetof(BP_PingIndicator_C_SetIndicatorIconServer, IconTexture) == 0x000000, "Member 'BP_PingIndicator_C_SetIndicatorIconServer::IconTexture' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.UpdateColorMulticast
// 0x0018 (0x0018 - 0x0000)
struct BP_PingIndicator_C_UpdateColorMulticast final
{
public:
	class ABP_PingIndicator_C*                    BP_PingIndicatorRef;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LinearColor;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_UpdateColorMulticast) == 0x000008, "Wrong alignment on BP_PingIndicator_C_UpdateColorMulticast");
static_assert(sizeof(BP_PingIndicator_C_UpdateColorMulticast) == 0x000018, "Wrong size on BP_PingIndicator_C_UpdateColorMulticast");
static_assert(offsetof(BP_PingIndicator_C_UpdateColorMulticast, BP_PingIndicatorRef) == 0x000000, "Member 'BP_PingIndicator_C_UpdateColorMulticast::BP_PingIndicatorRef' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_UpdateColorMulticast, LinearColor) == 0x000008, "Member 'BP_PingIndicator_C_UpdateColorMulticast::LinearColor' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.GetRadarIconColor
// 0x0030 (0x0030 - 0x0000)
struct BP_PingIndicator_C_GetRadarIconColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_R;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_G;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_B;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakColor_A;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_MakeColor_ReturnValue;                    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_GetRadarIconColor) == 0x000004, "Wrong alignment on BP_PingIndicator_C_GetRadarIconColor");
static_assert(sizeof(BP_PingIndicator_C_GetRadarIconColor) == 0x000030, "Wrong size on BP_PingIndicator_C_GetRadarIconColor");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, ReturnValue) == 0x000000, "Member 'BP_PingIndicator_C_GetRadarIconColor::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, CallFunc_BreakColor_R) == 0x000010, "Member 'BP_PingIndicator_C_GetRadarIconColor::CallFunc_BreakColor_R' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, CallFunc_BreakColor_G) == 0x000014, "Member 'BP_PingIndicator_C_GetRadarIconColor::CallFunc_BreakColor_G' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, CallFunc_BreakColor_B) == 0x000018, "Member 'BP_PingIndicator_C_GetRadarIconColor::CallFunc_BreakColor_B' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, CallFunc_BreakColor_A) == 0x00001C, "Member 'BP_PingIndicator_C_GetRadarIconColor::CallFunc_BreakColor_A' has a wrong offset!");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconColor, CallFunc_MakeColor_ReturnValue) == 0x000020, "Member 'BP_PingIndicator_C_GetRadarIconColor::CallFunc_MakeColor_ReturnValue' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.GetRadarIconSize
// 0x0010 (0x0010 - 0x0000)
struct BP_PingIndicator_C_GetRadarIconSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_GetRadarIconSize) == 0x000008, "Wrong alignment on BP_PingIndicator_C_GetRadarIconSize");
static_assert(sizeof(BP_PingIndicator_C_GetRadarIconSize) == 0x000010, "Wrong size on BP_PingIndicator_C_GetRadarIconSize");
static_assert(offsetof(BP_PingIndicator_C_GetRadarIconSize, ReturnValue) == 0x000000, "Member 'BP_PingIndicator_C_GetRadarIconSize::ReturnValue' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.GetRadarObjectIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_PingIndicator_C_GetRadarObjectIcon final
{
public:
	class USlateBrushAsset*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_GetRadarObjectIcon) == 0x000008, "Wrong alignment on BP_PingIndicator_C_GetRadarObjectIcon");
static_assert(sizeof(BP_PingIndicator_C_GetRadarObjectIcon) == 0x000008, "Wrong size on BP_PingIndicator_C_GetRadarObjectIcon");
static_assert(offsetof(BP_PingIndicator_C_GetRadarObjectIcon, ReturnValue) == 0x000000, "Member 'BP_PingIndicator_C_GetRadarObjectIcon::ReturnValue' has a wrong offset!");

// Function BP_PingIndicator.BP_PingIndicator_C.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct BP_PingIndicator_C_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PingIndicator_C_ShouldShowOnRadar) == 0x000001, "Wrong alignment on BP_PingIndicator_C_ShouldShowOnRadar");
static_assert(sizeof(BP_PingIndicator_C_ShouldShowOnRadar) == 0x000001, "Wrong size on BP_PingIndicator_C_ShouldShowOnRadar");
static_assert(offsetof(BP_PingIndicator_C_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'BP_PingIndicator_C_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

}

