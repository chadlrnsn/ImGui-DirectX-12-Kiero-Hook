#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Door.BP_Door_C
// 0x0198 (0x0470 - 0x02D8)
class ABP_Door_C final : public ARDoor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   Lock_FX_Actor;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BlockingCollision;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFilterVolumeComponent*                 FilterVolume;                                      // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioGameplayVolumeComponent*          AudioVolumeProxy;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       IndicatorWidget;                                   // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EntranceArrow;                                     // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ExitArrow;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          BlockOverlapCheckerProximity;                      // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PortalExitArrow;                                   // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PortalExitLocation;                                // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          EnablePortalTriggerProximity;                      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PortalEntranceArrow;                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_SegmentDoor_Portal_01;                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          PortalEntranceProximity;                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MSS_Door_Portal_Loop;                              // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowPortal;                                       // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionDuration;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClosedTransform;                                   // 0x0370(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartClosed;                                       // 0x03D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AREnemySpawnAreaSegment*                SegmentToStart;                                    // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          TransformOnSegmentEvents;                          // 0x03E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PortalEnabled;                                     // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TeleportDistance;                                  // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AREnemySpawnAreaSegment*                AssociatedSpawnAreaSegmentBP;                      // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FBox                                   CachedLevelBounds;                                 // 0x03F8(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCacheLevelBounds;                                 // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AudioBoundsExtentOffset;                           // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsEntryDoor;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     LockFXClass;                                       // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 OSIOverrideActor;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Door_EnablePortalTriggerProximity_K2Node_ComponentBoundEvent_2_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_Door_PortalEntranceProximity_K2Node_ComponentBoundEvent_1_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	bool CanInteract(class APlayerController* Controller);
	void DebugRoomBounds();
	void DisableAllPortalVisuals();
	void Editor_Close();
	void Editor_Open();
	void ExecuteUbergraph_BP_Door(int32 EntryPoint);
	void FindLevelBounds();
	void FinishedTransition();
	void GetOSIOverrideActor(class AActor** OverrideActor);
	void On_Teleported(class ARPlayerPawn* TeleportedPlayer);
	void OnFocus(class APlayerController* Controller);
	void OnFocusGone(class APlayerController* Controller);
	void OnInteract(class APlayerController* Controller);
	void OnIsClosedUpdated();
	void OnPortalActivated();
	void OnRep_StartClosed();
	void OnRequiredKeyUpdated();
	void OnSegmentCompleted(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnSegmentStarted(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OpenDoorMulticast();
	void ReceiveBeginPlay();
	void RunRoutedObjectBehaviour();
	void RunRoutedObjectBehaviourByName(class FName BehaviourName);
	void RunRoutedObjectBehaviourWithData(const struct FRoutedObjectData& RoutedData);
	void SetIndicatorToOSIOverride();
	void SetupEntryDoor();
	void SetupHighlight();
	void SpawnPortalSFX();
	void SpawnPortalVFX();
	void StartClosing();
	void StartOpening();
	void Teleport_Player(class ARPlayerPawn* PlayerToTeleport);
	void ToggleInteractionIndicatorVisibility(class AActor* InteractingActor, const bool NewVisible);
	void UserConstructionScript();

	bool ConditionMet() const;
	bool ConditionMet_Position(const struct FVector& Position) const;
	void GetBlueprintVariables(struct FRDoorBlueprintVariables* Result) const;
	class FText GetInteractableAlternativeDescription() const;
	int32 GetInteractableCost() const;
	class FText GetInteractableCostCurrencyType() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableName() const;
	class FText GetInteractableSubHeader() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Door_C">();
	}
	static class ABP_Door_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Door_C>();
	}
};
static_assert(alignof(ABP_Door_C) == 0x000010, "Wrong alignment on ABP_Door_C");
static_assert(sizeof(ABP_Door_C) == 0x000470, "Wrong size on ABP_Door_C");
static_assert(offsetof(ABP_Door_C, UberGraphFrame) == 0x0002D8, "Member 'ABP_Door_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Lock_FX_Actor) == 0x0002E0, "Member 'ABP_Door_C::Lock_FX_Actor' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, BlockingCollision) == 0x0002E8, "Member 'ABP_Door_C::BlockingCollision' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, FilterVolume) == 0x0002F0, "Member 'ABP_Door_C::FilterVolume' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AudioVolumeProxy) == 0x0002F8, "Member 'ABP_Door_C::AudioVolumeProxy' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, IndicatorWidget) == 0x000300, "Member 'ABP_Door_C::IndicatorWidget' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, EntranceArrow) == 0x000308, "Member 'ABP_Door_C::EntranceArrow' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, ExitArrow) == 0x000310, "Member 'ABP_Door_C::ExitArrow' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, BlockOverlapCheckerProximity) == 0x000318, "Member 'ABP_Door_C::BlockOverlapCheckerProximity' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PortalExitArrow) == 0x000320, "Member 'ABP_Door_C::PortalExitArrow' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PortalExitLocation) == 0x000328, "Member 'ABP_Door_C::PortalExitLocation' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, EnablePortalTriggerProximity) == 0x000330, "Member 'ABP_Door_C::EnablePortalTriggerProximity' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PortalEntranceArrow) == 0x000338, "Member 'ABP_Door_C::PortalEntranceArrow' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, NS_SegmentDoor_Portal_01) == 0x000340, "Member 'ABP_Door_C::NS_SegmentDoor_Portal_01' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PortalEntranceProximity) == 0x000348, "Member 'ABP_Door_C::PortalEntranceProximity' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, MSS_Door_Portal_Loop) == 0x000350, "Member 'ABP_Door_C::MSS_Door_Portal_Loop' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DefaultSceneRoot) == 0x000358, "Member 'ABP_Door_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AllowPortal) == 0x000360, "Member 'ABP_Door_C::AllowPortal' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TransitionDuration) == 0x000368, "Member 'ABP_Door_C::TransitionDuration' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, ClosedTransform) == 0x000370, "Member 'ABP_Door_C::ClosedTransform' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, StartClosed) == 0x0003D0, "Member 'ABP_Door_C::StartClosed' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SegmentToStart) == 0x0003D8, "Member 'ABP_Door_C::SegmentToStart' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TransformOnSegmentEvents) == 0x0003E0, "Member 'ABP_Door_C::TransformOnSegmentEvents' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PortalEnabled) == 0x0003E1, "Member 'ABP_Door_C::PortalEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TeleportDistance) == 0x0003E8, "Member 'ABP_Door_C::TeleportDistance' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AssociatedSpawnAreaSegmentBP) == 0x0003F0, "Member 'ABP_Door_C::AssociatedSpawnAreaSegmentBP' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, CachedLevelBounds) == 0x0003F8, "Member 'ABP_Door_C::CachedLevelBounds' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, bCacheLevelBounds) == 0x000430, "Member 'ABP_Door_C::bCacheLevelBounds' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AudioBoundsExtentOffset) == 0x000438, "Member 'ABP_Door_C::AudioBoundsExtentOffset' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, bIsEntryDoor) == 0x000450, "Member 'ABP_Door_C::bIsEntryDoor' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, LockFXClass) == 0x000458, "Member 'ABP_Door_C::LockFXClass' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OSIOverrideActor) == 0x000460, "Member 'ABP_Door_C::OSIOverrideActor' has a wrong offset!");

}

