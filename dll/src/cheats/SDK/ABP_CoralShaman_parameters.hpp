#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CoralShaman

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ABP_CoralShaman.ABP_CoralShaman_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_CoralShaman_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CoralShaman_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_CoralShaman_C_AnimGraph");
static_assert(sizeof(ABP_CoralShaman_C_AnimGraph) == 0x000010, "Wrong size on ABP_CoralShaman_C_AnimGraph");
static_assert(offsetof(ABP_CoralShaman_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_CoralShaman_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_CoralShaman.ABP_CoralShaman_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_CoralShaman_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_CoralShaman.ABP_CoralShaman_C.CycleBlending
// 0x0050 (0x0050 - 0x0000)
struct ABP_CoralShaman_C_CycleBlending final
{
public:
	struct FPoseLink                              F;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              B;                                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              L;                                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              R;                                                 // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CycleBlending_0;                                   // 0x0040(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CoralShaman_C_CycleBlending) == 0x000008, "Wrong alignment on ABP_CoralShaman_C_CycleBlending");
static_assert(sizeof(ABP_CoralShaman_C_CycleBlending) == 0x000050, "Wrong size on ABP_CoralShaman_C_CycleBlending");
static_assert(offsetof(ABP_CoralShaman_C_CycleBlending, F) == 0x000000, "Member 'ABP_CoralShaman_C_CycleBlending::F' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_CycleBlending, B) == 0x000010, "Member 'ABP_CoralShaman_C_CycleBlending::B' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_CycleBlending, L) == 0x000020, "Member 'ABP_CoralShaman_C_CycleBlending::L' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_CycleBlending, R) == 0x000030, "Member 'ABP_CoralShaman_C_CycleBlending::R' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_CycleBlending, CycleBlending_0) == 0x000040, "Member 'ABP_CoralShaman_C_CycleBlending::CycleBlending_0' has a wrong offset!");

// Function ABP_CoralShaman.ABP_CoralShaman_C.ExecuteUbergraph_ABP_CoralShaman
// 0x0020 (0x0020 - 0x0000)
struct ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ARPawnBase*                             CallFunc_GetCurrentCombatTarget_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SetAudioComponentSettingsMultiplayer_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman) == 0x000008, "Wrong alignment on ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman");
static_assert(sizeof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman) == 0x000020, "Wrong size on ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman");
static_assert(offsetof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman, EntryPoint) == 0x000000, "Member 'ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000008, "Member 'ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman, CallFunc_GetCurrentCombatTarget_ReturnValue) == 0x000010, "Member 'ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman::CallFunc_GetCurrentCombatTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman, CallFunc_SetAudioComponentSettingsMultiplayer_ReturnValue) == 0x000018, "Member 'ABP_CoralShaman_C_ExecuteUbergraph_ABP_CoralShaman::CallFunc_SetAudioComponentSettingsMultiplayer_ReturnValue' has a wrong offset!");

// Function ABP_CoralShaman.ABP_CoralShaman_C.UpdateLocomotionStates
// 0x0002 (0x0002 - 0x0000)
struct ABP_CoralShaman_C_UpdateLocomotionStates final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CoralShaman_C_UpdateLocomotionStates) == 0x000001, "Wrong alignment on ABP_CoralShaman_C_UpdateLocomotionStates");
static_assert(sizeof(ABP_CoralShaman_C_UpdateLocomotionStates) == 0x000002, "Wrong size on ABP_CoralShaman_C_UpdateLocomotionStates");
static_assert(offsetof(ABP_CoralShaman_C_UpdateLocomotionStates, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_CoralShaman_C_UpdateLocomotionStates::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_UpdateLocomotionStates, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'ABP_CoralShaman_C_UpdateLocomotionStates::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function ABP_CoralShaman.ABP_CoralShaman_C.UpdateShamanStates
// 0x0002 (0x0002 - 0x0000)
struct ABP_CoralShaman_C_UpdateShamanStates final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CoralShaman_C_UpdateShamanStates) == 0x000001, "Wrong alignment on ABP_CoralShaman_C_UpdateShamanStates");
static_assert(sizeof(ABP_CoralShaman_C_UpdateShamanStates) == 0x000002, "Wrong size on ABP_CoralShaman_C_UpdateShamanStates");
static_assert(offsetof(ABP_CoralShaman_C_UpdateShamanStates, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_CoralShaman_C_UpdateShamanStates::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CoralShaman_C_UpdateShamanStates, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'ABP_CoralShaman_C_UpdateShamanStates::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

}

