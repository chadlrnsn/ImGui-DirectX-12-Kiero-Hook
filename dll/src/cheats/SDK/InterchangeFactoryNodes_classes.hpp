#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeFactoryNodes

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "InterchangeCore_classes.hpp"
#include "CinematicCamera_structs.hpp"
#include "InterchangeFactoryNodes_structs.hpp"
#include "InterchangeNodes_structs.hpp"


namespace SDK
{

// Class InterchangeFactoryNodes.InterchangeActorFactoryNode
// 0x0080 (0x01D0 - 0x0150)
class UInterchangeActorFactoryNode : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x80];                                     // 0x0150(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomActorClassName(const class FString& AttributeValue);
	bool SetCustomGlobalTransform(const struct FTransform& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomLocalTransform(const struct FTransform& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMobility(const uint8& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomActorClassName(class FString* AttributeValue) const;
	bool GetCustomGlobalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomLocalTransform(struct FTransform* AttributeValue) const;
	bool GetCustomMobility(uint8* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeActorFactoryNode">();
	}
	static class UInterchangeActorFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeActorFactoryNode>();
	}
};
static_assert(alignof(UInterchangeActorFactoryNode) == 0x000008, "Wrong alignment on UInterchangeActorFactoryNode");
static_assert(sizeof(UInterchangeActorFactoryNode) == 0x0001D0, "Wrong size on UInterchangeActorFactoryNode");

// Class InterchangeFactoryNodes.InterchangePhysicalCameraFactoryNode
// 0x0040 (0x0210 - 0x01D0)
class UInterchangePhysicalCameraFactoryNode final : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x40];                                     // 0x01D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomFocalLength(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomFocusMethod(const ECameraFocusMethod& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSensorHeight(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSensorWidth(const float& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomFocalLength(float* AttributeValue) const;
	bool GetCustomFocusMethod(ECameraFocusMethod* AttributeValue) const;
	bool GetCustomSensorHeight(float* AttributeValue) const;
	bool GetCustomSensorWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangePhysicalCameraFactoryNode">();
	}
	static class UInterchangePhysicalCameraFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePhysicalCameraFactoryNode>();
	}
};
static_assert(alignof(UInterchangePhysicalCameraFactoryNode) == 0x000008, "Wrong alignment on UInterchangePhysicalCameraFactoryNode");
static_assert(sizeof(UInterchangePhysicalCameraFactoryNode) == 0x000210, "Wrong size on UInterchangePhysicalCameraFactoryNode");

// Class InterchangeFactoryNodes.InterchangeStandardCameraFactoryNode
// 0x0060 (0x0230 - 0x01D0)
class UInterchangeStandardCameraFactoryNode final : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x60];                                     // 0x01D0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAspectRatio(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomFarClipPlane(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomFieldOfView(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomNearClipPlane(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomProjectionMode(const ECameraProjectionMode& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomWidth(const float& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomAspectRatio(float* AttributeValue) const;
	bool GetCustomFarClipPlane(float* AttributeValue) const;
	bool GetCustomFieldOfView(float* AttributeValue) const;
	bool GetCustomNearClipPlane(float* AttributeValue) const;
	bool GetCustomProjectionMode(ECameraProjectionMode* AttributeValue) const;
	bool GetCustomWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeStandardCameraFactoryNode">();
	}
	static class UInterchangeStandardCameraFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeStandardCameraFactoryNode>();
	}
};
static_assert(alignof(UInterchangeStandardCameraFactoryNode) == 0x000008, "Wrong alignment on UInterchangeStandardCameraFactoryNode");
static_assert(sizeof(UInterchangeStandardCameraFactoryNode) == 0x000230, "Wrong size on UInterchangeStandardCameraFactoryNode");

// Class InterchangeFactoryNodes.InterchangeDecalActorFactoryNode
// 0x0030 (0x0200 - 0x01D0)
class UInterchangeDecalActorFactoryNode final : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x30];                                     // 0x01D0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomDecalMaterialPathName(const class FString& AttributeValue);
	bool SetCustomDecalSize(const struct FVector& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSortOrder(const int32& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomDecalMaterialPathName(class FString* AttributeValue) const;
	bool GetCustomDecalSize(struct FVector* AttributeValue) const;
	bool GetCustomSortOrder(int32* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeDecalActorFactoryNode">();
	}
	static class UInterchangeDecalActorFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeDecalActorFactoryNode>();
	}
};
static_assert(alignof(UInterchangeDecalActorFactoryNode) == 0x000008, "Wrong alignment on UInterchangeDecalActorFactoryNode");
static_assert(sizeof(UInterchangeDecalActorFactoryNode) == 0x000200, "Wrong size on UInterchangeDecalActorFactoryNode");

// Class InterchangeFactoryNodes.InterchangeBaseMaterialFactoryNode
// 0x0010 (0x0160 - 0x0150)
class UInterchangeBaseMaterialFactoryNode : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIsMaterialImportEnabled(const bool& AttributeValue);

	bool GetCustomIsMaterialImportEnabled(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeBaseMaterialFactoryNode">();
	}
	static class UInterchangeBaseMaterialFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeBaseMaterialFactoryNode>();
	}
};
static_assert(alignof(UInterchangeBaseMaterialFactoryNode) == 0x000008, "Wrong alignment on UInterchangeBaseMaterialFactoryNode");
static_assert(sizeof(UInterchangeBaseMaterialFactoryNode) == 0x000160, "Wrong size on UInterchangeBaseMaterialFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTextureFactoryNode
// 0x02A0 (0x03F0 - 0x0150)
class UInterchangeTextureFactoryNode : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x2A0];                                    // 0x0150(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeTextureNode(const class FString& UniqueID, const class FString& DisplayLabel, const class FString& InAssetName);
	bool SetCustomAdjustBrightness(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustBrightnessCurve(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustHue(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustMaxAlpha(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustMinAlpha(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustRGBCurve(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustSaturation(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAdjustVibrance(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAllowNonPowerOfTwo(const bool& AttributeValue);
	bool SetCustomAlphaCoverageThresholds(const struct FVector4& AttributeValue, bool bAddApplyDelegate);
	bool SetCustombChromaKeyTexture(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustombDoScaleMipsForAlphaCoverage(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustombFlipGreenChannel(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustombPreserveBorder(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustombUseLegacyGamma(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomChromaKeyColor(const struct FColor& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomChromaKeyThreshold(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomColorSpace(ETextureColorSpace AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCompositePower(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCompositeTextureMode(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCompressionNoAlpha(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCompressionQuality(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCompressionSettings(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDeferCompression(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDownscale(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDownscaleOptions(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomFilter(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomLODBias(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomLODGroup(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomLossyCompressionAmount(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMaxTextureSize(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMipGenSettings(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMipLoadOptions(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomPaddingColor(const struct FColor& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomPowerOfTwoMode(const uint8& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomPreferCompressedSourceData(const bool& AttributeValue);
	bool SetCustomSRGB(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomTranslatedTextureNodeUid(const class FString& AttributeValue);
	bool SetCustomVirtualTextureStreaming(const bool& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomAdjustBrightness(float* AttributeValue) const;
	bool GetCustomAdjustBrightnessCurve(float* AttributeValue) const;
	bool GetCustomAdjustHue(float* AttributeValue) const;
	bool GetCustomAdjustMaxAlpha(float* AttributeValue) const;
	bool GetCustomAdjustMinAlpha(float* AttributeValue) const;
	bool GetCustomAdjustRGBCurve(float* AttributeValue) const;
	bool GetCustomAdjustSaturation(float* AttributeValue) const;
	bool GetCustomAdjustVibrance(float* AttributeValue) const;
	bool GetCustomAllowNonPowerOfTwo(bool* AttributeValue) const;
	bool GetCustomAlphaCoverageThresholds(struct FVector4* AttributeValue) const;
	bool GetCustombChromaKeyTexture(bool* AttributeValue) const;
	bool GetCustombDoScaleMipsForAlphaCoverage(bool* AttributeValue) const;
	bool GetCustombFlipGreenChannel(bool* AttributeValue) const;
	bool GetCustombPreserveBorder(bool* AttributeValue) const;
	bool GetCustombUseLegacyGamma(bool* AttributeValue) const;
	bool GetCustomChromaKeyColor(struct FColor* AttributeValue) const;
	bool GetCustomChromaKeyThreshold(float* AttributeValue) const;
	bool GetCustomColorSpace(ETextureColorSpace* AttributeValue) const;
	bool GetCustomCompositePower(float* AttributeValue) const;
	bool GetCustomCompositeTextureMode(uint8* AttributeValue) const;
	bool GetCustomCompressionNoAlpha(bool* AttributeValue) const;
	bool GetCustomCompressionQuality(uint8* AttributeValue) const;
	bool GetCustomCompressionSettings(uint8* AttributeValue) const;
	bool GetCustomDeferCompression(bool* AttributeValue) const;
	bool GetCustomDownscale(float* AttributeValue) const;
	bool GetCustomDownscaleOptions(uint8* AttributeValue) const;
	bool GetCustomFilter(uint8* AttributeValue) const;
	bool GetCustomLODBias(int32* AttributeValue) const;
	bool GetCustomLODGroup(uint8* AttributeValue) const;
	bool GetCustomLossyCompressionAmount(uint8* AttributeValue) const;
	bool GetCustomMaxTextureSize(int32* AttributeValue) const;
	bool GetCustomMipGenSettings(uint8* AttributeValue) const;
	bool GetCustomMipLoadOptions(uint8* AttributeValue) const;
	bool GetCustomPaddingColor(struct FColor* AttributeValue) const;
	bool GetCustomPowerOfTwoMode(uint8* AttributeValue) const;
	bool GetCustomPreferCompressedSourceData(bool* AttributeValue) const;
	bool GetCustomSRGB(bool* AttributeValue) const;
	bool GetCustomTranslatedTextureNodeUid(class FString* AttributeValue) const;
	bool GetCustomVirtualTextureStreaming(bool* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureFactoryNode">();
	}
	static class UInterchangeTextureFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTextureFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTextureFactoryNode");
static_assert(sizeof(UInterchangeTextureFactoryNode) == 0x0003F0, "Wrong size on UInterchangeTextureFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTextureCubeFactoryNode
// 0x0000 (0x03F0 - 0x03F0)
class UInterchangeTextureCubeFactoryNode final : public UInterchangeTextureFactoryNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureCubeFactoryNode">();
	}
	static class UInterchangeTextureCubeFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTextureCubeFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTextureCubeFactoryNode");
static_assert(sizeof(UInterchangeTextureCubeFactoryNode) == 0x0003F0, "Wrong size on UInterchangeTextureCubeFactoryNode");

// Class InterchangeFactoryNodes.InterchangeDecalMaterialFactoryNode
// 0x0020 (0x0180 - 0x0160)
class UInterchangeDecalMaterialFactoryNode final : public UInterchangeBaseMaterialFactoryNode
{
public:
	uint8                                         Pad_160[0x20];                                     // 0x0160(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomDiffuseTexturePath(const class FString& AttributeValue);
	bool SetCustomNormalTexturePath(const class FString& AttributeValue);

	bool GetCustomDiffuseTexturePath(class FString* AttributeValue) const;
	bool GetCustomNormalTexturePath(class FString* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeDecalMaterialFactoryNode">();
	}
	static class UInterchangeDecalMaterialFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeDecalMaterialFactoryNode>();
	}
};
static_assert(alignof(UInterchangeDecalMaterialFactoryNode) == 0x000008, "Wrong alignment on UInterchangeDecalMaterialFactoryNode");
static_assert(sizeof(UInterchangeDecalMaterialFactoryNode) == 0x000180, "Wrong size on UInterchangeDecalMaterialFactoryNode");

// Class InterchangeFactoryNodes.InterchangeLevelFactoryNode
// 0x0060 (0x01B0 - 0x0150)
class UInterchangeLevelFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x60];                                     // 0x0150(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomActorFactoryNodeUid(const class FString& ActorFactoryNodeUid);
	bool RemoveCustomActorFactoryNodeUid(const class FString& ActorFactoryNodeUid);
	bool SetCustomCreateWorldPartitionLevel(const bool& AttributeValue);
	bool SetCustomSceneImportAssetFactoryNodeUid(const class FString& AttributeValue);
	bool SetCustomShouldCreateLevel(const bool& AttributeValue);

	void GetCustomActorFactoryNodeUid(const int32 Index_0, class FString* OutActorFactoryNodeUid) const;
	int32 GetCustomActorFactoryNodeUidCount() const;
	void GetCustomActorFactoryNodeUids(TArray<class FString>* OutActorFactoryNodeUids) const;
	bool GetCustomCreateWorldPartitionLevel(bool* AttributeValue) const;
	bool GetCustomSceneImportAssetFactoryNodeUid(class FString* AttributeValue) const;
	bool GetCustomShouldCreateLevel(bool* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeLevelFactoryNode">();
	}
	static class UInterchangeLevelFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLevelFactoryNode>();
	}
};
static_assert(alignof(UInterchangeLevelFactoryNode) == 0x000008, "Wrong alignment on UInterchangeLevelFactoryNode");
static_assert(sizeof(UInterchangeLevelFactoryNode) == 0x0001B0, "Wrong size on UInterchangeLevelFactoryNode");

// Class InterchangeFactoryNodes.InterchangeLevelInstanceActorFactoryNode
// 0x0020 (0x01F0 - 0x01D0)
class UInterchangeLevelInstanceActorFactoryNode final : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x20];                                     // 0x01D0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomLevelReference(const class FString& AttributeValue);

	bool GetCustomLevelReference(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeLevelInstanceActorFactoryNode">();
	}
	static class UInterchangeLevelInstanceActorFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLevelInstanceActorFactoryNode>();
	}
};
static_assert(alignof(UInterchangeLevelInstanceActorFactoryNode) == 0x000008, "Wrong alignment on UInterchangeLevelInstanceActorFactoryNode");
static_assert(sizeof(UInterchangeLevelInstanceActorFactoryNode) == 0x0001F0, "Wrong size on UInterchangeLevelInstanceActorFactoryNode");

// Class InterchangeFactoryNodes.InterchangeLevelSequenceFactoryNode
// 0x0030 (0x0180 - 0x0150)
class UInterchangeLevelSequenceFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x30];                                     // 0x0150(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool RemoveCustomAnimationTrackUid(const class FString& AnimationTrackUid);
	bool SetCustomFrameRate(const float& AttributeValue);

	void GetCustomAnimationTrackUid(const int32 Index_0, class FString* OutAnimationTrackUid) const;
	int32 GetCustomAnimationTrackUidCount() const;
	void GetCustomAnimationTrackUids(TArray<class FString>* OutAnimationTrackUids) const;
	bool GetCustomFrameRate(float* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeLevelSequenceFactoryNode">();
	}
	static class UInterchangeLevelSequenceFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLevelSequenceFactoryNode>();
	}
};
static_assert(alignof(UInterchangeLevelSequenceFactoryNode) == 0x000008, "Wrong alignment on UInterchangeLevelSequenceFactoryNode");
static_assert(sizeof(UInterchangeLevelSequenceFactoryNode) == 0x000180, "Wrong size on UInterchangeLevelSequenceFactoryNode");

// Class InterchangeFactoryNodes.InterchangeCommonPipelineDataFactoryNode
// 0x0030 (0x0180 - 0x0150)
class UInterchangeCommonPipelineDataFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x30];                                     // 0x0150(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetBakeMeshes(const bool& AttributeValue);
	bool SetBakePivotMeshes(const bool& AttributeValue);
	bool SetCustomGlobalOffsetTransform(const class UInterchangeBaseNodeContainer* NodeContainer, const struct FTransform& AttributeValue);

	bool GetBakeMeshes(bool* AttributeValue) const;
	bool GetBakePivotMeshes(bool* AttributeValue) const;
	bool GetCustomGlobalOffsetTransform(struct FTransform* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeCommonPipelineDataFactoryNode">();
	}
	static class UInterchangeCommonPipelineDataFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeCommonPipelineDataFactoryNode>();
	}
};
static_assert(alignof(UInterchangeCommonPipelineDataFactoryNode) == 0x000008, "Wrong alignment on UInterchangeCommonPipelineDataFactoryNode");
static_assert(sizeof(UInterchangeCommonPipelineDataFactoryNode) == 0x000180, "Wrong size on UInterchangeCommonPipelineDataFactoryNode");

// Class InterchangeFactoryNodes.InterchangeBaseLightFactoryNode
// 0x0040 (0x0210 - 0x01D0)
class UInterchangeBaseLightFactoryNode : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x40];                                     // 0x01D0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomIntensity(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomLightColor(const struct FColor& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomTemperature(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseTemperature(bool AttributeValue, bool bAddApplyDelegate);

	bool GetCustomIntensity(float* AttributeValue) const;
	bool GetCustomLightColor(struct FColor* AttributeValue) const;
	bool GetCustomTemperature(float* AttributeValue) const;
	bool GetCustomUseTemperature(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeBaseLightFactoryNode">();
	}
	static class UInterchangeBaseLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeBaseLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangeBaseLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangeBaseLightFactoryNode");
static_assert(sizeof(UInterchangeBaseLightFactoryNode) == 0x000210, "Wrong size on UInterchangeBaseLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangeDirectionalLightFactoryNode
// 0x0000 (0x0210 - 0x0210)
class UInterchangeDirectionalLightFactoryNode final : public UInterchangeBaseLightFactoryNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeDirectionalLightFactoryNode">();
	}
	static class UInterchangeDirectionalLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeDirectionalLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangeDirectionalLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangeDirectionalLightFactoryNode");
static_assert(sizeof(UInterchangeDirectionalLightFactoryNode) == 0x000210, "Wrong size on UInterchangeDirectionalLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangeLightFactoryNode
// 0x0060 (0x0270 - 0x0210)
class UInterchangeLightFactoryNode : public UInterchangeBaseLightFactoryNode
{
public:
	uint8                                         Pad_210[0x60];                                     // 0x0210(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAttenuationRadius(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomIESBrightnessScale(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomIESTexture(const class FString& AttributeValue);
	bool SetCustomIntensityUnits(ELightUnits AttributeValue, bool bAddApplyDelegate);
	bool SetCustomRotation(const struct FRotator& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseIESBrightness(const bool& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomAttenuationRadius(float* AttributeValue) const;
	bool GetCustomIESBrightnessScale(float* AttributeValue) const;
	bool GetCustomIESTexture(class FString* AttributeValue) const;
	bool GetCustomIntensityUnits(ELightUnits* AttributeValue) const;
	bool GetCustomRotation(struct FRotator* AttributeValue) const;
	bool GetCustomUseIESBrightness(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeLightFactoryNode">();
	}
	static class UInterchangeLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangeLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangeLightFactoryNode");
static_assert(sizeof(UInterchangeLightFactoryNode) == 0x000270, "Wrong size on UInterchangeLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangeRectLightFactoryNode
// 0x0020 (0x0290 - 0x0270)
class UInterchangeRectLightFactoryNode final : public UInterchangeLightFactoryNode
{
public:
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomSourceHeight(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSourceWidth(float AttributeValue, bool bAddApplyDelegate);

	bool GetCustomSourceHeight(float* AttributeValue) const;
	bool GetCustomSourceWidth(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeRectLightFactoryNode">();
	}
	static class UInterchangeRectLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeRectLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangeRectLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangeRectLightFactoryNode");
static_assert(sizeof(UInterchangeRectLightFactoryNode) == 0x000290, "Wrong size on UInterchangeRectLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMaterialExpressionFactoryNode
// 0x0010 (0x0160 - 0x0150)
class UInterchangeMaterialExpressionFactoryNode : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomExpressionClassName(const class FString& AttributeValue);

	bool GetCustomExpressionClassName(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialExpressionFactoryNode">();
	}
	static class UInterchangeMaterialExpressionFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialExpressionFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMaterialExpressionFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMaterialExpressionFactoryNode");
static_assert(sizeof(UInterchangeMaterialExpressionFactoryNode) == 0x000160, "Wrong size on UInterchangeMaterialExpressionFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMaterialFunctionCallExpressionFactoryNode
// 0x0010 (0x0170 - 0x0160)
class UInterchangeMaterialFunctionCallExpressionFactoryNode final : public UInterchangeMaterialExpressionFactoryNode
{
public:
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomMaterialFunctionDependency(const class FString& AttributeValue);

	bool GetCustomMaterialFunctionDependency(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialFunctionCallExpressionFactoryNode">();
	}
	static class UInterchangeMaterialFunctionCallExpressionFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialFunctionCallExpressionFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMaterialFunctionCallExpressionFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMaterialFunctionCallExpressionFactoryNode");
static_assert(sizeof(UInterchangeMaterialFunctionCallExpressionFactoryNode) == 0x000170, "Wrong size on UInterchangeMaterialFunctionCallExpressionFactoryNode");

// Class InterchangeFactoryNodes.InterchangePointLightFactoryNode
// 0x0020 (0x0290 - 0x0270)
class UInterchangePointLightFactoryNode : public UInterchangeLightFactoryNode
{
public:
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomLightFalloffExponent(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseInverseSquaredFalloff(bool AttributeValue, bool bAddApplyDelegate);

	bool GetCustomLightFalloffExponent(float* AttributeValue) const;
	bool GetCustomUseInverseSquaredFalloff(bool* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangePointLightFactoryNode">();
	}
	static class UInterchangePointLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePointLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangePointLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangePointLightFactoryNode");
static_assert(sizeof(UInterchangePointLightFactoryNode) == 0x000290, "Wrong size on UInterchangePointLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSpotLightFactoryNode
// 0x0020 (0x02B0 - 0x0290)
class UInterchangeSpotLightFactoryNode final : public UInterchangePointLightFactoryNode
{
public:
	uint8                                         Pad_290[0x20];                                     // 0x0290(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomInnerConeAngle(float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomOuterConeAngle(float AttributeValue, bool bAddApplyDelegate);

	bool GetCustomInnerConeAngle(float* AttributeValue) const;
	bool GetCustomOuterConeAngle(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSpotLightFactoryNode">();
	}
	static class UInterchangeSpotLightFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSpotLightFactoryNode>();
	}
};
static_assert(alignof(UInterchangeSpotLightFactoryNode) == 0x000008, "Wrong alignment on UInterchangeSpotLightFactoryNode");
static_assert(sizeof(UInterchangeSpotLightFactoryNode) == 0x0002B0, "Wrong size on UInterchangeSpotLightFactoryNode");

// Class InterchangeFactoryNodes.InterchangePhysicsAssetFactoryNode
// 0x0030 (0x0180 - 0x0150)
class UInterchangePhysicsAssetFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x30];                                     // 0x0150(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializePhysicsAssetNode(const class FString& UniqueID, const class FString& DisplayLabel, const class FString& InAssetClass);
	bool SetCustomSkeletalMeshUid(const class FString& AttributeValue);

	bool GetCustomSkeletalMeshUid(class FString* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangePhysicsAssetFactoryNode">();
	}
	static class UInterchangePhysicsAssetFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangePhysicsAssetFactoryNode>();
	}
};
static_assert(alignof(UInterchangePhysicsAssetFactoryNode) == 0x000008, "Wrong alignment on UInterchangePhysicsAssetFactoryNode");
static_assert(sizeof(UInterchangePhysicsAssetFactoryNode) == 0x000180, "Wrong size on UInterchangePhysicsAssetFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMaterialFactoryNode
// 0x0070 (0x01D0 - 0x0160)
class UInterchangeMaterialFactoryNode final : public UInterchangeBaseMaterialFactoryNode
{
public:
	uint8                                         Pad_160[0x70];                                     // 0x0160(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ConnectOutputToAnisotropy(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToBaseColor(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToClearCoat(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToClearCoatNormal(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToClearCoatRoughness(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToCloth(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToDisplacement(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToEmissiveColor(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToFuzzColor(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToMetallic(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToNormal(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToOcclusion(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToOpacity(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToRefraction(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToRoughness(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToSpecular(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToSubsurface(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToSurfaceCoverage(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToTangent(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectOutputToTransmissionColor(const class FString& ExpressionNodeUid, const class FString& OutputName);
	bool ConnectToAnisotropy(const class FString& ExpressionNodeUid);
	bool ConnectToBaseColor(const class FString& AttributeValue);
	bool ConnectToClearCoat(const class FString& AttributeValue);
	bool ConnectToClearCoatNormal(const class FString& AttributeValue);
	bool ConnectToClearCoatRoughness(const class FString& AttributeValue);
	bool ConnectToCloth(const class FString& AttributeValue);
	bool ConnectToDisplacement(const class FString& AttributeValue);
	bool ConnectToEmissiveColor(const class FString& ExpressionNodeUid);
	bool ConnectToFuzzColor(const class FString& AttributeValue);
	bool ConnectToMetallic(const class FString& AttributeValue);
	bool ConnectToNormal(const class FString& ExpressionNodeUid);
	bool ConnectToOcclusion(const class FString& AttributeValue);
	bool ConnectToOpacity(const class FString& AttributeValue);
	bool ConnectToRefraction(const class FString& AttributeValue);
	bool ConnectToRoughness(const class FString& ExpressionNodeUid);
	bool ConnectToSpecular(const class FString& ExpressionNodeUid);
	bool ConnectToSubsurface(const class FString& ExpressionNodeUid);
	bool ConnectToSurfaceCoverage(const class FString& ExpressionUid);
	bool ConnectToTangent(const class FString& ExpressionNodeUid);
	bool ConnectToTransmissionColor(const class FString& AttributeValue);
	bool SetCustomBlendMode(const EBlendMode& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomOpacityMaskClipValue(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomRefractionMethod(const ERefractionMode& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomScreenSpaceReflections(const bool& AttributeValue);
	bool SetCustomShadingModel(const EMaterialShadingModel& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomTranslucencyLightingMode(const ETranslucencyLightingMode& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomTwoSided(const bool& AttributeValue, bool bAddApplyDelegate);

	bool GetAnisotropyConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetBaseColorConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetClearCoatConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetClearCoatNormalConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetClearCoatRoughnessConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetClothConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetCustomBlendMode(EBlendMode* AttributeValue) const;
	bool GetCustomOpacityMaskClipValue(float* AttributeValue) const;
	bool GetCustomRefractionMethod(ERefractionMode* AttributeValue) const;
	bool GetCustomScreenSpaceReflections(bool* AttributeValue) const;
	bool GetCustomShadingModel(EMaterialShadingModel* AttributeValue) const;
	bool GetCustomTranslucencyLightingMode(ETranslucencyLightingMode* AttributeValue) const;
	bool GetCustomTwoSided(bool* AttributeValue) const;
	bool GetDisplacementConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetEmissiveColorConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetFuzzColorConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetMetallicConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetNormalConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	class UClass* GetObjectClass() const;
	bool GetOcclusionConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetOpacityConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetRefractionConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetRoughnessConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetSpecularConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetSubsurfaceConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetSurfaceCoverageConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetTangentConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;
	bool GetTransmissionColorConnection(class FString* ExpressionNodeUid, class FString* OutputName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialFactoryNode">();
	}
	static class UInterchangeMaterialFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMaterialFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMaterialFactoryNode");
static_assert(sizeof(UInterchangeMaterialFactoryNode) == 0x0001D0, "Wrong size on UInterchangeMaterialFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSceneVariantSetsFactoryNode
// 0x0020 (0x0170 - 0x0150)
class UInterchangeSceneVariantSetsFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddCustomVariantSetUid(const class FString& VariantUid);
	bool RemoveCustomVariantSetUid(const class FString& VariantUid);

	void GetCustomVariantSetUid(const int32 Index_0, class FString* OutVariantUid) const;
	int32 GetCustomVariantSetUidCount() const;
	void GetCustomVariantSetUids(TArray<class FString>* OutVariantUids) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSceneVariantSetsFactoryNode">();
	}
	static class UInterchangeSceneVariantSetsFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneVariantSetsFactoryNode>();
	}
};
static_assert(alignof(UInterchangeSceneVariantSetsFactoryNode) == 0x000008, "Wrong alignment on UInterchangeSceneVariantSetsFactoryNode");
static_assert(sizeof(UInterchangeSceneVariantSetsFactoryNode) == 0x000170, "Wrong size on UInterchangeSceneVariantSetsFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSceneImportAssetFactoryNode
// 0x0000 (0x0150 - 0x0150)
class UInterchangeSceneImportAssetFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSceneImportAssetFactoryNode">();
	}
	static class UInterchangeSceneImportAssetFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSceneImportAssetFactoryNode>();
	}
};
static_assert(alignof(UInterchangeSceneImportAssetFactoryNode) == 0x000008, "Wrong alignment on UInterchangeSceneImportAssetFactoryNode");
static_assert(sizeof(UInterchangeSceneImportAssetFactoryNode) == 0x000150, "Wrong size on UInterchangeSceneImportAssetFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSkeletonFactoryNode
// 0x0050 (0x01A0 - 0x0150)
class UInterchangeSkeletonFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x50];                                     // 0x0150(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeSkeletonNode(const class FString& UniqueID, const class FString& DisplayLabel, const class FString& InAssetClass);
	bool SetCustomRootJointUid(const class FString& AttributeValue);
	bool SetCustomSkeletalMeshFactoryNodeUid(const class FString& AttributeValue);
	bool SetCustomUseTimeZeroForBindPose(const bool& AttributeValue);

	bool GetCustomRootJointUid(class FString* AttributeValue) const;
	bool GetCustomSkeletalMeshFactoryNodeUid(class FString* AttributeValue) const;
	bool GetCustomUseTimeZeroForBindPose(bool* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSkeletonFactoryNode">();
	}
	static class UInterchangeSkeletonFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSkeletonFactoryNode>();
	}
};
static_assert(alignof(UInterchangeSkeletonFactoryNode) == 0x000008, "Wrong alignment on UInterchangeSkeletonFactoryNode");
static_assert(sizeof(UInterchangeSkeletonFactoryNode) == 0x0001A0, "Wrong size on UInterchangeSkeletonFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTexture2DArrayFactoryNode
// 0x0030 (0x0420 - 0x03F0)
class UInterchangeTexture2DArrayFactoryNode final : public UInterchangeTextureFactoryNode
{
public:
	uint8                                         Pad_3F0[0x30];                                     // 0x03F0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAddressZ(const uint8 AttributeValue, bool bAddApplyDelegate);

	bool GetCustomAddressX(uint8* AttributeValue) const;
	bool GetCustomAddressY(uint8* AttributeValue) const;
	bool GetCustomAddressZ(uint8* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTexture2DArrayFactoryNode">();
	}
	static class UInterchangeTexture2DArrayFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DArrayFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTexture2DArrayFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTexture2DArrayFactoryNode");
static_assert(sizeof(UInterchangeTexture2DArrayFactoryNode) == 0x000420, "Wrong size on UInterchangeTexture2DArrayFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTexture2DFactoryNode
// 0x0098 (0x0488 - 0x03F0)
class UInterchangeTexture2DFactoryNode : public UInterchangeTextureFactoryNode
{
public:
	uint8                                         Pad_3F0[0x98];                                     // 0x03F0(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomAddressX(const ETextureAddress AttributeValue, bool bAddApplyDelegate);
	bool SetCustomAddressY(const ETextureAddress AttributeValue, bool bAddApplyDelegate);
	void SetSourceBlock(int32 BlockIndex, const class FString& InSourceFile);
	void SetSourceBlockByCoordinates(int32 X, int32 Y, const class FString& InSourceFile);
	void SetSourceBlocks(const TMap<int32, class FString>& InSourceBlocks);

	bool GetCustomAddressX(ETextureAddress* AttributeValue) const;
	bool GetCustomAddressY(ETextureAddress* AttributeValue) const;
	bool GetSourceBlock(int32 BlockIndex, class FString* OutSourceFile) const;
	bool GetSourceBlockByCoordinates(int32 X, int32 Y, class FString* OutSourceFile) const;
	TMap<int32, class FString> GetSourceBlocks() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTexture2DFactoryNode">();
	}
	static class UInterchangeTexture2DFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTexture2DFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTexture2DFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTexture2DFactoryNode");
static_assert(sizeof(UInterchangeTexture2DFactoryNode) == 0x000488, "Wrong size on UInterchangeTexture2DFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTextureCubeArrayFactoryNode
// 0x0000 (0x03F0 - 0x03F0)
class UInterchangeTextureCubeArrayFactoryNode final : public UInterchangeTextureFactoryNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureCubeArrayFactoryNode">();
	}
	static class UInterchangeTextureCubeArrayFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureCubeArrayFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTextureCubeArrayFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTextureCubeArrayFactoryNode");
static_assert(sizeof(UInterchangeTextureCubeArrayFactoryNode) == 0x0003F0, "Wrong size on UInterchangeTextureCubeArrayFactoryNode");

// Class InterchangeFactoryNodes.InterchangeTextureLightProfileFactoryNode
// 0x0020 (0x04A8 - 0x0488)
class UInterchangeTextureLightProfileFactoryNode final : public UInterchangeTexture2DFactoryNode
{
public:
	uint8                                         Pad_488[0x20];                                     // 0x0488(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomBrightness(const float AttributeValue, bool bAddApplyDelegate);
	bool SetCustomTextureMultiplier(const float AttributeValue, bool bAddApplyDelegate);

	bool GetCustomBrightness(float* AttributeValue) const;
	bool GetCustomTextureMultiplier(float* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeTextureLightProfileFactoryNode">();
	}
	static class UInterchangeTextureLightProfileFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeTextureLightProfileFactoryNode>();
	}
};
static_assert(alignof(UInterchangeTextureLightProfileFactoryNode) == 0x000008, "Wrong alignment on UInterchangeTextureLightProfileFactoryNode");
static_assert(sizeof(UInterchangeTextureLightProfileFactoryNode) == 0x0004A8, "Wrong size on UInterchangeTextureLightProfileFactoryNode");

// Class InterchangeFactoryNodes.InterchangeVolumeTextureFactoryNode
// 0x0000 (0x03F0 - 0x03F0)
class UInterchangeVolumeTextureFactoryNode final : public UInterchangeTextureFactoryNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeVolumeTextureFactoryNode">();
	}
	static class UInterchangeVolumeTextureFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeVolumeTextureFactoryNode>();
	}
};
static_assert(alignof(UInterchangeVolumeTextureFactoryNode) == 0x000008, "Wrong alignment on UInterchangeVolumeTextureFactoryNode");
static_assert(sizeof(UInterchangeVolumeTextureFactoryNode) == 0x0003F0, "Wrong size on UInterchangeVolumeTextureFactoryNode");

// Class InterchangeFactoryNodes.InterchangeAnimSequenceFactoryNode
// 0x0340 (0x0490 - 0x0150)
class UInterchangeAnimSequenceFactoryNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x340];                                    // 0x0150(0x0340)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeAnimSequenceNode(const class FString& UniqueID, const class FString& DisplayLabel);
	bool RemoveAnimatedAttributeCurveName(const class FString& AttributeCurveName);
	bool RemoveAnimatedAttributeStepCurveName(const class FString& AttributeStepCurveName);
	bool RemoveAnimatedMaterialCurveSuffixe(const class FString& MaterialCurveSuffixe);
	bool SetAnimatedAttributeCurveName(const class FString& AttributeCurveName);
	bool SetAnimatedAttributeStepCurveName(const class FString& AttributeStepCurveName);
	bool SetAnimatedMaterialCurveSuffixe(const class FString& MaterialCurveSuffixe);
	void SetAnimationPayloadKeysForMorphTargetNodeUids(const TMap<class FString, class FString>& MorphTargetAnimationPayloadKeyUids, const TMap<class FString, uint8>& MorphTargetAnimationPayloadKeyTypes);
	void SetAnimationPayloadKeysForSceneNodeUids(const TMap<class FString, class FString>& SceneNodeAnimationPayloadKeyUids, const TMap<class FString, uint8>& SceneNodeAnimationPayloadKeyTypes);
	bool SetCustomAddCurveMetadataToSkeleton(const bool& AttributeValue);
	bool SetCustomDeleteExistingCustomAttributeCurves(const bool& AttributeValue);
	bool SetCustomDeleteExistingMorphTargetCurves(const bool& AttributeValue);
	bool SetCustomDeleteExistingNonCurveCustomAttributes(const bool& AttributeValue);
	bool SetCustomDoNotImportCurveWithZero(const bool& AttributeValue);
	bool SetCustomImportAttributeCurves(const bool& AttributeValue);
	bool SetCustomImportBoneTracks(const bool& AttributeValue);
	bool SetCustomImportBoneTracksRangeStart(const double& AttributeValue);
	bool SetCustomImportBoneTracksRangeStop(const double& AttributeValue);
	bool SetCustomImportBoneTracksSampleRate(const double& AttributeValue);
	bool SetCustomMaterialDriveParameterOnCustomAttribute(const bool& AttributeValue);
	bool SetCustomRemoveCurveRedundantKeys(const bool& AttributeValue);
	bool SetCustomSkeletonFactoryNodeUid(const class FString& AttributeValue);
	bool SetCustomSkeletonSoftObjectPath(const struct FSoftObjectPath& AttributeValue);

	void GetAnimatedAttributeCurveName(const int32 Index_0, class FString* OutAttributeCurveName) const;
	void GetAnimatedAttributeCurveNames(TArray<class FString>* OutAttributeCurveNames) const;
	int32 GetAnimatedAttributeCurveNamesCount() const;
	void GetAnimatedAttributeStepCurveName(const int32 Index_0, class FString* OutAttributeStepCurveName) const;
	void GetAnimatedAttributeStepCurveNames(TArray<class FString>* OutAttributeStepCurveNames) const;
	int32 GetAnimatedAttributeStepCurveNamesCount() const;
	void GetAnimatedMaterialCurveSuffixe(const int32 Index_0, class FString* OutMaterialCurveSuffixe) const;
	void GetAnimatedMaterialCurveSuffixes(TArray<class FString>* OutMaterialCurveSuffixes) const;
	int32 GetAnimatedMaterialCurveSuffixesCount() const;
	bool GetCustomAddCurveMetadataToSkeleton(bool* AttributeValue) const;
	bool GetCustomDeleteExistingCustomAttributeCurves(bool* AttributeValue) const;
	bool GetCustomDeleteExistingMorphTargetCurves(bool* AttributeValue) const;
	bool GetCustomDeleteExistingNonCurveCustomAttributes(bool* AttributeValue) const;
	bool GetCustomDoNotImportCurveWithZero(bool* AttributeValue) const;
	bool GetCustomImportAttributeCurves(bool* AttributeValue) const;
	bool GetCustomImportBoneTracks(bool* AttributeValue) const;
	bool GetCustomImportBoneTracksRangeStart(double* AttributeValue) const;
	bool GetCustomImportBoneTracksRangeStop(double* AttributeValue) const;
	bool GetCustomImportBoneTracksSampleRate(double* AttributeValue) const;
	bool GetCustomMaterialDriveParameterOnCustomAttribute(bool* AttributeValue) const;
	bool GetCustomRemoveCurveRedundantKeys(bool* AttributeValue) const;
	bool GetCustomSkeletonFactoryNodeUid(class FString* AttributeValue) const;
	bool GetCustomSkeletonSoftObjectPath(struct FSoftObjectPath* AttributeValue) const;
	void GetMorphTargetNodeAnimationPayloadKeys(TMap<class FString, struct FInterchangeAnimationPayLoadKey>* OutMorphTargetNodeAnimationPayloads) const;
	class UClass* GetObjectClass() const;
	void GetSceneNodeAnimationPayloadKeys(TMap<class FString, struct FInterchangeAnimationPayLoadKey>* OutSceneNodeAnimationPayloadKeys) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeAnimSequenceFactoryNode">();
	}
	static class UInterchangeAnimSequenceFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeAnimSequenceFactoryNode>();
	}
};
static_assert(alignof(UInterchangeAnimSequenceFactoryNode) == 0x000008, "Wrong alignment on UInterchangeAnimSequenceFactoryNode");
static_assert(sizeof(UInterchangeAnimSequenceFactoryNode) == 0x000490, "Wrong size on UInterchangeAnimSequenceFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMaterialInstanceFactoryNode
// 0x0020 (0x0180 - 0x0160)
class UInterchangeMaterialInstanceFactoryNode final : public UInterchangeBaseMaterialFactoryNode
{
public:
	uint8                                         Pad_160[0x20];                                     // 0x0160(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetCustomInstanceClassName(const class FString& AttributeValue);
	bool SetCustomParent(const class FString& AttributeValue);

	bool GetCustomInstanceClassName(class FString* AttributeValue) const;
	bool GetCustomParent(class FString* AttributeValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialInstanceFactoryNode">();
	}
	static class UInterchangeMaterialInstanceFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialInstanceFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMaterialInstanceFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMaterialInstanceFactoryNode");
static_assert(sizeof(UInterchangeMaterialInstanceFactoryNode) == 0x000180, "Wrong size on UInterchangeMaterialInstanceFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMaterialFunctionFactoryNode
// 0x0000 (0x0160 - 0x0160)
class UInterchangeMaterialFunctionFactoryNode final : public UInterchangeBaseMaterialFactoryNode
{
public:
	bool GetInputConnection(const class FString& InputName, class FString* ExpressionNodeUid, class FString* OutputName) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMaterialFunctionFactoryNode">();
	}
	static class UInterchangeMaterialFunctionFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMaterialFunctionFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMaterialFunctionFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMaterialFunctionFactoryNode");
static_assert(sizeof(UInterchangeMaterialFunctionFactoryNode) == 0x000160, "Wrong size on UInterchangeMaterialFunctionFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMeshActorFactoryNode
// 0x0098 (0x0268 - 0x01D0)
class UInterchangeMeshActorFactoryNode final : public UInterchangeActorFactoryNode
{
public:
	uint8                                         Pad_1D0[0x98];                                     // 0x01D0(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool SetCustomAnimationAssetUidToPlay(const class FString& AttributeValue);
	bool SetCustomGeometricTransform(const struct FTransform& AttributeValue);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomAnimationAssetUidToPlay(class FString* AttributeValue) const;
	bool GetCustomGeometricTransform(struct FTransform* AttributeValue) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMeshActorFactoryNode">();
	}
	static class UInterchangeMeshActorFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMeshActorFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMeshActorFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMeshActorFactoryNode");
static_assert(sizeof(UInterchangeMeshActorFactoryNode) == 0x000268, "Wrong size on UInterchangeMeshActorFactoryNode");

// Class InterchangeFactoryNodes.InterchangeMeshFactoryNode
// 0x0180 (0x02D0 - 0x0150)
class UInterchangeMeshFactoryNode : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x180];                                    // 0x0150(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddLodDataUniqueId(const class FString& LodDataUniqueId);
	bool RemoveLodDataUniqueId(const class FString& LodDataUniqueId);
	bool RemoveSlotMaterialDependencyUid(const class FString& SlotName);
	bool ResetSlotMaterialDependencies();
	bool SetCustomComputeWeightedNormals(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomKeepSectionsSeparate(const bool& AttributeValue);
	bool SetCustomLODGroup(const class FName& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomRecomputeNormals(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomRecomputeTangents(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomRemoveDegenerates(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseBackwardsCompatibleF16TruncUVs(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseFullPrecisionUVs(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseHighPrecisionTangentBasis(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseMikkTSpace(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomVertexColorIgnore(const bool& AttributeValue);
	bool SetCustomVertexColorOverride(const struct FColor& AttributeValue);
	bool SetCustomVertexColorReplace(const bool& AttributeValue);
	bool SetSlotMaterialDependencyUid(const class FString& SlotName, const class FString& MaterialDependencyUid);

	bool GetCustomComputeWeightedNormals(bool* AttributeValue) const;
	bool GetCustomKeepSectionsSeparate(bool* AttributeValue) const;
	bool GetCustomLODGroup(class FName* AttributeValue) const;
	bool GetCustomRecomputeNormals(bool* AttributeValue) const;
	bool GetCustomRecomputeTangents(bool* AttributeValue) const;
	bool GetCustomRemoveDegenerates(bool* AttributeValue) const;
	bool GetCustomUseBackwardsCompatibleF16TruncUVs(bool* AttributeValue) const;
	bool GetCustomUseFullPrecisionUVs(bool* AttributeValue) const;
	bool GetCustomUseHighPrecisionTangentBasis(bool* AttributeValue) const;
	bool GetCustomUseMikkTSpace(bool* AttributeValue) const;
	bool GetCustomVertexColorIgnore(bool* AttributeValue) const;
	bool GetCustomVertexColorOverride(struct FColor* AttributeValue) const;
	bool GetCustomVertexColorReplace(bool* AttributeValue) const;
	int32 GetLodDataCount() const;
	void GetLodDataUniqueIds(TArray<class FString>* OutLodDataUniqueIds) const;
	void GetSlotMaterialDependencies(TMap<class FString, class FString>* OutMaterialDependencies) const;
	bool GetSlotMaterialDependencyUid(const class FString& SlotName, class FString* OutMaterialDependency) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeMeshFactoryNode">();
	}
	static class UInterchangeMeshFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeMeshFactoryNode>();
	}
};
static_assert(alignof(UInterchangeMeshFactoryNode) == 0x000008, "Wrong alignment on UInterchangeMeshFactoryNode");
static_assert(sizeof(UInterchangeMeshFactoryNode) == 0x0002D0, "Wrong size on UInterchangeMeshFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSkeletalMeshFactoryNode
// 0x00E8 (0x03B8 - 0x02D0)
class UInterchangeSkeletalMeshFactoryNode final : public UInterchangeMeshFactoryNode
{
public:
	uint8                                         Pad_2D0[0xE8];                                     // 0x02D0(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeSkeletalMeshNode(const class FString& UniqueID, const class FString& DisplayLabel, const class FString& InAssetClass);
	bool SetCustomBoneInfluenceLimit(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomCreatePhysicsAsset(const bool& AttributeValue);
	bool SetCustomImportContentType(const EInterchangeSkeletalMeshContentType& AttributeValue);
	bool SetCustomImportMorphTarget(const bool& AttributeValue);
	bool SetCustomImportVertexAttributes(const bool& AttributeValue);
	bool SetCustomMergeMorphTargetShapeWithSameName(const bool& AttributeValue);
	bool SetCustomMorphThresholdPosition(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomPhysicAssetSoftObjectPath(const struct FSoftObjectPath& AttributeValue);
	bool SetCustomSkeletonSoftObjectPath(const struct FSoftObjectPath& AttributeValue);
	bool SetCustomThresholdPosition(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomThresholdTangentNormal(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomThresholdUV(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomUseHighPrecisionSkinWeights(const bool& AttributeValue, bool bAddApplyDelegate);

	bool GetCustomBoneInfluenceLimit(int32* AttributeValue) const;
	bool GetCustomCreatePhysicsAsset(bool* AttributeValue) const;
	bool GetCustomImportContentType(EInterchangeSkeletalMeshContentType* AttributeValue) const;
	bool GetCustomImportMorphTarget(bool* AttributeValue) const;
	bool GetCustomImportVertexAttributes(bool* AttributeValue) const;
	bool GetCustomMergeMorphTargetShapeWithSameName(bool* AttributeValue) const;
	bool GetCustomMorphThresholdPosition(float* AttributeValue) const;
	bool GetCustomPhysicAssetSoftObjectPath(struct FSoftObjectPath* AttributeValue) const;
	bool GetCustomSkeletonSoftObjectPath(struct FSoftObjectPath* AttributeValue) const;
	bool GetCustomThresholdPosition(float* AttributeValue) const;
	bool GetCustomThresholdTangentNormal(float* AttributeValue) const;
	bool GetCustomThresholdUV(float* AttributeValue) const;
	bool GetCustomUseHighPrecisionSkinWeights(bool* AttributeValue) const;
	class UClass* GetObjectClass() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSkeletalMeshFactoryNode">();
	}
	static class UInterchangeSkeletalMeshFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSkeletalMeshFactoryNode>();
	}
};
static_assert(alignof(UInterchangeSkeletalMeshFactoryNode) == 0x000008, "Wrong alignment on UInterchangeSkeletalMeshFactoryNode");
static_assert(sizeof(UInterchangeSkeletalMeshFactoryNode) == 0x0003B8, "Wrong size on UInterchangeSkeletalMeshFactoryNode");

// Class InterchangeFactoryNodes.InterchangeSkeletalMeshLodDataNode
// 0x0030 (0x0180 - 0x0150)
class UInterchangeSkeletalMeshLodDataNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0x30];                                     // 0x0150(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddMeshUid(const class FString& MeshName);
	bool RemoveAllMeshes();
	bool RemoveMeshUid(const class FString& MeshName);
	bool SetCustomSkeletonUid(const class FString& AttributeValue);

	bool GetCustomSkeletonUid(class FString* AttributeValue) const;
	void GetMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetMeshUidsCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeSkeletalMeshLodDataNode">();
	}
	static class UInterchangeSkeletalMeshLodDataNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeSkeletalMeshLodDataNode>();
	}
};
static_assert(alignof(UInterchangeSkeletalMeshLodDataNode) == 0x000008, "Wrong alignment on UInterchangeSkeletalMeshLodDataNode");
static_assert(sizeof(UInterchangeSkeletalMeshLodDataNode) == 0x000180, "Wrong size on UInterchangeSkeletalMeshLodDataNode");

// Class InterchangeFactoryNodes.InterchangeStaticMeshFactoryNode
// 0x0118 (0x03E8 - 0x02D0)
class UInterchangeStaticMeshFactoryNode final : public UInterchangeMeshFactoryNode
{
public:
	uint8                                         Pad_2D0[0x118];                                    // 0x02D0(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddSocketUid(const class FString& SocketUid);
	bool AddSocketUids(const TArray<class FString>& InSocketUids);
	void InitializeStaticMeshNode(const class FString& UniqueID, const class FString& DisplayLabel, const class FString& InAssetClass);
	bool RemoveSocketUd(const class FString& SocketUid);
	bool SetCustomAutoComputeLODScreenSizes(const bool& AttributeValue);
	bool SetCustomBuildNanite(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomBuildReversedIndexBuffer(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomBuildScale3D(const struct FVector& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDistanceFieldReplacementMesh(const struct FSoftObjectPath& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDistanceFieldResolutionScale(const float& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomDstLightmapIndex(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomGenerateDistanceFieldAsIfTwoSided(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomGenerateLightmapUVs(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMaxLumenMeshCards(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomMinLightmapResolution(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSrcLightmapIndex(const int32& AttributeValue, bool bAddApplyDelegate);
	bool SetCustomSupportFaceRemap(const bool& AttributeValue, bool bAddApplyDelegate);
	bool SetLODScreenSizes(const TArray<float>& InLODScreenSizes);

	bool GetCustomAutoComputeLODScreenSizes(bool* AttributeValue) const;
	bool GetCustomBuildNanite(bool* AttributeValue) const;
	bool GetCustomBuildReversedIndexBuffer(bool* AttributeValue) const;
	bool GetCustomBuildScale3D(struct FVector* AttributeValue) const;
	bool GetCustomDistanceFieldReplacementMesh(struct FSoftObjectPath* AttributeValue) const;
	bool GetCustomDistanceFieldResolutionScale(float* AttributeValue) const;
	bool GetCustomDstLightmapIndex(int32* AttributeValue) const;
	bool GetCustomGenerateDistanceFieldAsIfTwoSided(bool* AttributeValue) const;
	bool GetCustomGenerateLightmapUVs(bool* AttributeValue) const;
	bool GetCustomMaxLumenMeshCards(int32* AttributeValue) const;
	bool GetCustomMinLightmapResolution(int32* AttributeValue) const;
	bool GetCustomSrcLightmapIndex(int32* AttributeValue) const;
	bool GetCustomSupportFaceRemap(bool* AttributeValue) const;
	int32 GetLODScreenSizeCount() const;
	void GetLODScreenSizes(TArray<float>* OutLODScreenSizes) const;
	class UClass* GetObjectClass() const;
	int32 GetSocketUidCount() const;
	void GetSocketUids(TArray<class FString>* OutSocketUids) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeStaticMeshFactoryNode">();
	}
	static class UInterchangeStaticMeshFactoryNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeStaticMeshFactoryNode>();
	}
};
static_assert(alignof(UInterchangeStaticMeshFactoryNode) == 0x000008, "Wrong alignment on UInterchangeStaticMeshFactoryNode");
static_assert(sizeof(UInterchangeStaticMeshFactoryNode) == 0x0003E8, "Wrong size on UInterchangeStaticMeshFactoryNode");

// Class InterchangeFactoryNodes.InterchangeStaticMeshLodDataNode
// 0x00D0 (0x0220 - 0x0150)
class UInterchangeStaticMeshLodDataNode final : public UInterchangeFactoryBaseNode
{
public:
	uint8                                         Pad_150[0xD0];                                     // 0x0150(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddBoxCollisionMeshUid(const class FString& MeshName);
	bool AddCapsuleCollisionMeshUid(const class FString& MeshName);
	bool AddConvexCollisionMeshUid(const class FString& MeshName);
	bool AddMeshUid(const class FString& MeshName);
	bool AddSphereCollisionMeshUid(const class FString& MeshName);
	bool RemoveAllBoxCollisionMeshes();
	bool RemoveAllCapsuleCollisionMeshes();
	bool RemoveAllConvexCollisionMeshes();
	bool RemoveAllMeshes();
	bool RemoveAllSphereCollisionMeshes();
	bool RemoveBoxCollisionMeshUid(const class FString& MeshName);
	bool RemoveCapsuleCollisionMeshUid(const class FString& MeshName);
	bool RemoveConvexCollisionMeshUid(const class FString& MeshName);
	bool RemoveMeshUid(const class FString& MeshName);
	bool RemoveSphereCollisionMeshUid(const class FString& MeshName);
	bool SetImportCollision(bool AttributeValue);
	bool SetImportCollisionType(EInterchangeMeshCollision AttributeValue);
	bool SetOneConvexHullPerUCX(bool AttributeValue);

	void GetBoxCollisionMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetBoxCollisionMeshUidsCount() const;
	void GetCapsuleCollisionMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetCapsuleCollisionMeshUidsCount() const;
	void GetConvexCollisionMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetConvexCollisionMeshUidsCount() const;
	bool GetImportCollision(bool* AttributeValue) const;
	bool GetImportCollisionType(EInterchangeMeshCollision* AttributeValue) const;
	void GetMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetMeshUidsCount() const;
	bool GetOneConvexHullPerUCX(bool* AttributeValue) const;
	void GetSphereCollisionMeshUids(TArray<class FString>* OutMeshNames) const;
	int32 GetSphereCollisionMeshUidsCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InterchangeStaticMeshLodDataNode">();
	}
	static class UInterchangeStaticMeshLodDataNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInterchangeStaticMeshLodDataNode>();
	}
};
static_assert(alignof(UInterchangeStaticMeshLodDataNode) == 0x000008, "Wrong alignment on UInterchangeStaticMeshLodDataNode");
static_assert(sizeof(UInterchangeStaticMeshLodDataNode) == 0x000220, "Wrong size on UInterchangeStaticMeshLodDataNode");

}

