#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SacrificeAltar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RGame_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SacrificeAltar.BP_SacrificeAltar_C
// 0x0128 (0x0518 - 0x03F0)
class ABP_SacrificeAltar_C final : public ARLootableContainer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDMActorProximityBoxComponent*          VoiceProximity;                                    // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_InteractableIndicator;                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          Proximity_InteractableIndicator;                   // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight18;                                      // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight17;                                      // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight16;                                      // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight15;                                      // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight14;                                      // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight13;                                      // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight12;                                      // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight11;                                      // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight10;                                      // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight4;                                       // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight8;                                       // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight6;                                       // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight9;                                       // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight7;                                       // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Fill;                                              // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Direct;                                            // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight3;                                       // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CandleLights;                                      // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight2;                                       // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight5;                                       // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Core_Lights;                                       // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     DefaultMaterial;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 DefaultTextColor;                                  // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumRewardsAvailable;                               // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PlayerController;                                  // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRUniqueSacrificeAltar>         SacrificeAltarInteractionCosts;                    // 0x0500(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FoundPlayerInArray;                                // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddSacrificeCostForController(int32 NewInteractionCost, class APlayerController* PlayerController_0);
	void BndEvt__BP_SacrificeAltar_Proximity_WorldIndicator_K2Node_ComponentBoundEvent_0_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_SacrificeAltar_Proximity_WorldIndicator_K2Node_ComponentBoundEvent_1_OnOverlapProximityBoxComponentExit__DelegateSignature(class AActor* Actor);
	bool CanInteract(class APlayerController* Controller);
	void CanInteractEx(bool* CanInteract_0);
	void CheckAndUpdateLootOptions(class AController* Controller);
	void ExecuteUbergraph_BP_SacrificeAltar(int32 EntryPoint);
	void Get_Reward_Spawn_Pos(struct FVector* Pos);
	void GetInteractingPlayerHealth(class APlayerController* PlayerController_0, double* Health);
	void OnInteract(class APlayerController* Controller);
	void OnInvoke_DEDAE81D4C2F6B66E7DA3CA22FDFA7B4();
	void PlayerStateIsValid(bool* IsValid);
	void ReceiveBeginPlay();
	void UpdateAltarVisuals();
	void UpdateInteractionText();
	void UserConstructionScript();

	class FText GetInteractableCostCurrencyType() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SacrificeAltar_C">();
	}
	static class ABP_SacrificeAltar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SacrificeAltar_C>();
	}
};
static_assert(alignof(ABP_SacrificeAltar_C) == 0x000008, "Wrong alignment on ABP_SacrificeAltar_C");
static_assert(sizeof(ABP_SacrificeAltar_C) == 0x000518, "Wrong size on ABP_SacrificeAltar_C");
static_assert(offsetof(ABP_SacrificeAltar_C, UberGraphFrame) == 0x0003F0, "Member 'ABP_SacrificeAltar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, VoiceProximity) == 0x0003F8, "Member 'ABP_SacrificeAltar_C::VoiceProximity' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Widget_InteractableIndicator) == 0x000400, "Member 'ABP_SacrificeAltar_C::Widget_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Proximity_InteractableIndicator) == 0x000408, "Member 'ABP_SacrificeAltar_C::Proximity_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight18) == 0x000410, "Member 'ABP_SacrificeAltar_C::PointLight18' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight17) == 0x000418, "Member 'ABP_SacrificeAltar_C::PointLight17' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight16) == 0x000420, "Member 'ABP_SacrificeAltar_C::PointLight16' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight15) == 0x000428, "Member 'ABP_SacrificeAltar_C::PointLight15' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight14) == 0x000430, "Member 'ABP_SacrificeAltar_C::PointLight14' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Niagara) == 0x000438, "Member 'ABP_SacrificeAltar_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight13) == 0x000440, "Member 'ABP_SacrificeAltar_C::PointLight13' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight12) == 0x000448, "Member 'ABP_SacrificeAltar_C::PointLight12' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight11) == 0x000450, "Member 'ABP_SacrificeAltar_C::PointLight11' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight10) == 0x000458, "Member 'ABP_SacrificeAltar_C::PointLight10' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight4) == 0x000460, "Member 'ABP_SacrificeAltar_C::PointLight4' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight8) == 0x000468, "Member 'ABP_SacrificeAltar_C::PointLight8' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight6) == 0x000470, "Member 'ABP_SacrificeAltar_C::PointLight6' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight9) == 0x000478, "Member 'ABP_SacrificeAltar_C::PointLight9' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight7) == 0x000480, "Member 'ABP_SacrificeAltar_C::PointLight7' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Fill) == 0x000488, "Member 'ABP_SacrificeAltar_C::Fill' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Direct) == 0x000490, "Member 'ABP_SacrificeAltar_C::Direct' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight3) == 0x000498, "Member 'ABP_SacrificeAltar_C::PointLight3' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, CandleLights) == 0x0004A0, "Member 'ABP_SacrificeAltar_C::CandleLights' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight2) == 0x0004A8, "Member 'ABP_SacrificeAltar_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight1) == 0x0004B0, "Member 'ABP_SacrificeAltar_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight) == 0x0004B8, "Member 'ABP_SacrificeAltar_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PointLight5) == 0x0004C0, "Member 'ABP_SacrificeAltar_C::PointLight5' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Core_Lights) == 0x0004C8, "Member 'ABP_SacrificeAltar_C::Core_Lights' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, SpotLight) == 0x0004D0, "Member 'ABP_SacrificeAltar_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, Scene) == 0x0004D8, "Member 'ABP_SacrificeAltar_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, StaticMesh) == 0x0004E0, "Member 'ABP_SacrificeAltar_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, DefaultMaterial) == 0x0004E8, "Member 'ABP_SacrificeAltar_C::DefaultMaterial' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, DefaultTextColor) == 0x0004F0, "Member 'ABP_SacrificeAltar_C::DefaultTextColor' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, NumRewardsAvailable) == 0x0004F4, "Member 'ABP_SacrificeAltar_C::NumRewardsAvailable' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, PlayerController) == 0x0004F8, "Member 'ABP_SacrificeAltar_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, SacrificeAltarInteractionCosts) == 0x000500, "Member 'ABP_SacrificeAltar_C::SacrificeAltarInteractionCosts' has a wrong offset!");
static_assert(offsetof(ABP_SacrificeAltar_C, FoundPlayerInArray) == 0x000510, "Member 'ABP_SacrificeAltar_C::FoundPlayerInArray' has a wrong offset!");

}

