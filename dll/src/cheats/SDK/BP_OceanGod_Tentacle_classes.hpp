#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_OceanGod_Tentacle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_OceanGod_Tentacle.BP_OceanGod_Tentacle_C
// 0x00E8 (0x0390 - 0x02A8)
class ABP_OceanGod_Tentacle_C final : public AROceanGodTentacle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        MSS_OceanGod_Tentacle_Loop;                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Portal;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_Tentacle_01;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TentacleRoot;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Watermesh1;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        AttackRange;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseAttackCooldown;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseDamage;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LifeDuration;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AttackTimer;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 RandomTarget;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RefreshDurationDiminishingReturn;                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RelocationMaxDistance;                             // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Modifier;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ModifierBase;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TriggeringDamage;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        InitialVelocityMulti;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ChosenProjectileClass;                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         SpawnableProjectileClasses;                        // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ProjectileSpawnDelay;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldSpawnAllSelectableProjectiles;               // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentProjectileIndex;                            // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TriggeringDamageMultiplier;                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProjectilesToSpawn;                                // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanAttack;                                         // 0x0384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanRotate;                                         // 0x0385(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        BuffCastAC;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AddSpawnableProjectileClass(class UClass* NewProjectileClass);
	void AddToNumTentaclesSpawned(int32 NumSpawned);
	void AttackCooldown(double AttackCooldown_0);
	void BP_AddSpawnableProjectileClass(const class UClass*& NewProjectileClass);
	void CalculateLaunchVelocity(class ARProjectile* Projectile, double AngleDegrees, const struct FVector& TargetPosition, struct FVector* ReturnVelocity);
	double CheckAndGetMultiplierForOceanPassive1();
	void DetermineSpawnAmount(int32* ProjectileAmount);
	void DoesProjectileTargetEnemies(bool* Result);
	void ExecuteUbergraph_BP_OceanGod_Tentacle(int32 EntryPoint);
	void FireProjectileAtTarget();
	void Get_Targets_in_Radius(const struct FVector& Origin, class AActor* OriginActor, double Radius, bool* TargetsFound, TArray<class ARNPCPawnBase*>* OutTargets);
	void GetAttackCooldown(double* Cooldown);
	void GetDamage(double* Damage);
	void GetNumSpawnedTentacles(int32* NumTentaclesSpawned);
	void OnAnimationTriggerEvent(class FName EventName);
	void OnBlendOut_48C235394334D3ADF0EA73BD4874C9DD(class FName NotifyName);
	void OnBlendOut_A924E06541F794FBDE2568BAD296AD43(class FName NotifyName);
	void OnBlendOut_F40FB19D42AC2DC77726D0802BF7C783(class FName NotifyName);
	void OnCompleted_48C235394334D3ADF0EA73BD4874C9DD(class FName NotifyName);
	void OnCompleted_A924E06541F794FBDE2568BAD296AD43(class FName NotifyName);
	void OnCompleted_F40FB19D42AC2DC77726D0802BF7C783(class FName NotifyName);
	void OnInterrupted_48C235394334D3ADF0EA73BD4874C9DD(class FName NotifyName);
	void OnInterrupted_A924E06541F794FBDE2568BAD296AD43(class FName NotifyName);
	void OnInterrupted_F40FB19D42AC2DC77726D0802BF7C783(class FName NotifyName);
	void OnNotifyBegin_48C235394334D3ADF0EA73BD4874C9DD(class FName NotifyName);
	void OnNotifyBegin_A924E06541F794FBDE2568BAD296AD43(class FName NotifyName);
	void OnNotifyBegin_F40FB19D42AC2DC77726D0802BF7C783(class FName NotifyName);
	void OnNotifyEnd_48C235394334D3ADF0EA73BD4874C9DD(class FName NotifyName);
	void OnNotifyEnd_A924E06541F794FBDE2568BAD296AD43(class FName NotifyName);
	void OnNotifyEnd_F40FB19D42AC2DC77726D0802BF7C783(class FName NotifyName);
	void OnSegmentCompleted_Event(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnToggleEvent(class FName Socket, bool Bool);
	void PerformAttack();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void SetRandomProjectileClass();
	void SetRandomTarget();
	void StartAttack();
	void StartSubmerge();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_OceanGod_Tentacle_C">();
	}
	static class ABP_OceanGod_Tentacle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_OceanGod_Tentacle_C>();
	}
};
static_assert(alignof(ABP_OceanGod_Tentacle_C) == 0x000008, "Wrong alignment on ABP_OceanGod_Tentacle_C");
static_assert(sizeof(ABP_OceanGod_Tentacle_C) == 0x000390, "Wrong size on ABP_OceanGod_Tentacle_C");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_OceanGod_Tentacle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, MSS_OceanGod_Tentacle_Loop) == 0x0002B0, "Member 'ABP_OceanGod_Tentacle_C::MSS_OceanGod_Tentacle_Loop' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, Portal) == 0x0002B8, "Member 'ABP_OceanGod_Tentacle_C::Portal' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, SK_Tentacle_01) == 0x0002C0, "Member 'ABP_OceanGod_Tentacle_C::SK_Tentacle_01' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, TentacleRoot) == 0x0002C8, "Member 'ABP_OceanGod_Tentacle_C::TentacleRoot' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, StaticMesh) == 0x0002D0, "Member 'ABP_OceanGod_Tentacle_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, Capsule) == 0x0002D8, "Member 'ABP_OceanGod_Tentacle_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, Watermesh1) == 0x0002E0, "Member 'ABP_OceanGod_Tentacle_C::Watermesh1' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, Niagara) == 0x0002E8, "Member 'ABP_OceanGod_Tentacle_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, AttackRange) == 0x0002F0, "Member 'ABP_OceanGod_Tentacle_C::AttackRange' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, BaseAttackCooldown) == 0x0002F8, "Member 'ABP_OceanGod_Tentacle_C::BaseAttackCooldown' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, BaseDamage) == 0x000300, "Member 'ABP_OceanGod_Tentacle_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, LifeDuration) == 0x000308, "Member 'ABP_OceanGod_Tentacle_C::LifeDuration' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, AttackTimer) == 0x000310, "Member 'ABP_OceanGod_Tentacle_C::AttackTimer' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, RandomTarget) == 0x000318, "Member 'ABP_OceanGod_Tentacle_C::RandomTarget' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, RefreshDurationDiminishingReturn) == 0x000320, "Member 'ABP_OceanGod_Tentacle_C::RefreshDurationDiminishingReturn' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, RelocationMaxDistance) == 0x000328, "Member 'ABP_OceanGod_Tentacle_C::RelocationMaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, Modifier) == 0x000330, "Member 'ABP_OceanGod_Tentacle_C::Modifier' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, ModifierBase) == 0x000338, "Member 'ABP_OceanGod_Tentacle_C::ModifierBase' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, TriggeringDamage) == 0x000340, "Member 'ABP_OceanGod_Tentacle_C::TriggeringDamage' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, InitialVelocityMulti) == 0x000348, "Member 'ABP_OceanGod_Tentacle_C::InitialVelocityMulti' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, ChosenProjectileClass) == 0x000350, "Member 'ABP_OceanGod_Tentacle_C::ChosenProjectileClass' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, SpawnableProjectileClasses) == 0x000358, "Member 'ABP_OceanGod_Tentacle_C::SpawnableProjectileClasses' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, ProjectileSpawnDelay) == 0x000368, "Member 'ABP_OceanGod_Tentacle_C::ProjectileSpawnDelay' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, ShouldSpawnAllSelectableProjectiles) == 0x000370, "Member 'ABP_OceanGod_Tentacle_C::ShouldSpawnAllSelectableProjectiles' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, CurrentProjectileIndex) == 0x000374, "Member 'ABP_OceanGod_Tentacle_C::CurrentProjectileIndex' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, TriggeringDamageMultiplier) == 0x000378, "Member 'ABP_OceanGod_Tentacle_C::TriggeringDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, ProjectilesToSpawn) == 0x000380, "Member 'ABP_OceanGod_Tentacle_C::ProjectilesToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, CanAttack) == 0x000384, "Member 'ABP_OceanGod_Tentacle_C::CanAttack' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, CanRotate) == 0x000385, "Member 'ABP_OceanGod_Tentacle_C::CanRotate' has a wrong offset!");
static_assert(offsetof(ABP_OceanGod_Tentacle_C, BuffCastAC) == 0x000388, "Member 'ABP_OceanGod_Tentacle_C::BuffCastAC' has a wrong offset!");

}

