#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillTree

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SkillTree.BP_SkillTree_C
// 0x0068 (0x0318 - 0x02B0)
class ABP_SkillTree_C final : public ARPingableActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_Highlight_C*                       BPC_Highlight;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_InteractableIndicator_C*           BPC_InteractableIndicator;                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        OutlineDecal;                                      // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_SkillTree_Constellation_01;                     // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        BackgroundDecal;                                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Lobby_TalentTree_01;                            // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ObjectHighlightWidgetComponent;                    // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CachedTotalPoints;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_SkillTree2_C*                   WidgetRef;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	bool CanInteract(class APlayerController* Controller);
	void ExecuteUbergraph_BP_SkillTree(int32 EntryPoint);
	void GetPercentPointsAssigned(double* Percent);
	void OnFocus(class APlayerController* Controller);
	void OnFocusGone(class APlayerController* Controller);
	void OnInteract(class APlayerController* Controller);
	void OnPlayerJoined_Event(class APlayerState* PlayerState);
	void OnSkillTreeUpdated(int32 NumPointsAssigned, int32 NumMaxPoints);
	void ReceiveBeginPlay();
	void ToggleInteractionIndicatorVisibility(class AActor* InteractingActor, const bool NewVisible);
	void UpdateVisuals(double Percentage);

	class FText GetInteractableAlternativeDescription() const;
	int32 GetInteractableCost() const;
	class FText GetInteractableCostCurrencyType() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableName() const;
	class FText GetInteractableSubHeader() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;
	bool ShouldShowOnRadar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SkillTree_C">();
	}
	static class ABP_SkillTree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SkillTree_C>();
	}
};
static_assert(alignof(ABP_SkillTree_C) == 0x000008, "Wrong alignment on ABP_SkillTree_C");
static_assert(sizeof(ABP_SkillTree_C) == 0x000318, "Wrong size on ABP_SkillTree_C");
static_assert(offsetof(ABP_SkillTree_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_SkillTree_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, BPC_Highlight) == 0x0002B8, "Member 'ABP_SkillTree_C::BPC_Highlight' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, BPC_InteractableIndicator) == 0x0002C0, "Member 'ABP_SkillTree_C::BPC_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, PointLight) == 0x0002C8, "Member 'ABP_SkillTree_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, OutlineDecal) == 0x0002D0, "Member 'ABP_SkillTree_C::OutlineDecal' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, NS_SkillTree_Constellation_01) == 0x0002D8, "Member 'ABP_SkillTree_C::NS_SkillTree_Constellation_01' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, BackgroundDecal) == 0x0002E0, "Member 'ABP_SkillTree_C::BackgroundDecal' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, SM_Lobby_TalentTree_01) == 0x0002E8, "Member 'ABP_SkillTree_C::SM_Lobby_TalentTree_01' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, TextRender) == 0x0002F0, "Member 'ABP_SkillTree_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, ObjectHighlightWidgetComponent) == 0x0002F8, "Member 'ABP_SkillTree_C::ObjectHighlightWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, Scene) == 0x000300, "Member 'ABP_SkillTree_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, CachedTotalPoints) == 0x000308, "Member 'ABP_SkillTree_C::CachedTotalPoints' has a wrong offset!");
static_assert(offsetof(ABP_SkillTree_C, WidgetRef) == 0x000310, "Member 'ABP_SkillTree_C::WidgetRef' has a wrong offset!");

}

