#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RPlayerPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RGame_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RPlayerPawn.BP_RPlayerPawn_C
// 0x0160 (0x60F8 - 0x5F98)
class ABP_RPlayerPawn_C final : public ARPlayerPawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x5F98(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpringArmComponent*                    EmoteSpringArm;                                    // 0x5FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ObjectHighlightWidgetComponent;                    // 0x5FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x5FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TeleportTimeline_Intensity_ABD408E04D7814325E60719C4076DAC0; // 0x5FB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TeleportTimeline__Direction_ABD408E04D7814325E60719C4076DAC0; // 0x5FBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FBD[0x3];                                     // 0x5FBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TeleportTimeline;                                  // 0x5FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         VignettePostProcessTimeline_Intensity_FF49911742C51FC5F1374E809BDE6637; // 0x5FC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VignettePostProcessTimeline__Direction_FF49911742C51FC5F1374E809BDE6637; // 0x5FCC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCD[0x3];                                     // 0x5FCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VignettePostProcessTimeline;                       // 0x5FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         DamageTakenTimeline_DamageTaken_B58C5A464B8DB4B3EF42F1A987E2BCE6; // 0x5FD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DamageTakenTimeline__Direction_B58C5A464B8DB4B3EF42F1A987E2BCE6; // 0x5FDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDD[0x3];                                     // 0x5FDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DamageTakenTimeline;                               // 0x5FE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Rate_Of_Foot_Steps;                                // 0x5FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        CachedSkillTreeNodeData;                           // 0x5FF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                CachedPingLocation;                                // 0x6000(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CachedPingObject;                                  // 0x6018(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHoldingPing;                                     // 0x6020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6021[0x7];                                     // 0x6021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PingOutlineDuration;                               // 0x6028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PingOutlineTimer;                                  // 0x6030(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FinalRot;                                          // 0x6038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InitialRot;                                        // 0x6050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MaxSwayDegree;                                     // 0x6068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimerTickDuration;                                 // 0x6070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6074[0x4];                                     // 0x6074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPlayerPawn*                           SuperSelf;                                         // 0x6078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowPlayerName;                                    // 0x6080(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6081[0x7];                                     // 0x6081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CachedPingedComponent;                             // 0x6088(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BPDefaultControlRotation;                          // 0x6090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                BPDefaultCameraPosition;                           // 0x60A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraDistance;                                    // 0x60C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxCameraHeight;                                   // 0x60C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinCameraHeight;                                   // 0x60D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngle;                                      // 0x60D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EmoteCamVertInput;                                 // 0x60E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EmoteLoopAC;                                       // 0x60E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        GamepadMoveInputThreshold;                         // 0x60F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Assigned_Skill_Tree_Mutators(class URPlayerGScriptComponent* Owner_0);
	void AlignArmsWithCrosshair(ECrosshairAlignmentOption NewOption);
	void BPEmoteCameraOrbitH(double Value);
	void BPEmoteCameraOrbitV(double Val);
	void BPEmoteCameraZoomOut();
	void BPEmoteEnd();
	void CheckGamepadMoveThreshold(double Value, bool* OutsideThreshold);
	void Create_Ping_Outline(class AActor* CachedPingObject_0);
	void CustomEvent();
	void DamageTakenPostProcessEvt(const struct FDamageCombatEvent& DamageCombatEvt);
	void DamageTakenTimeline__FinishedFunc();
	void DamageTakenTimeline__UpdateFunc();
	void Debug();
	void Downed(class ARPlayerPawn* Player);
	void DrawPingOutline_Multicast(class AActor* PingedObject);
	void DrawPingOutline_Server(class AActor* PingedObject);
	void EmoteCameraZoomOutImplementation();
	void EmoteMontageEnded();
	void ExecuteUbergraph_BP_RPlayerPawn(int32 EntryPoint);
	void FlushDebugLines();
	void Get_Object_Pingable_Name(class AActor* Object, class FText* PingableName);
	void GetPingStartLocation(struct FVector* StartLocation);
	void GetPingTargetLocation(struct FVector* TargetLocation);
	void GetPingVoicelineEvent(class AActor* PingedActor, class FName* Event);
	void InpActEvt_IA_LookRight_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookRightGamepad_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookUp_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_LookUpGamepad_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBack_K2Node_EnhancedInputActionEvent_14(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveBack_K2Node_EnhancedInputActionEvent_15(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveForward_K2Node_EnhancedInputActionEvent_12(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveForward_K2Node_EnhancedInputActionEvent_13(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveForwardGamepad_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveForwardGamepad_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveLeft_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveLeft_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveRight_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveRight_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveRightGamepad_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_MoveRightGamepad_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Ping_K2Node_EnhancedInputActionEvent_16(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Ping_K2Node_EnhancedInputActionEvent_17(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UnlockContent_K2Node_EnhancedInputActionEvent_18(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InterruptEmote();
	bool IsInEmoteState();
	void MontageInterruped_Multicast();
	void MontageInterrupted_Server();
	void OnAbilitiyVisibilitiesToggled(bool Anchor_Visibility, bool DropShield_Visibility, bool AtlanteanCube_Visibility);
	void OnBlendOut_AC53E0D24995860F498B499655AC06DE(class FName NotifyName);
	void OnCompleted_AC53E0D24995860F498B499655AC06DE(class FName NotifyName);
	void OnInterrupted_AC53E0D24995860F498B499655AC06DE(class FName NotifyName);
	void OnInvoke_51E65E3F4376537D07388787BB65EAE7();
	void OnLandedOnGround();
	void OnNotifyBegin_AC53E0D24995860F498B499655AC06DE(class FName NotifyName);
	void OnNotifyEnd_AC53E0D24995860F498B499655AC06DE(class FName NotifyName);
	void OnPlayerFellOutOfWorld_Event();
	void OnPlayerStateValid(bool* RetValue);
	void OnPostProcessVolumeAssigned(class APostProcessVolume* Volume);
	void OnWeaponVisibilitiesToggled(bool Melee___NewVisibility, bool Primary__NewVisibility, class FName Key, bool HideOnServer);
	void PingInputPressed();
	void PingInputReleased();
	void PingOutlinedWithIndicator(class AActor* PingedActor);
	void PingTickEvent();
	void PlayDoorTeleportTimeline(float Duration);
	void PlayEmoteMontage(const class FName EmoteName);
	void PlayPostProcessDamageTaken(const struct FDamageCombatEvent& DamageCombatEvent);
	void PlayVignetteTimeline(const float Duration, const float IntensityMultiplier);
	void PrintSet(const TSet<class FName>& A);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ResetPingOutline(class AActor* PingedObject);
	void Revived(class ARPlayerPawn* Player);
	void RunRoutedObjectBehaviour();
	void RunRoutedObjectBehaviourByName(class FName BehaviourName);
	void RunRoutedObjectBehaviourWithData(const struct FRoutedObjectData& RoutedData);
	void SetCachedPingLocation(const struct FVector& NewParam);
	void SetCrosshairVisibility(ESlateVisibility Visibility);
	void SetPlayerLocalVisibility(bool ShouldHidePlayer);
	void SetShouldShowPlayerNameServer(class ARPingIndicator* RPingIndicatorRef);
	void SetShowPlayerNameServer();
	void ShouldDrawPingOutline(class AActor* CachedPingObject_0, bool* Value);
	void ShowDownedHighlighting(const bool bNewShow);
	void SkipToTorakaSecretPhase();
	void SpawnPlayerName();
	void SpawnVoiceLine(const struct FVoiceData& VoiceOverData, const float Priority);
	void Sway_Tick(double Delta_Time);
	void TeleportTimeline__FinishedFunc();
	void TeleportTimeline__UpdateFunc();
	void ToggleAbilityVisibility(bool AnchorVisibility, bool DropShieldVisibility, bool AtlanteanCubeVisibility);
	void ToggleHUD(bool Show);
	void ToggleWeaponVisibilities(bool bNewMeleeVisibility, bool bNewWeaponVisibility, class FName Key, bool bHideOnServer);
	void TraceTimer();
	void TryRemoveBlackScreen();
	void UndrawPingOnSelf();
	void UndrawPingOnSelfBP();
	void UndrawPingOutline_Multicast(class AActor* PingedObject);
	void UndrawPingOutline_Server(class AActor* PingedObject);
	void UpdateWeaponAndAbilityVisibility(class ARWeapon* Weapon);
	void VignettePostProcessTimeline__FinishedFunc();
	void VignettePostProcessTimeline__UpdateFunc();
	void WahooTesting();

	class UTexture2D* GetPingableIconTexture() const;
	class FText GetPingableName() const;
	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;
	bool IsCurrentlyPinged() const;
	bool ShouldShowOnRadar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RPlayerPawn_C">();
	}
	static class ABP_RPlayerPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RPlayerPawn_C>();
	}
};
static_assert(alignof(ABP_RPlayerPawn_C) == 0x000008, "Wrong alignment on ABP_RPlayerPawn_C");
static_assert(sizeof(ABP_RPlayerPawn_C) == 0x0060F8, "Wrong size on ABP_RPlayerPawn_C");
static_assert(offsetof(ABP_RPlayerPawn_C, UberGraphFrame) == 0x005F98, "Member 'ABP_RPlayerPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, EmoteSpringArm) == 0x005FA0, "Member 'ABP_RPlayerPawn_C::EmoteSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, ObjectHighlightWidgetComponent) == 0x005FA8, "Member 'ABP_RPlayerPawn_C::ObjectHighlightWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, Scene) == 0x005FB0, "Member 'ABP_RPlayerPawn_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, TeleportTimeline_Intensity_ABD408E04D7814325E60719C4076DAC0) == 0x005FB8, "Member 'ABP_RPlayerPawn_C::TeleportTimeline_Intensity_ABD408E04D7814325E60719C4076DAC0' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, TeleportTimeline__Direction_ABD408E04D7814325E60719C4076DAC0) == 0x005FBC, "Member 'ABP_RPlayerPawn_C::TeleportTimeline__Direction_ABD408E04D7814325E60719C4076DAC0' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, TeleportTimeline) == 0x005FC0, "Member 'ABP_RPlayerPawn_C::TeleportTimeline' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, VignettePostProcessTimeline_Intensity_FF49911742C51FC5F1374E809BDE6637) == 0x005FC8, "Member 'ABP_RPlayerPawn_C::VignettePostProcessTimeline_Intensity_FF49911742C51FC5F1374E809BDE6637' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, VignettePostProcessTimeline__Direction_FF49911742C51FC5F1374E809BDE6637) == 0x005FCC, "Member 'ABP_RPlayerPawn_C::VignettePostProcessTimeline__Direction_FF49911742C51FC5F1374E809BDE6637' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, VignettePostProcessTimeline) == 0x005FD0, "Member 'ABP_RPlayerPawn_C::VignettePostProcessTimeline' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, DamageTakenTimeline_DamageTaken_B58C5A464B8DB4B3EF42F1A987E2BCE6) == 0x005FD8, "Member 'ABP_RPlayerPawn_C::DamageTakenTimeline_DamageTaken_B58C5A464B8DB4B3EF42F1A987E2BCE6' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, DamageTakenTimeline__Direction_B58C5A464B8DB4B3EF42F1A987E2BCE6) == 0x005FDC, "Member 'ABP_RPlayerPawn_C::DamageTakenTimeline__Direction_B58C5A464B8DB4B3EF42F1A987E2BCE6' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, DamageTakenTimeline) == 0x005FE0, "Member 'ABP_RPlayerPawn_C::DamageTakenTimeline' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, Rate_Of_Foot_Steps) == 0x005FE8, "Member 'ABP_RPlayerPawn_C::Rate_Of_Foot_Steps' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CachedSkillTreeNodeData) == 0x005FF0, "Member 'ABP_RPlayerPawn_C::CachedSkillTreeNodeData' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CachedPingLocation) == 0x006000, "Member 'ABP_RPlayerPawn_C::CachedPingLocation' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CachedPingObject) == 0x006018, "Member 'ABP_RPlayerPawn_C::CachedPingObject' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, IsHoldingPing) == 0x006020, "Member 'ABP_RPlayerPawn_C::IsHoldingPing' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, PingOutlineDuration) == 0x006028, "Member 'ABP_RPlayerPawn_C::PingOutlineDuration' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, PingOutlineTimer) == 0x006030, "Member 'ABP_RPlayerPawn_C::PingOutlineTimer' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, FinalRot) == 0x006038, "Member 'ABP_RPlayerPawn_C::FinalRot' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, InitialRot) == 0x006050, "Member 'ABP_RPlayerPawn_C::InitialRot' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, MaxSwayDegree) == 0x006068, "Member 'ABP_RPlayerPawn_C::MaxSwayDegree' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, TimerTickDuration) == 0x006070, "Member 'ABP_RPlayerPawn_C::TimerTickDuration' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, SuperSelf) == 0x006078, "Member 'ABP_RPlayerPawn_C::SuperSelf' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, ShowPlayerName) == 0x006080, "Member 'ABP_RPlayerPawn_C::ShowPlayerName' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CachedPingedComponent) == 0x006088, "Member 'ABP_RPlayerPawn_C::CachedPingedComponent' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, BPDefaultControlRotation) == 0x006090, "Member 'ABP_RPlayerPawn_C::BPDefaultControlRotation' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, BPDefaultCameraPosition) == 0x0060A8, "Member 'ABP_RPlayerPawn_C::BPDefaultCameraPosition' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CameraDistance) == 0x0060C0, "Member 'ABP_RPlayerPawn_C::CameraDistance' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, MaxCameraHeight) == 0x0060C8, "Member 'ABP_RPlayerPawn_C::MaxCameraHeight' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, MinCameraHeight) == 0x0060D0, "Member 'ABP_RPlayerPawn_C::MinCameraHeight' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, CurrentAngle) == 0x0060D8, "Member 'ABP_RPlayerPawn_C::CurrentAngle' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, EmoteCamVertInput) == 0x0060E0, "Member 'ABP_RPlayerPawn_C::EmoteCamVertInput' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, EmoteLoopAC) == 0x0060E8, "Member 'ABP_RPlayerPawn_C::EmoteLoopAC' has a wrong offset!");
static_assert(offsetof(ABP_RPlayerPawn_C, GamepadMoveInputThreshold) == 0x0060F0, "Member 'ABP_RPlayerPawn_C::GamepadMoveInputThreshold' has a wrong offset!");

}

