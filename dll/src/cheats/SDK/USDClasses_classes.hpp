#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: USDClasses

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "USDClasses_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class USDClasses.UsdAssetCache
// 0x01C0 (0x01E8 - 0x0028)
class UUsdAssetCache final : public UObject
{
public:
	TMap<class FString, class UObject*>           TransientStorage;                                  // 0x0028(0x0050)(Edit, Transient, EditConst, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, class UObject*>           PersistentStorage;                                 // 0x0078(0x0050)(Edit, EditConst, NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                          bAllowPersistentStorage;                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class UObject>>           OwnedAssets;                                       // 0x00D0(0x0050)(NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FString, TWeakObjectPtr<class UObject>> PrimPathToAssets;                             // 0x0120(0x0050)(NonPIEDuplicateTransient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x78];                                     // 0x0170(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAssetCache">();
	}
	static class UUsdAssetCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAssetCache>();
	}
};
static_assert(alignof(UUsdAssetCache) == 0x000008, "Wrong alignment on UUsdAssetCache");
static_assert(sizeof(UUsdAssetCache) == 0x0001E8, "Wrong size on UUsdAssetCache");
static_assert(offsetof(UUsdAssetCache, TransientStorage) == 0x000028, "Member 'UUsdAssetCache::TransientStorage' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache, PersistentStorage) == 0x000078, "Member 'UUsdAssetCache::PersistentStorage' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache, bAllowPersistentStorage) == 0x0000C8, "Member 'UUsdAssetCache::bAllowPersistentStorage' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache, OwnedAssets) == 0x0000D0, "Member 'UUsdAssetCache::OwnedAssets' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache, PrimPathToAssets) == 0x000120, "Member 'UUsdAssetCache::PrimPathToAssets' has a wrong offset!");

// Class USDClasses.UsdAssetCache2
// 0x0178 (0x01A0 - 0x0028)
class UUsdAssetCache2 final : public UObject
{
public:
	double                                        UnreferencedAssetStorageSizeMB;                    // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PersistentAssetStorageSizeMB;                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UObject*>           AssetStorage;                                      // 0x0038(0x0050)(Edit, Transient, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x118];                                     // 0x0088(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddAssetReference(const class UObject* Asset, const class UObject* Referencer);
	void CacheAsset(const class FString& Hash, class UObject* Asset, const class UObject* Referencer);
	bool CanRemoveAsset(const class FString& Hash);
	class UObject* GetCachedAsset(const class FString& Hash);
	void RefreshStorage();
	bool RemoveAllAssetReferences(const class UObject* Referencer);
	class UObject* RemoveAsset(const class FString& Hash);
	bool RemoveAssetReference(const class UObject* Asset, const class UObject* Referencer);
	void Reset();
	bool TouchAsset(const class UObject* Asset, const class UObject* Referencer);

	TArray<class FString> GetAllAssetHashes() const;
	TArray<class FString> GetAllCachedAssetPaths() const;
	TArray<class UObject*> GetAllLoadedAssets() const;
	class FString GetHashForAsset(const class UObject* Asset) const;
	int32 GetNumAssets() const;
	bool IsAssetOwnedByCache(const class FString& AssetPath) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAssetCache2">();
	}
	static class UUsdAssetCache2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAssetCache2>();
	}
};
static_assert(alignof(UUsdAssetCache2) == 0x000008, "Wrong alignment on UUsdAssetCache2");
static_assert(sizeof(UUsdAssetCache2) == 0x0001A0, "Wrong size on UUsdAssetCache2");
static_assert(offsetof(UUsdAssetCache2, UnreferencedAssetStorageSizeMB) == 0x000028, "Member 'UUsdAssetCache2::UnreferencedAssetStorageSizeMB' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache2, PersistentAssetStorageSizeMB) == 0x000030, "Member 'UUsdAssetCache2::PersistentAssetStorageSizeMB' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache2, AssetStorage) == 0x000038, "Member 'UUsdAssetCache2::AssetStorage' has a wrong offset!");

// Class USDClasses.UsdAssetCache3
// 0x0268 (0x0290 - 0x0028)
class UUsdAssetCache3 final : public UObject
{
public:
	struct FDirectoryPath                         AssetDirectory;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyHandleAssetsWithinAssetDirectory;             // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FSoftObjectPath>   HashToAssetPaths;                                  // 0x0040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCleanUpUnreferencedAssets;                        // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FSoftObjectPath, class FString>   AssetPathToHashes;                                 // 0x0098(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FString, class UObject*>           TransientObjectStorage;                            // 0x00E8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x158];                                    // 0x0138(0x0158)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AddAssetReferencer(const class UObject* Asset, const class UObject* Referencer);
	void CacheAsset(const class FString& Hash, const struct FSoftObjectPath& AssetPath, const class UObject* Referencer);
	void DeleteUnreferencedAssets(const bool bShowConfirmation);
	void DeleteUnreferencedAssetsWithConfirmation();
	class UObject* GetOrCreateCachedAsset(const class FString& Hash, class UClass* Class_0, const class FString& DesiredName, int32 DesiredFlags, bool* bOutCreatedAsset, const class UObject* Referencer);
	bool RemoveAllAssetReferencers();
	bool RemoveAllReferencerAssets(const class UObject* Referencer);
	bool RemoveAllReferencersForAsset(const class UObject* Asset);
	bool RemoveAssetReferencer(const class UObject* Asset, const class UObject* Referencer);
	void RescanAssetDirectory();
	void SetAssetDeletable(const class UObject* Asset, bool bIsDeletable);
	struct FSoftObjectPath StopTrackingAsset(const class FString& Hash);

	TMap<class FString, struct FSoftObjectPath> GetAllTrackedAssets() const;
	class UObject* GetCachedAsset(const class FString& Hash) const;
	struct FSoftObjectPath GetCachedAssetPath(const class FString& Hash) const;
	class FString GetHashForAsset(const struct FSoftObjectPath& AssetPath) const;
	int32 GetNumAssets() const;
	bool IsAssetDeletable(const class UObject* Asset) const;
	bool IsAssetTrackedByCache(const struct FSoftObjectPath& AssetPath) const;
	TMap<class FString, class UObject*> LoadAndGetAllTrackedAssets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAssetCache3">();
	}
	static class UUsdAssetCache3* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAssetCache3>();
	}
};
static_assert(alignof(UUsdAssetCache3) == 0x000008, "Wrong alignment on UUsdAssetCache3");
static_assert(sizeof(UUsdAssetCache3) == 0x000290, "Wrong size on UUsdAssetCache3");
static_assert(offsetof(UUsdAssetCache3, AssetDirectory) == 0x000028, "Member 'UUsdAssetCache3::AssetDirectory' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache3, bOnlyHandleAssetsWithinAssetDirectory) == 0x000038, "Member 'UUsdAssetCache3::bOnlyHandleAssetsWithinAssetDirectory' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache3, HashToAssetPaths) == 0x000040, "Member 'UUsdAssetCache3::HashToAssetPaths' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache3, bCleanUpUnreferencedAssets) == 0x000090, "Member 'UUsdAssetCache3::bCleanUpUnreferencedAssets' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache3, AssetPathToHashes) == 0x000098, "Member 'UUsdAssetCache3::AssetPathToHashes' has a wrong offset!");
static_assert(offsetof(UUsdAssetCache3, TransientObjectStorage) == 0x0000E8, "Member 'UUsdAssetCache3::TransientObjectStorage' has a wrong offset!");

// Class USDClasses.UsdAssetImportData
// 0x0018 (0x0040 - 0x0028)
class UUsdAssetImportData : public UAssetImportData
{
public:
	class FString                                 PrimPath;                                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ImportOptions;                                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAssetImportData">();
	}
	static class UUsdAssetImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAssetImportData>();
	}
};
static_assert(alignof(UUsdAssetImportData) == 0x000008, "Wrong alignment on UUsdAssetImportData");
static_assert(sizeof(UUsdAssetImportData) == 0x000040, "Wrong size on UUsdAssetImportData");
static_assert(offsetof(UUsdAssetImportData, PrimPath) == 0x000028, "Member 'UUsdAssetImportData::PrimPath' has a wrong offset!");
static_assert(offsetof(UUsdAssetImportData, ImportOptions) == 0x000038, "Member 'UUsdAssetImportData::ImportOptions' has a wrong offset!");

// Class USDClasses.UsdAnimSequenceAssetImportData
// 0x0008 (0x0048 - 0x0040)
class UUsdAnimSequenceAssetImportData final : public UUsdAssetImportData
{
public:
	float                                         LayerStartOffsetSeconds;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAnimSequenceAssetImportData">();
	}
	static class UUsdAnimSequenceAssetImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAnimSequenceAssetImportData>();
	}
};
static_assert(alignof(UUsdAnimSequenceAssetImportData) == 0x000008, "Wrong alignment on UUsdAnimSequenceAssetImportData");
static_assert(sizeof(UUsdAnimSequenceAssetImportData) == 0x000048, "Wrong size on UUsdAnimSequenceAssetImportData");
static_assert(offsetof(UUsdAnimSequenceAssetImportData, LayerStartOffsetSeconds) == 0x000040, "Member 'UUsdAnimSequenceAssetImportData::LayerStartOffsetSeconds' has a wrong offset!");

// Class USDClasses.UsdMeshAssetImportData
// 0x0050 (0x0090 - 0x0040)
class UUsdMeshAssetImportData final : public UUsdAssetImportData
{
public:
	TMap<int32, struct FUsdPrimPathList>          MaterialSlotToPrimPaths;                           // 0x0040(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdMeshAssetImportData">();
	}
	static class UUsdMeshAssetImportData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdMeshAssetImportData>();
	}
};
static_assert(alignof(UUsdMeshAssetImportData) == 0x000008, "Wrong alignment on UUsdMeshAssetImportData");
static_assert(sizeof(UUsdMeshAssetImportData) == 0x000090, "Wrong size on UUsdMeshAssetImportData");
static_assert(offsetof(UUsdMeshAssetImportData, MaterialSlotToPrimPaths) == 0x000040, "Member 'UUsdMeshAssetImportData::MaterialSlotToPrimPaths' has a wrong offset!");

// Class USDClasses.UsdAssetUserData
// 0x0070 (0x0098 - 0x0028)
class UUsdAssetUserData : public UAssetUserData
{
public:
	TArray<class FString>                         PrimPaths;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FUsdCombinedPrimMetadata> StageIdentifierToMetadata;                  // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 OriginalHash;                                      // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAssetUserData">();
	}
	static class UUsdAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAssetUserData>();
	}
};
static_assert(alignof(UUsdAssetUserData) == 0x000008, "Wrong alignment on UUsdAssetUserData");
static_assert(sizeof(UUsdAssetUserData) == 0x000098, "Wrong size on UUsdAssetUserData");
static_assert(offsetof(UUsdAssetUserData, PrimPaths) == 0x000028, "Member 'UUsdAssetUserData::PrimPaths' has a wrong offset!");
static_assert(offsetof(UUsdAssetUserData, StageIdentifierToMetadata) == 0x000038, "Member 'UUsdAssetUserData::StageIdentifierToMetadata' has a wrong offset!");
static_assert(offsetof(UUsdAssetUserData, OriginalHash) == 0x000088, "Member 'UUsdAssetUserData::OriginalHash' has a wrong offset!");

// Class USDClasses.UsdAnimSequenceAssetUserData
// 0x0008 (0x00A0 - 0x0098)
class UUsdAnimSequenceAssetUserData final : public UUsdAssetUserData
{
public:
	float                                         LayerStartOffsetSeconds;                           // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdAnimSequenceAssetUserData">();
	}
	static class UUsdAnimSequenceAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdAnimSequenceAssetUserData>();
	}
};
static_assert(alignof(UUsdAnimSequenceAssetUserData) == 0x000008, "Wrong alignment on UUsdAnimSequenceAssetUserData");
static_assert(sizeof(UUsdAnimSequenceAssetUserData) == 0x0000A0, "Wrong size on UUsdAnimSequenceAssetUserData");
static_assert(offsetof(UUsdAnimSequenceAssetUserData, LayerStartOffsetSeconds) == 0x000098, "Member 'UUsdAnimSequenceAssetUserData::LayerStartOffsetSeconds' has a wrong offset!");

// Class USDClasses.UsdMaterialAssetUserData
// 0x00A0 (0x0138 - 0x0098)
class UUsdMaterialAssetUserData final : public UUsdAssetUserData
{
public:
	TMap<class FString, class FString>            ParameterToPrimvar;                                // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    PrimvarToUVIndex;                                  // 0x00E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdMaterialAssetUserData">();
	}
	static class UUsdMaterialAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdMaterialAssetUserData>();
	}
};
static_assert(alignof(UUsdMaterialAssetUserData) == 0x000008, "Wrong alignment on UUsdMaterialAssetUserData");
static_assert(sizeof(UUsdMaterialAssetUserData) == 0x000138, "Wrong size on UUsdMaterialAssetUserData");
static_assert(offsetof(UUsdMaterialAssetUserData, ParameterToPrimvar) == 0x000098, "Member 'UUsdMaterialAssetUserData::ParameterToPrimvar' has a wrong offset!");
static_assert(offsetof(UUsdMaterialAssetUserData, PrimvarToUVIndex) == 0x0000E8, "Member 'UUsdMaterialAssetUserData::PrimvarToUVIndex' has a wrong offset!");

// Class USDClasses.UsdMeshAssetUserData
// 0x00A0 (0x0138 - 0x0098)
class UUsdMeshAssetUserData : public UUsdAssetUserData
{
public:
	TMap<int32, struct FUsdPrimPathList>          MaterialSlotToPrimPaths;                           // 0x0098(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    PrimvarToUVIndex;                                  // 0x00E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdMeshAssetUserData">();
	}
	static class UUsdMeshAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdMeshAssetUserData>();
	}
};
static_assert(alignof(UUsdMeshAssetUserData) == 0x000008, "Wrong alignment on UUsdMeshAssetUserData");
static_assert(sizeof(UUsdMeshAssetUserData) == 0x000138, "Wrong size on UUsdMeshAssetUserData");
static_assert(offsetof(UUsdMeshAssetUserData, MaterialSlotToPrimPaths) == 0x000098, "Member 'UUsdMeshAssetUserData::MaterialSlotToPrimPaths' has a wrong offset!");
static_assert(offsetof(UUsdMeshAssetUserData, PrimvarToUVIndex) == 0x0000E8, "Member 'UUsdMeshAssetUserData::PrimvarToUVIndex' has a wrong offset!");

// Class USDClasses.UsdGeometryCacheAssetUserData
// 0x0008 (0x0140 - 0x0138)
class UUsdGeometryCacheAssetUserData final : public UUsdMeshAssetUserData
{
public:
	float                                         LayerStartOffsetSeconds;                           // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdGeometryCacheAssetUserData">();
	}
	static class UUsdGeometryCacheAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdGeometryCacheAssetUserData>();
	}
};
static_assert(alignof(UUsdGeometryCacheAssetUserData) == 0x000008, "Wrong alignment on UUsdGeometryCacheAssetUserData");
static_assert(sizeof(UUsdGeometryCacheAssetUserData) == 0x000140, "Wrong size on UUsdGeometryCacheAssetUserData");
static_assert(offsetof(UUsdGeometryCacheAssetUserData, LayerStartOffsetSeconds) == 0x000138, "Member 'UUsdGeometryCacheAssetUserData::LayerStartOffsetSeconds' has a wrong offset!");

// Class USDClasses.UsdLevelSequenceAssetUserData
// 0x0060 (0x0088 - 0x0028)
class UUsdLevelSequenceAssetUserData final : public UAssetUserData
{
public:
	struct FGuid                                  LastCheckedSignature;                              // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FGuid>                            HandledBindingGuids;                               // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdLevelSequenceAssetUserData">();
	}
	static class UUsdLevelSequenceAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdLevelSequenceAssetUserData>();
	}
};
static_assert(alignof(UUsdLevelSequenceAssetUserData) == 0x000008, "Wrong alignment on UUsdLevelSequenceAssetUserData");
static_assert(sizeof(UUsdLevelSequenceAssetUserData) == 0x000088, "Wrong size on UUsdLevelSequenceAssetUserData");
static_assert(offsetof(UUsdLevelSequenceAssetUserData, LastCheckedSignature) == 0x000028, "Member 'UUsdLevelSequenceAssetUserData::LastCheckedSignature' has a wrong offset!");
static_assert(offsetof(UUsdLevelSequenceAssetUserData, HandledBindingGuids) == 0x000038, "Member 'UUsdLevelSequenceAssetUserData::HandledBindingGuids' has a wrong offset!");

// Class USDClasses.UsdSparseVolumeTextureAssetUserData
// 0x0040 (0x00D8 - 0x0098)
class UUsdSparseVolumeTextureAssetUserData final : public UUsdAssetUserData
{
public:
	TArray<class FString>                         SourceOpenVDBAssetPrimPaths;                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                TimeSamplePathTimeCodes;                           // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 TimeSamplePathIndices;                             // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         TimeSamplePaths;                                   // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdSparseVolumeTextureAssetUserData">();
	}
	static class UUsdSparseVolumeTextureAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdSparseVolumeTextureAssetUserData>();
	}
};
static_assert(alignof(UUsdSparseVolumeTextureAssetUserData) == 0x000008, "Wrong alignment on UUsdSparseVolumeTextureAssetUserData");
static_assert(sizeof(UUsdSparseVolumeTextureAssetUserData) == 0x0000D8, "Wrong size on UUsdSparseVolumeTextureAssetUserData");
static_assert(offsetof(UUsdSparseVolumeTextureAssetUserData, SourceOpenVDBAssetPrimPaths) == 0x000098, "Member 'UUsdSparseVolumeTextureAssetUserData::SourceOpenVDBAssetPrimPaths' has a wrong offset!");
static_assert(offsetof(UUsdSparseVolumeTextureAssetUserData, TimeSamplePathTimeCodes) == 0x0000A8, "Member 'UUsdSparseVolumeTextureAssetUserData::TimeSamplePathTimeCodes' has a wrong offset!");
static_assert(offsetof(UUsdSparseVolumeTextureAssetUserData, TimeSamplePathIndices) == 0x0000B8, "Member 'UUsdSparseVolumeTextureAssetUserData::TimeSamplePathIndices' has a wrong offset!");
static_assert(offsetof(UUsdSparseVolumeTextureAssetUserData, TimeSamplePaths) == 0x0000C8, "Member 'UUsdSparseVolumeTextureAssetUserData::TimeSamplePaths' has a wrong offset!");

// Class USDClasses.UsdDrawModeComponent
// 0x0090 (0x0580 - 0x04F0)
class UUsdDrawModeComponent final : public UPrimitiveComponent
{
public:
	struct FVector                                BoundsMin;                                         // 0x04E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsMax;                                         // 0x0500(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsdDrawMode                                  DrawMode;                                          // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BoundsColor;                                       // 0x051C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsdModelCardGeometry                         CardGeometry;                                      // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureXPos;                                   // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureYPos;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureZPos;                                   // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureXNeg;                                   // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureYNeg;                                   // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             CardTextureZNeg;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              MaterialInstances;                                 // 0x0560(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         AuthoredFaces;                                     // 0x0570(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_574[0xC];                                      // 0x0574(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoundsColor(const struct FLinearColor& NewColor);
	void SetBoundsMax(const struct FVector& NewMax);
	void SetBoundsMin(const struct FVector& NewMin);
	void SetCardGeometry(EUsdModelCardGeometry NewGeometry);
	void SetCardTextureXNeg(class UTexture2D* NewTexture);
	void SetCardTextureXPos(class UTexture2D* NewTexture);
	void SetCardTextureYNeg(class UTexture2D* NewTexture);
	void SetCardTextureYPos(class UTexture2D* NewTexture);
	void SetCardTextureZNeg(class UTexture2D* NewTexture);
	void SetCardTextureZPos(class UTexture2D* NewTexture);
	void SetDrawMode(EUsdDrawMode NewDrawMode);
	void SetTextureForFace(EUsdModelCardFace Face, class UTexture2D* Texture);

	class UTexture2D* GetTextureForFace(EUsdModelCardFace Face) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdDrawModeComponent">();
	}
	static class UUsdDrawModeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdDrawModeComponent>();
	}
};
static_assert(alignof(UUsdDrawModeComponent) == 0x000010, "Wrong alignment on UUsdDrawModeComponent");
static_assert(sizeof(UUsdDrawModeComponent) == 0x000580, "Wrong size on UUsdDrawModeComponent");
static_assert(offsetof(UUsdDrawModeComponent, BoundsMin) == 0x0004E8, "Member 'UUsdDrawModeComponent::BoundsMin' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, BoundsMax) == 0x000500, "Member 'UUsdDrawModeComponent::BoundsMax' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, DrawMode) == 0x000518, "Member 'UUsdDrawModeComponent::DrawMode' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, BoundsColor) == 0x00051C, "Member 'UUsdDrawModeComponent::BoundsColor' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardGeometry) == 0x00052C, "Member 'UUsdDrawModeComponent::CardGeometry' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureXPos) == 0x000530, "Member 'UUsdDrawModeComponent::CardTextureXPos' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureYPos) == 0x000538, "Member 'UUsdDrawModeComponent::CardTextureYPos' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureZPos) == 0x000540, "Member 'UUsdDrawModeComponent::CardTextureZPos' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureXNeg) == 0x000548, "Member 'UUsdDrawModeComponent::CardTextureXNeg' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureYNeg) == 0x000550, "Member 'UUsdDrawModeComponent::CardTextureYNeg' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, CardTextureZNeg) == 0x000558, "Member 'UUsdDrawModeComponent::CardTextureZNeg' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, MaterialInstances) == 0x000560, "Member 'UUsdDrawModeComponent::MaterialInstances' has a wrong offset!");
static_assert(offsetof(UUsdDrawModeComponent, AuthoredFaces) == 0x000570, "Member 'UUsdDrawModeComponent::AuthoredFaces' has a wrong offset!");

// Class USDClasses.UsdProjectSettings
// 0x0248 (0x0280 - 0x0038)
class UUsdProjectSettings final : public UDeveloperSettings
{
public:
	TArray<struct FDirectoryPath>                 AdditionalPluginDirectories;                       // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                 DefaultResolverSearchPath;                         // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           AdditionalMaterialPurposes;                        // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bLogUsdSdkErrors;                                  // 0x0068(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DefaultAssetCache;                                 // 0x0070(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCreateDefaultAssetCacheDialog;                // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConfirmationWhenClearingLayers;               // 0x0091(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConfirmationWhenMutingDirtyLayers;            // 0x0092(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowConfirmationWhenReloadingDirtyLayers;         // 0x0093(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOverriddenOpinionsWarning;                    // 0x0094(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsdEditInInstanceBehavior                    EditInInstanceableBehavior;                        // 0x0095(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWarningOnIncompleteDuplication;               // 0x0096(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransformOnCameraComponentWarning;            // 0x0097(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTransformTrackOnCameraComponentWarning;       // 0x0098(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowInheritedVisibilityWarning;                   // 0x0099(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsdSaveDialogBehavior                        ShowSaveLayersDialogWhenSaving;                    // 0x009A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUsdSaveDialogBehavior                        ShowSaveLayersDialogWhenClosing;                   // 0x009B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DefaultSoundAttenuation;                           // 0x00A0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceDefaultSVTMaterial;                       // 0x00C0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceModelCardTextureMaterial;                 // 0x00E0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceMaterial;                   // 0x0100(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTranslucentMaterial;        // 0x0120(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTwoSidedMaterial;           // 0x0140(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTranslucentTwoSidedMaterial; // 0x0160(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceVTMaterial;                 // 0x0180(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTranslucentVTMaterial;      // 0x01A0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTwoSidedVTMaterial;         // 0x01C0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferencePreviewSurfaceTranslucentTwoSidedVTMaterial; // 0x01E0(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceDisplayColorMaterial;                     // 0x0200(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceDisplayColorAndOpacityMaterial;           // 0x0220(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceDisplayColorTwoSidedMaterial;             // 0x0240(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReferenceDisplayColorAndOpacityTwoSidedMaterial;   // 0x0260(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdProjectSettings">();
	}
	static class UUsdProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdProjectSettings>();
	}
};
static_assert(alignof(UUsdProjectSettings) == 0x000008, "Wrong alignment on UUsdProjectSettings");
static_assert(sizeof(UUsdProjectSettings) == 0x000280, "Wrong size on UUsdProjectSettings");
static_assert(offsetof(UUsdProjectSettings, AdditionalPluginDirectories) == 0x000038, "Member 'UUsdProjectSettings::AdditionalPluginDirectories' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, DefaultResolverSearchPath) == 0x000048, "Member 'UUsdProjectSettings::DefaultResolverSearchPath' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, AdditionalMaterialPurposes) == 0x000058, "Member 'UUsdProjectSettings::AdditionalMaterialPurposes' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bLogUsdSdkErrors) == 0x000068, "Member 'UUsdProjectSettings::bLogUsdSdkErrors' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, DefaultAssetCache) == 0x000070, "Member 'UUsdProjectSettings::DefaultAssetCache' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowCreateDefaultAssetCacheDialog) == 0x000090, "Member 'UUsdProjectSettings::bShowCreateDefaultAssetCacheDialog' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowConfirmationWhenClearingLayers) == 0x000091, "Member 'UUsdProjectSettings::bShowConfirmationWhenClearingLayers' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowConfirmationWhenMutingDirtyLayers) == 0x000092, "Member 'UUsdProjectSettings::bShowConfirmationWhenMutingDirtyLayers' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowConfirmationWhenReloadingDirtyLayers) == 0x000093, "Member 'UUsdProjectSettings::bShowConfirmationWhenReloadingDirtyLayers' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowOverriddenOpinionsWarning) == 0x000094, "Member 'UUsdProjectSettings::bShowOverriddenOpinionsWarning' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, EditInInstanceableBehavior) == 0x000095, "Member 'UUsdProjectSettings::EditInInstanceableBehavior' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowWarningOnIncompleteDuplication) == 0x000096, "Member 'UUsdProjectSettings::bShowWarningOnIncompleteDuplication' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowTransformOnCameraComponentWarning) == 0x000097, "Member 'UUsdProjectSettings::bShowTransformOnCameraComponentWarning' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowTransformTrackOnCameraComponentWarning) == 0x000098, "Member 'UUsdProjectSettings::bShowTransformTrackOnCameraComponentWarning' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, bShowInheritedVisibilityWarning) == 0x000099, "Member 'UUsdProjectSettings::bShowInheritedVisibilityWarning' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ShowSaveLayersDialogWhenSaving) == 0x00009A, "Member 'UUsdProjectSettings::ShowSaveLayersDialogWhenSaving' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ShowSaveLayersDialogWhenClosing) == 0x00009B, "Member 'UUsdProjectSettings::ShowSaveLayersDialogWhenClosing' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, DefaultSoundAttenuation) == 0x0000A0, "Member 'UUsdProjectSettings::DefaultSoundAttenuation' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceDefaultSVTMaterial) == 0x0000C0, "Member 'UUsdProjectSettings::ReferenceDefaultSVTMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceModelCardTextureMaterial) == 0x0000E0, "Member 'UUsdProjectSettings::ReferenceModelCardTextureMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceMaterial) == 0x000100, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTranslucentMaterial) == 0x000120, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTranslucentMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTwoSidedMaterial) == 0x000140, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTwoSidedMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTranslucentTwoSidedMaterial) == 0x000160, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTranslucentTwoSidedMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceVTMaterial) == 0x000180, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceVTMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTranslucentVTMaterial) == 0x0001A0, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTranslucentVTMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTwoSidedVTMaterial) == 0x0001C0, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTwoSidedVTMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferencePreviewSurfaceTranslucentTwoSidedVTMaterial) == 0x0001E0, "Member 'UUsdProjectSettings::ReferencePreviewSurfaceTranslucentTwoSidedVTMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceDisplayColorMaterial) == 0x000200, "Member 'UUsdProjectSettings::ReferenceDisplayColorMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceDisplayColorAndOpacityMaterial) == 0x000220, "Member 'UUsdProjectSettings::ReferenceDisplayColorAndOpacityMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceDisplayColorTwoSidedMaterial) == 0x000240, "Member 'UUsdProjectSettings::ReferenceDisplayColorTwoSidedMaterial' has a wrong offset!");
static_assert(offsetof(UUsdProjectSettings, ReferenceDisplayColorAndOpacityTwoSidedMaterial) == 0x000260, "Member 'UUsdProjectSettings::ReferenceDisplayColorAndOpacityTwoSidedMaterial' has a wrong offset!");

// Class USDClasses.UsdReferenceOptions
// 0x0038 (0x0060 - 0x0028)
class UUsdReferenceOptions final : public UObject
{
public:
	bool                                          bInternalReference;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFilePath                              TargetFile;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultPrim;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetPrimPath;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeCodeOffset;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeCodeScale;                                     // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UsdReferenceOptions">();
	}
	static class UUsdReferenceOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUsdReferenceOptions>();
	}
};
static_assert(alignof(UUsdReferenceOptions) == 0x000008, "Wrong alignment on UUsdReferenceOptions");
static_assert(sizeof(UUsdReferenceOptions) == 0x000060, "Wrong size on UUsdReferenceOptions");
static_assert(offsetof(UUsdReferenceOptions, bInternalReference) == 0x000028, "Member 'UUsdReferenceOptions::bInternalReference' has a wrong offset!");
static_assert(offsetof(UUsdReferenceOptions, TargetFile) == 0x000030, "Member 'UUsdReferenceOptions::TargetFile' has a wrong offset!");
static_assert(offsetof(UUsdReferenceOptions, bUseDefaultPrim) == 0x000040, "Member 'UUsdReferenceOptions::bUseDefaultPrim' has a wrong offset!");
static_assert(offsetof(UUsdReferenceOptions, TargetPrimPath) == 0x000048, "Member 'UUsdReferenceOptions::TargetPrimPath' has a wrong offset!");
static_assert(offsetof(UUsdReferenceOptions, TimeCodeOffset) == 0x000058, "Member 'UUsdReferenceOptions::TimeCodeOffset' has a wrong offset!");
static_assert(offsetof(UUsdReferenceOptions, TimeCodeScale) == 0x00005C, "Member 'UUsdReferenceOptions::TimeCodeScale' has a wrong offset!");

}

