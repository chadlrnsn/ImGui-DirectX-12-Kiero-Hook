#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SteamAudio.EReverbSimulationType
// NumValues: 0x0003
enum class EReverbSimulationType : uint8
{
	REALTIME                                 = 0,
	BAKED                                    = 1,
	EReverbSimulationType_MAX                = 2,
};

// Enum SteamAudio.ETransmissionType
// NumValues: 0x0003
enum class ETransmissionType : uint8
{
	FREQUENCY_INDEPENDENT                    = 0,
	FREQUENCY_DEPENDENT                      = 1,
	FREQUENCY_MAX                            = 2,
};

// Enum SteamAudio.EProbeGenerationType
// NumValues: 0x0003
enum class EProbeGenerationType : uint8
{
	CENTROID                                 = 0,
	UNIFORM_FLOOR                            = 1,
	EProbeGenerationType_MAX                 = 2,
};

// Enum SteamAudio.EAudioEngineType
// NumValues: 0x0003
enum class EAudioEngineType : uint8
{
	UNREAL                                   = 0,
	FMODSTUDIO                               = 1,
	EAudioEngineType_MAX                     = 2,
};

// Enum SteamAudio.ESceneType
// NumValues: 0x0004
enum class ESceneType : uint8
{
	DEFAULT                                  = 0,
	EMBREE                                   = 1,
	RADEONRAYS                               = 2,
	ESceneType_MAX                           = 3,
};

// Enum SteamAudio.EReflectionEffectType
// NumValues: 0x0005
enum class EReflectionEffectType : uint8
{
	CONVOLUTION                              = 0,
	PARAMETRIC                               = 1,
	HYBRID                                   = 2,
	TRUEAUDIONEXT                            = 3,
	EReflectionEffectType_MAX                = 4,
};

// Enum SteamAudio.EOpenCLDeviceType
// NumValues: 0x0004
enum class EOpenCLDeviceType : uint8
{
	ANY                                      = 0,
	CPU                                      = 1,
	GPU                                      = 2,
	EOpenCLDeviceType_MAX                    = 3,
};

// Enum SteamAudio.EHRTFNormType
// NumValues: 0x0003
enum class EHRTFNormType : uint8
{
	NONE                                     = 0,
	RMS                                      = 1,
	EHRTFNormType_MAX                        = 2,
};

// Enum SteamAudio.EOcclusionType
// NumValues: 0x0003
enum class EOcclusionType : uint8
{
	RAYCAST                                  = 0,
	VOLUMETRIC                               = 1,
	EOcclusionType_MAX                       = 2,
};

// Enum SteamAudio.EReflectionSimulationType
// NumValues: 0x0004
enum class EReflectionSimulationType : uint8
{
	REALTIME                                 = 0,
	BAKED_STATIC_SOURCE                      = 1,
	BAKED_STATIC_LISTENER                    = 2,
	EReflectionSimulationType_MAX            = 3,
};

// Enum SteamAudio.EHRTFInterpolation
// NumValues: 0x0003
enum class EHRTFInterpolation : uint8
{
	NEAREST                                  = 0,
	BILINEAR                                 = 1,
	EHRTFInterpolation_MAX                   = 2,
};

// ScriptStruct SteamAudio.SteamAudioBakedDataInfo
// 0x0038 (0x0038 - 0x0000)
struct FSteamAudioBakedDataInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Variation;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndpointCenter;                                    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndpointRadius;                                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamAudioBakedDataInfo) == 0x000008, "Wrong alignment on FSteamAudioBakedDataInfo");
static_assert(sizeof(FSteamAudioBakedDataInfo) == 0x000038, "Wrong size on FSteamAudioBakedDataInfo");
static_assert(offsetof(FSteamAudioBakedDataInfo, Name) == 0x000000, "Member 'FSteamAudioBakedDataInfo::Name' has a wrong offset!");
static_assert(offsetof(FSteamAudioBakedDataInfo, Type) == 0x000010, "Member 'FSteamAudioBakedDataInfo::Type' has a wrong offset!");
static_assert(offsetof(FSteamAudioBakedDataInfo, Variation) == 0x000014, "Member 'FSteamAudioBakedDataInfo::Variation' has a wrong offset!");
static_assert(offsetof(FSteamAudioBakedDataInfo, EndpointCenter) == 0x000018, "Member 'FSteamAudioBakedDataInfo::EndpointCenter' has a wrong offset!");
static_assert(offsetof(FSteamAudioBakedDataInfo, EndpointRadius) == 0x000030, "Member 'FSteamAudioBakedDataInfo::EndpointRadius' has a wrong offset!");
static_assert(offsetof(FSteamAudioBakedDataInfo, Size) == 0x000034, "Member 'FSteamAudioBakedDataInfo::Size' has a wrong offset!");

// ScriptStruct SteamAudio.SteamAudioReverbSubmixPluginSettings
// 0x0002 (0x0002 - 0x0000)
struct FSteamAudioReverbSubmixPluginSettings final
{
public:
	bool                                          bApplyReverb;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyHRTF;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSteamAudioReverbSubmixPluginSettings) == 0x000001, "Wrong alignment on FSteamAudioReverbSubmixPluginSettings");
static_assert(sizeof(FSteamAudioReverbSubmixPluginSettings) == 0x000002, "Wrong size on FSteamAudioReverbSubmixPluginSettings");
static_assert(offsetof(FSteamAudioReverbSubmixPluginSettings, bApplyReverb) == 0x000000, "Member 'FSteamAudioReverbSubmixPluginSettings::bApplyReverb' has a wrong offset!");
static_assert(offsetof(FSteamAudioReverbSubmixPluginSettings, bApplyHRTF) == 0x000001, "Member 'FSteamAudioReverbSubmixPluginSettings::bApplyHRTF' has a wrong offset!");

}

