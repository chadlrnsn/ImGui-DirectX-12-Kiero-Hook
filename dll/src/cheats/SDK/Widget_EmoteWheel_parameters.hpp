#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_EmoteWheel

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "RGame_structs.hpp"


namespace SDK::Params
{

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.OnPreviewKeyDown
// 0x01E8 (0x01E8 - 0x0000)
struct Widget_EmoteWheel_C_OnPreviewKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0130(0x00B8)()
};
static_assert(alignof(Widget_EmoteWheel_C_OnPreviewKeyDown) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_OnPreviewKeyDown");
static_assert(sizeof(Widget_EmoteWheel_C_OnPreviewKeyDown) == 0x0001E8, "Wrong size on Widget_EmoteWheel_C_OnPreviewKeyDown");
static_assert(offsetof(Widget_EmoteWheel_C_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'Widget_EmoteWheel_C_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_OnPreviewKeyDown, InKeyEvent) == 0x000038, "Member 'Widget_EmoteWheel_C_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_OnPreviewKeyDown, ReturnValue) == 0x000078, "Member 'Widget_EmoteWheel_C_OnPreviewKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_OnPreviewKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000130, "Member 'Widget_EmoteWheel_C_OnPreviewKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.ExecuteUbergraph_Widget_EmoteWheel
// 0x0038 (0x0038 - 0x0000)
struct Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_ComponentBoundEvent_EmoteTag_3;             // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_ComponentBoundEvent_EmoteTag_2;             // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_ComponentBoundEvent_EmoteTag_1;             // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_ComponentBoundEvent_EmoteTag;               // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel");
static_assert(sizeof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel) == 0x000038, "Wrong size on Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, EntryPoint) == 0x000000, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::EntryPoint' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, K2Node_ComponentBoundEvent_EmoteTag_3) == 0x000004, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::K2Node_ComponentBoundEvent_EmoteTag_3' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, K2Node_ComponentBoundEvent_EmoteTag_2) == 0x00000C, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::K2Node_ComponentBoundEvent_EmoteTag_2' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, K2Node_ComponentBoundEvent_EmoteTag_1) == 0x000014, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::K2Node_ComponentBoundEvent_EmoteTag_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, K2Node_ComponentBoundEvent_EmoteTag) == 0x00001C, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::K2Node_ComponentBoundEvent_EmoteTag' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, K2Node_ComponentBoundEvent_Button) == 0x000028, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel, CallFunc_PlayAnimationForward_ReturnValue) == 0x000030, "Member 'Widget_EmoteWheel_C_ExecuteUbergraph_Widget_EmoteWheel::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BPUpdateHighlight
// 0x0088 (0x0088 - 0x0000)
struct Widget_EmoteWheel_C_BPUpdateHighlight final
{
public:
	int32                                         LocalIdx;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ClosestDiff;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CachedMousePos;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Distance2D_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_EmoteWheelBTN_C*                CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_EmoteWheelBTN_C*                CallFunc_Array_Get_Item_2;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetMousePositionOnPlatform_ReturnValue;   // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BPUpdateHighlight) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_BPUpdateHighlight");
static_assert(sizeof(Widget_EmoteWheel_C_BPUpdateHighlight) == 0x000088, "Wrong size on Widget_EmoteWheel_C_BPUpdateHighlight");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, LocalIdx) == 0x000000, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::LocalIdx' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, ClosestDiff) == 0x000008, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::ClosestDiff' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CachedMousePos) == 0x000010, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CachedMousePos' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, Temp_int_Array_Index_Variable) == 0x000020, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_Get_Item) == 0x000030, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Distance2D_ReturnValue) == 0x000048, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000060, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_Get_Item_2) == 0x000068, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000070, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000071, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPUpdateHighlight, CallFunc_GetMousePositionOnPlatform_ReturnValue) == 0x000078, "Member 'Widget_EmoteWheel_C_BPUpdateHighlight::CallFunc_GetMousePositionOnPlatform_ReturnValue' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BPRemoveHighlight
// 0x0010 (0x0010 - 0x0000)
struct Widget_EmoteWheel_C_BPRemoveHighlight final
{
public:
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_EmoteWheelBTN_C*                CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BPRemoveHighlight) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_BPRemoveHighlight");
static_assert(sizeof(Widget_EmoteWheel_C_BPRemoveHighlight) == 0x000010, "Wrong size on Widget_EmoteWheel_C_BPRemoveHighlight");
static_assert(offsetof(Widget_EmoteWheel_C_BPRemoveHighlight, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000000, "Member 'Widget_EmoteWheel_C_BPRemoveHighlight::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPRemoveHighlight, CallFunc_Array_Get_Item) == 0x000008, "Member 'Widget_EmoteWheel_C_BPRemoveHighlight::CallFunc_Array_Get_Item' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BPProcessEmoteTag
// 0x0290 (0x0290 - 0x0000)
struct Widget_EmoteWheel_C_BPProcessEmoteTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EmoteTag;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FEmoteDataTableRow                     CallFunc_GetEmoteDataTableRowByTag_ReturnValue;    // 0x0010(0x0110)()
	bool                                          CallFunc_MatchesTag_ReturnValue;                   // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesTag_ReturnValue_1;                 // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0128(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue;  // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_DynamicCast_AsSound_Base;                   // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue;          // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARPlayerPawn*                           K2Node_DynamicCast_AsRPlayer_Pawn;                 // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x01C8(0x0010)()
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01E0(0x0048)(HasGetValueTypeHash)
	class ARGamePlayerController*                 K2Node_DynamicCast_AsRGame_Player_Controller;      // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0238(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0248(0x0010)()
	struct FRChatLogMessage                       K2Node_MakeStruct_RChatLogMessage;                 // 0x0258(0x0020)()
	class APawn*                                  CallFunc_GetOwningPlayerPawn_ReturnValue_1;        // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARPlayerPawn*                           K2Node_DynamicCast_AsRPlayer_Pawn_1;               // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BPProcessEmoteTag) == 0x000010, "Wrong alignment on Widget_EmoteWheel_C_BPProcessEmoteTag");
static_assert(sizeof(Widget_EmoteWheel_C_BPProcessEmoteTag) == 0x000290, "Wrong size on Widget_EmoteWheel_C_BPProcessEmoteTag");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, Tag) == 0x000000, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::Tag' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, EmoteTag) == 0x000008, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::EmoteTag' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetEmoteDataTableRowByTag_ReturnValue) == 0x000010, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetEmoteDataTableRowByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_MatchesTag_ReturnValue) == 0x000120, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_MatchesTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_MatchesTag_ReturnValue_1) == 0x000121, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_MatchesTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_MakeStruct_FormatArgumentData) == 0x000128, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000170, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue) == 0x000178, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_IsValid_ReturnValue) == 0x000180, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_AsSound_Base) == 0x000188, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_AsSound_Base' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_bSuccess) == 0x000190, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetOwningPlayerPawn_ReturnValue) == 0x000198, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetOwningPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetOwningPlayer_ReturnValue) == 0x0001A0, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_AsRPlayer_Pawn) == 0x0001A8, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_AsRPlayer_Pawn' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_bSuccess_1) == 0x0001B0, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetPlayerName_ReturnValue) == 0x0001B8, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_Conv_StringToText_ReturnValue) == 0x0001C8, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x0001D8, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001E0, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_AsRGame_Player_Controller) == 0x000228, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_AsRGame_Player_Controller' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_bSuccess_2) == 0x000230, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_MakeArray_Array) == 0x000238, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_Format_ReturnValue) == 0x000248, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_MakeStruct_RChatLogMessage) == 0x000258, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_MakeStruct_RChatLogMessage' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, CallFunc_GetOwningPlayerPawn_ReturnValue_1) == 0x000278, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::CallFunc_GetOwningPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_AsRPlayer_Pawn_1) == 0x000280, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_AsRPlayer_Pawn_1' has a wrong offset!");
static_assert(offsetof(Widget_EmoteWheel_C_BPProcessEmoteTag, K2Node_DynamicCast_bSuccess_3) == 0x000288, "Member 'Widget_EmoteWheel_C_BPProcessEmoteTag::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature) == 0x000004, "Wrong alignment on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature");
static_assert(sizeof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature");
static_assert(offsetof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature, EmoteTag) == 0x000000, "Member 'Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN4_K2Node_ComponentBoundEvent_3_OnPressed__DelegateSignature::EmoteTag' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature) == 0x000004, "Wrong alignment on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature");
static_assert(sizeof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature");
static_assert(offsetof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature, EmoteTag) == 0x000000, "Member 'Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN3_K2Node_ComponentBoundEvent_2_OnPressed__DelegateSignature::EmoteTag' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature) == 0x000004, "Wrong alignment on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature");
static_assert(sizeof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature");
static_assert(offsetof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature, EmoteTag) == 0x000000, "Member 'Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN2_K2Node_ComponentBoundEvent_1_OnPressed__DelegateSignature::EmoteTag' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature final
{
public:
	struct FGameplayTag                           EmoteTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature) == 0x000004, "Wrong alignment on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature");
static_assert(sizeof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature");
static_assert(offsetof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature, EmoteTag) == 0x000000, "Member 'Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_Widget_EmoteWheelBTN1_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature::EmoteTag' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'Widget_EmoteWheel_C_BndEvt__Widget_EmoteWheel_W_Button_SimpleText_K2Node_ComponentBoundEvent_5_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function Widget_EmoteWheel.Widget_EmoteWheel_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct Widget_EmoteWheel_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_EmoteWheel_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on Widget_EmoteWheel_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(Widget_EmoteWheel_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on Widget_EmoteWheel_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(Widget_EmoteWheel_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'Widget_EmoteWheel_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

}

