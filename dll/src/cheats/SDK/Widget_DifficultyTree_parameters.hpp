#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyTree

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.AreAllPredeterminedNodesUnlocked
// 0x0050 (0x0050 - 0x0000)
struct Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked final
{
public:
	bool                                          AllUnlocked;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked");
static_assert(sizeof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked) == 0x000050, "Wrong size on Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, AllUnlocked) == 0x000000, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::AllUnlocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, Temp_int_Array_Index_Variable) == 0x000004, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_Array_Get_Item) == 0x000028, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000038, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000044, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000048, "Member 'Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ConstructEndGameNodes
// 0x0080 (0x0080 - 0x0000)
struct Widget_DifficultyTree_C_ConstructEndGameNodes final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget_DifficultyNode_C*               CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class URDifficultyPrimaryAsset> CallFunc_Array_Get_Item;                          // 0x0028(0x0028)(HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue;  // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URDifficultyPrimaryAsset*               K2Node_DynamicCast_AsRDifficulty_Primary_Asset;    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_ConstructEndGameNodes) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_ConstructEndGameNodes");
static_assert(sizeof(Widget_DifficultyTree_C_ConstructEndGameNodes) == 0x000080, "Wrong size on Widget_DifficultyTree_C_ConstructEndGameNodes");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Divide_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Percent_IntInt_ReturnValue) == 0x000010, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Create_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Array_Get_Item) == 0x000028, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue) == 0x000050, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000058, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, K2Node_DynamicCast_AsRDifficulty_Primary_Asset) == 0x000060, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::K2Node_DynamicCast_AsRDifficulty_Primary_Asset' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructEndGameNodes, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000078, "Member 'Widget_DifficultyTree_C_ConstructEndGameNodes::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ConstructPredeterminedNodes
// 0x0080 (0x0080 - 0x0000)
struct Widget_DifficultyTree_C_ConstructPredeterminedNodes final
{
public:
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x0000(0x0008)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget_DifficultyNode_C*               CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class URDifficultyPrimaryAsset> CallFunc_Array_Get_Item;                          // 0x0028(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue;  // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URDifficultyPrimaryAsset*               K2Node_DynamicCast_AsRDifficulty_Primary_Asset;    // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_ConstructPredeterminedNodes) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_ConstructPredeterminedNodes");
static_assert(sizeof(Widget_DifficultyTree_C_ConstructPredeterminedNodes) == 0x000080, "Wrong size on Widget_DifficultyTree_C_ConstructPredeterminedNodes");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, K2Node_MakeStruct_SlateChildSize) == 0x000000, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, Temp_int_Array_Index_Variable) == 0x000010, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_Create_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_Array_Get_Item) == 0x000028, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue) == 0x000058, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, K2Node_DynamicCast_AsRDifficulty_Primary_Asset) == 0x000068, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::K2Node_DynamicCast_AsRDifficulty_Primary_Asset' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000071, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ConstructPredeterminedNodes, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000078, "Member 'Widget_DifficultyTree_C_ConstructPredeterminedNodes::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.DoesNextNodeHavePointsAssigned
// 0x0060 (0x0060 - 0x0000)
struct Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned final
{
public:
	class UWidget_DifficultyNode_C*               Node;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPointsAssigned;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned");
static_assert(sizeof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned) == 0x000060, "Wrong size on Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, Node) == 0x000000, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, HasPointsAssigned) == 0x000008, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_GetAllChildren_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Array_Get_Item) == 0x000030, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000048, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000054, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Greater_IntInt_ReturnValue) == 0x00005C, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Less_IntInt_ReturnValue) == 0x00005D, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00005E, "Member 'Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ExecuteUbergraph_Widget_DifficultyTree
// 0x0058 (0x0058 - 0x0000)
struct Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget_CommonEnemyMutatorInfoDialog_C* CallFunc_PushWidget_OutWidget;                     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_2;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree");
static_assert(sizeof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree) == 0x000058, "Wrong size on Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, EntryPoint) == 0x000000, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::EntryPoint' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_PushWidget_OutWidget) == 0x000010, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_PushWidget_OutWidget' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000018, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_GetOwningPlayer_ReturnValue_2) == 0x000028, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_GetOwningPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue) == 0x000030, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_GetCurrentInputType_ReturnValue) == 0x000038, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, K2Node_ComponentBoundEvent_Button_1) == 0x000040, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree, K2Node_ComponentBoundEvent_Button) == 0x000050, "Member 'Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree::K2Node_ComponentBoundEvent_Button' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.GetAllNodes
// 0x00A8 (0x00A8 - 0x0000)
struct Widget_DifficultyTree_C_GetAllNodes final
{
public:
	TArray<class UWidget_DifficultyNode_C*>       AllNodes;                                          // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UWidget_DifficultyNode_C*>       AllNodeWidgets;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue_1;             // 0x0058(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node_1;     // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_GetAllNodes) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_GetAllNodes");
static_assert(sizeof(Widget_DifficultyTree_C_GetAllNodes) == 0x0000A8, "Wrong size on Widget_DifficultyTree_C_GetAllNodes");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, AllNodes) == 0x000000, "Member 'Widget_DifficultyTree_C_GetAllNodes::AllNodes' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, AllNodeWidgets) == 0x000010, "Member 'Widget_DifficultyTree_C_GetAllNodes::AllNodeWidgets' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'Widget_DifficultyTree_C_GetAllNodes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, Temp_int_Array_Index_Variable) == 0x000028, "Member 'Widget_DifficultyTree_C_GetAllNodes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'Widget_DifficultyTree_C_GetAllNodes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'Widget_DifficultyTree_C_GetAllNodes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_AddUnique_ReturnValue) == 0x000038, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_GetAllChildren_ReturnValue) == 0x000040, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_Get_Item) == 0x000050, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_GetAllChildren_ReturnValue_1) == 0x000058, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_GetAllChildren_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000068, "Member 'Widget_DifficultyTree_C_GetAllNodes::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'Widget_DifficultyTree_C_GetAllNodes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000080, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, K2Node_DynamicCast_AsWidget_Difficulty_Node_1) == 0x000088, "Member 'Widget_DifficultyTree_C_GetAllNodes::K2Node_DynamicCast_AsWidget_Difficulty_Node_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'Widget_DifficultyTree_C_GetAllNodes::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_AddUnique_ReturnValue_2) == 0x000098, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetAllNodes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A4, "Member 'Widget_DifficultyTree_C_GetAllNodes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.GetNumTotalPointsAssigned
// 0x0050 (0x0050 - 0x0000)
struct Widget_DifficultyTree_C_GetNumTotalPointsAssigned final
{
public:
	int32                                         TotalPointsAssigned;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        AggregatedChildWidgets;                            // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         CountAssignedPoints;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget_DifficultyNode_C*>       CallFunc_GetAllNodes_AllNodes;                     // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget_DifficultyNode_C*               CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_GetNumTotalPointsAssigned");
static_assert(sizeof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned) == 0x000050, "Wrong size on Widget_DifficultyTree_C_GetNumTotalPointsAssigned");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, TotalPointsAssigned) == 0x000000, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::TotalPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, AggregatedChildWidgets) == 0x000008, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::AggregatedChildWidgets' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CountAssignedPoints) == 0x000018, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CountAssignedPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_GetAllNodes_AllNodes) == 0x000028, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_GetAllNodes_AllNodes' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_Array_Get_Item) == 0x000038, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000044, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_GetNumTotalPointsAssigned, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'Widget_DifficultyTree_C_GetNumTotalPointsAssigned::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.HasAnyEndGameNodePointsAssigned
// 0x0048 (0x0048 - 0x0000)
struct Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned final
{
public:
	bool                                          HasPointsAssigned;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned");
static_assert(sizeof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned) == 0x000048, "Wrong size on Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, HasPointsAssigned) == 0x000000, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, Temp_int_Array_Index_Variable) == 0x000004, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_Array_Get_Item) == 0x000020, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000030, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_GetNumPointsAssigned_NumPoints) == 0x00003C, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.HasInfiniteNodePointsAssigned
// 0x000C (0x000C - 0x0000)
struct Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned final
{
public:
	bool                                          HasPointsAssigned;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned) == 0x000004, "Wrong alignment on Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned");
static_assert(sizeof(Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned) == 0x00000C, "Wrong size on Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned");
static_assert(offsetof(Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned, HasPointsAssigned) == 0x000000, "Member 'Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned::HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000004, "Member 'Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.Is Node Locked
// 0x0098 (0x0098 - 0x0000)
struct Widget_DifficultyTree_C_Is_Node_Locked final
{
public:
	class UWidget_DifficultyNode_C*               NodeWidget;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllPredeterminedNodesAssigned;                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTreeCapped_Capped;                      // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AreAllPredeterminedNodesUnlocked_AllUnlocked; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue_1;             // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_Is_Node_Locked) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_Is_Node_Locked");
static_assert(sizeof(Widget_DifficultyTree_C_Is_Node_Locked) == 0x000098, "Wrong size on Widget_DifficultyTree_C_Is_Node_Locked");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, NodeWidget) == 0x000000, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::NodeWidget' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, IsLocked) == 0x000008, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::IsLocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, bAllPredeterminedNodesAssigned) == 0x000009, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::bAllPredeterminedNodesAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Subtract_IntInt_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_IsServer_ReturnValue) == 0x000024, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_IsTreeCapped_Capped) == 0x000025, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_IsTreeCapped_Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Not_PreBool_ReturnValue) == 0x000026, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000027, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_AreAllPredeterminedNodesUnlocked_AllUnlocked) == 0x000028, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_AreAllPredeterminedNodesUnlocked_AllUnlocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, Temp_int_Loop_Counter_Variable_1) == 0x00002C, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_GetAllChildren_ReturnValue) == 0x000030, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_GetAllChildren_ReturnValue_1) == 0x000050, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_GetAllChildren_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Array_Get_Item) == 0x000060, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000070, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000078, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000084, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000088, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000089, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Is_Node_Locked, CallFunc_Less_IntInt_ReturnValue_1) == 0x000090, "Member 'Widget_DifficultyTree_C_Is_Node_Locked::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodeEndGameNode
// 0x0010 (0x0010 - 0x0000)
struct Widget_DifficultyTree_C_IsNodeEndGameNode final
{
public:
	class UWidget*                                WidgetNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNodeInPanel_Value;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_IsNodeEndGameNode) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_IsNodeEndGameNode");
static_assert(sizeof(Widget_DifficultyTree_C_IsNodeEndGameNode) == 0x000010, "Wrong size on Widget_DifficultyTree_C_IsNodeEndGameNode");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeEndGameNode, WidgetNode) == 0x000000, "Member 'Widget_DifficultyTree_C_IsNodeEndGameNode::WidgetNode' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeEndGameNode, Value) == 0x000008, "Member 'Widget_DifficultyTree_C_IsNodeEndGameNode::Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeEndGameNode, CallFunc_IsNodeInPanel_Value) == 0x000009, "Member 'Widget_DifficultyTree_C_IsNodeEndGameNode::CallFunc_IsNodeInPanel_Value' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodeInPanel
// 0x0050 (0x0050 - 0x0000)
struct Widget_DifficultyTree_C_IsNodeInPanel final
{
public:
	class UWidget*                                WidgetNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           PanelWidget;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_IsNodeInPanel) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_IsNodeInPanel");
static_assert(sizeof(Widget_DifficultyTree_C_IsNodeInPanel) == 0x000050, "Wrong size on Widget_DifficultyTree_C_IsNodeInPanel");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, WidgetNode) == 0x000000, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::WidgetNode' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, PanelWidget) == 0x000008, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::PanelWidget' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, Value) == 0x000010, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_GetAllChildren_ReturnValue) == 0x000018, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, Temp_int_Array_Index_Variable) == 0x000028, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_Array_Get_Item) == 0x000030, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000038, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000048, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodeInPanel, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'Widget_DifficultyTree_C_IsNodeInPanel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodePredetermined
// 0x0010 (0x0010 - 0x0000)
struct Widget_DifficultyTree_C_IsNodePredetermined final
{
public:
	class UWidget*                                WidgetNode;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNodeInPanel_Value;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_IsNodePredetermined) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_IsNodePredetermined");
static_assert(sizeof(Widget_DifficultyTree_C_IsNodePredetermined) == 0x000010, "Wrong size on Widget_DifficultyTree_C_IsNodePredetermined");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodePredetermined, WidgetNode) == 0x000000, "Member 'Widget_DifficultyTree_C_IsNodePredetermined::WidgetNode' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodePredetermined, Value) == 0x000008, "Member 'Widget_DifficultyTree_C_IsNodePredetermined::Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsNodePredetermined, CallFunc_IsNodeInPanel_Value) == 0x000009, "Member 'Widget_DifficultyTree_C_IsNodePredetermined::CallFunc_IsNodeInPanel_Value' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsTreeCapped
// 0x0030 (0x0030 - 0x0000)
struct Widget_DifficultyTree_C_IsTreeCapped final
{
public:
	bool                                          Capped;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget_DifficultyNode_C*>       CallFunc_GetAllNodes_AllNodes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget_DifficultyNode_C*               CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCapped_Capped;                          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_IsTreeCapped) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_IsTreeCapped");
static_assert(sizeof(Widget_DifficultyTree_C_IsTreeCapped) == 0x000030, "Wrong size on Widget_DifficultyTree_C_IsTreeCapped");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, Capped) == 0x000000, "Member 'Widget_DifficultyTree_C_IsTreeCapped::Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, Temp_int_Array_Index_Variable) == 0x000004, "Member 'Widget_DifficultyTree_C_IsTreeCapped::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Widget_DifficultyTree_C_IsTreeCapped::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_GetAllNodes_AllNodes) == 0x000010, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_GetAllNodes_AllNodes' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Array_Get_Item) == 0x000020, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_IsCapped_Capped) == 0x00002E, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_IsCapped_Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_IsTreeCapped, CallFunc_Not_PreBool_ReturnValue_1) == 0x00002F, "Member 'Widget_DifficultyTree_C_IsTreeCapped::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ResetNodes
// 0x0048 (0x0048 - 0x0000)
struct Widget_DifficultyTree_C_ResetNodes final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget_DifficultyNode_C*>       CallFunc_GetAllNodes_AllNodes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget_DifficultyNode_C*               CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_ResetNodes) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_ResetNodes");
static_assert(sizeof(Widget_DifficultyTree_C_ResetNodes) == 0x000048, "Wrong size on Widget_DifficultyTree_C_ResetNodes");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, Temp_int_Array_Index_Variable) == 0x000000, "Member 'Widget_DifficultyTree_C_ResetNodes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'Widget_DifficultyTree_C_ResetNodes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_GetAllNodes_AllNodes) == 0x000010, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_GetAllNodes_AllNodes' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_Array_Get_Item) == 0x000020, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000030, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000038, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_ResetNodes, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'Widget_DifficultyTree_C_ResetNodes::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.Update Enemy and Boss Bonuses
// 0x03F8 (0x03F8 - 0x0000)
struct Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses final
{
public:
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0000(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0010(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0058(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00A0(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00B0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C0(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00D0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00E0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0128(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0170(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_3;                          // 0x0180(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0190(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_3;                     // 0x01A0(0x0010)()
	int32                                         CallFunc_GetNumTotalPointsAssigned_TotalPointsAssigned; // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x01E8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_4;                          // 0x0230(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_4;                     // 0x0240(0x0010)()
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0280(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_6;            // 0x02C8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_5;                          // 0x0310(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_6;                          // 0x0320(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_5;                     // 0x0330(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_6;                     // 0x0340(0x0010)()
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_7;            // 0x0380(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_7;                          // 0x03C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_7;                     // 0x03D8(0x0010)()
	float                                         CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast; // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_1; // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_2; // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_3; // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses");
static_assert(sizeof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses) == 0x0003F8, "Wrong size on Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000000, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData) == 0x000010, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_1) == 0x000058, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array) == 0x0000A0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_1) == 0x0000B0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue) == 0x0000C0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_1) == 0x0000D0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000E0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_3) == 0x000128, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_2) == 0x000170, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_3) == 0x000180, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_2) == 0x000190, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_3) == 0x0001A0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_GetNumTotalPointsAssigned_TotalPointsAssigned) == 0x0001B0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_GetNumTotalPointsAssigned_TotalPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_GetRGameState_ReturnValue) == 0x0001B8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Greater_IntInt_ReturnValue) == 0x0001C0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_IsValid_ReturnValue) == 0x0001C1, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0001C8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001D0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0001D8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001E0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_4) == 0x0001E8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_4) == 0x000230, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_4) == 0x000240, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000250, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000258, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000260, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000268, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000270, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000278, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_5) == 0x000280, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_6) == 0x0002C8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_6' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_5) == 0x000310, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_6) == 0x000320, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_5) == 0x000330, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_6) == 0x000340, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000350, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000358, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000360, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000368, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000370, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000378, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeStruct_FormatArgumentData_7) == 0x000380, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeStruct_FormatArgumentData_7' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, K2Node_MakeArray_Array_7) == 0x0003C8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::K2Node_MakeArray_Array_7' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_Format_ReturnValue_7) == 0x0003D8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_Format_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast) == 0x0003E8, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_1) == 0x0003EC, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_2) == 0x0003F0, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses, CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_3) == 0x0003F4, "Member 'Widget_DifficultyTree_C_Update_Enemy_and_Boss_Bonuses::CallFunc_AddMutableFloatCoefficient_Val_ImplicitCast_3' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateDifficultyPointsText
// 0x0088 (0x0088 - 0x0000)
struct Widget_DifficultyTree_C_UpdateDifficultyPointsText final
{
public:
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0010)()
};
static_assert(alignof(Widget_DifficultyTree_C_UpdateDifficultyPointsText) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_UpdateDifficultyPointsText");
static_assert(sizeof(Widget_DifficultyTree_C_UpdateDifficultyPointsText) == 0x000088, "Wrong size on Widget_DifficultyTree_C_UpdateDifficultyPointsText");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_GetOwningPlayer_ReturnValue) == 0x000000, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_SelectInt_ReturnValue) == 0x000014, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, K2Node_MakeArray_Array) == 0x000068, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateDifficultyPointsText, CallFunc_Format_ReturnValue) == 0x000078, "Member 'Widget_DifficultyTree_C_UpdateDifficultyPointsText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateInfiniteNodeStatus
// 0x0007 (0x0007 - 0x0000)
struct Widget_DifficultyTree_C_UpdateInfiniteNodeStatus final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTreeCapped_Capped;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTreeCapped_Capped_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus) == 0x000001, "Wrong alignment on Widget_DifficultyTree_C_UpdateInfiniteNodeStatus");
static_assert(sizeof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus) == 0x000007, "Wrong size on Widget_DifficultyTree_C_UpdateInfiniteNodeStatus");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, Temp_bool_Variable) == 0x000000, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, Temp_byte_Variable) == 0x000001, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, Temp_byte_Variable_1) == 0x000002, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, CallFunc_IsTreeCapped_Capped) == 0x000003, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::CallFunc_IsTreeCapped_Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, K2Node_Select_Default) == 0x000004, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, CallFunc_IsServer_ReturnValue) == 0x000005, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateInfiniteNodeStatus, CallFunc_IsTreeCapped_Capped_1) == 0x000006, "Member 'Widget_DifficultyTree_C_UpdateInfiniteNodeStatus::CallFunc_IsTreeCapped_Capped_1' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateNodeStates
// 0x0038 (0x0038 - 0x0000)
struct Widget_DifficultyTree_C_UpdateNodeStates final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget_DifficultyNode_C*>       CallFunc_GetAllNodes_AllNodes;                     // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyNode_C*               CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_UpdateNodeStates) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_UpdateNodeStates");
static_assert(sizeof(Widget_DifficultyTree_C_UpdateNodeStates) == 0x000038, "Wrong size on Widget_DifficultyTree_C_UpdateNodeStates");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, Temp_int_Array_Index_Variable) == 0x000000, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, CallFunc_GetAllNodes_AllNodes) == 0x000010, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::CallFunc_GetAllNodes_AllNodes' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, CallFunc_Array_Get_Item) == 0x000028, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_UpdateNodeStates, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'Widget_DifficultyTree_C_UpdateNodeStates::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BP_GetDesiredFocusTarget
// 0x0020 (0x0020 - 0x0000)
struct Widget_DifficultyTree_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget_DifficultyNode_C*               K2Node_DynamicCast_AsWidget_Difficulty_Node;       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on Widget_DifficultyTree_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget) == 0x000020, "Wrong size on Widget_DifficultyTree_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'Widget_DifficultyTree_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget, CallFunc_GetChildAt_ReturnValue) == 0x000008, "Member 'Widget_DifficultyTree_C_BP_GetDesiredFocusTarget::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget, K2Node_DynamicCast_AsWidget_Difficulty_Node) == 0x000010, "Member 'Widget_DifficultyTree_C_BP_GetDesiredFocusTarget::K2Node_DynamicCast_AsWidget_Difficulty_Node' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Widget_DifficultyTree_C_BP_GetDesiredFocusTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyTree_C_BP_GetDesiredFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'Widget_DifficultyTree_C_BP_GetDesiredFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

