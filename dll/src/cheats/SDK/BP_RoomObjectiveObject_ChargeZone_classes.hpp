#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RoomObjectiveObject_ChargeZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RoomObjectiveObject_ChargeZone.BP_RoomObjectiveObject_ChargeZone_C
// 0x0058 (0x0398 - 0x0340)
class ABP_RoomObjectiveObject_ChargeZone_C final : public ARRoomObjectiveObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere1;                                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RangeIndicatorMesh;                                // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RangeIndicatorMesh1;                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MSS_EscortObjective_Movement_Loop;                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximitySphereComponent*       DMActorProximitySphere;                            // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentProgressionAmountBP;                        // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TickInterval;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BroadcastOnRoomObjectiveObjectUpdated_Multicast(const float AmountProgressed, const float AmountRequired);
	void ExecuteUbergraph_BP_RoomObjectiveObject_ChargeZone(int32 EntryPoint);
	void GetNumPlayersInProximity(int32* NumPlayers);
	void GetPlayerPawnsInProximity(TArray<class ARPlayerPawn*>* PlayerPawns);
	void GetProgressionAmountPerTick(double* ProgressionAmountPerTick);
	void GetRequiredProgressionAmount(double* Value);
	void OnIsObjectiveCompletedReplicated();
	void OnSegmentCompleted_Event(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void PlayObjectiveCompleteFX();
	void ProximityTick();
	void ReceiveBeginPlay();
	void UpdateSFX();

	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RoomObjectiveObject_ChargeZone_C">();
	}
	static class ABP_RoomObjectiveObject_ChargeZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RoomObjectiveObject_ChargeZone_C>();
	}
};
static_assert(alignof(ABP_RoomObjectiveObject_ChargeZone_C) == 0x000008, "Wrong alignment on ABP_RoomObjectiveObject_ChargeZone_C");
static_assert(sizeof(ABP_RoomObjectiveObject_ChargeZone_C) == 0x000398, "Wrong size on ABP_RoomObjectiveObject_ChargeZone_C");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, UberGraphFrame) == 0x000340, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, Sphere1) == 0x000348, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, RangeIndicatorMesh) == 0x000350, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::RangeIndicatorMesh' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, RangeIndicatorMesh1) == 0x000358, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::RangeIndicatorMesh1' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, MSS_EscortObjective_Movement_Loop) == 0x000360, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::MSS_EscortObjective_Movement_Loop' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, Scene) == 0x000368, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, PointLight) == 0x000370, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, DMActorProximitySphere) == 0x000378, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::DMActorProximitySphere' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, CurrentProgressionAmountBP) == 0x000380, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::CurrentProgressionAmountBP' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, TickInterval) == 0x000388, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::TickInterval' has a wrong offset!");
static_assert(offsetof(ABP_RoomObjectiveObject_ChargeZone_C, Timer) == 0x000390, "Member 'ABP_RoomObjectiveObject_ChargeZone_C::Timer' has a wrong offset!");

}

