#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioGameplay

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AudioExtensions_structs.hpp"


namespace SDK
{

// Class AudioGameplay.AudioAssetUserData
// 0x0020 (0x0048 - 0x0028)
class UAudioAssetUserData final : public UAssetUserData
{
public:
	struct FGameplayTagContainer                  MetadataTags;                                      // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioAssetUserData">();
	}
	static class UAudioAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioAssetUserData>();
	}
};
static_assert(alignof(UAudioAssetUserData) == 0x000008, "Wrong alignment on UAudioAssetUserData");
static_assert(sizeof(UAudioAssetUserData) == 0x000048, "Wrong size on UAudioAssetUserData");
static_assert(offsetof(UAudioAssetUserData, MetadataTags) == 0x000028, "Member 'UAudioAssetUserData::MetadataTags' has a wrong offset!");

// Class AudioGameplay.AudioComponentGroupExtension
// 0x0000 (0x0000 - 0x0000)
class IAudioComponentGroupExtension final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioComponentGroupExtension">();
	}
	static class IAudioComponentGroupExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioComponentGroupExtension>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IAudioComponentGroupExtension) == 0x000001, "Wrong alignment on IAudioComponentGroupExtension");
static_assert(sizeof(IAudioComponentGroupExtension) == 0x000001, "Wrong size on IAudioComponentGroupExtension");

// Class AudioGameplay.AudioGameplayCondition
// 0x0000 (0x0000 - 0x0000)
class IAudioGameplayCondition final
{
public:
	bool ConditionMet() const;
	bool ConditionMet_Position(const struct FVector& Position) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGameplayCondition">();
	}
	static class IAudioGameplayCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioGameplayCondition>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IAudioGameplayCondition) == 0x000001, "Wrong alignment on IAudioGameplayCondition");
static_assert(sizeof(IAudioGameplayCondition) == 0x000001, "Wrong size on IAudioGameplayCondition");

// Class AudioGameplay.AudioGameplayVolumeInteraction
// 0x0000 (0x0000 - 0x0000)
class IAudioGameplayVolumeInteraction final
{
public:
	void OnListenerEnter();
	void OnListenerExit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGameplayVolumeInteraction">();
	}
	static class IAudioGameplayVolumeInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAudioGameplayVolumeInteraction>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IAudioGameplayVolumeInteraction) == 0x000001, "Wrong alignment on IAudioGameplayVolumeInteraction");
static_assert(sizeof(IAudioGameplayVolumeInteraction) == 0x000001, "Wrong size on IAudioGameplayVolumeInteraction");

// Class AudioGameplay.SoundHandleSubsystem
// 0x00B0 (0x00E0 - 0x0030)
class USoundHandleSubsystem final : public UAudioEngineSubsystem
{
public:
	uint8                                         Pad_30[0xB0];                                      // 0x0030(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundHandleSubsystem">();
	}
	static class USoundHandleSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundHandleSubsystem>();
	}
};
static_assert(alignof(USoundHandleSubsystem) == 0x000008, "Wrong alignment on USoundHandleSubsystem");
static_assert(sizeof(USoundHandleSubsystem) == 0x0000E0, "Wrong size on USoundHandleSubsystem");

// Class AudioGameplay.AudioComponentGroup
// 0x01B0 (0x03E0 - 0x0230)
class UAudioComponentGroup final : public USceneComponent
{
public:
	uint8                                         Pad_230[0x8];                                      // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnStopped;                                         // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnKilled;                                          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnVirtualized;                                     // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnvirtualized;                                   // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UAudioComponent*>                Components;                                        // 0x0278(0x0010)(Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FAudioParameter>                ParamsToSet;                                       // 0x0288(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAudioParameter>                PersistentParams;                                  // 0x0298(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<TScriptInterface<class IAudioComponentGroupExtension>> Extensions;                        // 0x02A8(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B8[0x128];                                    // 0x02B8(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAudioComponentGroup* StaticGetOrCreateComponentGroup(class AActor* Actor);

	void AddExtension(TScriptInterface<class IAudioComponentGroupExtension> NewExtension);
	void AddExternalComponent(class UAudioComponent* ComponentToAdd);
	void BroadcastEvent(const class FName EventName);
	void BroadcastKill();
	void BroadcastStopAll();
	void DisableVirtualization();
	void EnableVirtualization();
	void RemoveExtension(TScriptInterface<class IAudioComponentGroupExtension> NewExtension);
	void RemoveExternalComponent(class UAudioComponent* ComponentToRemove);
	void SetLowPassFilter(const float InFrequency);
	void SetPitchMultiplier(const float InPitch);
	void SetVolumeMultiplier(const float InVolume);
	void StopSound(class USoundBase* Sound, const float FadeTime);
	void SubscribeToBool(const class FName ParamName, TDelegate<void(const bool ParamValue)> Delegate);
	void SubscribeToEvent(const class FName EventName, TDelegate<void(const class FName& EventName)> Delegate);
	void SubscribeToStringParam(const class FName ParamName, TDelegate<void(const class FString& Value)> Delegate);
	void UnsubscribeObject(const class UObject* Object);

	bool GetBoolParamValue(const class FName ParamName) const;
	float GetFloatParamValue(const class FName ParamName) const;
	class FString GetStringParamValue(const class FName ParamName) const;
	bool IsPlayingAny() const;
	bool IsVirtualized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioComponentGroup">();
	}
	static class UAudioComponentGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioComponentGroup>();
	}
};
static_assert(alignof(UAudioComponentGroup) == 0x000010, "Wrong alignment on UAudioComponentGroup");
static_assert(sizeof(UAudioComponentGroup) == 0x0003E0, "Wrong size on UAudioComponentGroup");
static_assert(offsetof(UAudioComponentGroup, OnStopped) == 0x000238, "Member 'UAudioComponentGroup::OnStopped' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, OnKilled) == 0x000248, "Member 'UAudioComponentGroup::OnKilled' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, OnVirtualized) == 0x000258, "Member 'UAudioComponentGroup::OnVirtualized' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, OnUnvirtualized) == 0x000268, "Member 'UAudioComponentGroup::OnUnvirtualized' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, Components) == 0x000278, "Member 'UAudioComponentGroup::Components' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, ParamsToSet) == 0x000288, "Member 'UAudioComponentGroup::ParamsToSet' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, PersistentParams) == 0x000298, "Member 'UAudioComponentGroup::PersistentParams' has a wrong offset!");
static_assert(offsetof(UAudioComponentGroup, Extensions) == 0x0002A8, "Member 'UAudioComponentGroup::Extensions' has a wrong offset!");

// Class AudioGameplay.AudioGameplayComponent
// 0x0008 (0x00A8 - 0x00A0)
class UAudioGameplayComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGameplayComponent">();
	}
	static class UAudioGameplayComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioGameplayComponent>();
	}
};
static_assert(alignof(UAudioGameplayComponent) == 0x000008, "Wrong alignment on UAudioGameplayComponent");
static_assert(sizeof(UAudioGameplayComponent) == 0x0000A8, "Wrong size on UAudioGameplayComponent");

// Class AudioGameplay.AudioRequirementPreset
// 0x0048 (0x0078 - 0x0030)
class UAudioRequirementPreset final : public UDataAsset
{
public:
	struct FGameplayTagQuery                      Query;                                             // 0x0030(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioRequirementPreset">();
	}
	static class UAudioRequirementPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioRequirementPreset>();
	}
};
static_assert(alignof(UAudioRequirementPreset) == 0x000008, "Wrong alignment on UAudioRequirementPreset");
static_assert(sizeof(UAudioRequirementPreset) == 0x000078, "Wrong size on UAudioRequirementPreset");
static_assert(offsetof(UAudioRequirementPreset, Query) == 0x000030, "Member 'UAudioRequirementPreset::Query' has a wrong offset!");

// Class AudioGameplay.AudioGameplayTagCacheSubsystem
// 0x0050 (0x0080 - 0x0030)
class UAudioGameplayTagCacheSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGameplayTagCacheSubsystem">();
	}
	static class UAudioGameplayTagCacheSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioGameplayTagCacheSubsystem>();
	}
};
static_assert(alignof(UAudioGameplayTagCacheSubsystem) == 0x000008, "Wrong alignment on UAudioGameplayTagCacheSubsystem");
static_assert(sizeof(UAudioGameplayTagCacheSubsystem) == 0x000080, "Wrong size on UAudioGameplayTagCacheSubsystem");

// Class AudioGameplay.AudioParameterComponent
// 0x0030 (0x00D8 - 0x00A8)
class UAudioParameterComponent final : public UAudioGameplayComponent
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UAudioComponent>> ActiveComponents;                                  // 0x00B8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<struct FAudioParameter>                Parameters;                                        // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	const TArray<struct FAudioParameter> GetParameters() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioParameterComponent">();
	}
	static class UAudioParameterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioParameterComponent>();
	}
};
static_assert(alignof(UAudioParameterComponent) == 0x000008, "Wrong alignment on UAudioParameterComponent");
static_assert(sizeof(UAudioParameterComponent) == 0x0000D8, "Wrong size on UAudioParameterComponent");
static_assert(offsetof(UAudioParameterComponent, ActiveComponents) == 0x0000B8, "Member 'UAudioParameterComponent::ActiveComponents' has a wrong offset!");
static_assert(offsetof(UAudioParameterComponent, Parameters) == 0x0000C8, "Member 'UAudioParameterComponent::Parameters' has a wrong offset!");

}

