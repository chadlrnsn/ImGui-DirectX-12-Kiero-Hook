#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightSource_Base

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_LightSource_Base.BP_LightSource_Base_C.LerpOnOffState
// 0x0048 (0x0048 - 0x0000)
struct BP_LightSource_Base_C_LerpOnOffState final
{
public:
	double                                        Alpha;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightSource_Base_C_LerpOnOffState) == 0x000008, "Wrong alignment on BP_LightSource_Base_C_LerpOnOffState");
static_assert(sizeof(BP_LightSource_Base_C_LerpOnOffState) == 0x000048, "Wrong size on BP_LightSource_Base_C_LerpOnOffState");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, Alpha) == 0x000000, "Member 'BP_LightSource_Base_C_LerpOnOffState::Alpha' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_LightSource_Base_C_LerpOnOffState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_LightSource_Base_C_LerpOnOffState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Lerp_ReturnValue) == 0x000030, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_LerpOnOffState, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000040, "Member 'BP_LightSource_Base_C_LerpOnOffState::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");

// Function BP_LightSource_Base.BP_LightSource_Base_C.UpdateVolumetricScatterIntensity
// 0x0038 (0x0038 - 0x0000)
struct BP_LightSource_Base_C_UpdateVolumetricScatterIntensity final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity) == 0x000008, "Wrong alignment on BP_LightSource_Base_C_UpdateVolumetricScatterIntensity");
static_assert(sizeof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity) == 0x000038, "Wrong size on BP_LightSource_Base_C_UpdateVolumetricScatterIntensity");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UpdateVolumetricScatterIntensity, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x000030, "Member 'BP_LightSource_Base_C_UpdateVolumetricScatterIntensity::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");

// Function BP_LightSource_Base.BP_LightSource_Base_C.UserConstructionScript
// 0x0050 (0x0050 - 0x0000)
struct BP_LightSource_Base_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightComponent*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULightComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Add_NewItem_ImplicitCast;           // 0x0040(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Add_NewItem_ImplicitCast_1;         // 0x0048(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LightSource_Base_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_LightSource_Base_C_UserConstructionScript");
static_assert(sizeof(BP_LightSource_Base_C_UserConstructionScript) == 0x000050, "Wrong size on BP_LightSource_Base_C_UserConstructionScript");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_LightSource_Base_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_LightSource_Base_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x000024, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000038, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Add_NewItem_ImplicitCast) == 0x000040, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Add_NewItem_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_LightSource_Base_C_UserConstructionScript, CallFunc_Array_Add_NewItem_ImplicitCast_1) == 0x000048, "Member 'BP_LightSource_Base_C_UserConstructionScript::CallFunc_Array_Add_NewItem_ImplicitCast_1' has a wrong offset!");

}

