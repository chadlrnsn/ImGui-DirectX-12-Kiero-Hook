#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_SkillTreeNode2

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_SkillTreeNode2.Widget_SkillTreeNode2_C
// 0x00F0 (0x03C0 - 0x02D0)
class UWidget_SkillTreeNode2_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Capped_Transition;                                 // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button;                                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CelebrationShockwave;                              // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconBackgrounShadow;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RadialFill;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Tiers;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SelectedGlyph_C*                Widget_SelectedGlyph;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bBlockGamepadFocus;                                // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLocked;                                         // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushOutlineSettings             DefaultButtonOutline;                              // 0x0320(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DefaultButtonTint;                                 // 0x0360(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_BaseTooltip_C*                  Tooltip;                                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget_SkillTree2_C*                   WidgetSkillTreeRef;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class URMutatorPrimaryAsset>   SoftFixedMutatorPA;                                // 0x0390(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	bool                                          bInputHeld;                                        // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Widget_SkillTreeNode2_Button_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Widget_SkillTreeNode2_Button_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();
	void BP_OnDeactivated_1();
	void CanAffordSkillTreeNodeIncrease(bool* CanAfford);
	void Construct();
	void DespecNodeMutator();
	void DestroyTooltip();
	void Destruct();
	void ExecuteUbergraph_Widget_SkillTreeNode2(int32 EntryPoint);
	void GetCurrentTierDescription(class FText* Description);
	void GetMutatorPA(class URMutatorPrimaryAsset** MutatorPA);
	void GetMutatorPrimaryAssetSkillTreeIdName(class FName* Name_0);
	void GetNextTierDescription(class FText* Header, class FText* Description);
	void GetNumRanks(class URMutatorPrimaryAsset* RMutatorPrimaryAsset, int32* NumRanks);
	void GetPointsProgress(int32* AssignedPoints, int32* TotalPoints, double* Ratio);
	void GetRequiredSkillTreePoints(int32* Result);
	void GetRequiredSkillTreePointsToMax(int32* Result);
	void GetTooltipSize(class UWidget_BaseTooltip_C* ToolTipWidget_0, struct FVector2D* Values);
	class UWidget* GetToolTipWidget();
	void IsAssignedSkillPointsBetweenMinMax(bool* BetweenMinMax);
	void IsCapped(bool* IsCapped_0);
	void IsNodeLocked(bool* IsLocked);
	struct FEventReply On_Icon_MouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnMutatorChangedRank_Event(int32 NewRank, class URMutatorPrimaryAsset* MutatorPrimaryAsset);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void RefreshSkillTreeMutator();
	void ResetButtonVisuals();
	void SetCappedButtonVisuals(bool SkipAnimation);
	void SetNodeLocked(bool Value);
	void SetNodeMutatorLevel();
	void SetNodeProgress();
	void SimulateClick();
	void UpdateGamepadFocus();
	void UpdateTooltipInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_SkillTreeNode2_C">();
	}
	static class UWidget_SkillTreeNode2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_SkillTreeNode2_C>();
	}
};
static_assert(alignof(UWidget_SkillTreeNode2_C) == 0x000010, "Wrong alignment on UWidget_SkillTreeNode2_C");
static_assert(sizeof(UWidget_SkillTreeNode2_C) == 0x0003C0, "Wrong size on UWidget_SkillTreeNode2_C");
static_assert(offsetof(UWidget_SkillTreeNode2_C, UberGraphFrame) == 0x0002D0, "Member 'UWidget_SkillTreeNode2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Capped_Transition) == 0x0002D8, "Member 'UWidget_SkillTreeNode2_C::Capped_Transition' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Button) == 0x0002E0, "Member 'UWidget_SkillTreeNode2_C::Button' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, CelebrationShockwave) == 0x0002E8, "Member 'UWidget_SkillTreeNode2_C::CelebrationShockwave' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Icon) == 0x0002F0, "Member 'UWidget_SkillTreeNode2_C::Icon' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, IconBackgrounShadow) == 0x0002F8, "Member 'UWidget_SkillTreeNode2_C::IconBackgrounShadow' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, RadialFill) == 0x000300, "Member 'UWidget_SkillTreeNode2_C::RadialFill' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, TextBlock_Tiers) == 0x000308, "Member 'UWidget_SkillTreeNode2_C::TextBlock_Tiers' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Widget_SelectedGlyph) == 0x000310, "Member 'UWidget_SkillTreeNode2_C::Widget_SelectedGlyph' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, bBlockGamepadFocus) == 0x000318, "Member 'UWidget_SkillTreeNode2_C::bBlockGamepadFocus' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, bIsLocked) == 0x000319, "Member 'UWidget_SkillTreeNode2_C::bIsLocked' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, DefaultButtonOutline) == 0x000320, "Member 'UWidget_SkillTreeNode2_C::DefaultButtonOutline' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, DefaultButtonTint) == 0x000360, "Member 'UWidget_SkillTreeNode2_C::DefaultButtonTint' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Tooltip) == 0x000378, "Member 'UWidget_SkillTreeNode2_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, WidgetSkillTreeRef) == 0x000380, "Member 'UWidget_SkillTreeNode2_C::WidgetSkillTreeRef' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, Row) == 0x000388, "Member 'UWidget_SkillTreeNode2_C::Row' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, SoftFixedMutatorPA) == 0x000390, "Member 'UWidget_SkillTreeNode2_C::SoftFixedMutatorPA' has a wrong offset!");
static_assert(offsetof(UWidget_SkillTreeNode2_C, bInputHeld) == 0x0003B8, "Member 'UWidget_SkillTreeNode2_C::bInputHeld' has a wrong offset!");

}

