#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SM_Human_Light_Floodlight_Base_Blueprint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SM_Human_Light_Floodlight_Base_Blueprint.SM_Human_Light_Floodlight_Base_Blueprint_C.ActivateLight
// 0x0001 (0x0001 - 0x0000)
struct SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight) == 0x000001, "Wrong alignment on SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight");
static_assert(sizeof(SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight) == 0x000001, "Wrong size on SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight, Active) == 0x000000, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ActivateLight::Active' has a wrong offset!");

// Function SM_Human_Light_Floodlight_Base_Blueprint.SM_Human_Light_Floodlight_Base_Blueprint_C.ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint
// 0x03A8 (0x03A8 - 0x0000)
struct SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Active;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Target_location_World;          // 0x0008(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0078(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01A8(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x02A8(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint) == 0x000008, "Wrong alignment on SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint");
static_assert(sizeof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint) == 0x0003A8, "Wrong size on SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, EntryPoint) == 0x000000, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::EntryPoint' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, K2Node_CustomEvent_Active) == 0x000004, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::K2Node_CustomEvent_Active' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, K2Node_CustomEvent_Target_location_World) == 0x000008, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::K2Node_CustomEvent_Target_location_World' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_FindLookAtRotation_ReturnValue) == 0x000038, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_MakeRotator_ReturnValue) == 0x000060, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000078, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_VLerp_ReturnValue) == 0x000178, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_MakeRotator_ReturnValue_1) == 0x000190, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001A8, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0002A8, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function SM_Human_Light_Floodlight_Base_Blueprint.SM_Human_Light_Floodlight_Base_Blueprint_C.UpdateTarget
// 0x0018 (0x0018 - 0x0000)
struct SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget final
{
public:
	struct FVector                                Target_location_World;                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget) == 0x000008, "Wrong alignment on SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget");
static_assert(sizeof(SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget) == 0x000018, "Wrong size on SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget, Target_location_World) == 0x000000, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_UpdateTarget::Target_location_World' has a wrong offset!");

// Function SM_Human_Light_Floodlight_Base_Blueprint.SM_Human_Light_Floodlight_Base_Blueprint_C.UserConstructionScript
// 0x0080 (0x0080 - 0x0000)
struct SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript) == 0x000010, "Wrong alignment on SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript");
static_assert(sizeof(SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript) == 0x000080, "Wrong size on SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript, CallFunc_TransformLocation_ReturnValue) == 0x000060, "Member 'SM_Human_Light_Floodlight_Base_Blueprint_C_UserConstructionScript::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");

}

