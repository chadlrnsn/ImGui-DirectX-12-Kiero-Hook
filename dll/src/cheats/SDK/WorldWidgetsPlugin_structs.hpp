#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WorldWidgetsPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum WorldWidgetsPlugin.EClampType
// NumValues: 0x0004
enum class EClampType : uint8
{
	ENOClamp                                 = 0,
	ESoftClamp                               = 1,
	EHardClamp                               = 2,
	EClampType_MAX                           = 3,
};

// Enum WorldWidgetsPlugin.EClampProjection
// NumValues: 0x0003
enum class EClampProjection : uint8
{
	ELockToEdge                              = 0,
	EFollowCamera                            = 1,
	EClampProjection_MAX                     = 2,
};

// Enum WorldWidgetsPlugin.EFadeType
// NumValues: 0x0005
enum class EFadeType : uint8
{
	ENoFade                                  = 0,
	ELinear                                  = 1,
	EExponential                             = 2,
	EQuadratic                               = 3,
	EFadeType_MAX                            = 4,
};

// ScriptStruct WorldWidgetsPlugin.WorldWidgetInfo
// 0x0130 (0x0130 - 0x0000)
struct FWorldWidgetInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutoDestroy;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         autoDestroyTime;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHitTestVisibleWidget;                           // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClampType                                    lockScreenType;                                    // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClampProjection                              lockProjectionType;                                // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockWidgetFromCenter;                             // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBoxIntersect;                                  // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                centerSize;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              edgePadding;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                worldOffset;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              customWidgetSize;                                  // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleWidgetWithDistance;                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScalingInterpSpeed;                                // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampWidgetDistanceScaling;                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              distanceScaleClampMinMax;                          // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoDistanceCheckAgainstPawn;                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         maxWidgetDistance;                                 // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFadeType                                     widgetFadeType;                                    // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideBehindOtherActors;                            // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HideWidgetCheckScale;                              // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMinMaxPriority;                                // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinMaxPriority;                                    // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x50];                                      // 0x00E0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWorldWidgetInfo) == 0x000008, "Wrong alignment on FWorldWidgetInfo");
static_assert(sizeof(FWorldWidgetInfo) == 0x000130, "Wrong size on FWorldWidgetInfo");
static_assert(offsetof(FWorldWidgetInfo, bAutoDestroy) == 0x000030, "Member 'FWorldWidgetInfo::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, autoDestroyTime) == 0x000034, "Member 'FWorldWidgetInfo::autoDestroyTime' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bHidden) == 0x000038, "Member 'FWorldWidgetInfo::bHidden' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bIsHitTestVisibleWidget) == 0x000039, "Member 'FWorldWidgetInfo::bIsHitTestVisibleWidget' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, lockScreenType) == 0x00003A, "Member 'FWorldWidgetInfo::lockScreenType' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, lockProjectionType) == 0x00003B, "Member 'FWorldWidgetInfo::lockProjectionType' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bLockWidgetFromCenter) == 0x00003C, "Member 'FWorldWidgetInfo::bLockWidgetFromCenter' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bUseBoxIntersect) == 0x00003D, "Member 'FWorldWidgetInfo::bUseBoxIntersect' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, centerSize) == 0x000040, "Member 'FWorldWidgetInfo::centerSize' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, edgePadding) == 0x000050, "Member 'FWorldWidgetInfo::edgePadding' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, worldOffset) == 0x000060, "Member 'FWorldWidgetInfo::worldOffset' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, Alignment) == 0x000078, "Member 'FWorldWidgetInfo::Alignment' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, customWidgetSize) == 0x000088, "Member 'FWorldWidgetInfo::customWidgetSize' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bScaleWidgetWithDistance) == 0x000098, "Member 'FWorldWidgetInfo::bScaleWidgetWithDistance' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, ScalingInterpSpeed) == 0x00009C, "Member 'FWorldWidgetInfo::ScalingInterpSpeed' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bClampWidgetDistanceScaling) == 0x0000A0, "Member 'FWorldWidgetInfo::bClampWidgetDistanceScaling' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, distanceScaleClampMinMax) == 0x0000A8, "Member 'FWorldWidgetInfo::distanceScaleClampMinMax' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bDoDistanceCheckAgainstPawn) == 0x0000B8, "Member 'FWorldWidgetInfo::bDoDistanceCheckAgainstPawn' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, maxWidgetDistance) == 0x0000BC, "Member 'FWorldWidgetInfo::maxWidgetDistance' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, widgetFadeType) == 0x0000C0, "Member 'FWorldWidgetInfo::widgetFadeType' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bHideBehindOtherActors) == 0x0000C1, "Member 'FWorldWidgetInfo::bHideBehindOtherActors' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, HideWidgetCheckScale) == 0x0000C4, "Member 'FWorldWidgetInfo::HideWidgetCheckScale' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, Priority) == 0x0000C8, "Member 'FWorldWidgetInfo::Priority' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, bUseMinMaxPriority) == 0x0000CC, "Member 'FWorldWidgetInfo::bUseMinMaxPriority' has a wrong offset!");
static_assert(offsetof(FWorldWidgetInfo, MinMaxPriority) == 0x0000D0, "Member 'FWorldWidgetInfo::MinMaxPriority' has a wrong offset!");

}

