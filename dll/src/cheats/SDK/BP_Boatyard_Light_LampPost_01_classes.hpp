#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Boatyard_Light_LampPost_01

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Boatyard_Light_LampPost_01.BP_Boatyard_Light_LampPost_01_C
// 0x0030 (0x02D8 - 0x02A8)
class ABP_Boatyard_Light_LampPost_01_C final : public AActor
{
public:
	class UChildActorComponent*                   ChildActor;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight32_LightComponent1;                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lamp;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight32_LightComponent0;                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Post;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SharedRoot;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Boatyard_Light_LampPost_01_C">();
	}
	static class ABP_Boatyard_Light_LampPost_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Boatyard_Light_LampPost_01_C>();
	}
};
static_assert(alignof(ABP_Boatyard_Light_LampPost_01_C) == 0x000008, "Wrong alignment on ABP_Boatyard_Light_LampPost_01_C");
static_assert(sizeof(ABP_Boatyard_Light_LampPost_01_C) == 0x0002D8, "Wrong size on ABP_Boatyard_Light_LampPost_01_C");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, ChildActor) == 0x0002A8, "Member 'ABP_Boatyard_Light_LampPost_01_C::ChildActor' has a wrong offset!");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, PointLight32_LightComponent1) == 0x0002B0, "Member 'ABP_Boatyard_Light_LampPost_01_C::PointLight32_LightComponent1' has a wrong offset!");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, Lamp) == 0x0002B8, "Member 'ABP_Boatyard_Light_LampPost_01_C::Lamp' has a wrong offset!");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, PointLight32_LightComponent0) == 0x0002C0, "Member 'ABP_Boatyard_Light_LampPost_01_C::PointLight32_LightComponent0' has a wrong offset!");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, Post) == 0x0002C8, "Member 'ABP_Boatyard_Light_LampPost_01_C::Post' has a wrong offset!");
static_assert(offsetof(ABP_Boatyard_Light_LampPost_01_C, SharedRoot) == 0x0002D0, "Member 'ABP_Boatyard_Light_LampPost_01_C::SharedRoot' has a wrong offset!");

}

