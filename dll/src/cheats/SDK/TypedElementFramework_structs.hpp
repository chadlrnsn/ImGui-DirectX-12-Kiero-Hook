#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TypedElementFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum TypedElementFramework.FTypedElementAlertColumnType
// NumValues: 0x0003
enum class EFTypedElementAlertColumnType : uint8
{
	Error                                    = 0,
	Warning                                  = 1,
	MAX                                      = 2,
};

// Enum TypedElementFramework.ESCCModification
// NumValues: 0x0005
enum class ESCCModification : uint32
{
	Modified                                 = 0,
	Added                                    = 1,
	Removed                                  = 2,
	Conflicted                               = 3,
	ESCCModification_MAX                     = 4,
};

// ScriptStruct TypedElementFramework.EditorDataStorageColumn
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FEditorDataStorageColumn
{
};
#pragma pack(pop)
static_assert(alignof(FEditorDataStorageColumn) == 0x000001, "Wrong alignment on FEditorDataStorageColumn");
static_assert(sizeof(FEditorDataStorageColumn) == 0x000001, "Wrong size on FEditorDataStorageColumn");

// ScriptStruct TypedElementFramework.TypedElementUObjectColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTypedElementUObjectColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementUObjectColumn) == 0x000004, "Wrong alignment on FTypedElementUObjectColumn");
static_assert(sizeof(FTypedElementUObjectColumn) == 0x000008, "Wrong size on FTypedElementUObjectColumn");

// ScriptStruct TypedElementFramework.TypedElementPropertyBagPlaceholderTypeInfoColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTypedElementPropertyBagPlaceholderTypeInfoColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementPropertyBagPlaceholderTypeInfoColumn) == 0x000004, "Wrong alignment on FTypedElementPropertyBagPlaceholderTypeInfoColumn");
static_assert(sizeof(FTypedElementPropertyBagPlaceholderTypeInfoColumn) == 0x000008, "Wrong size on FTypedElementPropertyBagPlaceholderTypeInfoColumn");

// ScriptStruct TypedElementFramework.TypedElementU32IntValueCacheColumn
// 0x0004 (0x0004 - 0x0000)
struct FTypedElementU32IntValueCacheColumn final : public FEditorDataStorageColumn
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementU32IntValueCacheColumn) == 0x000004, "Wrong alignment on FTypedElementU32IntValueCacheColumn");
static_assert(sizeof(FTypedElementU32IntValueCacheColumn) == 0x000004, "Wrong size on FTypedElementU32IntValueCacheColumn");
static_assert(offsetof(FTypedElementU32IntValueCacheColumn, Value) == 0x000000, "Member 'FTypedElementU32IntValueCacheColumn::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.ScriptTypedElementHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FScriptTypedElementHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScriptTypedElementHandle) == 0x000008, "Wrong alignment on FScriptTypedElementHandle");
static_assert(sizeof(FScriptTypedElementHandle) == 0x000008, "Wrong size on FScriptTypedElementHandle");

// ScriptStruct TypedElementFramework.TypedElementAlertColumn
// 0x0020 (0x0020 - 0x0000)
struct FTypedElementAlertColumn final : public FEditorDataStorageColumn
{
public:
	class FText                                   Message;                                           // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EFTypedElementAlertColumnType                 AlertType;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementAlertColumn) == 0x000008, "Wrong alignment on FTypedElementAlertColumn");
static_assert(sizeof(FTypedElementAlertColumn) == 0x000020, "Wrong size on FTypedElementAlertColumn");
static_assert(offsetof(FTypedElementAlertColumn, Message) == 0x000000, "Member 'FTypedElementAlertColumn::Message' has a wrong offset!");
static_assert(offsetof(FTypedElementAlertColumn, AlertType) == 0x000018, "Member 'FTypedElementAlertColumn::AlertType' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementChildAlertColumn
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTypedElementChildAlertColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementChildAlertColumn) == 0x000008, "Wrong alignment on FTypedElementChildAlertColumn");
static_assert(sizeof(FTypedElementChildAlertColumn) == 0x000010, "Wrong size on FTypedElementChildAlertColumn");

// ScriptStruct TypedElementFramework.TypedElementAlertActionColumn
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x10) FTypedElementAlertActionColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementAlertActionColumn) == 0x000010, "Wrong alignment on FTypedElementAlertActionColumn");
static_assert(sizeof(FTypedElementAlertActionColumn) == 0x000040, "Wrong size on FTypedElementAlertActionColumn");

// ScriptStruct TypedElementFramework.EditorDataStorageTag
// 0x0001 (0x0001 - 0x0000)
struct FEditorDataStorageTag
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEditorDataStorageTag) == 0x000001, "Wrong alignment on FEditorDataStorageTag");
static_assert(sizeof(FEditorDataStorageTag) == 0x000001, "Wrong size on FEditorDataStorageTag");

// ScriptStruct TypedElementFramework.TypedElementUObjectIdColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementUObjectIdColumn final : public FEditorDataStorageColumn
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SerialNumber;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementUObjectIdColumn) == 0x000004, "Wrong alignment on FTypedElementUObjectIdColumn");
static_assert(sizeof(FTypedElementUObjectIdColumn) == 0x000008, "Wrong size on FTypedElementUObjectIdColumn");
static_assert(offsetof(FTypedElementUObjectIdColumn, ID) == 0x000000, "Member 'FTypedElementUObjectIdColumn::ID' has a wrong offset!");
static_assert(offsetof(FTypedElementUObjectIdColumn, SerialNumber) == 0x000004, "Member 'FTypedElementUObjectIdColumn::SerialNumber' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementExternalObjectColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTypedElementExternalObjectColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementExternalObjectColumn) == 0x000008, "Wrong alignment on FTypedElementExternalObjectColumn");
static_assert(sizeof(FTypedElementExternalObjectColumn) == 0x000008, "Wrong size on FTypedElementExternalObjectColumn");

// ScriptStruct TypedElementFramework.TypedElementClassDefaultObjectTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementClassDefaultObjectTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementClassDefaultObjectTag) == 0x000001, "Wrong alignment on FTypedElementClassDefaultObjectTag");
static_assert(sizeof(FTypedElementClassDefaultObjectTag) == 0x000001, "Wrong size on FTypedElementClassDefaultObjectTag");

// ScriptStruct TypedElementFramework.TypedElementActorTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementActorTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementActorTag) == 0x000001, "Wrong alignment on FTypedElementActorTag");
static_assert(sizeof(FTypedElementActorTag) == 0x000001, "Wrong size on FTypedElementActorTag");

// ScriptStruct TypedElementFramework.TypedElementWorldColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTypedElementWorldColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementWorldColumn) == 0x000004, "Wrong alignment on FTypedElementWorldColumn");
static_assert(sizeof(FTypedElementWorldColumn) == 0x000008, "Wrong size on FTypedElementWorldColumn");

// ScriptStruct TypedElementFramework.TypedElementPropertyBagPlaceholderTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementPropertyBagPlaceholderTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementPropertyBagPlaceholderTag) == 0x000001, "Wrong alignment on FTypedElementPropertyBagPlaceholderTag");
static_assert(sizeof(FTypedElementPropertyBagPlaceholderTag) == 0x000001, "Wrong size on FTypedElementPropertyBagPlaceholderTag");

// ScriptStruct TypedElementFramework.TypedElementLoosePropertyTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementLoosePropertyTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementLoosePropertyTag) == 0x000001, "Wrong alignment on FTypedElementLoosePropertyTag");
static_assert(sizeof(FTypedElementLoosePropertyTag) == 0x000001, "Wrong size on FTypedElementLoosePropertyTag");

// ScriptStruct TypedElementFramework.Test_PingPongPrePhys
// 0x0008 (0x0008 - 0x0000)
struct FTest_PingPongPrePhys final : public FEditorDataStorageColumn
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTest_PingPongPrePhys) == 0x000008, "Wrong alignment on FTest_PingPongPrePhys");
static_assert(sizeof(FTest_PingPongPrePhys) == 0x000008, "Wrong size on FTest_PingPongPrePhys");
static_assert(offsetof(FTest_PingPongPrePhys, Value) == 0x000000, "Member 'FTest_PingPongPrePhys::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.Test_PingPongDurPhys
// 0x0008 (0x0008 - 0x0000)
struct FTest_PingPongDurPhys final : public FEditorDataStorageColumn
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTest_PingPongDurPhys) == 0x000008, "Wrong alignment on FTest_PingPongDurPhys");
static_assert(sizeof(FTest_PingPongDurPhys) == 0x000008, "Wrong size on FTest_PingPongDurPhys");
static_assert(offsetof(FTest_PingPongDurPhys, Value) == 0x000000, "Member 'FTest_PingPongDurPhys::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.Test_PingPongPostPhys
// 0x0008 (0x0008 - 0x0000)
struct FTest_PingPongPostPhys final : public FEditorDataStorageColumn
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTest_PingPongPostPhys) == 0x000008, "Wrong alignment on FTest_PingPongPostPhys");
static_assert(sizeof(FTest_PingPongPostPhys) == 0x000008, "Wrong size on FTest_PingPongPostPhys");
static_assert(offsetof(FTest_PingPongPostPhys, Value) == 0x000000, "Member 'FTest_PingPongPostPhys::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementWidgetConstructor
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTypedElementWidgetConstructor
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementWidgetConstructor) == 0x000008, "Wrong alignment on FTypedElementWidgetConstructor");
static_assert(sizeof(FTypedElementWidgetConstructor) == 0x000028, "Wrong size on FTypedElementWidgetConstructor");

// ScriptStruct TypedElementFramework.SimpleWidgetConstructor
// 0x0000 (0x0028 - 0x0028)
struct FSimpleWidgetConstructor final : public FTypedElementWidgetConstructor
{
};
static_assert(alignof(FSimpleWidgetConstructor) == 0x000008, "Wrong alignment on FSimpleWidgetConstructor");
static_assert(sizeof(FSimpleWidgetConstructor) == 0x000028, "Wrong size on FSimpleWidgetConstructor");

// ScriptStruct TypedElementFramework.FolderTag
// 0x0000 (0x0001 - 0x0001)
struct FFolderTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FFolderTag) == 0x000001, "Wrong alignment on FFolderTag");
static_assert(sizeof(FFolderTag) == 0x000001, "Wrong size on FFolderTag");

// ScriptStruct TypedElementFramework.TedsRowHandle
// 0x0008 (0x0008 - 0x0000)
struct FTedsRowHandle final
{
public:
	uint64                                        RowHandle;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedsRowHandle) == 0x000008, "Wrong alignment on FTedsRowHandle");
static_assert(sizeof(FTedsRowHandle) == 0x000008, "Wrong size on FTedsRowHandle");
static_assert(offsetof(FTedsRowHandle, RowHandle) == 0x000000, "Member 'FTedsRowHandle::RowHandle' has a wrong offset!");

// ScriptStruct TypedElementFramework.TableRowParentColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTableRowParentColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTableRowParentColumn) == 0x000008, "Wrong alignment on FTableRowParentColumn");
static_assert(sizeof(FTableRowParentColumn) == 0x000008, "Wrong size on FTableRowParentColumn");

// ScriptStruct TypedElementFramework.UnresolvedTableRowParentColumn
// 0x0008 (0x0008 - 0x0000)
struct FUnresolvedTableRowParentColumn final : public FEditorDataStorageColumn
{
public:
	uint64                                        ParentIdHash;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnresolvedTableRowParentColumn) == 0x000008, "Wrong alignment on FUnresolvedTableRowParentColumn");
static_assert(sizeof(FUnresolvedTableRowParentColumn) == 0x000008, "Wrong size on FUnresolvedTableRowParentColumn");
static_assert(offsetof(FUnresolvedTableRowParentColumn, ParentIdHash) == 0x000000, "Member 'FUnresolvedTableRowParentColumn::ParentIdHash' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementIconOverrideColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementIconOverrideColumn final : public FEditorDataStorageColumn
{
public:
	class FName                                   IconName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementIconOverrideColumn) == 0x000004, "Wrong alignment on FTypedElementIconOverrideColumn");
static_assert(sizeof(FTypedElementIconOverrideColumn) == 0x000008, "Wrong size on FTypedElementIconOverrideColumn");
static_assert(offsetof(FTypedElementIconOverrideColumn, IconName) == 0x000000, "Member 'FTypedElementIconOverrideColumn::IconName' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementLabelColumn
// 0x0010 (0x0010 - 0x0000)
struct FTypedElementLabelColumn final : public FEditorDataStorageColumn
{
public:
	class FString                                 Label;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementLabelColumn) == 0x000008, "Wrong alignment on FTypedElementLabelColumn");
static_assert(sizeof(FTypedElementLabelColumn) == 0x000010, "Wrong size on FTypedElementLabelColumn");
static_assert(offsetof(FTypedElementLabelColumn, Label) == 0x000000, "Member 'FTypedElementLabelColumn::Label' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementLabelHashColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementLabelHashColumn final : public FEditorDataStorageColumn
{
public:
	uint64                                        LabelHash;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementLabelHashColumn) == 0x000008, "Wrong alignment on FTypedElementLabelHashColumn");
static_assert(sizeof(FTypedElementLabelHashColumn) == 0x000008, "Wrong size on FTypedElementLabelHashColumn");
static_assert(offsetof(FTypedElementLabelHashColumn, LabelHash) == 0x000000, "Member 'FTypedElementLabelHashColumn::LabelHash' has a wrong offset!");

// ScriptStruct TypedElementFramework.ScriptTypedElementListProxy
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FScriptTypedElementListProxy final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScriptTypedElementListProxy) == 0x000008, "Wrong alignment on FScriptTypedElementListProxy");
static_assert(sizeof(FScriptTypedElementListProxy) == 0x000010, "Wrong size on FScriptTypedElementListProxy");

// ScriptStruct TypedElementFramework.TypedElementSyncBackToWorldTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementSyncBackToWorldTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementSyncBackToWorldTag) == 0x000001, "Wrong alignment on FTypedElementSyncBackToWorldTag");
static_assert(sizeof(FTypedElementSyncBackToWorldTag) == 0x000001, "Wrong size on FTypedElementSyncBackToWorldTag");

// ScriptStruct TypedElementFramework.TypedElementSyncFromWorldTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementSyncFromWorldTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementSyncFromWorldTag) == 0x000001, "Wrong alignment on FTypedElementSyncFromWorldTag");
static_assert(sizeof(FTypedElementSyncFromWorldTag) == 0x000001, "Wrong size on FTypedElementSyncFromWorldTag");

// ScriptStruct TypedElementFramework.TypedElementSyncFromWorldInteractiveTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementSyncFromWorldInteractiveTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementSyncFromWorldInteractiveTag) == 0x000001, "Wrong alignment on FTypedElementSyncFromWorldInteractiveTag");
static_assert(sizeof(FTypedElementSyncFromWorldInteractiveTag) == 0x000001, "Wrong size on FTypedElementSyncFromWorldInteractiveTag");

// ScriptStruct TypedElementFramework.TypedElementRowReferenceColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTypedElementRowReferenceColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementRowReferenceColumn) == 0x000008, "Wrong alignment on FTypedElementRowReferenceColumn");
static_assert(sizeof(FTypedElementRowReferenceColumn) == 0x000008, "Wrong size on FTypedElementRowReferenceColumn");

// ScriptStruct TypedElementFramework.NameColumn
// 0x0008 (0x0008 - 0x0000)
struct FNameColumn final : public FEditorDataStorageColumn
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNameColumn) == 0x000004, "Wrong alignment on FNameColumn");
static_assert(sizeof(FNameColumn) == 0x000008, "Wrong size on FNameColumn");
static_assert(offsetof(FNameColumn, Name) == 0x000000, "Member 'FNameColumn::Name' has a wrong offset!");

// ScriptStruct TypedElementFramework.ObjectOverrideColumn
// 0x0001 (0x0001 - 0x0000)
struct FObjectOverrideColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectOverrideColumn) == 0x000001, "Wrong alignment on FObjectOverrideColumn");
static_assert(sizeof(FObjectOverrideColumn) == 0x000001, "Wrong size on FObjectOverrideColumn");

// ScriptStruct TypedElementFramework.TypedElementPackageUnresolvedReference
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTypedElementPackageUnresolvedReference final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementPackageUnresolvedReference) == 0x000008, "Wrong alignment on FTypedElementPackageUnresolvedReference");
static_assert(sizeof(FTypedElementPackageUnresolvedReference) == 0x000018, "Wrong size on FTypedElementPackageUnresolvedReference");

// ScriptStruct TypedElementFramework.TypedElementPackageReference
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FTypedElementPackageReference final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementPackageReference) == 0x000008, "Wrong alignment on FTypedElementPackageReference");
static_assert(sizeof(FTypedElementPackageReference) == 0x000008, "Wrong size on FTypedElementPackageReference");

// ScriptStruct TypedElementFramework.TypedElementPackageUpdatedTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementPackageUpdatedTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementPackageUpdatedTag) == 0x000001, "Wrong alignment on FTypedElementPackageUpdatedTag");
static_assert(sizeof(FTypedElementPackageUpdatedTag) == 0x000001, "Wrong size on FTypedElementPackageUpdatedTag");

// ScriptStruct TypedElementFramework.TypedElementPackagePathColumn
// 0x0010 (0x0010 - 0x0000)
struct FTypedElementPackagePathColumn final : public FEditorDataStorageColumn
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementPackagePathColumn) == 0x000008, "Wrong alignment on FTypedElementPackagePathColumn");
static_assert(sizeof(FTypedElementPackagePathColumn) == 0x000010, "Wrong size on FTypedElementPackagePathColumn");
static_assert(offsetof(FTypedElementPackagePathColumn, Path) == 0x000000, "Member 'FTypedElementPackagePathColumn::Path' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementPackageLoadedPathColumn
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTypedElementPackageLoadedPathColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementPackageLoadedPathColumn) == 0x000004, "Wrong alignment on FTypedElementPackageLoadedPathColumn");
static_assert(sizeof(FTypedElementPackageLoadedPathColumn) == 0x00000C, "Wrong size on FTypedElementPackageLoadedPathColumn");

// ScriptStruct TypedElementFramework.TypedElementPivotOffset
// 0x0018 (0x0018 - 0x0000)
struct FTypedElementPivotOffset final : public FEditorDataStorageColumn
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementPivotOffset) == 0x000008, "Wrong alignment on FTypedElementPivotOffset");
static_assert(sizeof(FTypedElementPivotOffset) == 0x000018, "Wrong size on FTypedElementPivotOffset");
static_assert(offsetof(FTypedElementPivotOffset, Offset) == 0x000000, "Member 'FTypedElementPivotOffset::Offset' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCInChangelistTag
// 0x0000 (0x0001 - 0x0001)
struct FSCCInChangelistTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FSCCInChangelistTag) == 0x000001, "Wrong alignment on FSCCInChangelistTag");
static_assert(sizeof(FSCCInChangelistTag) == 0x000001, "Wrong size on FSCCInChangelistTag");

// ScriptStruct TypedElementFramework.SCCStagedTag
// 0x0000 (0x0001 - 0x0001)
struct FSCCStagedTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FSCCStagedTag) == 0x000001, "Wrong alignment on FSCCStagedTag");
static_assert(sizeof(FSCCStagedTag) == 0x000001, "Wrong size on FSCCStagedTag");

// ScriptStruct TypedElementFramework.SCCLockedTag
// 0x0000 (0x0001 - 0x0001)
struct FSCCLockedTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FSCCLockedTag) == 0x000001, "Wrong alignment on FSCCLockedTag");
static_assert(sizeof(FSCCLockedTag) == 0x000001, "Wrong size on FSCCLockedTag");

// ScriptStruct TypedElementFramework.SCCExternallyEditedTag
// 0x0000 (0x0001 - 0x0001)
struct FSCCExternallyEditedTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FSCCExternallyEditedTag) == 0x000001, "Wrong alignment on FSCCExternallyEditedTag");
static_assert(sizeof(FSCCExternallyEditedTag) == 0x000001, "Wrong size on FSCCExternallyEditedTag");

// ScriptStruct TypedElementFramework.SCCNotCurrentTag
// 0x0000 (0x0001 - 0x0001)
struct FSCCNotCurrentTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FSCCNotCurrentTag) == 0x000001, "Wrong alignment on FSCCNotCurrentTag");
static_assert(sizeof(FSCCNotCurrentTag) == 0x000001, "Wrong size on FSCCNotCurrentTag");

// ScriptStruct TypedElementFramework.SCCStatusColumn
// 0x0004 (0x0004 - 0x0000)
struct FSCCStatusColumn final : public FEditorDataStorageColumn
{
public:
	ESCCModification                              Modification;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCStatusColumn) == 0x000004, "Wrong alignment on FSCCStatusColumn");
static_assert(sizeof(FSCCStatusColumn) == 0x000004, "Wrong size on FSCCStatusColumn");
static_assert(offsetof(FSCCStatusColumn, Modification) == 0x000000, "Member 'FSCCStatusColumn::Modification' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCRevisionId
// 0x0014 (0x0014 - 0x0000)
struct FSCCRevisionId final
{
public:
	uint32                                        ID[0x5];                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCRevisionId) == 0x000004, "Wrong alignment on FSCCRevisionId");
static_assert(sizeof(FSCCRevisionId) == 0x000014, "Wrong size on FSCCRevisionId");
static_assert(offsetof(FSCCRevisionId, ID) == 0x000000, "Member 'FSCCRevisionId::ID' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCRevisionIdColumn
// 0x0014 (0x0014 - 0x0000)
struct FSCCRevisionIdColumn final : public FEditorDataStorageColumn
{
public:
	struct FSCCRevisionId                         RevisionId;                                        // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCRevisionIdColumn) == 0x000004, "Wrong alignment on FSCCRevisionIdColumn");
static_assert(sizeof(FSCCRevisionIdColumn) == 0x000014, "Wrong size on FSCCRevisionIdColumn");
static_assert(offsetof(FSCCRevisionIdColumn, RevisionId) == 0x000000, "Member 'FSCCRevisionIdColumn::RevisionId' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCExternalRevisionIdColumn
// 0x0014 (0x0014 - 0x0000)
struct FSCCExternalRevisionIdColumn final : public FEditorDataStorageColumn
{
public:
	struct FSCCRevisionId                         RevisionId;                                        // 0x0000(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCExternalRevisionIdColumn) == 0x000004, "Wrong alignment on FSCCExternalRevisionIdColumn");
static_assert(sizeof(FSCCExternalRevisionIdColumn) == 0x000014, "Wrong size on FSCCExternalRevisionIdColumn");
static_assert(offsetof(FSCCExternalRevisionIdColumn, RevisionId) == 0x000000, "Member 'FSCCExternalRevisionIdColumn::RevisionId' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCUserInfo
// 0x0010 (0x0010 - 0x0000)
struct FSCCUserInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCUserInfo) == 0x000008, "Wrong alignment on FSCCUserInfo");
static_assert(sizeof(FSCCUserInfo) == 0x000010, "Wrong size on FSCCUserInfo");
static_assert(offsetof(FSCCUserInfo, Name) == 0x000000, "Member 'FSCCUserInfo::Name' has a wrong offset!");

// ScriptStruct TypedElementFramework.SCCExternallyLockedColumn
// 0x0010 (0x0010 - 0x0000)
struct FSCCExternallyLockedColumn final : public FEditorDataStorageColumn
{
public:
	struct FSCCUserInfo                           LockedBy;                                          // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSCCExternallyLockedColumn) == 0x000008, "Wrong alignment on FSCCExternallyLockedColumn");
static_assert(sizeof(FSCCExternallyLockedColumn) == 0x000010, "Wrong size on FSCCExternallyLockedColumn");
static_assert(offsetof(FSCCExternallyLockedColumn, LockedBy) == 0x000000, "Member 'FSCCExternallyLockedColumn::LockedBy' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementSelectionColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementSelectionColumn final : public FEditorDataStorageColumn
{
public:
	class FName                                   SelectionSet;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementSelectionColumn) == 0x000004, "Wrong alignment on FTypedElementSelectionColumn");
static_assert(sizeof(FTypedElementSelectionColumn) == 0x000008, "Wrong size on FTypedElementSelectionColumn");
static_assert(offsetof(FTypedElementSelectionColumn, SelectionSet) == 0x000000, "Member 'FTypedElementSelectionColumn::SelectionSet' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementSlateWidgetReferenceColumn
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTypedElementSlateWidgetReferenceColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementSlateWidgetReferenceColumn) == 0x000008, "Wrong alignment on FTypedElementSlateWidgetReferenceColumn");
static_assert(sizeof(FTypedElementSlateWidgetReferenceColumn) == 0x000030, "Wrong size on FTypedElementSlateWidgetReferenceColumn");

// ScriptStruct TypedElementFramework.TypedElementSlateWidgetReferenceDeletesRowTag
// 0x0000 (0x0001 - 0x0001)
struct FTypedElementSlateWidgetReferenceDeletesRowTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTypedElementSlateWidgetReferenceDeletesRowTag) == 0x000001, "Wrong alignment on FTypedElementSlateWidgetReferenceDeletesRowTag");
static_assert(sizeof(FTypedElementSlateWidgetReferenceDeletesRowTag) == 0x000001, "Wrong size on FTypedElementSlateWidgetReferenceDeletesRowTag");

// ScriptStruct TypedElementFramework.DisplayNameColumn
// 0x0010 (0x0010 - 0x0000)
struct FDisplayNameColumn final : public FEditorDataStorageColumn
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplayNameColumn) == 0x000008, "Wrong alignment on FDisplayNameColumn");
static_assert(sizeof(FDisplayNameColumn) == 0x000010, "Wrong size on FDisplayNameColumn");
static_assert(offsetof(FDisplayNameColumn, DisplayName) == 0x000000, "Member 'FDisplayNameColumn::DisplayName' has a wrong offset!");

// ScriptStruct TypedElementFramework.DescriptionColumn
// 0x0010 (0x0010 - 0x0000)
struct FDescriptionColumn final : public FEditorDataStorageColumn
{
public:
	class FText                                   Description;                                       // 0x0000(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDescriptionColumn) == 0x000008, "Wrong alignment on FDescriptionColumn");
static_assert(sizeof(FDescriptionColumn) == 0x000010, "Wrong size on FDescriptionColumn");
static_assert(offsetof(FDescriptionColumn, Description) == 0x000000, "Member 'FDescriptionColumn::Description' has a wrong offset!");

// ScriptStruct TypedElementFramework.SlateColorColumn
// 0x0014 (0x0014 - 0x0000)
struct FSlateColorColumn final : public FEditorDataStorageColumn
{
public:
	struct FSlateColor                            Color;                                             // 0x0000(0x0014)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlateColorColumn) == 0x000004, "Wrong alignment on FSlateColorColumn");
static_assert(sizeof(FSlateColorColumn) == 0x000014, "Wrong size on FSlateColorColumn");
static_assert(offsetof(FSlateColorColumn, Color) == 0x000000, "Member 'FSlateColorColumn::Color' has a wrong offset!");

// ScriptStruct TypedElementFramework.TestColumnA
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnA final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnA) == 0x000001, "Wrong alignment on FTestColumnA");
static_assert(sizeof(FTestColumnA) == 0x000001, "Wrong size on FTestColumnA");

// ScriptStruct TypedElementFramework.TestColumnB
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnB final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnB) == 0x000001, "Wrong alignment on FTestColumnB");
static_assert(sizeof(FTestColumnB) == 0x000001, "Wrong size on FTestColumnB");

// ScriptStruct TypedElementFramework.TestColumnC
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnC final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnC) == 0x000001, "Wrong alignment on FTestColumnC");
static_assert(sizeof(FTestColumnC) == 0x000001, "Wrong size on FTestColumnC");

// ScriptStruct TypedElementFramework.TestColumnD
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnD final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnD) == 0x000001, "Wrong alignment on FTestColumnD");
static_assert(sizeof(FTestColumnD) == 0x000001, "Wrong size on FTestColumnD");

// ScriptStruct TypedElementFramework.TestColumnE
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnE final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnE) == 0x000001, "Wrong alignment on FTestColumnE");
static_assert(sizeof(FTestColumnE) == 0x000001, "Wrong size on FTestColumnE");

// ScriptStruct TypedElementFramework.TestColumnF
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnF final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnF) == 0x000001, "Wrong alignment on FTestColumnF");
static_assert(sizeof(FTestColumnF) == 0x000001, "Wrong size on FTestColumnF");

// ScriptStruct TypedElementFramework.TestColumnG
// 0x0001 (0x0001 - 0x0000)
struct FTestColumnG final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestColumnG) == 0x000001, "Wrong alignment on FTestColumnG");
static_assert(sizeof(FTestColumnG) == 0x000001, "Wrong size on FTestColumnG");

// ScriptStruct TypedElementFramework.TestColumnInt
// 0x0004 (0x0004 - 0x0000)
struct FTestColumnInt final : public FEditorDataStorageColumn
{
public:
	int32                                         TestInt;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTestColumnInt) == 0x000004, "Wrong alignment on FTestColumnInt");
static_assert(sizeof(FTestColumnInt) == 0x000004, "Wrong size on FTestColumnInt");
static_assert(offsetof(FTestColumnInt, TestInt) == 0x000000, "Member 'FTestColumnInt::TestInt' has a wrong offset!");

// ScriptStruct TypedElementFramework.TestColumnString
// 0x0010 (0x0010 - 0x0000)
struct FTestColumnString final : public FEditorDataStorageColumn
{
public:
	class FString                                 TestString;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTestColumnString) == 0x000008, "Wrong alignment on FTestColumnString");
static_assert(sizeof(FTestColumnString) == 0x000010, "Wrong size on FTestColumnString");
static_assert(offsetof(FTestColumnString, TestString) == 0x000000, "Member 'FTestColumnString::TestString' has a wrong offset!");

// ScriptStruct TypedElementFramework.TestTagColumnA
// 0x0000 (0x0001 - 0x0001)
struct FTestTagColumnA final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTestTagColumnA) == 0x000001, "Wrong alignment on FTestTagColumnA");
static_assert(sizeof(FTestTagColumnA) == 0x000001, "Wrong size on FTestTagColumnA");

// ScriptStruct TypedElementFramework.TestTagColumnB
// 0x0000 (0x0001 - 0x0001)
struct FTestTagColumnB final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTestTagColumnB) == 0x000001, "Wrong alignment on FTestTagColumnB");
static_assert(sizeof(FTestTagColumnB) == 0x000001, "Wrong size on FTestTagColumnB");

// ScriptStruct TypedElementFramework.TestTagColumnC
// 0x0000 (0x0001 - 0x0001)
struct FTestTagColumnC final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTestTagColumnC) == 0x000001, "Wrong alignment on FTestTagColumnC");
static_assert(sizeof(FTestTagColumnC) == 0x000001, "Wrong size on FTestTagColumnC");

// ScriptStruct TypedElementFramework.TestTagColumnD
// 0x0000 (0x0001 - 0x0001)
struct FTestTagColumnD final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTestTagColumnD) == 0x000001, "Wrong alignment on FTestTagColumnD");
static_assert(sizeof(FTestTagColumnD) == 0x000001, "Wrong size on FTestTagColumnD");

// ScriptStruct TypedElementFramework.TEDSProcessorTestsReferenceColumn
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTEDSProcessorTestsReferenceColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTEDSProcessorTestsReferenceColumn) == 0x000008, "Wrong alignment on FTEDSProcessorTestsReferenceColumn");
static_assert(sizeof(FTEDSProcessorTestsReferenceColumn) == 0x000010, "Wrong size on FTEDSProcessorTestsReferenceColumn");

// ScriptStruct TypedElementFramework.TEDSProcessorTests_PrimaryTag
// 0x0000 (0x0001 - 0x0001)
struct FTEDSProcessorTests_PrimaryTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTEDSProcessorTests_PrimaryTag) == 0x000001, "Wrong alignment on FTEDSProcessorTests_PrimaryTag");
static_assert(sizeof(FTEDSProcessorTests_PrimaryTag) == 0x000001, "Wrong size on FTEDSProcessorTests_PrimaryTag");

// ScriptStruct TypedElementFramework.TEDSProcessorTests_SecondaryTag
// 0x0000 (0x0001 - 0x0001)
struct FTEDSProcessorTests_SecondaryTag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTEDSProcessorTests_SecondaryTag) == 0x000001, "Wrong alignment on FTEDSProcessorTests_SecondaryTag");
static_assert(sizeof(FTEDSProcessorTests_SecondaryTag) == 0x000001, "Wrong size on FTEDSProcessorTests_SecondaryTag");

// ScriptStruct TypedElementFramework.TEDSProcessorTests_Linked
// 0x0000 (0x0001 - 0x0001)
struct FTEDSProcessorTests_Linked final : public FEditorDataStorageTag
{
};
static_assert(alignof(FTEDSProcessorTests_Linked) == 0x000001, "Wrong alignment on FTEDSProcessorTests_Linked");
static_assert(sizeof(FTEDSProcessorTests_Linked) == 0x000001, "Wrong size on FTEDSProcessorTests_Linked");

// ScriptStruct TypedElementFramework.TypedElementLocalTransformColumn
// 0x0060 (0x0060 - 0x0000)
struct FTypedElementLocalTransformColumn final : public FEditorDataStorageColumn
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementLocalTransformColumn) == 0x000010, "Wrong alignment on FTypedElementLocalTransformColumn");
static_assert(sizeof(FTypedElementLocalTransformColumn) == 0x000060, "Wrong size on FTypedElementLocalTransformColumn");
static_assert(offsetof(FTypedElementLocalTransformColumn, Transform) == 0x000000, "Member 'FTypedElementLocalTransformColumn::Transform' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementClassTypeInfoColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTypedElementClassTypeInfoColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementClassTypeInfoColumn) == 0x000004, "Wrong alignment on FTypedElementClassTypeInfoColumn");
static_assert(sizeof(FTypedElementClassTypeInfoColumn) == 0x000008, "Wrong size on FTypedElementClassTypeInfoColumn");

// ScriptStruct TypedElementFramework.TypedElementScriptStructTypeInfoColumn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTypedElementScriptStructTypeInfoColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTypedElementScriptStructTypeInfoColumn) == 0x000004, "Wrong alignment on FTypedElementScriptStructTypeInfoColumn");
static_assert(sizeof(FTypedElementScriptStructTypeInfoColumn) == 0x000008, "Wrong size on FTypedElementScriptStructTypeInfoColumn");

// ScriptStruct TypedElementFramework.HideRowFromUITag
// 0x0000 (0x0001 - 0x0001)
struct FHideRowFromUITag final : public FEditorDataStorageTag
{
};
static_assert(alignof(FHideRowFromUITag) == 0x000001, "Wrong alignment on FHideRowFromUITag");
static_assert(sizeof(FHideRowFromUITag) == 0x000001, "Wrong size on FHideRowFromUITag");

// ScriptStruct TypedElementFramework.TypedElementI32IntValueCacheColumn
// 0x0004 (0x0004 - 0x0000)
struct FTypedElementI32IntValueCacheColumn final : public FEditorDataStorageColumn
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementI32IntValueCacheColumn) == 0x000004, "Wrong alignment on FTypedElementI32IntValueCacheColumn");
static_assert(sizeof(FTypedElementI32IntValueCacheColumn) == 0x000004, "Wrong size on FTypedElementI32IntValueCacheColumn");
static_assert(offsetof(FTypedElementI32IntValueCacheColumn, Value) == 0x000000, "Member 'FTypedElementI32IntValueCacheColumn::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementU64IntValueCacheColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementU64IntValueCacheColumn final : public FEditorDataStorageColumn
{
public:
	uint64                                        Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementU64IntValueCacheColumn) == 0x000008, "Wrong alignment on FTypedElementU64IntValueCacheColumn");
static_assert(sizeof(FTypedElementU64IntValueCacheColumn) == 0x000008, "Wrong size on FTypedElementU64IntValueCacheColumn");
static_assert(offsetof(FTypedElementU64IntValueCacheColumn, Value) == 0x000000, "Member 'FTypedElementU64IntValueCacheColumn::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementI64IntValueCacheColumn
// 0x0008 (0x0008 - 0x0000)
struct FTypedElementI64IntValueCacheColumn final : public FEditorDataStorageColumn
{
public:
	int64                                         Value;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementI64IntValueCacheColumn) == 0x000008, "Wrong alignment on FTypedElementI64IntValueCacheColumn");
static_assert(sizeof(FTypedElementI64IntValueCacheColumn) == 0x000008, "Wrong size on FTypedElementI64IntValueCacheColumn");
static_assert(offsetof(FTypedElementI64IntValueCacheColumn, Value) == 0x000000, "Member 'FTypedElementI64IntValueCacheColumn::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementFloatValueCacheColumn
// 0x0004 (0x0004 - 0x0000)
struct FTypedElementFloatValueCacheColumn final : public FEditorDataStorageColumn
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementFloatValueCacheColumn) == 0x000004, "Wrong alignment on FTypedElementFloatValueCacheColumn");
static_assert(sizeof(FTypedElementFloatValueCacheColumn) == 0x000004, "Wrong size on FTypedElementFloatValueCacheColumn");
static_assert(offsetof(FTypedElementFloatValueCacheColumn, Value) == 0x000000, "Member 'FTypedElementFloatValueCacheColumn::Value' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementViewportOutlineColorColumn
// 0x0001 (0x0001 - 0x0000)
struct FTypedElementViewportOutlineColorColumn final : public FEditorDataStorageColumn
{
public:
	uint8                                         SelectionOutlineColorIndex;                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementViewportOutlineColorColumn) == 0x000001, "Wrong alignment on FTypedElementViewportOutlineColorColumn");
static_assert(sizeof(FTypedElementViewportOutlineColorColumn) == 0x000001, "Wrong size on FTypedElementViewportOutlineColorColumn");
static_assert(offsetof(FTypedElementViewportOutlineColorColumn, SelectionOutlineColorIndex) == 0x000000, "Member 'FTypedElementViewportOutlineColorColumn::SelectionOutlineColorIndex' has a wrong offset!");

// ScriptStruct TypedElementFramework.TypedElementViewportOverlayColorColumn
// 0x0004 (0x0004 - 0x0000)
struct FTypedElementViewportOverlayColorColumn final : public FEditorDataStorageColumn
{
public:
	struct FColor                                 OverlayColor;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTypedElementViewportOverlayColorColumn) == 0x000004, "Wrong alignment on FTypedElementViewportOverlayColorColumn");
static_assert(sizeof(FTypedElementViewportOverlayColorColumn) == 0x000004, "Wrong size on FTypedElementViewportOverlayColorColumn");
static_assert(offsetof(FTypedElementViewportOverlayColorColumn, OverlayColor) == 0x000000, "Member 'FTypedElementViewportOverlayColorColumn::OverlayColor' has a wrong offset!");

}

