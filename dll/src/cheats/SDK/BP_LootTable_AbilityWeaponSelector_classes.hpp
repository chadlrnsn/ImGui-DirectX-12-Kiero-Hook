#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootTable_AbilityWeaponSelector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_structs.hpp"
#include "RGame_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LootTable_AbilityWeaponSelector.BP_LootTable_AbilityWeaponSelector_C
// 0x01A0 (0x0590 - 0x03F0)
class ABP_LootTable_AbilityWeaponSelector_C final : public ARLootableContainer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDMActorProximityBoxComponent*          VoiceProximity;                                    // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_InteractionIndicator;                       // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Light_Beam_02;                                     // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Light_Beam_01;                                     // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Interactable_Forge_Wheel_02;                    // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Interactable_Forge_Wheel_01;                    // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_RisingSmoke_01;                                 // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Light_Point_Bounce_02;                             // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    Light_Rect_04;                                     // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Light_Spot_Hand1;                                  // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    Light_Rect_02;                                     // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Sparks;                                         // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    Light_Rect_01;                                     // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Light_Spot_Hand;                                   // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Light_Point_Bounce_01;                             // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    Light_Rect_03;                                     // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Interactable_Forge_01_StaticMeshComponent0;     // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ObjectHighlightWidgetComponent;                    // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          ActorProximityBoxComp;                             // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MSS_ActiveLoop;                                    // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRLootSelectionOption>          GeneratedLootOptions;                              // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasSelectedMutator;                                // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialHeadLocation;                               // 0x04B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EMutatorRarity, double>                  MutatorRarityMap;                                  // 0x04D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly)
	int32                                         NumMutatorCategories;                              // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumMutatorOptionsPerCategory;                      // 0x0524(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	uint8                                         SelectType;                                        // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasGeneratedMutatorCategories;                     // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_532[0x6];                                      // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URMutatorRewardCategoryDataAsset*> MutatorCategoryDAs;                              // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SegmentCompleted;                                  // 0x0548(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class URMutatorRewardCategoryDataAsset>> PredefinedSoftMutatorCategoryDAs; // 0x0550(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	class APlayerController*                      Controller;                                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWidget_CommonMutatorSelectScreen_C*    PushedSelectScreen;                                // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PresenceAnimationTimer;                            // 0x0570(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRUniqueAltarLootOptions>       GeneratedPlayerLootOptions;                        // 0x0578(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FoundPlayerInArray;                                // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddGeneratedLootOptionForController(const TArray<struct FRLootSelectionOption>& LootOption, class APlayerController* PlayerController, bool bHasChosenLoot);
	void BndEvt__BP_LootTable_AbilityWeaponSelector_ActorProximityBoxComp_K2Node_ComponentBoundEvent_0_OnOverlapProximityBoxComponentExit__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_LootTable_AbilityWeaponSelector_ActorProximityBoxComp_K2Node_ComponentBoundEvent_1_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_LootTable_AbilityWeaponSelector_ActorProximityBoxComp_K2Node_ComponentBoundEvent_2_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_LootTable_AbilityWeaponSelector_ActorProximityBoxComp_K2Node_ComponentBoundEvent_3_OnOverlapProximityBoxComponentExit__DelegateSignature(class AActor* Actor);
	bool CanInteract(class APlayerController* Controller_0);
	void CheckAndUpdateLootOptions(class AController* Controller_0);
	void ExecuteUbergraph_BP_LootTable_AbilityWeaponSelector(int32 EntryPoint);
	void GenerateLootOptions(class APlayerController* PlayerController);
	void Get_Reward_Spawn_Pos(struct FVector* Pos);
	void GetGeneratedLootOptionsForController(const class FString& NetIDString, TArray<struct FRLootSelectionOption>* Loot_Selection_Options);
	void GetNumEquippedMutatorsOfCategory(class URMutatorRewardCategoryDataAsset* CategoryDA, class APlayerController* Controller_0, int32* Num);
	void HideHighlight();
	void OnInteract(class APlayerController* Controller_0);
	void OnInvoke_A4237351430B9226D441F19F02FEEC31();
	void OnLootOptionsChanged(const TArray<struct FRLootSelectionOption>& NewLootOptions);
	void OnLootOptionSelected_Event(const struct FRLootSelectionOption& LootSelectionOption);
	void OnRep_SegmentCompleted();
	void OnSegmentCompleted(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void PlayerStateIsValid(bool* IsValid);
	void PresenceAnimationTick();
	void ReceiveBeginPlay();
	void RemoveCappedCategories(class APlayerController* Controller_0);
	void RunRoutedObjectBehaviour();
	void RunRoutedObjectBehaviourByName(class FName BehaviourName);
	void RunRoutedObjectBehaviourWithData(const struct FRoutedObjectData& RoutedData);
	void ShowHighlight();
	void ShowHighlightMulticast();
	void ShowHighlightServer();
	void UserConstructionScript();

	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	bool ShouldShowOnRadar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LootTable_AbilityWeaponSelector_C">();
	}
	static class ABP_LootTable_AbilityWeaponSelector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LootTable_AbilityWeaponSelector_C>();
	}
};
static_assert(alignof(ABP_LootTable_AbilityWeaponSelector_C) == 0x000008, "Wrong alignment on ABP_LootTable_AbilityWeaponSelector_C");
static_assert(sizeof(ABP_LootTable_AbilityWeaponSelector_C) == 0x000590, "Wrong size on ABP_LootTable_AbilityWeaponSelector_C");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, UberGraphFrame) == 0x0003F0, "Member 'ABP_LootTable_AbilityWeaponSelector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, VoiceProximity) == 0x0003F8, "Member 'ABP_LootTable_AbilityWeaponSelector_C::VoiceProximity' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Widget_InteractionIndicator) == 0x000400, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Widget_InteractionIndicator' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Beam_02) == 0x000408, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Beam_02' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Beam_01) == 0x000410, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Beam_01' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, SM_Interactable_Forge_Wheel_02) == 0x000418, "Member 'ABP_LootTable_AbilityWeaponSelector_C::SM_Interactable_Forge_Wheel_02' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, SM_Interactable_Forge_Wheel_01) == 0x000420, "Member 'ABP_LootTable_AbilityWeaponSelector_C::SM_Interactable_Forge_Wheel_01' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, NS_RisingSmoke_01) == 0x000428, "Member 'ABP_LootTable_AbilityWeaponSelector_C::NS_RisingSmoke_01' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Point_Bounce_02) == 0x000430, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Point_Bounce_02' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Rect_04) == 0x000438, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Rect_04' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Spot_Hand1) == 0x000440, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Spot_Hand1' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Rect_02) == 0x000448, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Rect_02' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, NS_Sparks) == 0x000450, "Member 'ABP_LootTable_AbilityWeaponSelector_C::NS_Sparks' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Rect_01) == 0x000458, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Rect_01' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Spot_Hand) == 0x000460, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Spot_Hand' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Point_Bounce_01) == 0x000468, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Point_Bounce_01' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Light_Rect_03) == 0x000470, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Light_Rect_03' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, SM_Interactable_Forge_01_StaticMeshComponent0) == 0x000478, "Member 'ABP_LootTable_AbilityWeaponSelector_C::SM_Interactable_Forge_01_StaticMeshComponent0' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, ObjectHighlightWidgetComponent) == 0x000480, "Member 'ABP_LootTable_AbilityWeaponSelector_C::ObjectHighlightWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, ActorProximityBoxComp) == 0x000488, "Member 'ABP_LootTable_AbilityWeaponSelector_C::ActorProximityBoxComp' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, MSS_ActiveLoop) == 0x000490, "Member 'ABP_LootTable_AbilityWeaponSelector_C::MSS_ActiveLoop' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Scene) == 0x000498, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, GeneratedLootOptions) == 0x0004A0, "Member 'ABP_LootTable_AbilityWeaponSelector_C::GeneratedLootOptions' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, HasSelectedMutator) == 0x0004B0, "Member 'ABP_LootTable_AbilityWeaponSelector_C::HasSelectedMutator' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, InitialHeadLocation) == 0x0004B8, "Member 'ABP_LootTable_AbilityWeaponSelector_C::InitialHeadLocation' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, MutatorRarityMap) == 0x0004D0, "Member 'ABP_LootTable_AbilityWeaponSelector_C::MutatorRarityMap' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, NumMutatorCategories) == 0x000520, "Member 'ABP_LootTable_AbilityWeaponSelector_C::NumMutatorCategories' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, NumMutatorOptionsPerCategory) == 0x000524, "Member 'ABP_LootTable_AbilityWeaponSelector_C::NumMutatorOptionsPerCategory' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Segment) == 0x000528, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Segment' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, SelectType) == 0x000530, "Member 'ABP_LootTable_AbilityWeaponSelector_C::SelectType' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, HasGeneratedMutatorCategories) == 0x000531, "Member 'ABP_LootTable_AbilityWeaponSelector_C::HasGeneratedMutatorCategories' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, MutatorCategoryDAs) == 0x000538, "Member 'ABP_LootTable_AbilityWeaponSelector_C::MutatorCategoryDAs' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, SegmentCompleted) == 0x000548, "Member 'ABP_LootTable_AbilityWeaponSelector_C::SegmentCompleted' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, PredefinedSoftMutatorCategoryDAs) == 0x000550, "Member 'ABP_LootTable_AbilityWeaponSelector_C::PredefinedSoftMutatorCategoryDAs' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, Controller) == 0x000560, "Member 'ABP_LootTable_AbilityWeaponSelector_C::Controller' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, PushedSelectScreen) == 0x000568, "Member 'ABP_LootTable_AbilityWeaponSelector_C::PushedSelectScreen' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, PresenceAnimationTimer) == 0x000570, "Member 'ABP_LootTable_AbilityWeaponSelector_C::PresenceAnimationTimer' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, GeneratedPlayerLootOptions) == 0x000578, "Member 'ABP_LootTable_AbilityWeaponSelector_C::GeneratedPlayerLootOptions' has a wrong offset!");
static_assert(offsetof(ABP_LootTable_AbilityWeaponSelector_C, FoundPlayerInArray) == 0x000588, "Member 'ABP_LootTable_AbilityWeaponSelector_C::FoundPlayerInArray' has a wrong offset!");

}

