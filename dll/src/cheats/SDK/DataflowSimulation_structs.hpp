#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataflowSimulation

#include "Basic.hpp"

#include "DataflowCore_structs.hpp"


namespace SDK
{

// ScriptStruct DataflowSimulation.DataflowSimulationProxy
// 0x0078 (0x0078 - 0x0000)
struct alignas(0x08) FDataflowSimulationProxy
{
public:
	uint8                                         Pad_0[0x78];                                       // 0x0000(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowSimulationProxy) == 0x000008, "Wrong alignment on FDataflowSimulationProxy");
static_assert(sizeof(FDataflowSimulationProxy) == 0x000078, "Wrong size on FDataflowSimulationProxy");

// ScriptStruct DataflowSimulation.DataflowCollisionObjectProxy
// 0x0000 (0x0078 - 0x0078)
struct FDataflowCollisionObjectProxy final : public FDataflowSimulationProxy
{
};
static_assert(alignof(FDataflowCollisionObjectProxy) == 0x000008, "Wrong alignment on FDataflowCollisionObjectProxy");
static_assert(sizeof(FDataflowCollisionObjectProxy) == 0x000078, "Wrong size on FDataflowCollisionObjectProxy");

// ScriptStruct DataflowSimulation.DataflowConstraintObjectProxy
// 0x0000 (0x0078 - 0x0078)
struct FDataflowConstraintObjectProxy final : public FDataflowSimulationProxy
{
};
static_assert(alignof(FDataflowConstraintObjectProxy) == 0x000008, "Wrong alignment on FDataflowConstraintObjectProxy");
static_assert(sizeof(FDataflowConstraintObjectProxy) == 0x000078, "Wrong size on FDataflowConstraintObjectProxy");

// ScriptStruct DataflowSimulation.DataflowPhysicsObjectProxy
// 0x0000 (0x0078 - 0x0078)
struct FDataflowPhysicsObjectProxy final : public FDataflowSimulationProxy
{
};
static_assert(alignof(FDataflowPhysicsObjectProxy) == 0x000008, "Wrong alignment on FDataflowPhysicsObjectProxy");
static_assert(sizeof(FDataflowPhysicsObjectProxy) == 0x000078, "Wrong size on FDataflowPhysicsObjectProxy");

// ScriptStruct DataflowSimulation.DataflowPhysicsSolverProxy
// 0x0000 (0x0078 - 0x0078)
struct FDataflowPhysicsSolverProxy : public FDataflowSimulationProxy
{
};
static_assert(alignof(FDataflowPhysicsSolverProxy) == 0x000008, "Wrong alignment on FDataflowPhysicsSolverProxy");
static_assert(sizeof(FDataflowPhysicsSolverProxy) == 0x000078, "Wrong size on FDataflowPhysicsSolverProxy");

// ScriptStruct DataflowSimulation.DataflowSimulationAsset
// 0x0058 (0x0058 - 0x0000)
struct FDataflowSimulationAsset final
{
public:
	class UDataflow*                              DataflowAsset;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           SimulationGroups;                                  // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowSimulationAsset) == 0x000008, "Wrong alignment on FDataflowSimulationAsset");
static_assert(sizeof(FDataflowSimulationAsset) == 0x000058, "Wrong size on FDataflowSimulationAsset");
static_assert(offsetof(FDataflowSimulationAsset, DataflowAsset) == 0x000000, "Member 'FDataflowSimulationAsset::DataflowAsset' has a wrong offset!");
static_assert(offsetof(FDataflowSimulationAsset, SimulationGroups) == 0x000008, "Member 'FDataflowSimulationAsset::SimulationGroups' has a wrong offset!");

// ScriptStruct DataflowSimulation.DataflowSimulationProperty
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDataflowSimulationProperty final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowSimulationProperty) == 0x000008, "Wrong alignment on FDataflowSimulationProperty");
static_assert(sizeof(FDataflowSimulationProperty) == 0x000008, "Wrong size on FDataflowSimulationProperty");

// ScriptStruct DataflowSimulation.DataflowSimulationNode
// 0x0000 (0x0198 - 0x0198)
struct FDataflowSimulationNode : public FDataflowNode
{
};
static_assert(alignof(FDataflowSimulationNode) == 0x000008, "Wrong alignment on FDataflowSimulationNode");
static_assert(sizeof(FDataflowSimulationNode) == 0x000198, "Wrong size on FDataflowSimulationNode");

// ScriptStruct DataflowSimulation.DataflowInvalidNode
// 0x0000 (0x0198 - 0x0198)
struct FDataflowInvalidNode : public FDataflowSimulationNode
{
};
static_assert(alignof(FDataflowInvalidNode) == 0x000008, "Wrong alignment on FDataflowInvalidNode");
static_assert(sizeof(FDataflowInvalidNode) == 0x000198, "Wrong size on FDataflowInvalidNode");

// ScriptStruct DataflowSimulation.DataflowExecutionNode
// 0x0000 (0x0198 - 0x0198)
struct FDataflowExecutionNode : public FDataflowSimulationNode
{
};
static_assert(alignof(FDataflowExecutionNode) == 0x000008, "Wrong alignment on FDataflowExecutionNode");
static_assert(sizeof(FDataflowExecutionNode) == 0x000198, "Wrong size on FDataflowExecutionNode");

// ScriptStruct DataflowSimulation.DataflowSimulationTime
// 0x000C (0x000C - 0x0000)
struct FDataflowSimulationTime final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOffset;                                        // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowSimulationTime) == 0x000004, "Wrong alignment on FDataflowSimulationTime");
static_assert(sizeof(FDataflowSimulationTime) == 0x00000C, "Wrong size on FDataflowSimulationTime");
static_assert(offsetof(FDataflowSimulationTime, DeltaTime) == 0x000000, "Member 'FDataflowSimulationTime::DeltaTime' has a wrong offset!");
static_assert(offsetof(FDataflowSimulationTime, CurrentTime) == 0x000004, "Member 'FDataflowSimulationTime::CurrentTime' has a wrong offset!");
static_assert(offsetof(FDataflowSimulationTime, TimeOffset) == 0x000008, "Member 'FDataflowSimulationTime::TimeOffset' has a wrong offset!");

// ScriptStruct DataflowSimulation.GetSimulationTimeDataflowNode
// 0x0010 (0x01A8 - 0x0198)
struct FGetSimulationTimeDataflowNode final : public FDataflowInvalidNode
{
public:
	struct FDataflowSimulationTime                SimulationTime;                                    // 0x0198(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGetSimulationTimeDataflowNode) == 0x000008, "Wrong alignment on FGetSimulationTimeDataflowNode");
static_assert(sizeof(FGetSimulationTimeDataflowNode) == 0x0001A8, "Wrong size on FGetSimulationTimeDataflowNode");
static_assert(offsetof(FGetSimulationTimeDataflowNode, SimulationTime) == 0x000198, "Member 'FGetSimulationTimeDataflowNode::SimulationTime' has a wrong offset!");

// ScriptStruct DataflowSimulation.GetPhysicsSolversDataflowNode
// 0x0020 (0x01B8 - 0x0198)
struct FGetPhysicsSolversDataflowNode final : public FDataflowInvalidNode
{
public:
	TArray<struct FDataflowSimulationProperty>    PhysicsSolvers;                                    // 0x0198(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FString>                         SimulationGroups;                                  // 0x01A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetPhysicsSolversDataflowNode) == 0x000008, "Wrong alignment on FGetPhysicsSolversDataflowNode");
static_assert(sizeof(FGetPhysicsSolversDataflowNode) == 0x0001B8, "Wrong size on FGetPhysicsSolversDataflowNode");
static_assert(offsetof(FGetPhysicsSolversDataflowNode, PhysicsSolvers) == 0x000198, "Member 'FGetPhysicsSolversDataflowNode::PhysicsSolvers' has a wrong offset!");
static_assert(offsetof(FGetPhysicsSolversDataflowNode, SimulationGroups) == 0x0001A8, "Member 'FGetPhysicsSolversDataflowNode::SimulationGroups' has a wrong offset!");

// ScriptStruct DataflowSimulation.AdvancePhysicsSolversDataflowNode
// 0x0020 (0x01B8 - 0x0198)
struct FAdvancePhysicsSolversDataflowNode final : public FDataflowSimulationNode
{
public:
	struct FDataflowSimulationTime                SimulationTime;                                    // 0x0198(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDataflowSimulationProperty>    PhysicsSolvers;                                    // 0x01A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdvancePhysicsSolversDataflowNode) == 0x000008, "Wrong alignment on FAdvancePhysicsSolversDataflowNode");
static_assert(sizeof(FAdvancePhysicsSolversDataflowNode) == 0x0001B8, "Wrong size on FAdvancePhysicsSolversDataflowNode");
static_assert(offsetof(FAdvancePhysicsSolversDataflowNode, SimulationTime) == 0x000198, "Member 'FAdvancePhysicsSolversDataflowNode::SimulationTime' has a wrong offset!");
static_assert(offsetof(FAdvancePhysicsSolversDataflowNode, PhysicsSolvers) == 0x0001A8, "Member 'FAdvancePhysicsSolversDataflowNode::PhysicsSolvers' has a wrong offset!");

// ScriptStruct DataflowSimulation.FilterSimulationProxiesDataflowNode
// 0x0030 (0x01C8 - 0x0198)
struct FFilterSimulationProxiesDataflowNode final : public FDataflowSimulationNode
{
public:
	TArray<struct FDataflowSimulationProperty>    SimulationProxies;                                 // 0x0198(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FDataflowSimulationProperty>    FilteredProxies;                                   // 0x01A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FString>                         SimulationGroups;                                  // 0x01B8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilterSimulationProxiesDataflowNode) == 0x000008, "Wrong alignment on FFilterSimulationProxiesDataflowNode");
static_assert(sizeof(FFilterSimulationProxiesDataflowNode) == 0x0001C8, "Wrong size on FFilterSimulationProxiesDataflowNode");
static_assert(offsetof(FFilterSimulationProxiesDataflowNode, SimulationProxies) == 0x000198, "Member 'FFilterSimulationProxiesDataflowNode::SimulationProxies' has a wrong offset!");
static_assert(offsetof(FFilterSimulationProxiesDataflowNode, FilteredProxies) == 0x0001A8, "Member 'FFilterSimulationProxiesDataflowNode::FilteredProxies' has a wrong offset!");
static_assert(offsetof(FFilterSimulationProxiesDataflowNode, SimulationGroups) == 0x0001B8, "Member 'FFilterSimulationProxiesDataflowNode::SimulationGroups' has a wrong offset!");

// ScriptStruct DataflowSimulation.SimulationProxiesTerminalDataflowNode
// 0x0010 (0x01A8 - 0x0198)
struct FSimulationProxiesTerminalDataflowNode final : public FDataflowExecutionNode
{
public:
	TArray<struct FDataflowSimulationProperty>    SimulationProxies;                                 // 0x0198(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimulationProxiesTerminalDataflowNode) == 0x000008, "Wrong alignment on FSimulationProxiesTerminalDataflowNode");
static_assert(sizeof(FSimulationProxiesTerminalDataflowNode) == 0x0001A8, "Wrong size on FSimulationProxiesTerminalDataflowNode");
static_assert(offsetof(FSimulationProxiesTerminalDataflowNode, SimulationProxies) == 0x000198, "Member 'FSimulationProxiesTerminalDataflowNode::SimulationProxies' has a wrong offset!");

}

