#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyTree

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_DifficultyTree.Widget_DifficultyTree_C
// 0x0118 (0x0550 - 0x0438)
class UWidget_DifficultyTree_C final : public URCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Background_Vignette;                               // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BackgroundShadow;                                  // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    CommonActionWidget_Back;                           // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonActionWidget*                    CommonActionWidget_Reset;                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DifficultyPointDescription;                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             DifficultyPoints;                                  // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_PredeterminedNodesRow;               // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_89;                                          // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_94;                                          // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 InfiniteEnabledBackground;                         // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                OceanicOmens;                                      // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox_0;                                     // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_BossesDamage;                            // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_BossesHealth;                            // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_EnemyDamage;                             // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_EnemyHealth;                             // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Title;                                             // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      UniformGridPanel;                                  // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_DifficultyNode_C*               Widget_DifficultyNodeInfinite;                     // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_TextButton_C*                   Widget_TextButton;                                 // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_TextButton_C*                   Widget_TextButton_1;                               // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         PredeterminedNodeLineOffset;                       // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class URDifficultyPrimaryAsset>> SoftEndGameDifficultyAssets;              // 0x04F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class URDifficultyPrimaryAsset>> SoftPrederminedDifficultyAssets;          // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class FName                                   EnemyBossBonusMutableKey;                          // 0x0518(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnemyDamageBonusPerAssignedPoint;                  // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EnemyHealthBonusPerAssignedPoint;                  // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BossDamageBonusPerAssignedPoint;                   // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BossHealthBonusPerAssignedPoint;                   // 0x0538(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnPointsChanged;                                   // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AreAllPredeterminedNodesUnlocked(bool* AllUnlocked);
	void BndEvt__Widget_DifficultyTree_Button_840_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button);
	void Construct();
	void ConstructEndGameNodes();
	void ConstructPredeterminedNodes();
	void DoesNextNodeHavePointsAssigned(class UWidget_DifficultyNode_C* Node, bool* HasPointsAssigned);
	void ExecuteUbergraph_Widget_DifficultyTree(int32 EntryPoint);
	void GetAllNodes(TArray<class UWidget_DifficultyNode_C*>* AllNodes);
	void GetNumTotalPointsAssigned(int32* TotalPointsAssigned);
	void HasAnyEndGameNodePointsAssigned(bool* HasPointsAssigned);
	void HasInfiniteNodePointsAssigned(bool* HasPointsAssigned);
	void Is_Node_Locked(class UWidget_DifficultyNode_C* NodeWidget, bool* IsLocked);
	void IsNodeEndGameNode(class UWidget* WidgetNode, bool* Value);
	void IsNodeInPanel(class UWidget* WidgetNode, class UPanelWidget* PanelWidget, bool* Value);
	void IsNodePredetermined(class UWidget* WidgetNode, bool* Value);
	void IsTreeCapped(bool* Capped);
	void ResetNodes();
	void Update_Enemy_and_Boss_Bonuses();
	void UpdateDifficultyPointsText();
	void UpdateInfiniteNodeStatus();
	void UpdateNodeStates();

	class UWidget* BP_GetDesiredFocusTarget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_DifficultyTree_C">();
	}
	static class UWidget_DifficultyTree_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_DifficultyTree_C>();
	}
};
static_assert(alignof(UWidget_DifficultyTree_C) == 0x000008, "Wrong alignment on UWidget_DifficultyTree_C");
static_assert(sizeof(UWidget_DifficultyTree_C) == 0x000550, "Wrong size on UWidget_DifficultyTree_C");
static_assert(offsetof(UWidget_DifficultyTree_C, UberGraphFrame) == 0x000438, "Member 'UWidget_DifficultyTree_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Background_Vignette) == 0x000440, "Member 'UWidget_DifficultyTree_C::Background_Vignette' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, BackgroundShadow) == 0x000448, "Member 'UWidget_DifficultyTree_C::BackgroundShadow' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, CommonActionWidget_Back) == 0x000450, "Member 'UWidget_DifficultyTree_C::CommonActionWidget_Back' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, CommonActionWidget_Reset) == 0x000458, "Member 'UWidget_DifficultyTree_C::CommonActionWidget_Reset' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, DifficultyPointDescription) == 0x000460, "Member 'UWidget_DifficultyTree_C::DifficultyPointDescription' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, DifficultyPoints) == 0x000468, "Member 'UWidget_DifficultyTree_C::DifficultyPoints' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Frame) == 0x000470, "Member 'UWidget_DifficultyTree_C::Frame' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, HorizontalBox_PredeterminedNodesRow) == 0x000478, "Member 'UWidget_DifficultyTree_C::HorizontalBox_PredeterminedNodesRow' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Image_89) == 0x000480, "Member 'UWidget_DifficultyTree_C::Image_89' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Image_94) == 0x000488, "Member 'UWidget_DifficultyTree_C::Image_94' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, InfiniteEnabledBackground) == 0x000490, "Member 'UWidget_DifficultyTree_C::InfiniteEnabledBackground' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, OceanicOmens) == 0x000498, "Member 'UWidget_DifficultyTree_C::OceanicOmens' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, RetainerBox_0) == 0x0004A0, "Member 'UWidget_DifficultyTree_C::RetainerBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, TextBlock_BossesDamage) == 0x0004A8, "Member 'UWidget_DifficultyTree_C::TextBlock_BossesDamage' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, TextBlock_BossesHealth) == 0x0004B0, "Member 'UWidget_DifficultyTree_C::TextBlock_BossesHealth' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, TextBlock_EnemyDamage) == 0x0004B8, "Member 'UWidget_DifficultyTree_C::TextBlock_EnemyDamage' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, TextBlock_EnemyHealth) == 0x0004C0, "Member 'UWidget_DifficultyTree_C::TextBlock_EnemyHealth' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Title) == 0x0004C8, "Member 'UWidget_DifficultyTree_C::Title' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, UniformGridPanel) == 0x0004D0, "Member 'UWidget_DifficultyTree_C::UniformGridPanel' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Widget_DifficultyNodeInfinite) == 0x0004D8, "Member 'UWidget_DifficultyTree_C::Widget_DifficultyNodeInfinite' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Widget_TextButton) == 0x0004E0, "Member 'UWidget_DifficultyTree_C::Widget_TextButton' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, Widget_TextButton_1) == 0x0004E8, "Member 'UWidget_DifficultyTree_C::Widget_TextButton_1' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, PredeterminedNodeLineOffset) == 0x0004F0, "Member 'UWidget_DifficultyTree_C::PredeterminedNodeLineOffset' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, SoftEndGameDifficultyAssets) == 0x0004F8, "Member 'UWidget_DifficultyTree_C::SoftEndGameDifficultyAssets' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, SoftPrederminedDifficultyAssets) == 0x000508, "Member 'UWidget_DifficultyTree_C::SoftPrederminedDifficultyAssets' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, EnemyBossBonusMutableKey) == 0x000518, "Member 'UWidget_DifficultyTree_C::EnemyBossBonusMutableKey' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, EnemyDamageBonusPerAssignedPoint) == 0x000520, "Member 'UWidget_DifficultyTree_C::EnemyDamageBonusPerAssignedPoint' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, EnemyHealthBonusPerAssignedPoint) == 0x000528, "Member 'UWidget_DifficultyTree_C::EnemyHealthBonusPerAssignedPoint' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, BossDamageBonusPerAssignedPoint) == 0x000530, "Member 'UWidget_DifficultyTree_C::BossDamageBonusPerAssignedPoint' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, BossHealthBonusPerAssignedPoint) == 0x000538, "Member 'UWidget_DifficultyTree_C::BossHealthBonusPerAssignedPoint' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyTree_C, OnPointsChanged) == 0x000540, "Member 'UWidget_DifficultyTree_C::OnPointsChanged' has a wrong offset!");

}

