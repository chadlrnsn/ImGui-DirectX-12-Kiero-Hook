#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnrealUSDWrapper

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum UnrealUSDWrapper.EUsdPurpose
// NumValues: 0x0005
enum class EUsdPurpose : uint8
{
	Default                                  = 0,
	Proxy                                    = 1,
	Render                                   = 2,
	Guide                                    = 4,
	EUsdPurpose_MAX                          = 5,
};

// Enum UnrealUSDWrapper.EUsdDefaultKind
// NumValues: 0x0007
enum class EUsdDefaultKind : uint8
{
	None                                     = 0,
	Model                                    = 1,
	Component                                = 2,
	Group                                    = 4,
	Assembly                                 = 8,
	Subcomponent                             = 16,
	EUsdDefaultKind_MAX                      = 17,
};

// Enum UnrealUSDWrapper.EUsdLoadPolicy
// NumValues: 0x0003
enum class EUsdLoadPolicy : uint8
{
	UsdLoadWithDescendants                   = 0,
	UsdLoadWithoutDescendants                = 1,
	EUsdLoadPolicy_MAX                       = 2,
};

// Enum UnrealUSDWrapper.EUsdInitialLoadSet
// NumValues: 0x0003
enum class EUsdInitialLoadSet : uint8
{
	LoadAll                                  = 0,
	LoadNone                                 = 1,
	EUsdInitialLoadSet_MAX                   = 2,
};

// Enum UnrealUSDWrapper.EUsdInterpolationType
// NumValues: 0x0003
enum class EUsdInterpolationType : uint8
{
	Held                                     = 0,
	Linear                                   = 1,
	EUsdInterpolationType_MAX                = 2,
};

// Enum UnrealUSDWrapper.EUsdRootMotionHandling
// NumValues: 0x0004
enum class EUsdRootMotionHandling : uint8
{
	NoAdditionalRootMotion                   = 0,
	UseMotionFromSkelRoot                    = 1,
	UseMotionFromSkeleton                    = 2,
	EUsdRootMotionHandling_MAX               = 3,
};

// Enum UnrealUSDWrapper.EGeometryCacheImport
// NumValues: 0x0004
enum class EGeometryCacheImport : uint8
{
	Never                                    = 0,
	OnLoad                                   = 1,
	OnSave                                   = 2,
	EGeometryCacheImport_MAX                 = 3,
};

// Enum UnrealUSDWrapper.EUsdListPosition
// NumValues: 0x0005
enum class EUsdListPosition : uint8
{
	FrontOfPrependList                       = 0,
	BackOfPrependList                        = 1,
	FrontOfAppendList                        = 2,
	BackOfAppendList                         = 3,
	EUsdListPosition_MAX                     = 4,
};

// ScriptStruct UnrealUSDWrapper.Matrix2D
// 0x0020 (0x0020 - 0x0000)
struct FMatrix2D final
{
public:
	struct FVector2D                              Row0;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Row1;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatrix2D) == 0x000008, "Wrong alignment on FMatrix2D");
static_assert(sizeof(FMatrix2D) == 0x000020, "Wrong size on FMatrix2D");
static_assert(offsetof(FMatrix2D, Row0) == 0x000000, "Member 'FMatrix2D::Row0' has a wrong offset!");
static_assert(offsetof(FMatrix2D, Row1) == 0x000010, "Member 'FMatrix2D::Row1' has a wrong offset!");

// ScriptStruct UnrealUSDWrapper.Matrix3D
// 0x0048 (0x0048 - 0x0000)
struct FMatrix3D final
{
public:
	struct FVector                                Row0;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Row1;                                              // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Row2;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatrix3D) == 0x000008, "Wrong alignment on FMatrix3D");
static_assert(sizeof(FMatrix3D) == 0x000048, "Wrong size on FMatrix3D");
static_assert(offsetof(FMatrix3D, Row0) == 0x000000, "Member 'FMatrix3D::Row0' has a wrong offset!");
static_assert(offsetof(FMatrix3D, Row1) == 0x000018, "Member 'FMatrix3D::Row1' has a wrong offset!");
static_assert(offsetof(FMatrix3D, Row2) == 0x000030, "Member 'FMatrix3D::Row2' has a wrong offset!");

}

