#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HealAltar

#include "Basic.hpp"

#include "RGame_structs.hpp"
#include "RGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Niagara_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HealAltar.BP_HealAltar_C
// 0x00E0 (0x0388 - 0x02A8)
class ABP_HealAltar_C final : public ARHealAltar
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDMActorProximityBoxComponent*          VoiceProximity;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OrbEffect;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_HealAltar_Bubbling;                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blood;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      EnabledEffect;                                     // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Consumed;                                          // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URCharacterMutatorPrimaryAsset*         MutatorAsset;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBossAltar;                                       // 0x0310(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AREnemySpawnAreaSegment*                AssociatedSpawnAreaSegment;                        // 0x0318(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGameplayTag, class URMutatorPrimaryAsset*> RequiredMutatorPAMap;                    // 0x0320(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class APlayerController*                      PlayerController;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRUniqueHealAltar>              HealAltarSelections;                               // 0x0378(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)

public:
	void AddHealAltarSelectionForController(class APlayerController* PlayerController_0, bool bConsumed);
	void BndEvt__BP_HealAltar_VoiceProximity_K2Node_ComponentBoundEvent_0_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	bool CanInteract(class APlayerController* Controller);
	void CheckAndUpdateLootOptions(class AController* Controller);
	void ExecuteUbergraph_BP_HealAltar(int32 EntryPoint);
	void GetRequiredMutatorPA(class URMutatorPrimaryAsset** MutatorPA);
	void HasRequiredMutatorPA(class APlayerController* PlayerController_0, bool* Result);
	void OnFocus(class APlayerController* Controller);
	void OnFocusGone(class APlayerController* Controller);
	void OnInteract(class APlayerController* Controller);
	void OnInvoke_F0A07DE44DD9ADA35E1D4BB1D66E2597();
	void PlayerStateIsValid(bool* IsValid);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ToggleInteractionIndicatorVisibility(class AActor* InteractingActor, const bool NewVisible);

	class FText GetInteractableAlternativeDescription() const;
	int32 GetInteractableCost() const;
	class FText GetInteractableCostCurrencyType() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableName() const;
	class FText GetInteractableSubHeader() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;
	bool ShouldShowOnRadar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HealAltar_C">();
	}
	static class ABP_HealAltar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HealAltar_C>();
	}
};
static_assert(alignof(ABP_HealAltar_C) == 0x000008, "Wrong alignment on ABP_HealAltar_C");
static_assert(sizeof(ABP_HealAltar_C) == 0x000388, "Wrong size on ABP_HealAltar_C");
static_assert(offsetof(ABP_HealAltar_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_HealAltar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, PointLight) == 0x0002B0, "Member 'ABP_HealAltar_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, VoiceProximity) == 0x0002B8, "Member 'ABP_HealAltar_C::VoiceProximity' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, OrbEffect) == 0x0002C0, "Member 'ABP_HealAltar_C::OrbEffect' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, Decal) == 0x0002C8, "Member 'ABP_HealAltar_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, SC_HealAltar_Bubbling) == 0x0002D0, "Member 'ABP_HealAltar_C::SC_HealAltar_Bubbling' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, Blood) == 0x0002D8, "Member 'ABP_HealAltar_C::Blood' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, Box) == 0x0002E0, "Member 'ABP_HealAltar_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, EnabledEffect) == 0x0002E8, "Member 'ABP_HealAltar_C::EnabledEffect' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, StaticMesh) == 0x0002F0, "Member 'ABP_HealAltar_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_HealAltar_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, Consumed) == 0x000300, "Member 'ABP_HealAltar_C::Consumed' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, MutatorAsset) == 0x000308, "Member 'ABP_HealAltar_C::MutatorAsset' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, IsBossAltar) == 0x000310, "Member 'ABP_HealAltar_C::IsBossAltar' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, AssociatedSpawnAreaSegment) == 0x000318, "Member 'ABP_HealAltar_C::AssociatedSpawnAreaSegment' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, RequiredMutatorPAMap) == 0x000320, "Member 'ABP_HealAltar_C::RequiredMutatorPAMap' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, PlayerController) == 0x000370, "Member 'ABP_HealAltar_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABP_HealAltar_C, HealAltarSelections) == 0x000378, "Member 'ABP_HealAltar_C::HealAltarSelections' has a wrong offset!");

}

