#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_SpiritGauge

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.ExecuteUbergraph_Widget_SpiritGauge
// 0x0078 (0x0078 - 0x0000)
struct Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge) == 0x000008, "Wrong alignment on Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge");
static_assert(sizeof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge) == 0x000078, "Wrong size on Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, EntryPoint) == 0x000000, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::EntryPoint' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, K2Node_Event_MyGeometry) == 0x000004, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000040, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_Lerp_ReturnValue) == 0x000058, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000060, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_Lerp_A_ImplicitCast) == 0x000068, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x000070, "Member 'Widget_SpiritGauge_C_ExecuteUbergraph_Widget_SpiritGauge::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.GaugeReset
// 0x0008 (0x0008 - 0x0000)
struct Widget_SpiritGauge_C_GaugeReset final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_GaugeReset) == 0x000008, "Wrong alignment on Widget_SpiritGauge_C_GaugeReset");
static_assert(sizeof(Widget_SpiritGauge_C_GaugeReset) == 0x000008, "Wrong size on Widget_SpiritGauge_C_GaugeReset");
static_assert(offsetof(Widget_SpiritGauge_C_GaugeReset, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'Widget_SpiritGauge_C_GaugeReset::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.SetGaugePercent
// 0x0010 (0x0010 - 0x0000)
struct Widget_SpiritGauge_C_SetGaugePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_TargetGaugePrecentage_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_SetGaugePercent) == 0x000008, "Wrong alignment on Widget_SpiritGauge_C_SetGaugePercent");
static_assert(sizeof(Widget_SpiritGauge_C_SetGaugePercent) == 0x000010, "Wrong size on Widget_SpiritGauge_C_SetGaugePercent");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugePercent, Percent) == 0x000000, "Member 'Widget_SpiritGauge_C_SetGaugePercent::Percent' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugePercent, K2Node_VariableSet_TargetGaugePrecentage_ImplicitCast) == 0x000008, "Member 'Widget_SpiritGauge_C_SetGaugePercent::K2Node_VariableSet_TargetGaugePrecentage_ImplicitCast' has a wrong offset!");

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.SetGaugeVisibility
// 0x0018 (0x0018 - 0x0000)
struct Widget_SpiritGauge_C_SetGaugeVisibility final
{
public:
	ESlateVisibility                              Visibility_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_SetGaugeVisibility) == 0x000008, "Wrong alignment on Widget_SpiritGauge_C_SetGaugeVisibility");
static_assert(sizeof(Widget_SpiritGauge_C_SetGaugeVisibility) == 0x000018, "Wrong size on Widget_SpiritGauge_C_SetGaugeVisibility");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugeVisibility, Visibility_0) == 0x000000, "Member 'Widget_SpiritGauge_C_SetGaugeVisibility::Visibility_0' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugeVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'Widget_SpiritGauge_C_SetGaugeVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugeVisibility, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'Widget_SpiritGauge_C_SetGaugeVisibility::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_SetGaugeVisibility, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000010, "Member 'Widget_SpiritGauge_C_SetGaugeVisibility::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.ThresholdReached
// 0x0010 (0x0010 - 0x0000)
struct Widget_SpiritGauge_C_ThresholdReached final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_ThresholdReached) == 0x000008, "Wrong alignment on Widget_SpiritGauge_C_ThresholdReached");
static_assert(sizeof(Widget_SpiritGauge_C_ThresholdReached) == 0x000010, "Wrong size on Widget_SpiritGauge_C_ThresholdReached");
static_assert(offsetof(Widget_SpiritGauge_C_ThresholdReached, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'Widget_SpiritGauge_C_ThresholdReached::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_ThresholdReached, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'Widget_SpiritGauge_C_ThresholdReached::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function Widget_SpiritGauge.Widget_SpiritGauge_C.Tick
// 0x003C (0x003C - 0x0000)
struct Widget_SpiritGauge_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SpiritGauge_C_Tick) == 0x000004, "Wrong alignment on Widget_SpiritGauge_C_Tick");
static_assert(sizeof(Widget_SpiritGauge_C_Tick) == 0x00003C, "Wrong size on Widget_SpiritGauge_C_Tick");
static_assert(offsetof(Widget_SpiritGauge_C_Tick, MyGeometry) == 0x000000, "Member 'Widget_SpiritGauge_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Widget_SpiritGauge_C_Tick, InDeltaTime) == 0x000038, "Member 'Widget_SpiritGauge_C_Tick::InDeltaTime' has a wrong offset!");

}

