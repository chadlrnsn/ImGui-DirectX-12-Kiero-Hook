#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseChest

#include "Basic.hpp"

#include "RGame_structs.hpp"
#include "RGame_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseChest.BP_BaseChest_C
// 0x0128 (0x0518 - 0x03F0)
class ABP_BaseChest_C : public ARLootableChest
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDMActorProximityBoxComponent*          Proximity_InteractableIndicator;                   // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_InteractableIndicator;                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GoldPile;                                          // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Chains;                                            // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BuildupMesh;                                       // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IdleAuraMesh2;                                     // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   IdleAuraMesh;                                      // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OpenedAuraMesh;                                    // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Chest_Attached_01;                              // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    RewardSpawnPoint;                                  // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ChestMesh;                                         // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PickedupTimeline_Opacity_9489DEEF47131AF754D2C5BF6E5A8AF8; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PickedupTimeline__Direction_9489DEEF47131AF754D2C5BF6E5A8AF8; // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PickedupTimeline;                                  // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         IdleFadeoutTimeline_Opacity_D10C571545796F20039078A20108C104; // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            IdleFadeoutTimeline__Direction_D10C571545796F20039078A20108C104; // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     IdleFadeoutTimeline;                               // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BuildupTimeline_Opacity_084246CB4BE20383C9023AB8FFF92E3B; // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BuildupTimeline__Direction_084246CB4BE20383C9023AB8FFF92E3B; // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BuildupTimeline;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EChestState                                   ChestState;                                        // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LockTime;                                          // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpawnChance;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BuildupMeshDynamicMaterial;                        // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       IdleMeshDynamicMaterials;                          // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               OpenedMeshDynamicMaterial;                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RectLightInitialIntensity;                         // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PointLightInitialIntensity;                        // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UABP_Generic_Chest_C*                   AnimBP;                                            // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RewardSpawedLoopSFX;                               // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseChest_C*                        SuperSelf;                                         // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PushSealedNotification;                            // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRUniqueChestState>             UniqueChestState;                                  // 0x0500(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FoundPlayerInArray;                                // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_BaseChest_Proximity_InteractableIndicator_K2Node_ComponentBoundEvent_2_OnOverlapProximityBoxComponentEnter__DelegateSignature(class AActor* Actor);
	void BndEvt__BP_BaseChest_Proximity_InteractableIndicator_K2Node_ComponentBoundEvent_3_OnOverlapProximityBoxComponentExit__DelegateSignature(class AActor* Actor);
	void BPOpenChestAndSpawnRewards();
	void BuildupTimeline__FinishedFunc();
	void BuildupTimeline__UpdateFunc();
	bool CanInteract(class APlayerController* Controller);
	void CheckAndUpdateChestState(class AController* Controller);
	void ChestOpen(class APlayerController* PlayerController);
	void ExecuteUbergraph_BP_BaseChest(int32 EntryPoint);
	void Get_Reward_Spawn_Pos(struct FVector* Pos);
	void HandleInteraction(class APlayerController* PlayerController);
	void IdleFadeoutTimeline__FinishedFunc();
	void IdleFadeoutTimeline__UpdateFunc();
	void InitializeVisuals();
	void IsLocked(bool* Value);
	void IsLooted(bool* Value);
	void LootPickedUpUpdate(double Delta);
	void OnInteract(class APlayerController* Controller);
	void OnInvoke_351379BC43035E6EB31590AE23A8820B();
	void OnItemPickedUp(class ARPickupableItem* PickedUpItem, int32 PickupCost, class APlayerController* PlayerController);
	void OnKeyUsed_Event(class AActor* ActorUsedOn);
	void OnObjectiveEnded_Event(const struct FGameplayTag& ObjectiveTag, bool bCompleted);
	void PickedupTimeline__FinishedFunc();
	void PickedupTimeline__UpdateFunc();
	void PlayBuildupTimeline(double Duration, double From, double To);
	void PlayerStateIsValid(bool* IsValid);
	void PlayIdleFadeoutTimeline(double Duration);
	void PlayPickedupTimeline(double Duration);
	void ReceiveBeginPlay();
	void RunRoutedObjectBehaviour();
	void RunRoutedObjectBehaviourByName(class FName BehaviourName);
	void RunRoutedObjectBehaviourWithData(const struct FRoutedObjectData& RoutedData);
	void SetChestStateForController(EChestState NewChestState, class APlayerController* PlayerController);
	void SetupEventLogic();
	void SpawnChestOpenSFX();
	void Unlock();
	void UpdateChainsVisibility();
	void UserConstructionScript();

	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	class UTexture2D* GetPingableIconTexture() const;
	class FText GetPingableName() const;
	bool IsCurrentlyPinged() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseChest_C">();
	}
	static class ABP_BaseChest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseChest_C>();
	}
};
static_assert(alignof(ABP_BaseChest_C) == 0x000008, "Wrong alignment on ABP_BaseChest_C");
static_assert(sizeof(ABP_BaseChest_C) == 0x000518, "Wrong size on ABP_BaseChest_C");
static_assert(offsetof(ABP_BaseChest_C, UberGraphFrame) == 0x0003F0, "Member 'ABP_BaseChest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, Proximity_InteractableIndicator) == 0x0003F8, "Member 'ABP_BaseChest_C::Proximity_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, Widget_InteractableIndicator) == 0x000400, "Member 'ABP_BaseChest_C::Widget_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, GoldPile) == 0x000408, "Member 'ABP_BaseChest_C::GoldPile' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, Chains) == 0x000410, "Member 'ABP_BaseChest_C::Chains' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PointLight1) == 0x000418, "Member 'ABP_BaseChest_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, BuildupMesh) == 0x000420, "Member 'ABP_BaseChest_C::BuildupMesh' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleAuraMesh2) == 0x000428, "Member 'ABP_BaseChest_C::IdleAuraMesh2' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleAuraMesh) == 0x000430, "Member 'ABP_BaseChest_C::IdleAuraMesh' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, RectLight) == 0x000438, "Member 'ABP_BaseChest_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, OpenedAuraMesh) == 0x000440, "Member 'ABP_BaseChest_C::OpenedAuraMesh' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, NS_Chest_Attached_01) == 0x000448, "Member 'ABP_BaseChest_C::NS_Chest_Attached_01' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, RewardSpawnPoint) == 0x000450, "Member 'ABP_BaseChest_C::RewardSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PointLight) == 0x000458, "Member 'ABP_BaseChest_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, ChestMesh) == 0x000460, "Member 'ABP_BaseChest_C::ChestMesh' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, Scene) == 0x000468, "Member 'ABP_BaseChest_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PickedupTimeline_Opacity_9489DEEF47131AF754D2C5BF6E5A8AF8) == 0x000470, "Member 'ABP_BaseChest_C::PickedupTimeline_Opacity_9489DEEF47131AF754D2C5BF6E5A8AF8' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PickedupTimeline__Direction_9489DEEF47131AF754D2C5BF6E5A8AF8) == 0x000474, "Member 'ABP_BaseChest_C::PickedupTimeline__Direction_9489DEEF47131AF754D2C5BF6E5A8AF8' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PickedupTimeline) == 0x000478, "Member 'ABP_BaseChest_C::PickedupTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleFadeoutTimeline_Opacity_D10C571545796F20039078A20108C104) == 0x000480, "Member 'ABP_BaseChest_C::IdleFadeoutTimeline_Opacity_D10C571545796F20039078A20108C104' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleFadeoutTimeline__Direction_D10C571545796F20039078A20108C104) == 0x000484, "Member 'ABP_BaseChest_C::IdleFadeoutTimeline__Direction_D10C571545796F20039078A20108C104' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleFadeoutTimeline) == 0x000488, "Member 'ABP_BaseChest_C::IdleFadeoutTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, BuildupTimeline_Opacity_084246CB4BE20383C9023AB8FFF92E3B) == 0x000490, "Member 'ABP_BaseChest_C::BuildupTimeline_Opacity_084246CB4BE20383C9023AB8FFF92E3B' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, BuildupTimeline__Direction_084246CB4BE20383C9023AB8FFF92E3B) == 0x000494, "Member 'ABP_BaseChest_C::BuildupTimeline__Direction_084246CB4BE20383C9023AB8FFF92E3B' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, BuildupTimeline) == 0x000498, "Member 'ABP_BaseChest_C::BuildupTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, ChestState) == 0x0004A0, "Member 'ABP_BaseChest_C::ChestState' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, LockTime) == 0x0004A8, "Member 'ABP_BaseChest_C::LockTime' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, SpawnChance) == 0x0004B0, "Member 'ABP_BaseChest_C::SpawnChance' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, BuildupMeshDynamicMaterial) == 0x0004B8, "Member 'ABP_BaseChest_C::BuildupMeshDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, IdleMeshDynamicMaterials) == 0x0004C0, "Member 'ABP_BaseChest_C::IdleMeshDynamicMaterials' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, OpenedMeshDynamicMaterial) == 0x0004D0, "Member 'ABP_BaseChest_C::OpenedMeshDynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, RectLightInitialIntensity) == 0x0004D8, "Member 'ABP_BaseChest_C::RectLightInitialIntensity' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PointLightInitialIntensity) == 0x0004DC, "Member 'ABP_BaseChest_C::PointLightInitialIntensity' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, AnimBP) == 0x0004E0, "Member 'ABP_BaseChest_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, RewardSpawedLoopSFX) == 0x0004E8, "Member 'ABP_BaseChest_C::RewardSpawedLoopSFX' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, SuperSelf) == 0x0004F0, "Member 'ABP_BaseChest_C::SuperSelf' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, PushSealedNotification) == 0x0004F8, "Member 'ABP_BaseChest_C::PushSealedNotification' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, UniqueChestState) == 0x000500, "Member 'ABP_BaseChest_C::UniqueChestState' has a wrong offset!");
static_assert(offsetof(ABP_BaseChest_C, FoundPlayerInArray) == 0x000510, "Member 'ABP_BaseChest_C::FoundPlayerInArray' has a wrong offset!");

}

