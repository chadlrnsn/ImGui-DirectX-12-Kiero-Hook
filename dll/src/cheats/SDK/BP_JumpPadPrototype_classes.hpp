#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JumpPadPrototype

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JumpPadPrototype.BP_JumpPadPrototype_C
// 0x0058 (0x0300 - 0x02A8)
class ABP_JumpPadPrototype_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        MSS_JumpPad_Updraft_Loop;                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshVFX;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_JumpPad_Attached_01;                            // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        LaunchForce;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnabledFromStart;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x02F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate(int32 ID, bool Positive);
	void ExecuteUbergraph_BP_JumpPadPrototype(int32 EntryPoint);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void SetJumpPadEnable(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JumpPadPrototype_C">();
	}
	static class ABP_JumpPadPrototype_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_JumpPadPrototype_C>();
	}
};
static_assert(alignof(ABP_JumpPadPrototype_C) == 0x000008, "Wrong alignment on ABP_JumpPadPrototype_C");
static_assert(sizeof(ABP_JumpPadPrototype_C) == 0x000300, "Wrong size on ABP_JumpPadPrototype_C");
static_assert(offsetof(ABP_JumpPadPrototype_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_JumpPadPrototype_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, MSS_JumpPad_Updraft_Loop) == 0x0002B0, "Member 'ABP_JumpPadPrototype_C::MSS_JumpPad_Updraft_Loop' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, PointLight) == 0x0002B8, "Member 'ABP_JumpPadPrototype_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, Decal) == 0x0002C0, "Member 'ABP_JumpPadPrototype_C::Decal' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, Cylinder) == 0x0002C8, "Member 'ABP_JumpPadPrototype_C::Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, MeshVFX) == 0x0002D0, "Member 'ABP_JumpPadPrototype_C::MeshVFX' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, NS_JumpPad_Attached_01) == 0x0002D8, "Member 'ABP_JumpPadPrototype_C::NS_JumpPad_Attached_01' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, StaticMesh) == 0x0002E0, "Member 'ABP_JumpPadPrototype_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_JumpPadPrototype_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, LaunchForce) == 0x0002F0, "Member 'ABP_JumpPadPrototype_C::LaunchForce' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, EnabledFromStart) == 0x0002F8, "Member 'ABP_JumpPadPrototype_C::EnabledFromStart' has a wrong offset!");
static_assert(offsetof(ABP_JumpPadPrototype_C, Enabled) == 0x0002F9, "Member 'ABP_JumpPadPrototype_C::Enabled' has a wrong offset!");

}

