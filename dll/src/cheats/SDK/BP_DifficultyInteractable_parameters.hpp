#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DifficultyInteractable

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_CanInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_CanInteract) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_CanInteract");
static_assert(sizeof(BP_DifficultyInteractable_C_CanInteract) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_CanInteract");
static_assert(offsetof(BP_DifficultyInteractable_C_CanInteract, Controller) == 0x000000, "Member 'BP_DifficultyInteractable_C_CanInteract::Controller' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_CanInteract, ReturnValue) == 0x000008, "Member 'BP_DifficultyInteractable_C_CanInteract::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.ExecuteUbergraph_BP_DifficultyInteractable
// 0x0110 (0x0110 - 0x0000)
struct BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_controller_2;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_controller_1;                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewVisible;                           // 0x0020(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_controller;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget_DifficultyTree_C*               CallFunc_PushWidget_OutWidget;                     // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_IndicatorLevel_1;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPercentPointsAssigned_Percent;         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentPointsAssigned_Percent_1;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_IndicatorLevel;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARRadarManager*                         CallFunc_GetRadarManager_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetEffectMaterial_ReturnValue;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPercentPointsAssigned_Percent_2;       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x00CC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00E0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable");
static_assert(sizeof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable) == 0x000110, "Wrong size on BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, EntryPoint) == 0x000000, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_controller_2) == 0x000008, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_controller_2' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_controller_1) == 0x000010, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_controller_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_InteractingActor) == 0x000018, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_NewVisible) == 0x000020, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_NewVisible' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_controller) == 0x000028, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_controller' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_PushWidget_OutWidget) == 0x000030, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_PushWidget_OutWidget' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsLocalController_ReturnValue) == 0x000038, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CustomEvent_IndicatorLevel_1) == 0x000040, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CustomEvent_IndicatorLevel_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_GetPercentPointsAssigned_Percent) == 0x000060, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_GetPercentPointsAssigned_Percent' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_GetPercentPointsAssigned_Percent_1) == 0x000068, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_GetPercentPointsAssigned_Percent_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CreateDelegate_OutputDelegate_1) == 0x000070, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CustomEvent_IndicatorLevel) == 0x000080, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CustomEvent_IndicatorLevel' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_Lerp_ReturnValue) == 0x000088, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000090, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue_1) == 0x000098, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_GetRadarManager_ReturnValue) == 0x0000A0, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_GetRadarManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue_2) == 0x0000A8, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_GetEffectMaterial_ReturnValue) == 0x0000B0, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_GetEffectMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue_3) == 0x0000B8, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_GetPercentPointsAssigned_Percent_2) == 0x0000C0, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_GetPercentPointsAssigned_Percent_2' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x0000C8, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000CC, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue_4) == 0x0000DC, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000E0, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, K2Node_Event_EndPlayReason) == 0x0000F0, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_IsValid_ReturnValue_5) == 0x0000F1, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_Lerp_A_ImplicitCast) == 0x0000F8, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000100, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000108, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00010C, "Member 'BP_DifficultyInteractable_C_ExecuteUbergraph_BP_DifficultyInteractable::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetPercentPointsAssigned
// 0x00D0 (0x00D0 - 0x0000)
struct BP_DifficultyInteractable_C_GetPercentPointsAssigned final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumTotalPoints;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumPointsAssigned;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class URDifficultyPrimaryAsset>> DifficultyAssets;                         // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class URDifficultyPrimaryAsset>> Temp_softobject_Variable;                 // 0x0020(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class URDifficultyPrimaryAsset>> Temp_softobject_Variable_1;               // 0x0040(0x0010)(ReferenceParm)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class URDifficultyPrimaryAsset> CallFunc_Array_Get_Item;                          // 0x0070(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue;  // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URDifficultyPrimaryAsset*               K2Node_DynamicCast_AsRDifficulty_Primary_Asset;    // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetPercentPointsAssigned) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetPercentPointsAssigned");
static_assert(sizeof(BP_DifficultyInteractable_C_GetPercentPointsAssigned) == 0x0000D0, "Wrong size on BP_DifficultyInteractable_C_GetPercentPointsAssigned");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, Percent) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::Percent' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, NumTotalPoints) == 0x000008, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::NumTotalPoints' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, NumPointsAssigned) == 0x00000C, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::NumPointsAssigned' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, DifficultyAssets) == 0x000010, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::DifficultyAssets' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, Temp_softobject_Variable) == 0x000020, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, Temp_softobject_Variable_1) == 0x000040, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000050, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000058, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_SafeDivide_ReturnValue) == 0x000060, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_GetRGameState_ReturnValue) == 0x000068, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue) == 0x0000A0, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_LoadObjectFromSoftObjectPtr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_IsValid_ReturnValue) == 0x0000A9, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, K2Node_DynamicCast_AsRDifficulty_Primary_Asset) == 0x0000B0, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::K2Node_DynamicCast_AsRDifficulty_Primary_Asset' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x0000B9, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x0000BC, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_GetNumTiers_ReturnValue) == 0x0000C0, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000C4, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_GetPercentPointsAssigned, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000C8, "Member 'BP_DifficultyInteractable_C_GetPercentPointsAssigned::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.HideHighlight
// 0x0040 (0x0040 - 0x0000)
struct BP_DifficultyInteractable_C_HideHighlight final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_HideHighlight) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_HideHighlight");
static_assert(sizeof(BP_DifficultyInteractable_C_HideHighlight) == 0x000040, "Wrong size on BP_DifficultyInteractable_C_HideHighlight");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_DifficultyInteractable_C_HideHighlight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_DifficultyInteractable_C_HideHighlight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_GetWidget_ReturnValue) == 0x000028, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_HideHighlight, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_DifficultyInteractable_C_HideHighlight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.OnFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_OnFocus final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_OnFocus) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_OnFocus");
static_assert(sizeof(BP_DifficultyInteractable_C_OnFocus) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_OnFocus");
static_assert(offsetof(BP_DifficultyInteractable_C_OnFocus, Controller) == 0x000000, "Member 'BP_DifficultyInteractable_C_OnFocus::Controller' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.OnFocusGone
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_OnFocusGone final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_OnFocusGone) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_OnFocusGone");
static_assert(sizeof(BP_DifficultyInteractable_C_OnFocusGone) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_OnFocusGone");
static_assert(offsetof(BP_DifficultyInteractable_C_OnFocusGone, Controller) == 0x000000, "Member 'BP_DifficultyInteractable_C_OnFocusGone::Controller' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_OnInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_OnInteract) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_OnInteract");
static_assert(sizeof(BP_DifficultyInteractable_C_OnInteract) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_OnInteract");
static_assert(offsetof(BP_DifficultyInteractable_C_OnInteract, Controller) == 0x000000, "Member 'BP_DifficultyInteractable_C_OnInteract::Controller' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.OnPointsChanged_Multicast
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_OnPointsChanged_Multicast final
{
public:
	double                                        IndicatorLevel;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_OnPointsChanged_Multicast) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_OnPointsChanged_Multicast");
static_assert(sizeof(BP_DifficultyInteractable_C_OnPointsChanged_Multicast) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_OnPointsChanged_Multicast");
static_assert(offsetof(BP_DifficultyInteractable_C_OnPointsChanged_Multicast, IndicatorLevel) == 0x000000, "Member 'BP_DifficultyInteractable_C_OnPointsChanged_Multicast::IndicatorLevel' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_DifficultyInteractable_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_DifficultyInteractable_C_ReceiveEndPlay");
static_assert(sizeof(BP_DifficultyInteractable_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_DifficultyInteractable_C_ReceiveEndPlay");
static_assert(offsetof(BP_DifficultyInteractable_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_DifficultyInteractable_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.SetupHighlight
// 0x0088 (0x0088 - 0x0000)
struct BP_DifficultyInteractable_C_SetupHighlight final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHasEverSpentDifficultyPoints_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDifficultyTreeTotalAssignedPoints_ReturnValue; // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0050(0x0010)()
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0068(0x0010)()
	class URObjectHighlightWidget*                K2Node_DynamicCast_AsRObject_Highlight_Widget;     // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_SetupHighlight) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_SetupHighlight");
static_assert(sizeof(BP_DifficultyInteractable_C_SetupHighlight) == 0x000088, "Wrong size on BP_DifficultyInteractable_C_SetupHighlight");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_DifficultyInteractable_C_SetupHighlight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_DifficultyInteractable_C_SetupHighlight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000010, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_GetHasEverSpentDifficultyPoints_ReturnValue) == 0x000018, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_GetHasEverSpentDifficultyPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_GetDifficultyTreeTotalAssignedPoints_ReturnValue) == 0x00001C, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_GetDifficultyTreeTotalAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_MakeLiteralText_ReturnValue) == 0x000050, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_GetWidget_ReturnValue) == 0x000060, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000068, "Member 'BP_DifficultyInteractable_C_SetupHighlight::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, K2Node_DynamicCast_AsRObject_Highlight_Widget) == 0x000078, "Member 'BP_DifficultyInteractable_C_SetupHighlight::K2Node_DynamicCast_AsRObject_Highlight_Widget' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_SetupHighlight, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'BP_DifficultyInteractable_C_SetupHighlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.ToggleInteractionIndicatorVisibility
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVisible;                                        // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility");
static_assert(sizeof(BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility");
static_assert(offsetof(BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility, InteractingActor) == 0x000000, "Member 'BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility, NewVisible) == 0x000008, "Member 'BP_DifficultyInteractable_C_ToggleInteractionIndicatorVisibility::NewVisible' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.UpdateDifficultyIndicator
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_UpdateDifficultyIndicator final
{
public:
	double                                        IndicatorLevel;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_UpdateDifficultyIndicator) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_UpdateDifficultyIndicator");
static_assert(sizeof(BP_DifficultyInteractable_C_UpdateDifficultyIndicator) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_UpdateDifficultyIndicator");
static_assert(offsetof(BP_DifficultyInteractable_C_UpdateDifficultyIndicator, IndicatorLevel) == 0x000000, "Member 'BP_DifficultyInteractable_C_UpdateDifficultyIndicator::IndicatorLevel' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableAlternativeDescription
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableAlternativeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableAlternativeDescription) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableAlternativeDescription");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableAlternativeDescription) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetInteractableAlternativeDescription");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableAlternativeDescription, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableAlternativeDescription::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableCost
// 0x0004 (0x0004 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableCost) == 0x000004, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableCost");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableCost) == 0x000004, "Wrong size on BP_DifficultyInteractable_C_GetInteractableCost");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableCost, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableCost::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableCostCurrencyType
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableCostCurrencyType final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableCostCurrencyType) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableCostCurrencyType");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableCostCurrencyType) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetInteractableCostCurrencyType");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableCostCurrencyType, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableCostCurrencyType::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableDescription
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableDescription) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableDescription");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableDescription) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetInteractableDescription");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableDescription, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableDescription::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableName
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableName) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableName");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableName) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetInteractableName");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableName, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableName::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractableSubHeader
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractableSubHeader final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractableSubHeader) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractableSubHeader");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractableSubHeader) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetInteractableSubHeader");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractableSubHeader, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractableSubHeader::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetInteractionIndicatorWidget
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_GetInteractionIndicatorWidget final
{
public:
	class UWidgetComponent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetInteractionIndicatorWidget) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetInteractionIndicatorWidget");
static_assert(sizeof(BP_DifficultyInteractable_C_GetInteractionIndicatorWidget) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_GetInteractionIndicatorWidget");
static_assert(offsetof(BP_DifficultyInteractable_C_GetInteractionIndicatorWidget, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetInteractionIndicatorWidget::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetRadarIconColor
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetRadarIconColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetRadarIconColor) == 0x000004, "Wrong alignment on BP_DifficultyInteractable_C_GetRadarIconColor");
static_assert(sizeof(BP_DifficultyInteractable_C_GetRadarIconColor) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetRadarIconColor");
static_assert(offsetof(BP_DifficultyInteractable_C_GetRadarIconColor, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetRadarIconColor::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetRadarIconSize
// 0x0010 (0x0010 - 0x0000)
struct BP_DifficultyInteractable_C_GetRadarIconSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetRadarIconSize) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetRadarIconSize");
static_assert(sizeof(BP_DifficultyInteractable_C_GetRadarIconSize) == 0x000010, "Wrong size on BP_DifficultyInteractable_C_GetRadarIconSize");
static_assert(offsetof(BP_DifficultyInteractable_C_GetRadarIconSize, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetRadarIconSize::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.GetRadarObjectIcon
// 0x0008 (0x0008 - 0x0000)
struct BP_DifficultyInteractable_C_GetRadarObjectIcon final
{
public:
	class USlateBrushAsset*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_GetRadarObjectIcon) == 0x000008, "Wrong alignment on BP_DifficultyInteractable_C_GetRadarObjectIcon");
static_assert(sizeof(BP_DifficultyInteractable_C_GetRadarObjectIcon) == 0x000008, "Wrong size on BP_DifficultyInteractable_C_GetRadarObjectIcon");
static_assert(offsetof(BP_DifficultyInteractable_C_GetRadarObjectIcon, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_GetRadarObjectIcon::ReturnValue' has a wrong offset!");

// Function BP_DifficultyInteractable.BP_DifficultyInteractable_C.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct BP_DifficultyInteractable_C_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DifficultyInteractable_C_ShouldShowOnRadar) == 0x000001, "Wrong alignment on BP_DifficultyInteractable_C_ShouldShowOnRadar");
static_assert(sizeof(BP_DifficultyInteractable_C_ShouldShowOnRadar) == 0x000001, "Wrong size on BP_DifficultyInteractable_C_ShouldShowOnRadar");
static_assert(offsetof(BP_DifficultyInteractable_C_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'BP_DifficultyInteractable_C_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

}

