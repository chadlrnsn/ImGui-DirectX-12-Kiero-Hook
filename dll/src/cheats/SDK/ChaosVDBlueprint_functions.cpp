#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChaosVDBlueprint

#include "Basic.hpp"

#include "ChaosVDBlueprint_classes.hpp"
#include "ChaosVDBlueprint_parameters.hpp"


namespace SDK
{

// Function ChaosVDBlueprint.ChaosVDRuntimeBlueprintLibrary.RecordDebugDrawBox
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FBox&                      InBox                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosVDRuntimeBlueprintLibrary::RecordDebugDrawBox(const class UObject* WorldContext, const struct FBox& InBox, class FName Tag, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChaosVDRuntimeBlueprintLibrary", "RecordDebugDrawBox");

	Params::ChaosVDRuntimeBlueprintLibrary_RecordDebugDrawBox Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InBox = std::move(InBox);
	Parms.Tag = Tag;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChaosVDBlueprint.ChaosVDRuntimeBlueprintLibrary.RecordDebugDrawLine
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InStartLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InEndLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosVDRuntimeBlueprintLibrary::RecordDebugDrawLine(const class UObject* WorldContext, const struct FVector& InStartLocation, const struct FVector& InEndLocation, class FName Tag, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChaosVDRuntimeBlueprintLibrary", "RecordDebugDrawLine");

	Params::ChaosVDRuntimeBlueprintLibrary_RecordDebugDrawLine Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InStartLocation = std::move(InStartLocation);
	Parms.InEndLocation = std::move(InEndLocation);
	Parms.Tag = Tag;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChaosVDBlueprint.ChaosVDRuntimeBlueprintLibrary.RecordDebugDrawSphere
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InCenter                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosVDRuntimeBlueprintLibrary::RecordDebugDrawSphere(const class UObject* WorldContext, const struct FVector& InCenter, float Radius, class FName Tag, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChaosVDRuntimeBlueprintLibrary", "RecordDebugDrawSphere");

	Params::ChaosVDRuntimeBlueprintLibrary_RecordDebugDrawSphere Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InCenter = std::move(InCenter);
	Parms.Radius = Radius;
	Parms.Tag = Tag;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ChaosVDBlueprint.ChaosVDRuntimeBlueprintLibrary.RecordDebugDrawVector
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContext                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InStartLocation                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InVector                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChaosVDRuntimeBlueprintLibrary::RecordDebugDrawVector(const class UObject* WorldContext, const struct FVector& InStartLocation, const struct FVector& InVector, class FName Tag, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ChaosVDRuntimeBlueprintLibrary", "RecordDebugDrawVector");

	Params::ChaosVDRuntimeBlueprintLibrary_RecordDebugDrawVector Parms{};

	Parms.WorldContext = WorldContext;
	Parms.InStartLocation = std::move(InStartLocation);
	Parms.InVector = std::move(InVector);
	Parms.Tag = Tag;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

