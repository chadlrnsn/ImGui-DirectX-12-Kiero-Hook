#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DMUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DMUtilities_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function DMUtilities.DMActorProximityComponentBase.AddCheckedClass
// 0x0010 (0x0010 - 0x0000)
struct DMActorProximityComponentBase_AddCheckedClass final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityComponentBase_AddCheckedClass) == 0x000008, "Wrong alignment on DMActorProximityComponentBase_AddCheckedClass");
static_assert(sizeof(DMActorProximityComponentBase_AddCheckedClass) == 0x000010, "Wrong size on DMActorProximityComponentBase_AddCheckedClass");
static_assert(offsetof(DMActorProximityComponentBase_AddCheckedClass, ActorClass) == 0x000000, "Member 'DMActorProximityComponentBase_AddCheckedClass::ActorClass' has a wrong offset!");
static_assert(offsetof(DMActorProximityComponentBase_AddCheckedClass, Key) == 0x000008, "Member 'DMActorProximityComponentBase_AddCheckedClass::Key' has a wrong offset!");

// Function DMUtilities.DMActorProximityComponentBase.GetActorsInProximityAsArray
// 0x0010 (0x0010 - 0x0000)
struct DMActorProximityComponentBase_GetActorsInProximityAsArray final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityComponentBase_GetActorsInProximityAsArray) == 0x000008, "Wrong alignment on DMActorProximityComponentBase_GetActorsInProximityAsArray");
static_assert(sizeof(DMActorProximityComponentBase_GetActorsInProximityAsArray) == 0x000010, "Wrong size on DMActorProximityComponentBase_GetActorsInProximityAsArray");
static_assert(offsetof(DMActorProximityComponentBase_GetActorsInProximityAsArray, ReturnValue) == 0x000000, "Member 'DMActorProximityComponentBase_GetActorsInProximityAsArray::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMActorProximityComponentBase.GetClosestActorInProximity
// 0x0008 (0x0008 - 0x0000)
struct DMActorProximityComponentBase_GetClosestActorInProximity final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityComponentBase_GetClosestActorInProximity) == 0x000008, "Wrong alignment on DMActorProximityComponentBase_GetClosestActorInProximity");
static_assert(sizeof(DMActorProximityComponentBase_GetClosestActorInProximity) == 0x000008, "Wrong size on DMActorProximityComponentBase_GetClosestActorInProximity");
static_assert(offsetof(DMActorProximityComponentBase_GetClosestActorInProximity, ReturnValue) == 0x000000, "Member 'DMActorProximityComponentBase_GetClosestActorInProximity::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMActorProximityComponentBase.RemoveCheckedClass
// 0x0008 (0x0008 - 0x0000)
struct DMActorProximityComponentBase_RemoveCheckedClass final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityComponentBase_RemoveCheckedClass) == 0x000004, "Wrong alignment on DMActorProximityComponentBase_RemoveCheckedClass");
static_assert(sizeof(DMActorProximityComponentBase_RemoveCheckedClass) == 0x000008, "Wrong size on DMActorProximityComponentBase_RemoveCheckedClass");
static_assert(offsetof(DMActorProximityComponentBase_RemoveCheckedClass, Key) == 0x000000, "Member 'DMActorProximityComponentBase_RemoveCheckedClass::Key' has a wrong offset!");

// Function DMUtilities.DMActorProximityBoxComponent.GetScaledBoxExtent
// 0x0018 (0x0018 - 0x0000)
struct DMActorProximityBoxComponent_GetScaledBoxExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityBoxComponent_GetScaledBoxExtent) == 0x000008, "Wrong alignment on DMActorProximityBoxComponent_GetScaledBoxExtent");
static_assert(sizeof(DMActorProximityBoxComponent_GetScaledBoxExtent) == 0x000018, "Wrong size on DMActorProximityBoxComponent_GetScaledBoxExtent");
static_assert(offsetof(DMActorProximityBoxComponent_GetScaledBoxExtent, ReturnValue) == 0x000000, "Member 'DMActorProximityBoxComponent_GetScaledBoxExtent::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMActorProximityBoxComponent.GetUnscaledBoxExtent
// 0x0018 (0x0018 - 0x0000)
struct DMActorProximityBoxComponent_GetUnscaledBoxExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityBoxComponent_GetUnscaledBoxExtent) == 0x000008, "Wrong alignment on DMActorProximityBoxComponent_GetUnscaledBoxExtent");
static_assert(sizeof(DMActorProximityBoxComponent_GetUnscaledBoxExtent) == 0x000018, "Wrong size on DMActorProximityBoxComponent_GetUnscaledBoxExtent");
static_assert(offsetof(DMActorProximityBoxComponent_GetUnscaledBoxExtent, ReturnValue) == 0x000000, "Member 'DMActorProximityBoxComponent_GetUnscaledBoxExtent::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAdvancedGyroComponent.SetAxis1TargetDirection
// 0x0018 (0x0018 - 0x0000)
struct DMAdvancedGyroComponent_SetAxis1TargetDirection final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAdvancedGyroComponent_SetAxis1TargetDirection) == 0x000008, "Wrong alignment on DMAdvancedGyroComponent_SetAxis1TargetDirection");
static_assert(sizeof(DMAdvancedGyroComponent_SetAxis1TargetDirection) == 0x000018, "Wrong size on DMAdvancedGyroComponent_SetAxis1TargetDirection");
static_assert(offsetof(DMAdvancedGyroComponent_SetAxis1TargetDirection, TargetDirection) == 0x000000, "Member 'DMAdvancedGyroComponent_SetAxis1TargetDirection::TargetDirection' has a wrong offset!");

// Function DMUtilities.DMAdvancedGyroComponent.SetAxis2TargetDirection
// 0x0018 (0x0018 - 0x0000)
struct DMAdvancedGyroComponent_SetAxis2TargetDirection final
{
public:
	struct FVector                                TargetDirection;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAdvancedGyroComponent_SetAxis2TargetDirection) == 0x000008, "Wrong alignment on DMAdvancedGyroComponent_SetAxis2TargetDirection");
static_assert(sizeof(DMAdvancedGyroComponent_SetAxis2TargetDirection) == 0x000018, "Wrong size on DMAdvancedGyroComponent_SetAxis2TargetDirection");
static_assert(offsetof(DMAdvancedGyroComponent_SetAxis2TargetDirection, TargetDirection) == 0x000000, "Member 'DMAdvancedGyroComponent_SetAxis2TargetDirection::TargetDirection' has a wrong offset!");

// Function DMUtilities.DMAdvancedGyroComponent.GetAxis1TargetDirection
// 0x0018 (0x0018 - 0x0000)
struct DMAdvancedGyroComponent_GetAxis1TargetDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAdvancedGyroComponent_GetAxis1TargetDirection) == 0x000008, "Wrong alignment on DMAdvancedGyroComponent_GetAxis1TargetDirection");
static_assert(sizeof(DMAdvancedGyroComponent_GetAxis1TargetDirection) == 0x000018, "Wrong size on DMAdvancedGyroComponent_GetAxis1TargetDirection");
static_assert(offsetof(DMAdvancedGyroComponent_GetAxis1TargetDirection, ReturnValue) == 0x000000, "Member 'DMAdvancedGyroComponent_GetAxis1TargetDirection::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAdvancedGyroComponent.GetAxis2TargetDirection
// 0x0018 (0x0018 - 0x0000)
struct DMAdvancedGyroComponent_GetAxis2TargetDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAdvancedGyroComponent_GetAxis2TargetDirection) == 0x000008, "Wrong alignment on DMAdvancedGyroComponent_GetAxis2TargetDirection");
static_assert(sizeof(DMAdvancedGyroComponent_GetAxis2TargetDirection) == 0x000018, "Wrong size on DMAdvancedGyroComponent_GetAxis2TargetDirection");
static_assert(offsetof(DMAdvancedGyroComponent_GetAxis2TargetDirection, ReturnValue) == 0x000000, "Member 'DMAdvancedGyroComponent_GetAxis2TargetDirection::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.SetBoxExtent
// 0x0020 (0x0020 - 0x0000)
struct DMAnyShapeComponent_SetBoxExtent final
{
public:
	struct FVector                                InBoxExtent;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMAnyShapeComponent_SetBoxExtent) == 0x000008, "Wrong alignment on DMAnyShapeComponent_SetBoxExtent");
static_assert(sizeof(DMAnyShapeComponent_SetBoxExtent) == 0x000020, "Wrong size on DMAnyShapeComponent_SetBoxExtent");
static_assert(offsetof(DMAnyShapeComponent_SetBoxExtent, InBoxExtent) == 0x000000, "Member 'DMAnyShapeComponent_SetBoxExtent::InBoxExtent' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetBoxExtent, bUpdateOverlaps) == 0x000018, "Member 'DMAnyShapeComponent_SetBoxExtent::bUpdateOverlaps' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.SetCapsuleHalfHeight
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_SetCapsuleHalfHeight final
{
public:
	float                                         HalfHeight;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMAnyShapeComponent_SetCapsuleHalfHeight) == 0x000004, "Wrong alignment on DMAnyShapeComponent_SetCapsuleHalfHeight");
static_assert(sizeof(DMAnyShapeComponent_SetCapsuleHalfHeight) == 0x000008, "Wrong size on DMAnyShapeComponent_SetCapsuleHalfHeight");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleHalfHeight, HalfHeight) == 0x000000, "Member 'DMAnyShapeComponent_SetCapsuleHalfHeight::HalfHeight' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleHalfHeight, bUpdateOverlaps) == 0x000004, "Member 'DMAnyShapeComponent_SetCapsuleHalfHeight::bUpdateOverlaps' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.SetCapsuleRadius
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_SetCapsuleRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMAnyShapeComponent_SetCapsuleRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_SetCapsuleRadius");
static_assert(sizeof(DMAnyShapeComponent_SetCapsuleRadius) == 0x000008, "Wrong size on DMAnyShapeComponent_SetCapsuleRadius");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleRadius, Radius) == 0x000000, "Member 'DMAnyShapeComponent_SetCapsuleRadius::Radius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleRadius, bUpdateOverlaps) == 0x000004, "Member 'DMAnyShapeComponent_SetCapsuleRadius::bUpdateOverlaps' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.SetCapsuleSize
// 0x000C (0x000C - 0x0000)
struct DMAnyShapeComponent_SetCapsuleSize final
{
public:
	float                                         InRadius;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHalfHeight;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMAnyShapeComponent_SetCapsuleSize) == 0x000004, "Wrong alignment on DMAnyShapeComponent_SetCapsuleSize");
static_assert(sizeof(DMAnyShapeComponent_SetCapsuleSize) == 0x00000C, "Wrong size on DMAnyShapeComponent_SetCapsuleSize");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleSize, InRadius) == 0x000000, "Member 'DMAnyShapeComponent_SetCapsuleSize::InRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleSize, InHalfHeight) == 0x000004, "Member 'DMAnyShapeComponent_SetCapsuleSize::InHalfHeight' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetCapsuleSize, bUpdateOverlaps) == 0x000008, "Member 'DMAnyShapeComponent_SetCapsuleSize::bUpdateOverlaps' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.SetSphereRadius
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_SetSphereRadius final
{
public:
	float                                         InSphereRadius;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateOverlaps;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMAnyShapeComponent_SetSphereRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_SetSphereRadius");
static_assert(sizeof(DMAnyShapeComponent_SetSphereRadius) == 0x000008, "Wrong size on DMAnyShapeComponent_SetSphereRadius");
static_assert(offsetof(DMAnyShapeComponent_SetSphereRadius, InSphereRadius) == 0x000000, "Member 'DMAnyShapeComponent_SetSphereRadius::InSphereRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_SetSphereRadius, bUpdateOverlaps) == 0x000004, "Member 'DMAnyShapeComponent_SetSphereRadius::bUpdateOverlaps' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledBoxExtent
// 0x0018 (0x0018 - 0x0000)
struct DMAnyShapeComponent_GetScaledBoxExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledBoxExtent) == 0x000008, "Wrong alignment on DMAnyShapeComponent_GetScaledBoxExtent");
static_assert(sizeof(DMAnyShapeComponent_GetScaledBoxExtent) == 0x000018, "Wrong size on DMAnyShapeComponent_GetScaledBoxExtent");
static_assert(offsetof(DMAnyShapeComponent_GetScaledBoxExtent, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledBoxExtent::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetScaledCapsuleHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledCapsuleHalfHeight");
static_assert(sizeof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight) == 0x000004, "Wrong size on DMAnyShapeComponent_GetScaledCapsuleHalfHeight");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledCapsuleHalfHeight::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere");
static_assert(sizeof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere) == 0x000004, "Wrong size on DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledCapsuleHalfHeight_WithoutHemisphere::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetScaledCapsuleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledCapsuleRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledCapsuleRadius");
static_assert(sizeof(DMAnyShapeComponent_GetScaledCapsuleRadius) == 0x000004, "Wrong size on DMAnyShapeComponent_GetScaledCapsuleRadius");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleRadius, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledCapsuleRadius::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledCapsuleSize
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_GetScaledCapsuleSize final
{
public:
	float                                         OutRadius;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeight;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledCapsuleSize) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledCapsuleSize");
static_assert(sizeof(DMAnyShapeComponent_GetScaledCapsuleSize) == 0x000008, "Wrong size on DMAnyShapeComponent_GetScaledCapsuleSize");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleSize, OutRadius) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledCapsuleSize::OutRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleSize, OutHalfHeight) == 0x000004, "Member 'DMAnyShapeComponent_GetScaledCapsuleSize::OutHalfHeight' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledCapsuleSize_WithoutHemisphere
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere final
{
public:
	float                                         OutRadius;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeightWithoutHemisphere;                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere");
static_assert(sizeof(DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere) == 0x000008, "Wrong size on DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere, OutRadius) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere::OutRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere, OutHalfHeightWithoutHemisphere) == 0x000004, "Member 'DMAnyShapeComponent_GetScaledCapsuleSize_WithoutHemisphere::OutHalfHeightWithoutHemisphere' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetScaledSphereRadius
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetScaledSphereRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetScaledSphereRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetScaledSphereRadius");
static_assert(sizeof(DMAnyShapeComponent_GetScaledSphereRadius) == 0x000004, "Wrong size on DMAnyShapeComponent_GetScaledSphereRadius");
static_assert(offsetof(DMAnyShapeComponent_GetScaledSphereRadius, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetScaledSphereRadius::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetShapeScale
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetShapeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetShapeScale) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetShapeScale");
static_assert(sizeof(DMAnyShapeComponent_GetShapeScale) == 0x000004, "Wrong size on DMAnyShapeComponent_GetShapeScale");
static_assert(offsetof(DMAnyShapeComponent_GetShapeScale, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetShapeScale::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledBoxExtent
// 0x0018 (0x0018 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledBoxExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledBoxExtent) == 0x000008, "Wrong alignment on DMAnyShapeComponent_GetUnscaledBoxExtent");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledBoxExtent) == 0x000018, "Wrong size on DMAnyShapeComponent_GetUnscaledBoxExtent");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledBoxExtent, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledBoxExtent::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight) == 0x000004, "Wrong size on DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere) == 0x000004, "Wrong size on DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleHalfHeight_WithoutHemisphere::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledCapsuleRadius
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledCapsuleRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledCapsuleRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledCapsuleRadius");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledCapsuleRadius) == 0x000004, "Wrong size on DMAnyShapeComponent_GetUnscaledCapsuleRadius");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleRadius, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleRadius::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledCapsuleSize
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledCapsuleSize final
{
public:
	float                                         OutRadius;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeight;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledCapsuleSize) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledCapsuleSize");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledCapsuleSize) == 0x000008, "Wrong size on DMAnyShapeComponent_GetUnscaledCapsuleSize");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleSize, OutRadius) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleSize::OutRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleSize, OutHalfHeight) == 0x000004, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleSize::OutHalfHeight' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledCapsuleSize_WithoutHemisphere
// 0x0008 (0x0008 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere final
{
public:
	float                                         OutRadius;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutHalfHeightWithoutHemisphere;                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere) == 0x000008, "Wrong size on DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere, OutRadius) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere::OutRadius' has a wrong offset!");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere, OutHalfHeightWithoutHemisphere) == 0x000004, "Member 'DMAnyShapeComponent_GetUnscaledCapsuleSize_WithoutHemisphere::OutHalfHeightWithoutHemisphere' has a wrong offset!");

// Function DMUtilities.DMAnyShapeComponent.GetUnscaledSphereRadius
// 0x0004 (0x0004 - 0x0000)
struct DMAnyShapeComponent_GetUnscaledSphereRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMAnyShapeComponent_GetUnscaledSphereRadius) == 0x000004, "Wrong alignment on DMAnyShapeComponent_GetUnscaledSphereRadius");
static_assert(sizeof(DMAnyShapeComponent_GetUnscaledSphereRadius) == 0x000004, "Wrong size on DMAnyShapeComponent_GetUnscaledSphereRadius");
static_assert(offsetof(DMAnyShapeComponent_GetUnscaledSphereRadius, ReturnValue) == 0x000000, "Member 'DMAnyShapeComponent_GetUnscaledSphereRadius::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMConveyorComponent.OnHit
// 0x0130 (0x0130 - 0x0000)
struct DMConveyorComponent_OnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMConveyorComponent_OnHit) == 0x000008, "Wrong alignment on DMConveyorComponent_OnHit");
static_assert(sizeof(DMConveyorComponent_OnHit) == 0x000130, "Wrong size on DMConveyorComponent_OnHit");
static_assert(offsetof(DMConveyorComponent_OnHit, HitComponent) == 0x000000, "Member 'DMConveyorComponent_OnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(DMConveyorComponent_OnHit, OtherActor) == 0x000008, "Member 'DMConveyorComponent_OnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(DMConveyorComponent_OnHit, OtherComponent) == 0x000010, "Member 'DMConveyorComponent_OnHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(DMConveyorComponent_OnHit, NormalImpulse) == 0x000018, "Member 'DMConveyorComponent_OnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(DMConveyorComponent_OnHit, Hit) == 0x000030, "Member 'DMConveyorComponent_OnHit::Hit' has a wrong offset!");

// Function DMUtilities.DMGameplayLibrary.AddBlockingHit
// 0x0120 (0x0120 - 0x0000)
struct DMGameplayLibrary_AddBlockingHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0020(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMGameplayLibrary_AddBlockingHit) == 0x000008, "Wrong alignment on DMGameplayLibrary_AddBlockingHit");
static_assert(sizeof(DMGameplayLibrary_AddBlockingHit) == 0x000120, "Wrong size on DMGameplayLibrary_AddBlockingHit");
static_assert(offsetof(DMGameplayLibrary_AddBlockingHit, MyComp) == 0x000000, "Member 'DMGameplayLibrary_AddBlockingHit::MyComp' has a wrong offset!");
static_assert(offsetof(DMGameplayLibrary_AddBlockingHit, NormalImpulse) == 0x000008, "Member 'DMGameplayLibrary_AddBlockingHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(DMGameplayLibrary_AddBlockingHit, Hit) == 0x000020, "Member 'DMGameplayLibrary_AddBlockingHit::Hit' has a wrong offset!");

// Function DMUtilities.DMGameplayLibrary.GetActorMass
// 0x0010 (0x0010 - 0x0000)
struct DMGameplayLibrary_GetActorMass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMGameplayLibrary_GetActorMass) == 0x000008, "Wrong alignment on DMGameplayLibrary_GetActorMass");
static_assert(sizeof(DMGameplayLibrary_GetActorMass) == 0x000010, "Wrong size on DMGameplayLibrary_GetActorMass");
static_assert(offsetof(DMGameplayLibrary_GetActorMass, Actor) == 0x000000, "Member 'DMGameplayLibrary_GetActorMass::Actor' has a wrong offset!");
static_assert(offsetof(DMGameplayLibrary_GetActorMass, ReturnValue) == 0x000008, "Member 'DMGameplayLibrary_GetActorMass::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.AddCameraVelocityPitch
// 0x0004 (0x0004 - 0x0000)
struct DMInterpolatedSpringArm_AddCameraVelocityPitch final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_AddCameraVelocityPitch) == 0x000004, "Wrong alignment on DMInterpolatedSpringArm_AddCameraVelocityPitch");
static_assert(sizeof(DMInterpolatedSpringArm_AddCameraVelocityPitch) == 0x000004, "Wrong size on DMInterpolatedSpringArm_AddCameraVelocityPitch");
static_assert(offsetof(DMInterpolatedSpringArm_AddCameraVelocityPitch, Val) == 0x000000, "Member 'DMInterpolatedSpringArm_AddCameraVelocityPitch::Val' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.AddCameraVelocityYaw
// 0x0004 (0x0004 - 0x0000)
struct DMInterpolatedSpringArm_AddCameraVelocityYaw final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_AddCameraVelocityYaw) == 0x000004, "Wrong alignment on DMInterpolatedSpringArm_AddCameraVelocityYaw");
static_assert(sizeof(DMInterpolatedSpringArm_AddCameraVelocityYaw) == 0x000004, "Wrong size on DMInterpolatedSpringArm_AddCameraVelocityYaw");
static_assert(offsetof(DMInterpolatedSpringArm_AddCameraVelocityYaw, Val) == 0x000000, "Member 'DMInterpolatedSpringArm_AddCameraVelocityYaw::Val' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.BlockCameraDirectionalMovement
// 0x0018 (0x0018 - 0x0000)
struct DMInterpolatedSpringArm_BlockCameraDirectionalMovement final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_BlockCameraDirectionalMovement) == 0x000008, "Wrong alignment on DMInterpolatedSpringArm_BlockCameraDirectionalMovement");
static_assert(sizeof(DMInterpolatedSpringArm_BlockCameraDirectionalMovement) == 0x000018, "Wrong size on DMInterpolatedSpringArm_BlockCameraDirectionalMovement");
static_assert(offsetof(DMInterpolatedSpringArm_BlockCameraDirectionalMovement, Direction) == 0x000000, "Member 'DMInterpolatedSpringArm_BlockCameraDirectionalMovement::Direction' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.RotateTowardsWorldLocation
// 0x0018 (0x0018 - 0x0000)
struct DMInterpolatedSpringArm_RotateTowardsWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_RotateTowardsWorldLocation) == 0x000008, "Wrong alignment on DMInterpolatedSpringArm_RotateTowardsWorldLocation");
static_assert(sizeof(DMInterpolatedSpringArm_RotateTowardsWorldLocation) == 0x000018, "Wrong size on DMInterpolatedSpringArm_RotateTowardsWorldLocation");
static_assert(offsetof(DMInterpolatedSpringArm_RotateTowardsWorldLocation, Location) == 0x000000, "Member 'DMInterpolatedSpringArm_RotateTowardsWorldLocation::Location' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.SetMinCameraLength
// 0x0004 (0x0004 - 0x0000)
struct DMInterpolatedSpringArm_SetMinCameraLength final
{
public:
	float                                         cameraLength;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_SetMinCameraLength) == 0x000004, "Wrong alignment on DMInterpolatedSpringArm_SetMinCameraLength");
static_assert(sizeof(DMInterpolatedSpringArm_SetMinCameraLength) == 0x000004, "Wrong size on DMInterpolatedSpringArm_SetMinCameraLength");
static_assert(offsetof(DMInterpolatedSpringArm_SetMinCameraLength, cameraLength) == 0x000000, "Member 'DMInterpolatedSpringArm_SetMinCameraLength::cameraLength' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.SetTargetCameraLength
// 0x0004 (0x0004 - 0x0000)
struct DMInterpolatedSpringArm_SetTargetCameraLength final
{
public:
	float                                         cameraLength;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_SetTargetCameraLength) == 0x000004, "Wrong alignment on DMInterpolatedSpringArm_SetTargetCameraLength");
static_assert(sizeof(DMInterpolatedSpringArm_SetTargetCameraLength) == 0x000004, "Wrong size on DMInterpolatedSpringArm_SetTargetCameraLength");
static_assert(offsetof(DMInterpolatedSpringArm_SetTargetCameraLength, cameraLength) == 0x000000, "Member 'DMInterpolatedSpringArm_SetTargetCameraLength::cameraLength' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.SetTargetZOffset
// 0x0004 (0x0004 - 0x0000)
struct DMInterpolatedSpringArm_SetTargetZOffset final
{
public:
	float                                         ZOffset;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_SetTargetZOffset) == 0x000004, "Wrong alignment on DMInterpolatedSpringArm_SetTargetZOffset");
static_assert(sizeof(DMInterpolatedSpringArm_SetTargetZOffset) == 0x000004, "Wrong size on DMInterpolatedSpringArm_SetTargetZOffset");
static_assert(offsetof(DMInterpolatedSpringArm_SetTargetZOffset, ZOffset) == 0x000000, "Member 'DMInterpolatedSpringArm_SetTargetZOffset::ZOffset' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.StopBlockingCameraDirectionalMovement
// 0x0018 (0x0018 - 0x0000)
struct DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement) == 0x000008, "Wrong alignment on DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement");
static_assert(sizeof(DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement) == 0x000018, "Wrong size on DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement");
static_assert(offsetof(DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement, Direction) == 0x000000, "Member 'DMInterpolatedSpringArm_StopBlockingCameraDirectionalMovement::Direction' has a wrong offset!");

// Function DMUtilities.DMInterpolatedSpringArm.GetSpringArmForwardVector
// 0x0018 (0x0018 - 0x0000)
struct DMInterpolatedSpringArm_GetSpringArmForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMInterpolatedSpringArm_GetSpringArmForwardVector) == 0x000008, "Wrong alignment on DMInterpolatedSpringArm_GetSpringArmForwardVector");
static_assert(sizeof(DMInterpolatedSpringArm_GetSpringArmForwardVector) == 0x000018, "Wrong size on DMInterpolatedSpringArm_GetSpringArmForwardVector");
static_assert(offsetof(DMInterpolatedSpringArm_GetSpringArmForwardVector, ReturnValue) == 0x000000, "Member 'DMInterpolatedSpringArm_GetSpringArmForwardVector::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMMathLibrary.EnumByteToBitmask
// 0x0002 (0x0002 - 0x0000)
struct DMMathLibrary_EnumByteToBitmask final
{
public:
	uint8                                         enumByte;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMMathLibrary_EnumByteToBitmask) == 0x000001, "Wrong alignment on DMMathLibrary_EnumByteToBitmask");
static_assert(sizeof(DMMathLibrary_EnumByteToBitmask) == 0x000002, "Wrong size on DMMathLibrary_EnumByteToBitmask");
static_assert(offsetof(DMMathLibrary_EnumByteToBitmask, enumByte) == 0x000000, "Member 'DMMathLibrary_EnumByteToBitmask::enumByte' has a wrong offset!");
static_assert(offsetof(DMMathLibrary_EnumByteToBitmask, ReturnValue) == 0x000001, "Member 'DMMathLibrary_EnumByteToBitmask::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMMathLibrary.ParabolaLerp
// 0x0130 (0x0130 - 0x0000)
struct DMMathLibrary_ParabolaLerp final
{
public:
	struct FTransform                             A;                                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             B;                                                 // 0x0060(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00D0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMMathLibrary_ParabolaLerp) == 0x000010, "Wrong alignment on DMMathLibrary_ParabolaLerp");
static_assert(sizeof(DMMathLibrary_ParabolaLerp) == 0x000130, "Wrong size on DMMathLibrary_ParabolaLerp");
static_assert(offsetof(DMMathLibrary_ParabolaLerp, A) == 0x000000, "Member 'DMMathLibrary_ParabolaLerp::A' has a wrong offset!");
static_assert(offsetof(DMMathLibrary_ParabolaLerp, B) == 0x000060, "Member 'DMMathLibrary_ParabolaLerp::B' has a wrong offset!");
static_assert(offsetof(DMMathLibrary_ParabolaLerp, Alpha) == 0x0000C0, "Member 'DMMathLibrary_ParabolaLerp::Alpha' has a wrong offset!");
static_assert(offsetof(DMMathLibrary_ParabolaLerp, ReturnValue) == 0x0000D0, "Member 'DMMathLibrary_ParabolaLerp::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMNetworkLibrary.IsDedicatedAndAuthorative
// 0x0010 (0x0010 - 0x0000)
struct DMNetworkLibrary_IsDedicatedAndAuthorative final
{
public:
	const class AActor*                           networkedActor;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMNetworkLibrary_IsDedicatedAndAuthorative) == 0x000008, "Wrong alignment on DMNetworkLibrary_IsDedicatedAndAuthorative");
static_assert(sizeof(DMNetworkLibrary_IsDedicatedAndAuthorative) == 0x000010, "Wrong size on DMNetworkLibrary_IsDedicatedAndAuthorative");
static_assert(offsetof(DMNetworkLibrary_IsDedicatedAndAuthorative, networkedActor) == 0x000000, "Member 'DMNetworkLibrary_IsDedicatedAndAuthorative::networkedActor' has a wrong offset!");
static_assert(offsetof(DMNetworkLibrary_IsDedicatedAndAuthorative, ReturnValue) == 0x000008, "Member 'DMNetworkLibrary_IsDedicatedAndAuthorative::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
// 0x0014 (0x0014 - 0x0000)
struct DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProfileName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearNotFound;                                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow) == 0x000004, "Wrong alignment on DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(sizeof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow) == 0x000014, "Wrong size on DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, BodyName) == 0x000000, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::BodyName' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, ProfileName) == 0x000008, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::ProfileName' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, bIncludeSelf) == 0x000010, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow, bClearNotFound) == 0x000011, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationProfileBelow::bClearNotFound' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.ApplyPhysicalAnimationSettings
// 0x002C (0x002C - 0x0000)
struct DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicalAnimationData                 PhysicalAnimationData;                             // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings) == 0x000004, "Wrong alignment on DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings");
static_assert(sizeof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings) == 0x00002C, "Wrong size on DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings, BodyName) == 0x000000, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings::BodyName' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings, PhysicalAnimationData) == 0x000008, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettings::PhysicalAnimationData' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
// 0x0030 (0x0030 - 0x0000)
struct DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPhysicalAnimationData                 PhysicalAnimationData;                             // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow) == 0x000004, "Wrong alignment on DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow");
static_assert(sizeof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow) == 0x000030, "Wrong size on DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, BodyName) == 0x000000, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::BodyName' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, PhysicalAnimationData) == 0x000008, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::PhysicalAnimationData' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow, bIncludeSelf) == 0x00002C, "Member 'DMPhysicalAnimationComponent_ApplyPhysicalAnimationSettingsBelow::bIncludeSelf' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.SetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct DMPhysicalAnimationComponent_SetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicalAnimationComponent_SetSkeletalMeshComponent) == 0x000008, "Wrong alignment on DMPhysicalAnimationComponent_SetSkeletalMeshComponent");
static_assert(sizeof(DMPhysicalAnimationComponent_SetSkeletalMeshComponent) == 0x000008, "Wrong size on DMPhysicalAnimationComponent_SetSkeletalMeshComponent");
static_assert(offsetof(DMPhysicalAnimationComponent_SetSkeletalMeshComponent, InSkeletalMeshComponent) == 0x000000, "Member 'DMPhysicalAnimationComponent_SetSkeletalMeshComponent::InSkeletalMeshComponent' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.SetStrengthMultiplyer
// 0x0004 (0x0004 - 0x0000)
struct DMPhysicalAnimationComponent_SetStrengthMultiplyer final
{
public:
	float                                         InStrengthMultiplyer;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicalAnimationComponent_SetStrengthMultiplyer) == 0x000004, "Wrong alignment on DMPhysicalAnimationComponent_SetStrengthMultiplyer");
static_assert(sizeof(DMPhysicalAnimationComponent_SetStrengthMultiplyer) == 0x000004, "Wrong size on DMPhysicalAnimationComponent_SetStrengthMultiplyer");
static_assert(offsetof(DMPhysicalAnimationComponent_SetStrengthMultiplyer, InStrengthMultiplyer) == 0x000000, "Member 'DMPhysicalAnimationComponent_SetStrengthMultiplyer::InStrengthMultiplyer' has a wrong offset!");

// Function DMUtilities.DMPhysicalAnimationComponent.GetBodyTargetTransform
// 0x0070 (0x0070 - 0x0000)
struct DMPhysicalAnimationComponent_GetBodyTargetTransform final
{
public:
	class FName                                   BodyName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicalAnimationComponent_GetBodyTargetTransform) == 0x000010, "Wrong alignment on DMPhysicalAnimationComponent_GetBodyTargetTransform");
static_assert(sizeof(DMPhysicalAnimationComponent_GetBodyTargetTransform) == 0x000070, "Wrong size on DMPhysicalAnimationComponent_GetBodyTargetTransform");
static_assert(offsetof(DMPhysicalAnimationComponent_GetBodyTargetTransform, BodyName) == 0x000000, "Member 'DMPhysicalAnimationComponent_GetBodyTargetTransform::BodyName' has a wrong offset!");
static_assert(offsetof(DMPhysicalAnimationComponent_GetBodyTargetTransform, ReturnValue) == 0x000010, "Member 'DMPhysicalAnimationComponent_GetBodyTargetTransform::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMPhysicsVolume.GetOverlappingActorsArray
// 0x0010 (0x0010 - 0x0000)
struct DMPhysicsVolume_GetOverlappingActorsArray final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicsVolume_GetOverlappingActorsArray) == 0x000008, "Wrong alignment on DMPhysicsVolume_GetOverlappingActorsArray");
static_assert(sizeof(DMPhysicsVolume_GetOverlappingActorsArray) == 0x000010, "Wrong size on DMPhysicsVolume_GetOverlappingActorsArray");
static_assert(offsetof(DMPhysicsVolume_GetOverlappingActorsArray, ReturnValue) == 0x000000, "Member 'DMPhysicsVolume_GetOverlappingActorsArray::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMPhysicsVolume.GetShapeComponent
// 0x0008 (0x0008 - 0x0000)
struct DMPhysicsVolume_GetShapeComponent final
{
public:
	class UDMAnyShapeComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicsVolume_GetShapeComponent) == 0x000008, "Wrong alignment on DMPhysicsVolume_GetShapeComponent");
static_assert(sizeof(DMPhysicsVolume_GetShapeComponent) == 0x000008, "Wrong size on DMPhysicsVolume_GetShapeComponent");
static_assert(offsetof(DMPhysicsVolume_GetShapeComponent, ReturnValue) == 0x000000, "Member 'DMPhysicsVolume_GetShapeComponent::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMPhysicsVolumeInterface.OnEnterPhysicsVolume
// 0x0008 (0x0008 - 0x0000)
struct DMPhysicsVolumeInterface_OnEnterPhysicsVolume final
{
public:
	class ADMPhysicsVolume*                       PhysicsVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicsVolumeInterface_OnEnterPhysicsVolume) == 0x000008, "Wrong alignment on DMPhysicsVolumeInterface_OnEnterPhysicsVolume");
static_assert(sizeof(DMPhysicsVolumeInterface_OnEnterPhysicsVolume) == 0x000008, "Wrong size on DMPhysicsVolumeInterface_OnEnterPhysicsVolume");
static_assert(offsetof(DMPhysicsVolumeInterface_OnEnterPhysicsVolume, PhysicsVolume) == 0x000000, "Member 'DMPhysicsVolumeInterface_OnEnterPhysicsVolume::PhysicsVolume' has a wrong offset!");

// Function DMUtilities.DMPhysicsVolumeInterface.OnExitPhysicsVolume
// 0x0008 (0x0008 - 0x0000)
struct DMPhysicsVolumeInterface_OnExitPhysicsVolume final
{
public:
	class ADMPhysicsVolume*                       PhysicsVolume;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPhysicsVolumeInterface_OnExitPhysicsVolume) == 0x000008, "Wrong alignment on DMPhysicsVolumeInterface_OnExitPhysicsVolume");
static_assert(sizeof(DMPhysicsVolumeInterface_OnExitPhysicsVolume) == 0x000008, "Wrong size on DMPhysicsVolumeInterface_OnExitPhysicsVolume");
static_assert(offsetof(DMPhysicsVolumeInterface_OnExitPhysicsVolume, PhysicsVolume) == 0x000000, "Member 'DMPhysicsVolumeInterface_OnExitPhysicsVolume::PhysicsVolume' has a wrong offset!");

// Function DMUtilities.DMPlatformLibrary.GetPlatformName
// 0x0008 (0x0008 - 0x0000)
struct DMPlatformLibrary_GetPlatformName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMPlatformLibrary_GetPlatformName) == 0x000004, "Wrong alignment on DMPlatformLibrary_GetPlatformName");
static_assert(sizeof(DMPlatformLibrary_GetPlatformName) == 0x000008, "Wrong size on DMPlatformLibrary_GetPlatformName");
static_assert(offsetof(DMPlatformLibrary_GetPlatformName, ReturnValue) == 0x000000, "Member 'DMPlatformLibrary_GetPlatformName::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMRocketThrusterComponent.Server_SetThrottle
// 0x0004 (0x0004 - 0x0000)
struct DMRocketThrusterComponent_Server_SetThrottle final
{
public:
	float                                         newThrottle;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMRocketThrusterComponent_Server_SetThrottle) == 0x000004, "Wrong alignment on DMRocketThrusterComponent_Server_SetThrottle");
static_assert(sizeof(DMRocketThrusterComponent_Server_SetThrottle) == 0x000004, "Wrong size on DMRocketThrusterComponent_Server_SetThrottle");
static_assert(offsetof(DMRocketThrusterComponent_Server_SetThrottle, newThrottle) == 0x000000, "Member 'DMRocketThrusterComponent_Server_SetThrottle::newThrottle' has a wrong offset!");

// Function DMUtilities.DMRocketThrusterComponent.SetThrottle
// 0x0004 (0x0004 - 0x0000)
struct DMRocketThrusterComponent_SetThrottle final
{
public:
	float                                         newThrottle;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMRocketThrusterComponent_SetThrottle) == 0x000004, "Wrong alignment on DMRocketThrusterComponent_SetThrottle");
static_assert(sizeof(DMRocketThrusterComponent_SetThrottle) == 0x000004, "Wrong size on DMRocketThrusterComponent_SetThrottle");
static_assert(offsetof(DMRocketThrusterComponent_SetThrottle, newThrottle) == 0x000000, "Member 'DMRocketThrusterComponent_SetThrottle::newThrottle' has a wrong offset!");

// Function DMUtilities.DMStringLibrary.KeyToString
// 0x0028 (0x0028 - 0x0000)
struct DMStringLibrary_KeyToString final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMStringLibrary_KeyToString) == 0x000008, "Wrong alignment on DMStringLibrary_KeyToString");
static_assert(sizeof(DMStringLibrary_KeyToString) == 0x000028, "Wrong size on DMStringLibrary_KeyToString");
static_assert(offsetof(DMStringLibrary_KeyToString, Key) == 0x000000, "Member 'DMStringLibrary_KeyToString::Key' has a wrong offset!");
static_assert(offsetof(DMStringLibrary_KeyToString, ReturnValue) == 0x000018, "Member 'DMStringLibrary_KeyToString::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSynchronizedClockComponent.ClientUpdateTime
// 0x0008 (0x0008 - 0x0000)
struct DMSynchronizedClockComponent_ClientUpdateTime final
{
public:
	float                                         clientTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         serverTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSynchronizedClockComponent_ClientUpdateTime) == 0x000004, "Wrong alignment on DMSynchronizedClockComponent_ClientUpdateTime");
static_assert(sizeof(DMSynchronizedClockComponent_ClientUpdateTime) == 0x000008, "Wrong size on DMSynchronizedClockComponent_ClientUpdateTime");
static_assert(offsetof(DMSynchronizedClockComponent_ClientUpdateTime, clientTime) == 0x000000, "Member 'DMSynchronizedClockComponent_ClientUpdateTime::clientTime' has a wrong offset!");
static_assert(offsetof(DMSynchronizedClockComponent_ClientUpdateTime, serverTime) == 0x000004, "Member 'DMSynchronizedClockComponent_ClientUpdateTime::serverTime' has a wrong offset!");

// Function DMUtilities.DMSynchronizedClockComponent.ServerRequestTime
// 0x0004 (0x0004 - 0x0000)
struct DMSynchronizedClockComponent_ServerRequestTime final
{
public:
	float                                         currentClientTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSynchronizedClockComponent_ServerRequestTime) == 0x000004, "Wrong alignment on DMSynchronizedClockComponent_ServerRequestTime");
static_assert(sizeof(DMSynchronizedClockComponent_ServerRequestTime) == 0x000004, "Wrong size on DMSynchronizedClockComponent_ServerRequestTime");
static_assert(offsetof(DMSynchronizedClockComponent_ServerRequestTime, currentClientTime) == 0x000000, "Member 'DMSynchronizedClockComponent_ServerRequestTime::currentClientTime' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.ClearAndInvalidateTimerByDelegate
// 0x0010 (0x0010 - 0x0000)
struct DMSystemLibrary_ClearAndInvalidateTimerByDelegate final
{
public:
	TDelegate<void()>                             Event;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_ClearAndInvalidateTimerByDelegate) == 0x000004, "Wrong alignment on DMSystemLibrary_ClearAndInvalidateTimerByDelegate");
static_assert(sizeof(DMSystemLibrary_ClearAndInvalidateTimerByDelegate) == 0x000010, "Wrong size on DMSystemLibrary_ClearAndInvalidateTimerByDelegate");
static_assert(offsetof(DMSystemLibrary_ClearAndInvalidateTimerByDelegate, Event) == 0x000000, "Member 'DMSystemLibrary_ClearAndInvalidateTimerByDelegate::Event' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.IsObjectASoftClass
// 0x0038 (0x0038 - 0x0000)
struct DMSystemLibrary_IsObjectASoftClass final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMSystemLibrary_IsObjectASoftClass) == 0x000008, "Wrong alignment on DMSystemLibrary_IsObjectASoftClass");
static_assert(sizeof(DMSystemLibrary_IsObjectASoftClass) == 0x000038, "Wrong size on DMSystemLibrary_IsObjectASoftClass");
static_assert(offsetof(DMSystemLibrary_IsObjectASoftClass, Object) == 0x000000, "Member 'DMSystemLibrary_IsObjectASoftClass::Object' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_IsObjectASoftClass, SoftClass) == 0x000008, "Member 'DMSystemLibrary_IsObjectASoftClass::SoftClass' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_IsObjectASoftClass, ReturnValue) == 0x000030, "Member 'DMSystemLibrary_IsObjectASoftClass::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.IsObjectChildOfSoftClass
// 0x0038 (0x0038 - 0x0000)
struct DMSystemLibrary_IsObjectChildOfSoftClass final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DMSystemLibrary_IsObjectChildOfSoftClass) == 0x000008, "Wrong alignment on DMSystemLibrary_IsObjectChildOfSoftClass");
static_assert(sizeof(DMSystemLibrary_IsObjectChildOfSoftClass) == 0x000038, "Wrong size on DMSystemLibrary_IsObjectChildOfSoftClass");
static_assert(offsetof(DMSystemLibrary_IsObjectChildOfSoftClass, Object) == 0x000000, "Member 'DMSystemLibrary_IsObjectChildOfSoftClass::Object' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_IsObjectChildOfSoftClass, SoftClass) == 0x000008, "Member 'DMSystemLibrary_IsObjectChildOfSoftClass::SoftClass' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_IsObjectChildOfSoftClass, ReturnValue) == 0x000030, "Member 'DMSystemLibrary_IsObjectChildOfSoftClass::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.LoadSoftClassSynchronous
// 0x0030 (0x0030 - 0x0000)
struct DMSystemLibrary_LoadSoftClassSynchronous final
{
public:
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_LoadSoftClassSynchronous) == 0x000008, "Wrong alignment on DMSystemLibrary_LoadSoftClassSynchronous");
static_assert(sizeof(DMSystemLibrary_LoadSoftClassSynchronous) == 0x000030, "Wrong size on DMSystemLibrary_LoadSoftClassSynchronous");
static_assert(offsetof(DMSystemLibrary_LoadSoftClassSynchronous, SoftClass) == 0x000000, "Member 'DMSystemLibrary_LoadSoftClassSynchronous::SoftClass' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_LoadSoftClassSynchronous, ReturnValue) == 0x000028, "Member 'DMSystemLibrary_LoadSoftClassSynchronous::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.LoadSoftObjectSynchronous
// 0x0030 (0x0030 - 0x0000)
struct DMSystemLibrary_LoadSoftObjectSynchronous final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObject;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_LoadSoftObjectSynchronous) == 0x000008, "Wrong alignment on DMSystemLibrary_LoadSoftObjectSynchronous");
static_assert(sizeof(DMSystemLibrary_LoadSoftObjectSynchronous) == 0x000030, "Wrong size on DMSystemLibrary_LoadSoftObjectSynchronous");
static_assert(offsetof(DMSystemLibrary_LoadSoftObjectSynchronous, SoftObject) == 0x000000, "Member 'DMSystemLibrary_LoadSoftObjectSynchronous::SoftObject' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_LoadSoftObjectSynchronous, ReturnValue) == 0x000028, "Member 'DMSystemLibrary_LoadSoftObjectSynchronous::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.MakeLiteralSoftClass
// 0x0050 (0x0050 - 0x0000)
struct DMSystemLibrary_MakeLiteralSoftClass final
{
public:
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_MakeLiteralSoftClass) == 0x000008, "Wrong alignment on DMSystemLibrary_MakeLiteralSoftClass");
static_assert(sizeof(DMSystemLibrary_MakeLiteralSoftClass) == 0x000050, "Wrong size on DMSystemLibrary_MakeLiteralSoftClass");
static_assert(offsetof(DMSystemLibrary_MakeLiteralSoftClass, SoftClass) == 0x000000, "Member 'DMSystemLibrary_MakeLiteralSoftClass::SoftClass' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_MakeLiteralSoftClass, ReturnValue) == 0x000028, "Member 'DMSystemLibrary_MakeLiteralSoftClass::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.MakeLiteralSoftObject
// 0x0050 (0x0050 - 0x0000)
struct DMSystemLibrary_MakeLiteralSoftObject final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObject;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_MakeLiteralSoftObject) == 0x000008, "Wrong alignment on DMSystemLibrary_MakeLiteralSoftObject");
static_assert(sizeof(DMSystemLibrary_MakeLiteralSoftObject) == 0x000050, "Wrong size on DMSystemLibrary_MakeLiteralSoftObject");
static_assert(offsetof(DMSystemLibrary_MakeLiteralSoftObject, SoftObject) == 0x000000, "Member 'DMSystemLibrary_MakeLiteralSoftObject::SoftObject' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_MakeLiteralSoftObject, ReturnValue) == 0x000028, "Member 'DMSystemLibrary_MakeLiteralSoftObject::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.SetOneOffTimer
// 0x0020 (0x0020 - 0x0000)
struct DMSystemLibrary_SetOneOffTimer final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_SetOneOffTimer) == 0x000008, "Wrong alignment on DMSystemLibrary_SetOneOffTimer");
static_assert(sizeof(DMSystemLibrary_SetOneOffTimer) == 0x000020, "Wrong size on DMSystemLibrary_SetOneOffTimer");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimer, Delegate) == 0x000000, "Member 'DMSystemLibrary_SetOneOffTimer::Delegate' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimer, Time) == 0x000010, "Member 'DMSystemLibrary_SetOneOffTimer::Time' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimer, bLooping) == 0x000014, "Member 'DMSystemLibrary_SetOneOffTimer::bLooping' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimer, ReturnValue) == 0x000018, "Member 'DMSystemLibrary_SetOneOffTimer::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.SetOneOffTimerWithId
// 0x0030 (0x0030 - 0x0000)
struct DMSystemLibrary_SetOneOffTimerWithId final
{
public:
	TDelegate<void(const struct FGuid& ID)>       Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TimerId;                                           // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_SetOneOffTimerWithId) == 0x000008, "Wrong alignment on DMSystemLibrary_SetOneOffTimerWithId");
static_assert(sizeof(DMSystemLibrary_SetOneOffTimerWithId) == 0x000030, "Wrong size on DMSystemLibrary_SetOneOffTimerWithId");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimerWithId, Delegate) == 0x000000, "Member 'DMSystemLibrary_SetOneOffTimerWithId::Delegate' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimerWithId, Time) == 0x000010, "Member 'DMSystemLibrary_SetOneOffTimerWithId::Time' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimerWithId, bLooping) == 0x000014, "Member 'DMSystemLibrary_SetOneOffTimerWithId::bLooping' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimerWithId, TimerHandle) == 0x000018, "Member 'DMSystemLibrary_SetOneOffTimerWithId::TimerHandle' has a wrong offset!");
static_assert(offsetof(DMSystemLibrary_SetOneOffTimerWithId, TimerId) == 0x000020, "Member 'DMSystemLibrary_SetOneOffTimerWithId::TimerId' has a wrong offset!");

// Function DMUtilities.DMSystemLibrary.SetTimerForNextTick
// 0x0010 (0x0010 - 0x0000)
struct DMSystemLibrary_SetTimerForNextTick final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMSystemLibrary_SetTimerForNextTick) == 0x000004, "Wrong alignment on DMSystemLibrary_SetTimerForNextTick");
static_assert(sizeof(DMSystemLibrary_SetTimerForNextTick) == 0x000010, "Wrong size on DMSystemLibrary_SetTimerForNextTick");
static_assert(offsetof(DMSystemLibrary_SetTimerForNextTick, Delegate) == 0x000000, "Member 'DMSystemLibrary_SetTimerForNextTick::Delegate' has a wrong offset!");

// Function DMUtilities.DMWheelComponent.GetLastWheelContact
// 0x0138 (0x0138 - 0x0000)
struct DMWheelComponent_GetLastWheelContact final
{
public:
	struct FDMWheelContact                        ReturnValue;                                       // 0x0000(0x0138)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMWheelComponent_GetLastWheelContact) == 0x000008, "Wrong alignment on DMWheelComponent_GetLastWheelContact");
static_assert(sizeof(DMWheelComponent_GetLastWheelContact) == 0x000138, "Wrong size on DMWheelComponent_GetLastWheelContact");
static_assert(offsetof(DMWheelComponent_GetLastWheelContact, ReturnValue) == 0x000000, "Member 'DMWheelComponent_GetLastWheelContact::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMWheelComponent.GetWheelContact
// 0x0140 (0x0140 - 0x0000)
struct DMWheelComponent_GetWheelContact final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDMWheelContact                        ReturnValue;                                       // 0x0008(0x0138)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMWheelComponent_GetWheelContact) == 0x000008, "Wrong alignment on DMWheelComponent_GetWheelContact");
static_assert(sizeof(DMWheelComponent_GetWheelContact) == 0x000140, "Wrong size on DMWheelComponent_GetWheelContact");
static_assert(offsetof(DMWheelComponent_GetWheelContact, bSuccess) == 0x000000, "Member 'DMWheelComponent_GetWheelContact::bSuccess' has a wrong offset!");
static_assert(offsetof(DMWheelComponent_GetWheelContact, ReturnValue) == 0x000008, "Member 'DMWheelComponent_GetWheelContact::ReturnValue' has a wrong offset!");

// Function DMUtilities.DMWheelComponent.TouchesGround
// 0x0001 (0x0001 - 0x0000)
struct DMWheelComponent_TouchesGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMWheelComponent_TouchesGround) == 0x000001, "Wrong alignment on DMWheelComponent_TouchesGround");
static_assert(sizeof(DMWheelComponent_TouchesGround) == 0x000001, "Wrong size on DMWheelComponent_TouchesGround");
static_assert(offsetof(DMWheelComponent_TouchesGround, ReturnValue) == 0x000000, "Member 'DMWheelComponent_TouchesGround::ReturnValue' has a wrong offset!");

}

