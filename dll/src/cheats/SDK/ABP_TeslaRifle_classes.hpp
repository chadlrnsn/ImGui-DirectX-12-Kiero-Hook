#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_TeslaRifle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_TeslaRifle.ABP_TeslaRifle_C
// 0x0930 (0x0E90 - 0x0560)
class UABP_TeslaRifle_C final : public URWeaponAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0560(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0568(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0570(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0578(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0598(0x0128)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x06C0(0x0020)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x06E0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x0700(0x0128)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0828(0x0048)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive;              // 0x0870(0x00D0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x0940(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0A68(0x0128)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0B90(0x0048)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0BD8(0x0040)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0C18(0x0080)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x0C98(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0CC0(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0CE8(0x00E8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0DD0(0x0048)()
	struct FRotator                               CoreRotation;                                      // 0x0E18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CoreRotationTarget;                                // 0x0E30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        SpinRateModifier;                                  // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinRandomFloat;                                    // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRandomFloat;                                    // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Plate_Rotation;                                    // 0x0E60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FRotator>                       Plate_Target_Rotation_;                            // 0x0E78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Plate_Position;                                    // 0x0E88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_TeslaRifle_AnimGraphNode_ModifyBone_1BE896F44A4AA93B0954479A7C814EFC();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_TeslaRifle_AnimGraphNode_ModifyBone_427649704FB2B4D27E5D8180F9DF68A4();
	void ExecuteUbergraph_ABP_TeslaRifle(int32 EntryPoint);
	void OnWeaponFired(bool IsPrimaryMod);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_TeslaRifle_C">();
	}
	static class UABP_TeslaRifle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_TeslaRifle_C>();
	}
};
static_assert(alignof(UABP_TeslaRifle_C) == 0x000010, "Wrong alignment on UABP_TeslaRifle_C");
static_assert(sizeof(UABP_TeslaRifle_C) == 0x000E90, "Wrong size on UABP_TeslaRifle_C");
static_assert(offsetof(UABP_TeslaRifle_C, UberGraphFrame) == 0x000560, "Member 'UABP_TeslaRifle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimBlueprintExtension_PropertyAccess) == 0x000568, "Member 'UABP_TeslaRifle_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimBlueprintExtension_Base) == 0x000570, "Member 'UABP_TeslaRifle_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_Root) == 0x000578, "Member 'UABP_TeslaRifle_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ModifyBone_3) == 0x000598, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ComponentToLocalSpace) == 0x0006C0, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_LocalToComponentSpace) == 0x0006E0, "Member 'UABP_TeslaRifle_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ModifyBone_2) == 0x000700, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_Slot_1) == 0x000828, "Member 'UABP_TeslaRifle_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ApplyMeshSpaceAdditive) == 0x000870, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ApplyMeshSpaceAdditive' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ModifyBone_1) == 0x000940, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_ModifyBone) == 0x000A68, "Member 'UABP_TeslaRifle_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_Slot) == 0x000B90, "Member 'UABP_TeslaRifle_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_SequenceEvaluator) == 0x000BD8, "Member 'UABP_TeslaRifle_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_SaveCachedPose) == 0x000C18, "Member 'UABP_TeslaRifle_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_UseCachedPose_1) == 0x000C98, "Member 'UABP_TeslaRifle_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_UseCachedPose) == 0x000CC0, "Member 'UABP_TeslaRifle_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_LayeredBoneBlend) == 0x000CE8, "Member 'UABP_TeslaRifle_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, AnimGraphNode_SequencePlayer) == 0x000DD0, "Member 'UABP_TeslaRifle_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, CoreRotation) == 0x000E18, "Member 'UABP_TeslaRifle_C::CoreRotation' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, CoreRotationTarget) == 0x000E30, "Member 'UABP_TeslaRifle_C::CoreRotationTarget' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, SpinRateModifier) == 0x000E48, "Member 'UABP_TeslaRifle_C::SpinRateModifier' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, MinRandomFloat) == 0x000E50, "Member 'UABP_TeslaRifle_C::MinRandomFloat' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, MaxRandomFloat) == 0x000E58, "Member 'UABP_TeslaRifle_C::MaxRandomFloat' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, Plate_Rotation) == 0x000E60, "Member 'UABP_TeslaRifle_C::Plate_Rotation' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, Plate_Target_Rotation_) == 0x000E78, "Member 'UABP_TeslaRifle_C::Plate_Target_Rotation_' has a wrong offset!");
static_assert(offsetof(UABP_TeslaRifle_C, Plate_Position) == 0x000E88, "Member 'UABP_TeslaRifle_C::Plate_Position' has a wrong offset!");

}

