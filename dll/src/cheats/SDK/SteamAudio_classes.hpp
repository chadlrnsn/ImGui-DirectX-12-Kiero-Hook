#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SteamAudio_structs.hpp"
#include "Engine_classes.hpp"
#include "AudioExtensions_classes.hpp"


namespace SDK
{

// Class SteamAudio.SOFAFile
// 0x0028 (0x0050 - 0x0028)
class USOFAFile final : public UObject
{
public:
	class FString                                 Name_0;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHRTFNormType                                 NormalizationType;                                 // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SOFAFile">();
	}
	static class USOFAFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USOFAFile>();
	}
};
static_assert(alignof(USOFAFile) == 0x000008, "Wrong alignment on USOFAFile");
static_assert(sizeof(USOFAFile) == 0x000050, "Wrong size on USOFAFile");
static_assert(offsetof(USOFAFile, Name_0) == 0x000028, "Member 'USOFAFile::Name_0' has a wrong offset!");
static_assert(offsetof(USOFAFile, Data) == 0x000038, "Member 'USOFAFile::Data' has a wrong offset!");
static_assert(offsetof(USOFAFile, Volume) == 0x000048, "Member 'USOFAFile::Volume' has a wrong offset!");
static_assert(offsetof(USOFAFile, NormalizationType) == 0x00004C, "Member 'USOFAFile::NormalizationType' has a wrong offset!");

// Class SteamAudio.SteamAudioBakedListenerComponent
// 0x0008 (0x00A8 - 0x00A0)
class USteamAudioBakedListenerComponent final : public UActorComponent
{
public:
	float                                         InfluenceRadius;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioBakedListenerComponent">();
	}
	static class USteamAudioBakedListenerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioBakedListenerComponent>();
	}
};
static_assert(alignof(USteamAudioBakedListenerComponent) == 0x000008, "Wrong alignment on USteamAudioBakedListenerComponent");
static_assert(sizeof(USteamAudioBakedListenerComponent) == 0x0000A8, "Wrong size on USteamAudioBakedListenerComponent");
static_assert(offsetof(USteamAudioBakedListenerComponent, InfluenceRadius) == 0x0000A0, "Member 'USteamAudioBakedListenerComponent::InfluenceRadius' has a wrong offset!");

// Class SteamAudio.SteamAudioBakedSourceComponent
// 0x0008 (0x00A8 - 0x00A0)
class USteamAudioBakedSourceComponent final : public UActorComponent
{
public:
	float                                         InfluenceRadius;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioBakedSourceComponent">();
	}
	static class USteamAudioBakedSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioBakedSourceComponent>();
	}
};
static_assert(alignof(USteamAudioBakedSourceComponent) == 0x000008, "Wrong alignment on USteamAudioBakedSourceComponent");
static_assert(sizeof(USteamAudioBakedSourceComponent) == 0x0000A8, "Wrong size on USteamAudioBakedSourceComponent");
static_assert(offsetof(USteamAudioBakedSourceComponent, InfluenceRadius) == 0x0000A0, "Member 'USteamAudioBakedSourceComponent::InfluenceRadius' has a wrong offset!");

// Class SteamAudio.SteamAudioDynamicObjectComponent
// 0x0030 (0x00D0 - 0x00A0)
class USteamAudioDynamicObjectComponent final : public UActorComponent
{
public:
	struct FSoftObjectPath                        Asset;                                             // 0x00A0(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x10];                                      // 0x00C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioDynamicObjectComponent">();
	}
	static class USteamAudioDynamicObjectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioDynamicObjectComponent>();
	}
};
static_assert(alignof(USteamAudioDynamicObjectComponent) == 0x000008, "Wrong alignment on USteamAudioDynamicObjectComponent");
static_assert(sizeof(USteamAudioDynamicObjectComponent) == 0x0000D0, "Wrong size on USteamAudioDynamicObjectComponent");
static_assert(offsetof(USteamAudioDynamicObjectComponent, Asset) == 0x0000A0, "Member 'USteamAudioDynamicObjectComponent::Asset' has a wrong offset!");

// Class SteamAudio.SteamAudioGeometryComponent
// 0x0030 (0x00D0 - 0x00A0)
class USteamAudioGeometryComponent final : public UActorComponent
{
public:
	struct FSoftObjectPath                        Material;                                          // 0x00A0(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportAllChildren;                                // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumVertices;                                       // 0x00C4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTriangles;                                      // 0x00C8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioGeometryComponent">();
	}
	static class USteamAudioGeometryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioGeometryComponent>();
	}
};
static_assert(alignof(USteamAudioGeometryComponent) == 0x000008, "Wrong alignment on USteamAudioGeometryComponent");
static_assert(sizeof(USteamAudioGeometryComponent) == 0x0000D0, "Wrong size on USteamAudioGeometryComponent");
static_assert(offsetof(USteamAudioGeometryComponent, Material) == 0x0000A0, "Member 'USteamAudioGeometryComponent::Material' has a wrong offset!");
static_assert(offsetof(USteamAudioGeometryComponent, bExportAllChildren) == 0x0000C0, "Member 'USteamAudioGeometryComponent::bExportAllChildren' has a wrong offset!");
static_assert(offsetof(USteamAudioGeometryComponent, NumVertices) == 0x0000C4, "Member 'USteamAudioGeometryComponent::NumVertices' has a wrong offset!");
static_assert(offsetof(USteamAudioGeometryComponent, NumTriangles) == 0x0000C8, "Member 'USteamAudioGeometryComponent::NumTriangles' has a wrong offset!");

// Class SteamAudio.SteamAudioListenerComponent
// 0x0048 (0x00E8 - 0x00A0)
class USteamAudioListenerComponent final : public UActorComponent
{
public:
	TSoftObjectPtr<class AActor>                  CurrentBakedListener;                              // 0x00A0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateReverb;                                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReverbSimulationType                         ReverbType;                                        // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x1E];                                      // 0x00CA(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioListenerComponent">();
	}
	static class USteamAudioListenerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioListenerComponent>();
	}
};
static_assert(alignof(USteamAudioListenerComponent) == 0x000008, "Wrong alignment on USteamAudioListenerComponent");
static_assert(sizeof(USteamAudioListenerComponent) == 0x0000E8, "Wrong size on USteamAudioListenerComponent");
static_assert(offsetof(USteamAudioListenerComponent, CurrentBakedListener) == 0x0000A0, "Member 'USteamAudioListenerComponent::CurrentBakedListener' has a wrong offset!");
static_assert(offsetof(USteamAudioListenerComponent, bSimulateReverb) == 0x0000C8, "Member 'USteamAudioListenerComponent::bSimulateReverb' has a wrong offset!");
static_assert(offsetof(USteamAudioListenerComponent, ReverbType) == 0x0000C9, "Member 'USteamAudioListenerComponent::ReverbType' has a wrong offset!");

// Class SteamAudio.SteamAudioMaterial
// 0x0020 (0x0048 - 0x0028)
class USteamAudioMaterial final : public UObject
{
public:
	float                                         AbsorptionLow;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorptionMid;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorptionHigh;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scattering;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionLow;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionMid;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionHigh;                                  // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioMaterial">();
	}
	static class USteamAudioMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioMaterial>();
	}
};
static_assert(alignof(USteamAudioMaterial) == 0x000008, "Wrong alignment on USteamAudioMaterial");
static_assert(sizeof(USteamAudioMaterial) == 0x000048, "Wrong size on USteamAudioMaterial");
static_assert(offsetof(USteamAudioMaterial, AbsorptionLow) == 0x000028, "Member 'USteamAudioMaterial::AbsorptionLow' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, AbsorptionMid) == 0x00002C, "Member 'USteamAudioMaterial::AbsorptionMid' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, AbsorptionHigh) == 0x000030, "Member 'USteamAudioMaterial::AbsorptionHigh' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, Scattering) == 0x000034, "Member 'USteamAudioMaterial::Scattering' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, TransmissionLow) == 0x000038, "Member 'USteamAudioMaterial::TransmissionLow' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, TransmissionMid) == 0x00003C, "Member 'USteamAudioMaterial::TransmissionMid' has a wrong offset!");
static_assert(offsetof(USteamAudioMaterial, TransmissionHigh) == 0x000040, "Member 'USteamAudioMaterial::TransmissionHigh' has a wrong offset!");

// Class SteamAudio.SteamAudioOcclusionSettings
// 0x0010 (0x0038 - 0x0028)
class USteamAudioOcclusionSettings final : public UOcclusionPluginSourceSettingsBase
{
public:
	bool                                          bApplyDistanceAttenuation;                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAirAbsorption;                               // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDirectivity;                                 // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DipoleWeight;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DipolePower;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyOcclusion;                                   // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyTransmission;                                // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransmissionType                             TransmissionType;                                  // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioOcclusionSettings">();
	}
	static class USteamAudioOcclusionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioOcclusionSettings>();
	}
};
static_assert(alignof(USteamAudioOcclusionSettings) == 0x000008, "Wrong alignment on USteamAudioOcclusionSettings");
static_assert(sizeof(USteamAudioOcclusionSettings) == 0x000038, "Wrong size on USteamAudioOcclusionSettings");
static_assert(offsetof(USteamAudioOcclusionSettings, bApplyDistanceAttenuation) == 0x000028, "Member 'USteamAudioOcclusionSettings::bApplyDistanceAttenuation' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, bApplyAirAbsorption) == 0x000029, "Member 'USteamAudioOcclusionSettings::bApplyAirAbsorption' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, bApplyDirectivity) == 0x00002A, "Member 'USteamAudioOcclusionSettings::bApplyDirectivity' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, DipoleWeight) == 0x00002C, "Member 'USteamAudioOcclusionSettings::DipoleWeight' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, DipolePower) == 0x000030, "Member 'USteamAudioOcclusionSettings::DipolePower' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, bApplyOcclusion) == 0x000034, "Member 'USteamAudioOcclusionSettings::bApplyOcclusion' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, bApplyTransmission) == 0x000035, "Member 'USteamAudioOcclusionSettings::bApplyTransmission' has a wrong offset!");
static_assert(offsetof(USteamAudioOcclusionSettings, TransmissionType) == 0x000036, "Member 'USteamAudioOcclusionSettings::TransmissionType' has a wrong offset!");

// Class SteamAudio.SteamAudioProbeComponent
// 0x0038 (0x00D8 - 0x00A0)
class USteamAudioProbeComponent final : public UActorComponent
{
public:
	TArray<struct FVector>                        ProbePositions;                                    // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x28];                                      // 0x00B0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioProbeComponent">();
	}
	static class USteamAudioProbeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioProbeComponent>();
	}
};
static_assert(alignof(USteamAudioProbeComponent) == 0x000008, "Wrong alignment on USteamAudioProbeComponent");
static_assert(sizeof(USteamAudioProbeComponent) == 0x0000D8, "Wrong size on USteamAudioProbeComponent");
static_assert(offsetof(USteamAudioProbeComponent, ProbePositions) == 0x0000A0, "Member 'USteamAudioProbeComponent::ProbePositions' has a wrong offset!");

// Class SteamAudio.SteamAudioProbeVolume
// 0x0060 (0x0340 - 0x02E0)
class ASteamAudioProbeVolume final : public AVolume
{
public:
	struct FSoftObjectPath                        Asset;                                             // 0x02E0(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProbeGenerationType                          GenerationType;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HorizontalSpacing;                                 // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAboveFloor;                                  // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumProbes;                                         // 0x030C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataSize;                                          // 0x0310(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSteamAudioBakedDataInfo>       DetailedStats;                                     // 0x0318(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class USteamAudioProbeComponent*              ProbeComponent;                                    // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_330[0x10];                                     // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioProbeVolume">();
	}
	static class ASteamAudioProbeVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASteamAudioProbeVolume>();
	}
};
static_assert(alignof(ASteamAudioProbeVolume) == 0x000008, "Wrong alignment on ASteamAudioProbeVolume");
static_assert(sizeof(ASteamAudioProbeVolume) == 0x000340, "Wrong size on ASteamAudioProbeVolume");
static_assert(offsetof(ASteamAudioProbeVolume, Asset) == 0x0002E0, "Member 'ASteamAudioProbeVolume::Asset' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, GenerationType) == 0x000300, "Member 'ASteamAudioProbeVolume::GenerationType' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, HorizontalSpacing) == 0x000304, "Member 'ASteamAudioProbeVolume::HorizontalSpacing' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, HeightAboveFloor) == 0x000308, "Member 'ASteamAudioProbeVolume::HeightAboveFloor' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, NumProbes) == 0x00030C, "Member 'ASteamAudioProbeVolume::NumProbes' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, DataSize) == 0x000310, "Member 'ASteamAudioProbeVolume::DataSize' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, DetailedStats) == 0x000318, "Member 'ASteamAudioProbeVolume::DetailedStats' has a wrong offset!");
static_assert(offsetof(ASteamAudioProbeVolume, ProbeComponent) == 0x000328, "Member 'ASteamAudioProbeVolume::ProbeComponent' has a wrong offset!");

// Class SteamAudio.SteamAudioReverbSubmixPluginPreset
// 0x0030 (0x0098 - 0x0068)
class USteamAudioReverbSubmixPluginPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_68[0x2A];                                      // 0x0068(0x002A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSteamAudioReverbSubmixPluginSettings  Settings;                                          // 0x0092(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioReverbSubmixPluginPreset">();
	}
	static class USteamAudioReverbSubmixPluginPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioReverbSubmixPluginPreset>();
	}
};
static_assert(alignof(USteamAudioReverbSubmixPluginPreset) == 0x000008, "Wrong alignment on USteamAudioReverbSubmixPluginPreset");
static_assert(sizeof(USteamAudioReverbSubmixPluginPreset) == 0x000098, "Wrong size on USteamAudioReverbSubmixPluginPreset");
static_assert(offsetof(USteamAudioReverbSubmixPluginPreset, Settings) == 0x000092, "Member 'USteamAudioReverbSubmixPluginPreset::Settings' has a wrong offset!");

// Class SteamAudio.SteamAudioReverbSettings
// 0x0008 (0x0030 - 0x0028)
class USteamAudioReverbSettings final : public UReverbPluginSourceSettingsBase
{
public:
	bool                                          bApplyReflections;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyHRTFToReflections;                           // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReflectionsMixLevel;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioReverbSettings">();
	}
	static class USteamAudioReverbSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioReverbSettings>();
	}
};
static_assert(alignof(USteamAudioReverbSettings) == 0x000008, "Wrong alignment on USteamAudioReverbSettings");
static_assert(sizeof(USteamAudioReverbSettings) == 0x000030, "Wrong size on USteamAudioReverbSettings");
static_assert(offsetof(USteamAudioReverbSettings, bApplyReflections) == 0x000028, "Member 'USteamAudioReverbSettings::bApplyReflections' has a wrong offset!");
static_assert(offsetof(USteamAudioReverbSettings, bApplyHRTFToReflections) == 0x000029, "Member 'USteamAudioReverbSettings::bApplyHRTFToReflections' has a wrong offset!");
static_assert(offsetof(USteamAudioReverbSettings, ReflectionsMixLevel) == 0x00002C, "Member 'USteamAudioReverbSettings::ReflectionsMixLevel' has a wrong offset!");

// Class SteamAudio.SteamAudioSerializedObject
// 0x0010 (0x0038 - 0x0028)
class USteamAudioSerializedObject final : public UObject
{
public:
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioSerializedObject">();
	}
	static class USteamAudioSerializedObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioSerializedObject>();
	}
};
static_assert(alignof(USteamAudioSerializedObject) == 0x000008, "Wrong alignment on USteamAudioSerializedObject");
static_assert(sizeof(USteamAudioSerializedObject) == 0x000038, "Wrong size on USteamAudioSerializedObject");
static_assert(offsetof(USteamAudioSerializedObject, Data) == 0x000028, "Member 'USteamAudioSerializedObject::Data' has a wrong offset!");

// Class SteamAudio.SteamAudioSettings
// 0x0140 (0x0168 - 0x0028)
class USteamAudioSettings final : public UObject
{
public:
	EAudioEngineType                              AudioEngine;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportLandscapeGeometry;                          // 0x0029(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExportBSPGeometry;                                // 0x002A(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        DefaultMeshMaterial;                               // 0x0030(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultLandscapeMaterial;                          // 0x0050(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultBSPMaterial;                                // 0x0070(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESceneType                                    SceneType;                                         // 0x0090(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxOcclusionSamples;                               // 0x0094(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealTimeRays;                                      // 0x0098(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealTimeBounces;                                   // 0x009C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RealTimeDuration;                                  // 0x00A0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealTimeAmbisonicOrder;                            // 0x00A4(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealTimeMaxSources;                                // 0x00A8(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealTimeCPUCoresPercentage;                        // 0x00AC(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RealTimeIrradianceMinDistance;                     // 0x00B0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeConvolution;                                  // 0x00B4(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeParametric;                                   // 0x00B5(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BakingRays;                                        // 0x00B8(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakingBounces;                                     // 0x00BC(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingDuration;                                    // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakingAmbisonicOrder;                              // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakingCPUCoresPercentage;                          // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingIrradianceMinDistance;                       // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReverbSubmix;                                      // 0x00D0(0x0020)(Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakingVisibilitySamples;                           // 0x00F0(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingVisibilityRadius;                            // 0x00F4(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingVisibilityThreshold;                         // 0x00F8(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingVisibilityRange;                             // 0x00FC(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BakingPathRange;                                   // 0x0100(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakedPathingCPUCoresPercentage;                    // 0x0104(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulationUpdateInterval;                          // 0x0108(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflectionEffectType                         ReflectionEffectType;                              // 0x010C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HybridReverbTransitionTime;                        // 0x0110(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HybridReverbOverlapPercent;                        // 0x0114(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpenCLDeviceType                             DeviceType;                                        // 0x0118(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxReservedComputeUnits;                           // 0x011C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionComputeUnitsForIRUpdate;                   // 0x0120(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BakingBatchSize;                                   // 0x0124(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TANDuration;                                       // 0x0128(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TANAmbisonicOrder;                                 // 0x012C(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TANMaxSources;                                     // 0x0130(0x0004)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HRTFVolume;                                        // 0x0134(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHRTFNormType                                 HRTFNormalizationType;                             // 0x0138(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        SOFAFile;                                          // 0x0140(0x0020)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableValidation;                                  // 0x0160(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioSettings">();
	}
	static class USteamAudioSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioSettings>();
	}
};
static_assert(alignof(USteamAudioSettings) == 0x000008, "Wrong alignment on USteamAudioSettings");
static_assert(sizeof(USteamAudioSettings) == 0x000168, "Wrong size on USteamAudioSettings");
static_assert(offsetof(USteamAudioSettings, AudioEngine) == 0x000028, "Member 'USteamAudioSettings::AudioEngine' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, bExportLandscapeGeometry) == 0x000029, "Member 'USteamAudioSettings::bExportLandscapeGeometry' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, bExportBSPGeometry) == 0x00002A, "Member 'USteamAudioSettings::bExportBSPGeometry' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, DefaultMeshMaterial) == 0x000030, "Member 'USteamAudioSettings::DefaultMeshMaterial' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, DefaultLandscapeMaterial) == 0x000050, "Member 'USteamAudioSettings::DefaultLandscapeMaterial' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, DefaultBSPMaterial) == 0x000070, "Member 'USteamAudioSettings::DefaultBSPMaterial' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, SceneType) == 0x000090, "Member 'USteamAudioSettings::SceneType' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, MaxOcclusionSamples) == 0x000094, "Member 'USteamAudioSettings::MaxOcclusionSamples' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeRays) == 0x000098, "Member 'USteamAudioSettings::RealTimeRays' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeBounces) == 0x00009C, "Member 'USteamAudioSettings::RealTimeBounces' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeDuration) == 0x0000A0, "Member 'USteamAudioSettings::RealTimeDuration' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeAmbisonicOrder) == 0x0000A4, "Member 'USteamAudioSettings::RealTimeAmbisonicOrder' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeMaxSources) == 0x0000A8, "Member 'USteamAudioSettings::RealTimeMaxSources' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeCPUCoresPercentage) == 0x0000AC, "Member 'USteamAudioSettings::RealTimeCPUCoresPercentage' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, RealTimeIrradianceMinDistance) == 0x0000B0, "Member 'USteamAudioSettings::RealTimeIrradianceMinDistance' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, bBakeConvolution) == 0x0000B4, "Member 'USteamAudioSettings::bBakeConvolution' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, bBakeParametric) == 0x0000B5, "Member 'USteamAudioSettings::bBakeParametric' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingRays) == 0x0000B8, "Member 'USteamAudioSettings::BakingRays' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingBounces) == 0x0000BC, "Member 'USteamAudioSettings::BakingBounces' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingDuration) == 0x0000C0, "Member 'USteamAudioSettings::BakingDuration' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingAmbisonicOrder) == 0x0000C4, "Member 'USteamAudioSettings::BakingAmbisonicOrder' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingCPUCoresPercentage) == 0x0000C8, "Member 'USteamAudioSettings::BakingCPUCoresPercentage' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingIrradianceMinDistance) == 0x0000CC, "Member 'USteamAudioSettings::BakingIrradianceMinDistance' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, ReverbSubmix) == 0x0000D0, "Member 'USteamAudioSettings::ReverbSubmix' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingVisibilitySamples) == 0x0000F0, "Member 'USteamAudioSettings::BakingVisibilitySamples' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingVisibilityRadius) == 0x0000F4, "Member 'USteamAudioSettings::BakingVisibilityRadius' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingVisibilityThreshold) == 0x0000F8, "Member 'USteamAudioSettings::BakingVisibilityThreshold' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingVisibilityRange) == 0x0000FC, "Member 'USteamAudioSettings::BakingVisibilityRange' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingPathRange) == 0x000100, "Member 'USteamAudioSettings::BakingPathRange' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakedPathingCPUCoresPercentage) == 0x000104, "Member 'USteamAudioSettings::BakedPathingCPUCoresPercentage' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, SimulationUpdateInterval) == 0x000108, "Member 'USteamAudioSettings::SimulationUpdateInterval' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, ReflectionEffectType) == 0x00010C, "Member 'USteamAudioSettings::ReflectionEffectType' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, HybridReverbTransitionTime) == 0x000110, "Member 'USteamAudioSettings::HybridReverbTransitionTime' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, HybridReverbOverlapPercent) == 0x000114, "Member 'USteamAudioSettings::HybridReverbOverlapPercent' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, DeviceType) == 0x000118, "Member 'USteamAudioSettings::DeviceType' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, MaxReservedComputeUnits) == 0x00011C, "Member 'USteamAudioSettings::MaxReservedComputeUnits' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, FractionComputeUnitsForIRUpdate) == 0x000120, "Member 'USteamAudioSettings::FractionComputeUnitsForIRUpdate' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, BakingBatchSize) == 0x000124, "Member 'USteamAudioSettings::BakingBatchSize' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, TANDuration) == 0x000128, "Member 'USteamAudioSettings::TANDuration' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, TANAmbisonicOrder) == 0x00012C, "Member 'USteamAudioSettings::TANAmbisonicOrder' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, TANMaxSources) == 0x000130, "Member 'USteamAudioSettings::TANMaxSources' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, HRTFVolume) == 0x000134, "Member 'USteamAudioSettings::HRTFVolume' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, HRTFNormalizationType) == 0x000138, "Member 'USteamAudioSettings::HRTFNormalizationType' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, SOFAFile) == 0x000140, "Member 'USteamAudioSettings::SOFAFile' has a wrong offset!");
static_assert(offsetof(USteamAudioSettings, EnableValidation) == 0x000160, "Member 'USteamAudioSettings::EnableValidation' has a wrong offset!");

// Class SteamAudio.SteamAudioSourceComponent
// 0x00A8 (0x0148 - 0x00A0)
class USteamAudioSourceComponent final : public UActorComponent
{
public:
	bool                                          bSimulateOcclusion;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionType                                OcclusionType;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionRadius;                                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OcclusionSamples;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionValue;                                    // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateTransmission;                             // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransmissionLowValue;                              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionMidValue;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmissionHighValue;                             // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTransmissionSurfaces;                           // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulateReflections;                              // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflectionSimulationType                     ReflectionsType;                                   // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  CurrentBakedSource;                                // 0x00C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimulatePathing;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ASteamAudioProbeVolume>  PathingProbeBatch;                                 // 0x00F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPathValidation;                                   // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindAlternatePaths;                               // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x26];                                     // 0x0122(0x0026)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioSourceComponent">();
	}
	static class USteamAudioSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioSourceComponent>();
	}
};
static_assert(alignof(USteamAudioSourceComponent) == 0x000008, "Wrong alignment on USteamAudioSourceComponent");
static_assert(sizeof(USteamAudioSourceComponent) == 0x000148, "Wrong size on USteamAudioSourceComponent");
static_assert(offsetof(USteamAudioSourceComponent, bSimulateOcclusion) == 0x0000A0, "Member 'USteamAudioSourceComponent::bSimulateOcclusion' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, OcclusionType) == 0x0000A1, "Member 'USteamAudioSourceComponent::OcclusionType' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, OcclusionRadius) == 0x0000A4, "Member 'USteamAudioSourceComponent::OcclusionRadius' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, OcclusionSamples) == 0x0000A8, "Member 'USteamAudioSourceComponent::OcclusionSamples' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, OcclusionValue) == 0x0000AC, "Member 'USteamAudioSourceComponent::OcclusionValue' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, bSimulateTransmission) == 0x0000B0, "Member 'USteamAudioSourceComponent::bSimulateTransmission' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, TransmissionLowValue) == 0x0000B4, "Member 'USteamAudioSourceComponent::TransmissionLowValue' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, TransmissionMidValue) == 0x0000B8, "Member 'USteamAudioSourceComponent::TransmissionMidValue' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, TransmissionHighValue) == 0x0000BC, "Member 'USteamAudioSourceComponent::TransmissionHighValue' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, MaxTransmissionSurfaces) == 0x0000C0, "Member 'USteamAudioSourceComponent::MaxTransmissionSurfaces' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, bSimulateReflections) == 0x0000C4, "Member 'USteamAudioSourceComponent::bSimulateReflections' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, ReflectionsType) == 0x0000C5, "Member 'USteamAudioSourceComponent::ReflectionsType' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, CurrentBakedSource) == 0x0000C8, "Member 'USteamAudioSourceComponent::CurrentBakedSource' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, bSimulatePathing) == 0x0000F0, "Member 'USteamAudioSourceComponent::bSimulatePathing' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, PathingProbeBatch) == 0x0000F8, "Member 'USteamAudioSourceComponent::PathingProbeBatch' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, bPathValidation) == 0x000120, "Member 'USteamAudioSourceComponent::bPathValidation' has a wrong offset!");
static_assert(offsetof(USteamAudioSourceComponent, bFindAlternatePaths) == 0x000121, "Member 'USteamAudioSourceComponent::bFindAlternatePaths' has a wrong offset!");

// Class SteamAudio.SteamAudioSpatializationSettings
// 0x0008 (0x0030 - 0x0028)
class USteamAudioSpatializationSettings final : public USpatializationPluginSourceSettingsBase
{
public:
	bool                                          bBinaural;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHRTFInterpolation                            Interpolation;                                     // 0x0029(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyPathing;                                     // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyHRTFToPathing;                               // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PathingMixLevel;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioSpatializationSettings">();
	}
	static class USteamAudioSpatializationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamAudioSpatializationSettings>();
	}
};
static_assert(alignof(USteamAudioSpatializationSettings) == 0x000008, "Wrong alignment on USteamAudioSpatializationSettings");
static_assert(sizeof(USteamAudioSpatializationSettings) == 0x000030, "Wrong size on USteamAudioSpatializationSettings");
static_assert(offsetof(USteamAudioSpatializationSettings, bBinaural) == 0x000028, "Member 'USteamAudioSpatializationSettings::bBinaural' has a wrong offset!");
static_assert(offsetof(USteamAudioSpatializationSettings, Interpolation) == 0x000029, "Member 'USteamAudioSpatializationSettings::Interpolation' has a wrong offset!");
static_assert(offsetof(USteamAudioSpatializationSettings, bApplyPathing) == 0x00002A, "Member 'USteamAudioSpatializationSettings::bApplyPathing' has a wrong offset!");
static_assert(offsetof(USteamAudioSpatializationSettings, bApplyHRTFToPathing) == 0x00002B, "Member 'USteamAudioSpatializationSettings::bApplyHRTFToPathing' has a wrong offset!");
static_assert(offsetof(USteamAudioSpatializationSettings, PathingMixLevel) == 0x00002C, "Member 'USteamAudioSpatializationSettings::PathingMixLevel' has a wrong offset!");

// Class SteamAudio.SteamAudioStaticMeshActor
// 0x0030 (0x02D8 - 0x02A8)
class ASteamAudioStaticMeshActor final : public AActor
{
public:
	struct FSoftObjectPath                        Asset;                                             // 0x02A8(0x0020)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SteamAudioStaticMeshActor">();
	}
	static class ASteamAudioStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASteamAudioStaticMeshActor>();
	}
};
static_assert(alignof(ASteamAudioStaticMeshActor) == 0x000008, "Wrong alignment on ASteamAudioStaticMeshActor");
static_assert(sizeof(ASteamAudioStaticMeshActor) == 0x0002D8, "Wrong size on ASteamAudioStaticMeshActor");
static_assert(offsetof(ASteamAudioStaticMeshActor, Asset) == 0x0002A8, "Member 'ASteamAudioStaticMeshActor::Asset' has a wrong offset!");

}

