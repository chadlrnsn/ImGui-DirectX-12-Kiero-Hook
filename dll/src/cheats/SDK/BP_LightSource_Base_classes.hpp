#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightSource_Base

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightSource_Base.BP_LightSource_Base_C
// 0x0060 (0x0308 - 0x02A8)
class ABP_LightSource_Base_C : public AActor
{
public:
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_On;                                          // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                AttachedLightComponents;                           // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<double>                                InitialLightIntensity;                             // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                InitialLightVolumetricScatter;                     // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        LightIntensityFactor;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightVolumetricScatterFactor;                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ALight*>                         LinkedLights;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)

public:
	void LerpOnOffState(double Alpha);
	void UpdateVolumetricScatterIntensity();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightSource_Base_C">();
	}
	static class ABP_LightSource_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightSource_Base_C>();
	}
};
static_assert(alignof(ABP_LightSource_Base_C) == 0x000008, "Wrong alignment on ABP_LightSource_Base_C");
static_assert(sizeof(ABP_LightSource_Base_C) == 0x000308, "Wrong size on ABP_LightSource_Base_C");
static_assert(offsetof(ABP_LightSource_Base_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_LightSource_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, Light_On) == 0x0002B0, "Member 'ABP_LightSource_Base_C::Light_On' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, AttachedLightComponents) == 0x0002B8, "Member 'ABP_LightSource_Base_C::AttachedLightComponents' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, InitialLightIntensity) == 0x0002C8, "Member 'ABP_LightSource_Base_C::InitialLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, InitialLightVolumetricScatter) == 0x0002D8, "Member 'ABP_LightSource_Base_C::InitialLightVolumetricScatter' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, LightIntensityFactor) == 0x0002E8, "Member 'ABP_LightSource_Base_C::LightIntensityFactor' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, LightVolumetricScatterFactor) == 0x0002F0, "Member 'ABP_LightSource_Base_C::LightVolumetricScatterFactor' has a wrong offset!");
static_assert(offsetof(ABP_LightSource_Base_C, LinkedLights) == 0x0002F8, "Member 'ABP_LightSource_Base_C::LinkedLights' has a wrong offset!");

}

