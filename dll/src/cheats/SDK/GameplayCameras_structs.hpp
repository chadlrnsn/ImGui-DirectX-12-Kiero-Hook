#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayCameras

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK
{

// Enum GameplayCameras.EBuiltInDoubleCameraVariable
// NumValues: 0x0006
enum class EBuiltInDoubleCameraVariable : uint32
{
	None                                     = 0,
	Yaw                                      = 1,
	Pitch                                    = 2,
	Roll                                     = 3,
	Zoom                                     = 4,
	EBuiltInDoubleCameraVariable_MAX         = 5,
};

// Enum GameplayCameras.EBuiltInVector2dCameraVariable
// NumValues: 0x0003
enum class EBuiltInVector2dCameraVariable : uint32
{
	None                                     = 0,
	YawPitch                                 = 1,
	EBuiltInVector2dCameraVariable_MAX       = 2,
};

// Enum GameplayCameras.EBuiltInRotator3dCameraVariable
// NumValues: 0x0003
enum class EBuiltInRotator3dCameraVariable : uint8
{
	None                                     = 0,
	ControlRotation                          = 1,
	EBuiltInRotator3dCameraVariable_MAX      = 2,
};

// Enum GameplayCameras.ECameraBuildStatus
// NumValues: 0x0005
enum class ECameraBuildStatus : uint8
{
	Clean                                    = 0,
	CleanWithWarnings                        = 1,
	WithErrors                               = 2,
	Dirty                                    = 3,
	ECameraBuildStatus_MAX                   = 4,
};

// Enum GameplayCameras.ECameraNodeOriginPosition
// NumValues: 0x0006
enum class ECameraNodeOriginPosition : uint8
{
	CameraPose                               = 0,
	ActiveContext                            = 1,
	OwningContext                            = 2,
	Pivot                                    = 3,
	Pawn                                     = 4,
	ECameraNodeOriginPosition_MAX            = 5,
};

// Enum GameplayCameras.ECameraNodeSpace
// NumValues: 0x0007
enum class ECameraNodeSpace : uint8
{
	CameraPose                               = 0,
	ActiveContext                            = 1,
	OwningContext                            = 2,
	Pivot                                    = 3,
	Pawn                                     = 4,
	World                                    = 5,
	ECameraNodeSpace_MAX                     = 6,
};

// Enum GameplayCameras.ECameraVariableType
// NumValues: 0x000F
enum class ECameraVariableType : uint32
{
	Boolean                                  = 0,
	Integer32                                = 1,
	Float                                    = 2,
	Double                                   = 3,
	Vector2f                                 = 4,
	Vector2d                                 = 5,
	Vector3f                                 = 6,
	Vector3d                                 = 7,
	Vector4f                                 = 8,
	Vector4d                                 = 9,
	Rotator3f                                = 10,
	Rotator3d                                = 11,
	Transform3f                              = 12,
	Transform3d                              = 13,
	ECameraVariableType_MAX                  = 14,
};

// Enum GameplayCameras.ECameraBlendStackType
// NumValues: 0x0003
enum class ECameraBlendStackType : uint32
{
	IsolatedTransient                        = 0,
	AdditivePersistent                       = 1,
	ECameraBlendStackType_MAX                = 2,
};

// Enum GameplayCameras.ECameraRigInitialOrientation
// NumValues: 0x0006
enum class ECameraRigInitialOrientation : uint32
{
	None                                     = 0,
	ContextYawPitch                          = 1,
	PreviousYawPitch                         = 2,
	PreviousAbsoluteTarget                   = 3,
	PreviousRelativeTarget                   = 4,
	ECameraRigInitialOrientation_MAX         = 5,
};

// Enum GameplayCameras.ECameraRigLayer
// NumValues: 0x0005
enum class ECameraRigLayer : uint8
{
	Base                                     = 0,
	Main                                     = 1,
	Global                                   = 2,
	Visual                                   = 3,
	ECameraRigLayer_MAX                      = 4,
};

// Enum GameplayCameras.ESmoothCameraBlendType
// NumValues: 0x0003
enum class ESmoothCameraBlendType : uint32
{
	SmoothStep                               = 0,
	SmootherStep                             = 1,
	ESmoothCameraBlendType_MAX               = 2,
};

// Enum GameplayCameras.ECollisionSafePosition
// NumValues: 0x0005
enum class ECollisionSafePosition : uint8
{
	ActiveContext                            = 0,
	OwningContext                            = 1,
	Pivot                                    = 2,
	Pawn                                     = 3,
	ECollisionSafePosition_MAX               = 4,
};

// Enum GameplayCameras.ECollisionSafePositionOffsetSpace
// NumValues: 0x0006
enum class ECollisionSafePositionOffsetSpace : uint8
{
	ActiveContext                            = 0,
	OwningContext                            = 1,
	Pivot                                    = 2,
	CameraPose                               = 3,
	Pawn                                     = 4,
	ECollisionSafePositionOffsetSpace_MAX    = 5,
};

// Enum GameplayCameras.ECameraAutoRotateDirection
// NumValues: 0x0003
enum class ECameraAutoRotateDirection : uint32
{
	Facing                                   = 0,
	Movement                                 = 1,
	ECameraAutoRotateDirection_MAX           = 2,
};

// ScriptStruct GameplayCameras.DoubleCameraParameter
// 0x0010 (0x0010 - 0x0000)
struct FDoubleCameraParameter final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDoubleCameraVariable*                  Variable;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoubleCameraParameter) == 0x000008, "Wrong alignment on FDoubleCameraParameter");
static_assert(sizeof(FDoubleCameraParameter) == 0x000010, "Wrong size on FDoubleCameraParameter");
static_assert(offsetof(FDoubleCameraParameter, Value) == 0x000000, "Member 'FDoubleCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FDoubleCameraParameter, Variable) == 0x000008, "Member 'FDoubleCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraFramingZone
// 0x0040 (0x0040 - 0x0000)
struct FCameraFramingZone final
{
public:
	struct FDoubleCameraParameter                 LeftMargin;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 TopMargin;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 RightMargin;                                       // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 BottomMargin;                                      // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraFramingZone) == 0x000008, "Wrong alignment on FCameraFramingZone");
static_assert(sizeof(FCameraFramingZone) == 0x000040, "Wrong size on FCameraFramingZone");
static_assert(offsetof(FCameraFramingZone, LeftMargin) == 0x000000, "Member 'FCameraFramingZone::LeftMargin' has a wrong offset!");
static_assert(offsetof(FCameraFramingZone, TopMargin) == 0x000010, "Member 'FCameraFramingZone::TopMargin' has a wrong offset!");
static_assert(offsetof(FCameraFramingZone, RightMargin) == 0x000020, "Member 'FCameraFramingZone::RightMargin' has a wrong offset!");
static_assert(offsetof(FCameraFramingZone, BottomMargin) == 0x000030, "Member 'FCameraFramingZone::BottomMargin' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraNodeEvaluatorAllocationInfo
// 0x0004 (0x0004 - 0x0000)
struct FCameraNodeEvaluatorAllocationInfo final
{
public:
	int16                                         TotalSizeof;                                       // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxAlignof;                                        // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraNodeEvaluatorAllocationInfo) == 0x000002, "Wrong alignment on FCameraNodeEvaluatorAllocationInfo");
static_assert(sizeof(FCameraNodeEvaluatorAllocationInfo) == 0x000004, "Wrong size on FCameraNodeEvaluatorAllocationInfo");
static_assert(offsetof(FCameraNodeEvaluatorAllocationInfo, TotalSizeof) == 0x000000, "Member 'FCameraNodeEvaluatorAllocationInfo::TotalSizeof' has a wrong offset!");
static_assert(offsetof(FCameraNodeEvaluatorAllocationInfo, MaxAlignof) == 0x000002, "Member 'FCameraNodeEvaluatorAllocationInfo::MaxAlignof' has a wrong offset!");

// ScriptStruct GameplayCameras.BooleanCameraParameter
// 0x0010 (0x0010 - 0x0000)
struct FBooleanCameraParameter final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBooleanCameraVariable*                 Variable;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBooleanCameraParameter) == 0x000008, "Wrong alignment on FBooleanCameraParameter");
static_assert(sizeof(FBooleanCameraParameter) == 0x000010, "Wrong size on FBooleanCameraParameter");
static_assert(offsetof(FBooleanCameraParameter, Value) == 0x000000, "Member 'FBooleanCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FBooleanCameraParameter, Variable) == 0x000008, "Member 'FBooleanCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Integer32CameraParameter
// 0x0010 (0x0010 - 0x0000)
struct FInteger32CameraParameter final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteger32CameraVariable*               Variable;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteger32CameraParameter) == 0x000008, "Wrong alignment on FInteger32CameraParameter");
static_assert(sizeof(FInteger32CameraParameter) == 0x000010, "Wrong size on FInteger32CameraParameter");
static_assert(offsetof(FInteger32CameraParameter, Value) == 0x000000, "Member 'FInteger32CameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FInteger32CameraParameter, Variable) == 0x000008, "Member 'FInteger32CameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.FloatCameraParameter
// 0x0010 (0x0010 - 0x0000)
struct FFloatCameraParameter final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFloatCameraVariable*                   Variable;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatCameraParameter) == 0x000008, "Wrong alignment on FFloatCameraParameter");
static_assert(sizeof(FFloatCameraParameter) == 0x000010, "Wrong size on FFloatCameraParameter");
static_assert(offsetof(FFloatCameraParameter, Value) == 0x000000, "Member 'FFloatCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FFloatCameraParameter, Variable) == 0x000008, "Member 'FFloatCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2fCameraParameter
// 0x0010 (0x0010 - 0x0000)
struct FVector2fCameraParameter final
{
public:
	struct FVector2f                              Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVector2fCameraVariable*                Variable;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2fCameraParameter) == 0x000008, "Wrong alignment on FVector2fCameraParameter");
static_assert(sizeof(FVector2fCameraParameter) == 0x000010, "Wrong size on FVector2fCameraParameter");
static_assert(offsetof(FVector2fCameraParameter, Value) == 0x000000, "Member 'FVector2fCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector2fCameraParameter, Variable) == 0x000008, "Member 'FVector2fCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2dCameraParameter
// 0x0018 (0x0018 - 0x0000)
struct FVector2dCameraParameter final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVector2dCameraVariable*                Variable;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2dCameraParameter) == 0x000008, "Wrong alignment on FVector2dCameraParameter");
static_assert(sizeof(FVector2dCameraParameter) == 0x000018, "Wrong size on FVector2dCameraParameter");
static_assert(offsetof(FVector2dCameraParameter, Value) == 0x000000, "Member 'FVector2dCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector2dCameraParameter, Variable) == 0x000010, "Member 'FVector2dCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3fCameraParameter
// 0x0018 (0x0018 - 0x0000)
struct FVector3fCameraParameter final
{
public:
	struct FVector3f                              Value;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVector3fCameraVariable*                Variable;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3fCameraParameter) == 0x000008, "Wrong alignment on FVector3fCameraParameter");
static_assert(sizeof(FVector3fCameraParameter) == 0x000018, "Wrong size on FVector3fCameraParameter");
static_assert(offsetof(FVector3fCameraParameter, Value) == 0x000000, "Member 'FVector3fCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector3fCameraParameter, Variable) == 0x000010, "Member 'FVector3fCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3dCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FVector3dCameraParameter final
{
public:
	struct FVector3d                              Value;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVector3dCameraVariable*                Variable;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3dCameraParameter) == 0x000008, "Wrong alignment on FVector3dCameraParameter");
static_assert(sizeof(FVector3dCameraParameter) == 0x000020, "Wrong size on FVector3dCameraParameter");
static_assert(offsetof(FVector3dCameraParameter, Value) == 0x000000, "Member 'FVector3dCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector3dCameraParameter, Variable) == 0x000018, "Member 'FVector3dCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4fCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FVector4fCameraParameter final
{
public:
	struct FVector4f                              Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVector4fCameraVariable*                Variable;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVector4fCameraParameter) == 0x000010, "Wrong alignment on FVector4fCameraParameter");
static_assert(sizeof(FVector4fCameraParameter) == 0x000020, "Wrong size on FVector4fCameraParameter");
static_assert(offsetof(FVector4fCameraParameter, Value) == 0x000000, "Member 'FVector4fCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector4fCameraParameter, Variable) == 0x000010, "Member 'FVector4fCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4dCameraParameter
// 0x0030 (0x0030 - 0x0000)
struct FVector4dCameraParameter final
{
public:
	struct FVector4d                              Value;                                             // 0x0000(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVector4dCameraVariable*                Variable;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVector4dCameraParameter) == 0x000010, "Wrong alignment on FVector4dCameraParameter");
static_assert(sizeof(FVector4dCameraParameter) == 0x000030, "Wrong size on FVector4dCameraParameter");
static_assert(offsetof(FVector4dCameraParameter, Value) == 0x000000, "Member 'FVector4dCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FVector4dCameraParameter, Variable) == 0x000020, "Member 'FVector4dCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3fCameraParameter
// 0x0018 (0x0018 - 0x0000)
struct FRotator3fCameraParameter final
{
public:
	struct FRotator3f                             Value;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URotator3fCameraVariable*               Variable;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3fCameraParameter) == 0x000008, "Wrong alignment on FRotator3fCameraParameter");
static_assert(sizeof(FRotator3fCameraParameter) == 0x000018, "Wrong size on FRotator3fCameraParameter");
static_assert(offsetof(FRotator3fCameraParameter, Value) == 0x000000, "Member 'FRotator3fCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FRotator3fCameraParameter, Variable) == 0x000010, "Member 'FRotator3fCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3dCameraParameter
// 0x0020 (0x0020 - 0x0000)
struct FRotator3dCameraParameter final
{
public:
	struct FRotator3d                             Value;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class URotator3dCameraVariable*               Variable;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3dCameraParameter) == 0x000008, "Wrong alignment on FRotator3dCameraParameter");
static_assert(sizeof(FRotator3dCameraParameter) == 0x000020, "Wrong size on FRotator3dCameraParameter");
static_assert(offsetof(FRotator3dCameraParameter, Value) == 0x000000, "Member 'FRotator3dCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FRotator3dCameraParameter, Variable) == 0x000018, "Member 'FRotator3dCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3fCameraParameter
// 0x0040 (0x0040 - 0x0000)
struct FTransform3fCameraParameter final
{
public:
	struct FTransform3f                           Value;                                             // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTransform3fCameraVariable*             Variable;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransform3fCameraParameter) == 0x000010, "Wrong alignment on FTransform3fCameraParameter");
static_assert(sizeof(FTransform3fCameraParameter) == 0x000040, "Wrong size on FTransform3fCameraParameter");
static_assert(offsetof(FTransform3fCameraParameter, Value) == 0x000000, "Member 'FTransform3fCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FTransform3fCameraParameter, Variable) == 0x000030, "Member 'FTransform3fCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3dCameraParameter
// 0x0070 (0x0070 - 0x0000)
struct FTransform3dCameraParameter final
{
public:
	struct FTransform3d                           Value;                                             // 0x0000(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTransform3dCameraVariable*             Variable;                                          // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransform3dCameraParameter) == 0x000010, "Wrong alignment on FTransform3dCameraParameter");
static_assert(sizeof(FTransform3dCameraParameter) == 0x000070, "Wrong size on FTransform3dCameraParameter");
static_assert(offsetof(FTransform3dCameraParameter, Value) == 0x000000, "Member 'FTransform3dCameraParameter::Value' has a wrong offset!");
static_assert(offsetof(FTransform3dCameraParameter, Variable) == 0x000060, "Member 'FTransform3dCameraParameter::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigInputSlotParameters
// 0x0002 (0x0002 - 0x0000)
struct FCameraRigInputSlotParameters final
{
public:
	bool                                          bIsAccumulated;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreBlended;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraRigInputSlotParameters) == 0x000001, "Wrong alignment on FCameraRigInputSlotParameters");
static_assert(sizeof(FCameraRigInputSlotParameters) == 0x000002, "Wrong size on FCameraRigInputSlotParameters");
static_assert(offsetof(FCameraRigInputSlotParameters, bIsAccumulated) == 0x000000, "Member 'FCameraRigInputSlotParameters::bIsAccumulated' has a wrong offset!");
static_assert(offsetof(FCameraRigInputSlotParameters, bIsPreBlended) == 0x000001, "Member 'FCameraRigInputSlotParameters::bIsPreBlended' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraParameterClamping
// 0x0018 (0x0018 - 0x0000)
struct FCameraParameterClamping final
{
public:
	double                                        MinValue;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxValue;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampMin;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampMax;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraParameterClamping) == 0x000008, "Wrong alignment on FCameraParameterClamping");
static_assert(sizeof(FCameraParameterClamping) == 0x000018, "Wrong size on FCameraParameterClamping");
static_assert(offsetof(FCameraParameterClamping, MinValue) == 0x000000, "Member 'FCameraParameterClamping::MinValue' has a wrong offset!");
static_assert(offsetof(FCameraParameterClamping, MaxValue) == 0x000008, "Member 'FCameraParameterClamping::MaxValue' has a wrong offset!");
static_assert(offsetof(FCameraParameterClamping, bClampMin) == 0x000010, "Member 'FCameraParameterClamping::bClampMin' has a wrong offset!");
static_assert(offsetof(FCameraParameterClamping, bClampMax) == 0x000011, "Member 'FCameraParameterClamping::bClampMax' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraParameterNormalization
// 0x0010 (0x0010 - 0x0000)
struct FCameraParameterNormalization final
{
public:
	double                                        MaxValue;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalize;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraParameterNormalization) == 0x000008, "Wrong alignment on FCameraParameterNormalization");
static_assert(sizeof(FCameraParameterNormalization) == 0x000010, "Wrong size on FCameraParameterNormalization");
static_assert(offsetof(FCameraParameterNormalization, MaxValue) == 0x000000, "Member 'FCameraParameterNormalization::MaxValue' has a wrong offset!");
static_assert(offsetof(FCameraParameterNormalization, bNormalize) == 0x000008, "Member 'FCameraParameterNormalization::bNormalize' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigProxyTableEntry
// 0x0010 (0x0010 - 0x0000)
struct FCameraRigProxyTableEntry final
{
public:
	class UCameraRigProxyAsset*                   CameraRigProxy;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraRigAsset*                        CameraRig;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraRigProxyTableEntry) == 0x000008, "Wrong alignment on FCameraRigProxyTableEntry");
static_assert(sizeof(FCameraRigProxyTableEntry) == 0x000010, "Wrong size on FCameraRigProxyTableEntry");
static_assert(offsetof(FCameraRigProxyTableEntry, CameraRigProxy) == 0x000000, "Member 'FCameraRigProxyTableEntry::CameraRigProxy' has a wrong offset!");
static_assert(offsetof(FCameraRigProxyTableEntry, CameraRig) == 0x000008, "Member 'FCameraRigProxyTableEntry::CameraRig' has a wrong offset!");

// ScriptStruct GameplayCameras.BooleanCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FBooleanCameraVariableReference final
{
public:
	class UBooleanCameraVariable*                 Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBooleanCameraVariableReference) == 0x000008, "Wrong alignment on FBooleanCameraVariableReference");
static_assert(sizeof(FBooleanCameraVariableReference) == 0x000008, "Wrong size on FBooleanCameraVariableReference");
static_assert(offsetof(FBooleanCameraVariableReference, Variable) == 0x000000, "Member 'FBooleanCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Integer32CameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FInteger32CameraVariableReference final
{
public:
	class UInteger32CameraVariable*               Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteger32CameraVariableReference) == 0x000008, "Wrong alignment on FInteger32CameraVariableReference");
static_assert(sizeof(FInteger32CameraVariableReference) == 0x000008, "Wrong size on FInteger32CameraVariableReference");
static_assert(offsetof(FInteger32CameraVariableReference, Variable) == 0x000000, "Member 'FInteger32CameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.FloatCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FFloatCameraVariableReference final
{
public:
	class UFloatCameraVariable*                   Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatCameraVariableReference) == 0x000008, "Wrong alignment on FFloatCameraVariableReference");
static_assert(sizeof(FFloatCameraVariableReference) == 0x000008, "Wrong size on FFloatCameraVariableReference");
static_assert(offsetof(FFloatCameraVariableReference, Variable) == 0x000000, "Member 'FFloatCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.DoubleCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FDoubleCameraVariableReference final
{
public:
	class UDoubleCameraVariable*                  Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoubleCameraVariableReference) == 0x000008, "Wrong alignment on FDoubleCameraVariableReference");
static_assert(sizeof(FDoubleCameraVariableReference) == 0x000008, "Wrong size on FDoubleCameraVariableReference");
static_assert(offsetof(FDoubleCameraVariableReference, Variable) == 0x000000, "Member 'FDoubleCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2fCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector2fCameraVariableReference final
{
public:
	class UVector2fCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2fCameraVariableReference) == 0x000008, "Wrong alignment on FVector2fCameraVariableReference");
static_assert(sizeof(FVector2fCameraVariableReference) == 0x000008, "Wrong size on FVector2fCameraVariableReference");
static_assert(offsetof(FVector2fCameraVariableReference, Variable) == 0x000000, "Member 'FVector2fCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2dCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector2dCameraVariableReference final
{
public:
	class UVector2dCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2dCameraVariableReference) == 0x000008, "Wrong alignment on FVector2dCameraVariableReference");
static_assert(sizeof(FVector2dCameraVariableReference) == 0x000008, "Wrong size on FVector2dCameraVariableReference");
static_assert(offsetof(FVector2dCameraVariableReference, Variable) == 0x000000, "Member 'FVector2dCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3fCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector3fCameraVariableReference final
{
public:
	class UVector3fCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3fCameraVariableReference) == 0x000008, "Wrong alignment on FVector3fCameraVariableReference");
static_assert(sizeof(FVector3fCameraVariableReference) == 0x000008, "Wrong size on FVector3fCameraVariableReference");
static_assert(offsetof(FVector3fCameraVariableReference, Variable) == 0x000000, "Member 'FVector3fCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3dCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector3dCameraVariableReference final
{
public:
	class UVector3dCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3dCameraVariableReference) == 0x000008, "Wrong alignment on FVector3dCameraVariableReference");
static_assert(sizeof(FVector3dCameraVariableReference) == 0x000008, "Wrong size on FVector3dCameraVariableReference");
static_assert(offsetof(FVector3dCameraVariableReference, Variable) == 0x000000, "Member 'FVector3dCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4fCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector4fCameraVariableReference final
{
public:
	class UVector4fCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector4fCameraVariableReference) == 0x000008, "Wrong alignment on FVector4fCameraVariableReference");
static_assert(sizeof(FVector4fCameraVariableReference) == 0x000008, "Wrong size on FVector4fCameraVariableReference");
static_assert(offsetof(FVector4fCameraVariableReference, Variable) == 0x000000, "Member 'FVector4fCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4dCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FVector4dCameraVariableReference final
{
public:
	class UVector4dCameraVariable*                Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector4dCameraVariableReference) == 0x000008, "Wrong alignment on FVector4dCameraVariableReference");
static_assert(sizeof(FVector4dCameraVariableReference) == 0x000008, "Wrong size on FVector4dCameraVariableReference");
static_assert(offsetof(FVector4dCameraVariableReference, Variable) == 0x000000, "Member 'FVector4dCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3fCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FRotator3fCameraVariableReference final
{
public:
	class URotator3fCameraVariable*               Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3fCameraVariableReference) == 0x000008, "Wrong alignment on FRotator3fCameraVariableReference");
static_assert(sizeof(FRotator3fCameraVariableReference) == 0x000008, "Wrong size on FRotator3fCameraVariableReference");
static_assert(offsetof(FRotator3fCameraVariableReference, Variable) == 0x000000, "Member 'FRotator3fCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3dCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FRotator3dCameraVariableReference final
{
public:
	class URotator3dCameraVariable*               Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3dCameraVariableReference) == 0x000008, "Wrong alignment on FRotator3dCameraVariableReference");
static_assert(sizeof(FRotator3dCameraVariableReference) == 0x000008, "Wrong size on FRotator3dCameraVariableReference");
static_assert(offsetof(FRotator3dCameraVariableReference, Variable) == 0x000000, "Member 'FRotator3dCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3fCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FTransform3fCameraVariableReference final
{
public:
	class UTransform3fCameraVariable*             Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransform3fCameraVariableReference) == 0x000008, "Wrong alignment on FTransform3fCameraVariableReference");
static_assert(sizeof(FTransform3fCameraVariableReference) == 0x000008, "Wrong size on FTransform3fCameraVariableReference");
static_assert(offsetof(FTransform3fCameraVariableReference, Variable) == 0x000000, "Member 'FTransform3fCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3dCameraVariableReference
// 0x0008 (0x0008 - 0x0000)
struct FTransform3dCameraVariableReference final
{
public:
	class UTransform3dCameraVariable*             Variable;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransform3dCameraVariableReference) == 0x000008, "Wrong alignment on FTransform3dCameraVariableReference");
static_assert(sizeof(FTransform3dCameraVariableReference) == 0x000008, "Wrong size on FTransform3dCameraVariableReference");
static_assert(offsetof(FTransform3dCameraVariableReference, Variable) == 0x000000, "Member 'FTransform3dCameraVariableReference::Variable' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraVariableID
// 0x0004 (0x0004 - 0x0000)
struct FCameraVariableID final
{
public:
	uint32                                        Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCameraVariableID) == 0x000004, "Wrong alignment on FCameraVariableID");
static_assert(sizeof(FCameraVariableID) == 0x000004, "Wrong size on FCameraVariableID");
static_assert(offsetof(FCameraVariableID, Value) == 0x000000, "Member 'FCameraVariableID::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraVariableDefinition
// 0x000C (0x000C - 0x0000)
struct FCameraVariableDefinition final
{
public:
	struct FCameraVariableID                      VariableID;                                        // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraVariableType                           VariableType;                                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrivate;                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInput;                                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraVariableDefinition) == 0x000004, "Wrong alignment on FCameraVariableDefinition");
static_assert(sizeof(FCameraVariableDefinition) == 0x00000C, "Wrong size on FCameraVariableDefinition");
static_assert(offsetof(FCameraVariableDefinition, VariableID) == 0x000000, "Member 'FCameraVariableDefinition::VariableID' has a wrong offset!");
static_assert(offsetof(FCameraVariableDefinition, VariableType) == 0x000004, "Member 'FCameraVariableDefinition::VariableType' has a wrong offset!");
static_assert(offsetof(FCameraVariableDefinition, bIsPrivate) == 0x000008, "Member 'FCameraVariableDefinition::bIsPrivate' has a wrong offset!");
static_assert(offsetof(FCameraVariableDefinition, bIsInput) == 0x000009, "Member 'FCameraVariableDefinition::bIsInput' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraVariableTableAllocationInfo
// 0x0020 (0x0020 - 0x0000)
struct FCameraVariableTableAllocationInfo final
{
public:
	TArray<struct FCameraVariableDefinition>      VariableDefinitions;                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCameraVariableAsset*>           AutoResetVariables;                                // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraVariableTableAllocationInfo) == 0x000008, "Wrong alignment on FCameraVariableTableAllocationInfo");
static_assert(sizeof(FCameraVariableTableAllocationInfo) == 0x000020, "Wrong size on FCameraVariableTableAllocationInfo");
static_assert(offsetof(FCameraVariableTableAllocationInfo, VariableDefinitions) == 0x000000, "Member 'FCameraVariableTableAllocationInfo::VariableDefinitions' has a wrong offset!");
static_assert(offsetof(FCameraVariableTableAllocationInfo, AutoResetVariables) == 0x000010, "Member 'FCameraVariableTableAllocationInfo::AutoResetVariables' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraPose
// 0x0088 (0x0088 - 0x0000)
struct FCameraPose final
{
public:
	struct FVector3d                              Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator3d                             Rotation;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	double                                        TargetDistance;                                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FieldOfView;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FocalLength;                                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Aperture;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ShutterSpeed;                                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FocusDistance;                                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SensorWidth;                                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SensorHeight;                                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ISO;                                               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SqueezeFactor;                                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         DiaphragmBladeCount;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         NearClippingPlane;                                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FarClippingPlane;                                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PhysicalCameraBlendWeight;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          EnablePhysicalCamera;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ConstrainAspectRatio;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          OverrideAspectRatioAxisConstraint;                 // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAspectRatioAxisConstraint                    AspectRatioAxisConstraint;                         // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraPose) == 0x000008, "Wrong alignment on FCameraPose");
static_assert(sizeof(FCameraPose) == 0x000088, "Wrong size on FCameraPose");
static_assert(offsetof(FCameraPose, Location) == 0x000000, "Member 'FCameraPose::Location' has a wrong offset!");
static_assert(offsetof(FCameraPose, Rotation) == 0x000018, "Member 'FCameraPose::Rotation' has a wrong offset!");
static_assert(offsetof(FCameraPose, TargetDistance) == 0x000030, "Member 'FCameraPose::TargetDistance' has a wrong offset!");
static_assert(offsetof(FCameraPose, FieldOfView) == 0x000038, "Member 'FCameraPose::FieldOfView' has a wrong offset!");
static_assert(offsetof(FCameraPose, FocalLength) == 0x00003C, "Member 'FCameraPose::FocalLength' has a wrong offset!");
static_assert(offsetof(FCameraPose, Aperture) == 0x000040, "Member 'FCameraPose::Aperture' has a wrong offset!");
static_assert(offsetof(FCameraPose, ShutterSpeed) == 0x000044, "Member 'FCameraPose::ShutterSpeed' has a wrong offset!");
static_assert(offsetof(FCameraPose, FocusDistance) == 0x000048, "Member 'FCameraPose::FocusDistance' has a wrong offset!");
static_assert(offsetof(FCameraPose, SensorWidth) == 0x00004C, "Member 'FCameraPose::SensorWidth' has a wrong offset!");
static_assert(offsetof(FCameraPose, SensorHeight) == 0x000050, "Member 'FCameraPose::SensorHeight' has a wrong offset!");
static_assert(offsetof(FCameraPose, ISO) == 0x000054, "Member 'FCameraPose::ISO' has a wrong offset!");
static_assert(offsetof(FCameraPose, SqueezeFactor) == 0x000058, "Member 'FCameraPose::SqueezeFactor' has a wrong offset!");
static_assert(offsetof(FCameraPose, DiaphragmBladeCount) == 0x00005C, "Member 'FCameraPose::DiaphragmBladeCount' has a wrong offset!");
static_assert(offsetof(FCameraPose, NearClippingPlane) == 0x000060, "Member 'FCameraPose::NearClippingPlane' has a wrong offset!");
static_assert(offsetof(FCameraPose, FarClippingPlane) == 0x000064, "Member 'FCameraPose::FarClippingPlane' has a wrong offset!");
static_assert(offsetof(FCameraPose, PhysicalCameraBlendWeight) == 0x000068, "Member 'FCameraPose::PhysicalCameraBlendWeight' has a wrong offset!");
static_assert(offsetof(FCameraPose, EnablePhysicalCamera) == 0x00006C, "Member 'FCameraPose::EnablePhysicalCamera' has a wrong offset!");
static_assert(offsetof(FCameraPose, ConstrainAspectRatio) == 0x00006D, "Member 'FCameraPose::ConstrainAspectRatio' has a wrong offset!");
static_assert(offsetof(FCameraPose, OverrideAspectRatioAxisConstraint) == 0x00006E, "Member 'FCameraPose::OverrideAspectRatioAxisConstraint' has a wrong offset!");
static_assert(offsetof(FCameraPose, AspectRatioAxisConstraint) == 0x00006F, "Member 'FCameraPose::AspectRatioAxisConstraint' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigAllocationInfo
// 0x0028 (0x0028 - 0x0000)
struct FCameraRigAllocationInfo final
{
public:
	struct FCameraNodeEvaluatorAllocationInfo     EvaluatorInfo;                                     // 0x0000(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraVariableTableAllocationInfo     VariableTableInfo;                                 // 0x0008(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraRigAllocationInfo) == 0x000008, "Wrong alignment on FCameraRigAllocationInfo");
static_assert(sizeof(FCameraRigAllocationInfo) == 0x000028, "Wrong size on FCameraRigAllocationInfo");
static_assert(offsetof(FCameraRigAllocationInfo, EvaluatorInfo) == 0x000000, "Member 'FCameraRigAllocationInfo::EvaluatorInfo' has a wrong offset!");
static_assert(offsetof(FCameraRigAllocationInfo, VariableTableInfo) == 0x000008, "Member 'FCameraRigAllocationInfo::VariableTableInfo' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigInterface
// 0x0020 (0x0020 - 0x0000)
struct FCameraRigInterface final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCameraRigInterfaceParameter*>   InterfaceParameters;                               // 0x0010(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraRigInterface) == 0x000008, "Wrong alignment on FCameraRigInterface");
static_assert(sizeof(FCameraRigInterface) == 0x000020, "Wrong size on FCameraRigInterface");
static_assert(offsetof(FCameraRigInterface, DisplayName) == 0x000000, "Member 'FCameraRigInterface::DisplayName' has a wrong offset!");
static_assert(offsetof(FCameraRigInterface, InterfaceParameters) == 0x000010, "Member 'FCameraRigInterface::InterfaceParameters' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigParameterOverrideBase
// 0x0038 (0x0038 - 0x0000)
struct FCameraRigParameterOverrideBase
{
public:
	struct FGuid                                  InterfaceParameterGuid;                            // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PrivateVariableGuid;                               // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterfaceParameterName;                            // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvalid;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCameraRigParameterOverrideBase) == 0x000008, "Wrong alignment on FCameraRigParameterOverrideBase");
static_assert(sizeof(FCameraRigParameterOverrideBase) == 0x000038, "Wrong size on FCameraRigParameterOverrideBase");
static_assert(offsetof(FCameraRigParameterOverrideBase, InterfaceParameterGuid) == 0x000000, "Member 'FCameraRigParameterOverrideBase::InterfaceParameterGuid' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrideBase, PrivateVariableGuid) == 0x000010, "Member 'FCameraRigParameterOverrideBase::PrivateVariableGuid' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrideBase, InterfaceParameterName) == 0x000020, "Member 'FCameraRigParameterOverrideBase::InterfaceParameterName' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrideBase, bInvalid) == 0x000030, "Member 'FCameraRigParameterOverrideBase::bInvalid' has a wrong offset!");

// ScriptStruct GameplayCameras.BooleanCameraRigParameterOverride
// 0x0010 (0x0048 - 0x0038)
struct FBooleanCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FBooleanCameraParameter                Value;                                             // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBooleanCameraRigParameterOverride) == 0x000008, "Wrong alignment on FBooleanCameraRigParameterOverride");
static_assert(sizeof(FBooleanCameraRigParameterOverride) == 0x000048, "Wrong size on FBooleanCameraRigParameterOverride");
static_assert(offsetof(FBooleanCameraRigParameterOverride, Value) == 0x000038, "Member 'FBooleanCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Integer32CameraRigParameterOverride
// 0x0010 (0x0048 - 0x0038)
struct FInteger32CameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FInteger32CameraParameter              Value;                                             // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteger32CameraRigParameterOverride) == 0x000008, "Wrong alignment on FInteger32CameraRigParameterOverride");
static_assert(sizeof(FInteger32CameraRigParameterOverride) == 0x000048, "Wrong size on FInteger32CameraRigParameterOverride");
static_assert(offsetof(FInteger32CameraRigParameterOverride, Value) == 0x000038, "Member 'FInteger32CameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.FloatCameraRigParameterOverride
// 0x0010 (0x0048 - 0x0038)
struct FFloatCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FFloatCameraParameter                  Value;                                             // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFloatCameraRigParameterOverride) == 0x000008, "Wrong alignment on FFloatCameraRigParameterOverride");
static_assert(sizeof(FFloatCameraRigParameterOverride) == 0x000048, "Wrong size on FFloatCameraRigParameterOverride");
static_assert(offsetof(FFloatCameraRigParameterOverride, Value) == 0x000038, "Member 'FFloatCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.DoubleCameraRigParameterOverride
// 0x0010 (0x0048 - 0x0038)
struct FDoubleCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FDoubleCameraParameter                 Value;                                             // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoubleCameraRigParameterOverride) == 0x000008, "Wrong alignment on FDoubleCameraRigParameterOverride");
static_assert(sizeof(FDoubleCameraRigParameterOverride) == 0x000048, "Wrong size on FDoubleCameraRigParameterOverride");
static_assert(offsetof(FDoubleCameraRigParameterOverride, Value) == 0x000038, "Member 'FDoubleCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2fCameraRigParameterOverride
// 0x0010 (0x0048 - 0x0038)
struct FVector2fCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FVector2fCameraParameter               Value;                                             // 0x0038(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2fCameraRigParameterOverride) == 0x000008, "Wrong alignment on FVector2fCameraRigParameterOverride");
static_assert(sizeof(FVector2fCameraRigParameterOverride) == 0x000048, "Wrong size on FVector2fCameraRigParameterOverride");
static_assert(offsetof(FVector2fCameraRigParameterOverride, Value) == 0x000038, "Member 'FVector2fCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector2dCameraRigParameterOverride
// 0x0018 (0x0050 - 0x0038)
struct FVector2dCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FVector2dCameraParameter               Value;                                             // 0x0038(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2dCameraRigParameterOverride) == 0x000008, "Wrong alignment on FVector2dCameraRigParameterOverride");
static_assert(sizeof(FVector2dCameraRigParameterOverride) == 0x000050, "Wrong size on FVector2dCameraRigParameterOverride");
static_assert(offsetof(FVector2dCameraRigParameterOverride, Value) == 0x000038, "Member 'FVector2dCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3fCameraRigParameterOverride
// 0x0018 (0x0050 - 0x0038)
struct FVector3fCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FVector3fCameraParameter               Value;                                             // 0x0038(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3fCameraRigParameterOverride) == 0x000008, "Wrong alignment on FVector3fCameraRigParameterOverride");
static_assert(sizeof(FVector3fCameraRigParameterOverride) == 0x000050, "Wrong size on FVector3fCameraRigParameterOverride");
static_assert(offsetof(FVector3fCameraRigParameterOverride, Value) == 0x000038, "Member 'FVector3fCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector3dCameraRigParameterOverride
// 0x0020 (0x0058 - 0x0038)
struct FVector3dCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FVector3dCameraParameter               Value;                                             // 0x0038(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector3dCameraRigParameterOverride) == 0x000008, "Wrong alignment on FVector3dCameraRigParameterOverride");
static_assert(sizeof(FVector3dCameraRigParameterOverride) == 0x000058, "Wrong size on FVector3dCameraRigParameterOverride");
static_assert(offsetof(FVector3dCameraRigParameterOverride, Value) == 0x000038, "Member 'FVector3dCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4fCameraRigParameterOverride
// 0x0028 (0x0060 - 0x0038)
struct FVector4fCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4fCameraParameter               Value;                                             // 0x0040(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector4fCameraRigParameterOverride) == 0x000010, "Wrong alignment on FVector4fCameraRigParameterOverride");
static_assert(sizeof(FVector4fCameraRigParameterOverride) == 0x000060, "Wrong size on FVector4fCameraRigParameterOverride");
static_assert(offsetof(FVector4fCameraRigParameterOverride, Value) == 0x000040, "Member 'FVector4fCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Vector4dCameraRigParameterOverride
// 0x0038 (0x0070 - 0x0038)
struct FVector4dCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4dCameraParameter               Value;                                             // 0x0040(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector4dCameraRigParameterOverride) == 0x000010, "Wrong alignment on FVector4dCameraRigParameterOverride");
static_assert(sizeof(FVector4dCameraRigParameterOverride) == 0x000070, "Wrong size on FVector4dCameraRigParameterOverride");
static_assert(offsetof(FVector4dCameraRigParameterOverride, Value) == 0x000040, "Member 'FVector4dCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3fCameraRigParameterOverride
// 0x0018 (0x0050 - 0x0038)
struct FRotator3fCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FRotator3fCameraParameter              Value;                                             // 0x0038(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3fCameraRigParameterOverride) == 0x000008, "Wrong alignment on FRotator3fCameraRigParameterOverride");
static_assert(sizeof(FRotator3fCameraRigParameterOverride) == 0x000050, "Wrong size on FRotator3fCameraRigParameterOverride");
static_assert(offsetof(FRotator3fCameraRigParameterOverride, Value) == 0x000038, "Member 'FRotator3fCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Rotator3dCameraRigParameterOverride
// 0x0020 (0x0058 - 0x0038)
struct FRotator3dCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	struct FRotator3dCameraParameter              Value;                                             // 0x0038(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotator3dCameraRigParameterOverride) == 0x000008, "Wrong alignment on FRotator3dCameraRigParameterOverride");
static_assert(sizeof(FRotator3dCameraRigParameterOverride) == 0x000058, "Wrong size on FRotator3dCameraRigParameterOverride");
static_assert(offsetof(FRotator3dCameraRigParameterOverride, Value) == 0x000038, "Member 'FRotator3dCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3fCameraRigParameterOverride
// 0x0048 (0x0080 - 0x0038)
struct FTransform3fCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform3fCameraParameter            Value;                                             // 0x0040(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransform3fCameraRigParameterOverride) == 0x000010, "Wrong alignment on FTransform3fCameraRigParameterOverride");
static_assert(sizeof(FTransform3fCameraRigParameterOverride) == 0x000080, "Wrong size on FTransform3fCameraRigParameterOverride");
static_assert(offsetof(FTransform3fCameraRigParameterOverride, Value) == 0x000040, "Member 'FTransform3fCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.Transform3dCameraRigParameterOverride
// 0x0078 (0x00B0 - 0x0038)
struct FTransform3dCameraRigParameterOverride final : public FCameraRigParameterOverrideBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform3dCameraParameter            Value;                                             // 0x0040(0x0070)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTransform3dCameraRigParameterOverride) == 0x000010, "Wrong alignment on FTransform3dCameraRigParameterOverride");
static_assert(sizeof(FTransform3dCameraRigParameterOverride) == 0x0000B0, "Wrong size on FTransform3dCameraRigParameterOverride");
static_assert(offsetof(FTransform3dCameraRigParameterOverride, Value) == 0x000040, "Member 'FTransform3dCameraRigParameterOverride::Value' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigParameterOverrides
// 0x00E0 (0x00E0 - 0x0000)
struct FCameraRigParameterOverrides final
{
public:
	TArray<struct FBooleanCameraRigParameterOverride> BooleanOverrides;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FInteger32CameraRigParameterOverride> Integer32Overrides;                          // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FFloatCameraRigParameterOverride> FloatOverrides;                                  // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FDoubleCameraRigParameterOverride> DoubleOverrides;                                // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector2fCameraRigParameterOverride> Vector2fOverrides;                            // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector2dCameraRigParameterOverride> Vector2dOverrides;                            // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector3fCameraRigParameterOverride> Vector3fOverrides;                            // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector3dCameraRigParameterOverride> Vector3dOverrides;                            // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector4fCameraRigParameterOverride> Vector4fOverrides;                            // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FVector4dCameraRigParameterOverride> Vector4dOverrides;                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRotator3fCameraRigParameterOverride> Rotator3fOverrides;                          // 0x00A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FRotator3dCameraRigParameterOverride> Rotator3dOverrides;                          // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FTransform3fCameraRigParameterOverride> Transform3fOverrides;                      // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FTransform3dCameraRigParameterOverride> Transform3dOverrides;                      // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCameraRigParameterOverrides) == 0x000008, "Wrong alignment on FCameraRigParameterOverrides");
static_assert(sizeof(FCameraRigParameterOverrides) == 0x0000E0, "Wrong size on FCameraRigParameterOverrides");
static_assert(offsetof(FCameraRigParameterOverrides, BooleanOverrides) == 0x000000, "Member 'FCameraRigParameterOverrides::BooleanOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Integer32Overrides) == 0x000010, "Member 'FCameraRigParameterOverrides::Integer32Overrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, FloatOverrides) == 0x000020, "Member 'FCameraRigParameterOverrides::FloatOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, DoubleOverrides) == 0x000030, "Member 'FCameraRigParameterOverrides::DoubleOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector2fOverrides) == 0x000040, "Member 'FCameraRigParameterOverrides::Vector2fOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector2dOverrides) == 0x000050, "Member 'FCameraRigParameterOverrides::Vector2dOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector3fOverrides) == 0x000060, "Member 'FCameraRigParameterOverrides::Vector3fOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector3dOverrides) == 0x000070, "Member 'FCameraRigParameterOverrides::Vector3dOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector4fOverrides) == 0x000080, "Member 'FCameraRigParameterOverrides::Vector4fOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Vector4dOverrides) == 0x000090, "Member 'FCameraRigParameterOverrides::Vector4dOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Rotator3fOverrides) == 0x0000A0, "Member 'FCameraRigParameterOverrides::Rotator3fOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Rotator3dOverrides) == 0x0000B0, "Member 'FCameraRigParameterOverrides::Rotator3dOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Transform3fOverrides) == 0x0000C0, "Member 'FCameraRigParameterOverrides::Transform3fOverrides' has a wrong offset!");
static_assert(offsetof(FCameraRigParameterOverrides, Transform3dOverrides) == 0x0000D0, "Member 'FCameraRigParameterOverrides::Transform3dOverrides' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraRigAssetReference
// 0x00E8 (0x00E8 - 0x0000)
struct FCameraRigAssetReference final
{
public:
	class UCameraRigAsset*                        CameraRig;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCameraRigParameterOverrides           ParameterOverrides;                                // 0x0008(0x00E0)(Edit, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCameraRigAssetReference) == 0x000008, "Wrong alignment on FCameraRigAssetReference");
static_assert(sizeof(FCameraRigAssetReference) == 0x0000E8, "Wrong size on FCameraRigAssetReference");
static_assert(offsetof(FCameraRigAssetReference, CameraRig) == 0x000000, "Member 'FCameraRigAssetReference::CameraRig' has a wrong offset!");
static_assert(offsetof(FCameraRigAssetReference, ParameterOverrides) == 0x000008, "Member 'FCameraRigAssetReference::ParameterOverrides' has a wrong offset!");

// ScriptStruct GameplayCameras.BlueprintCameraDirectorActivateParams
// 0x0008 (0x0008 - 0x0000)
struct FBlueprintCameraDirectorActivateParams final
{
public:
	class UObject*                                EvaluationContextOwner;                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintCameraDirectorActivateParams) == 0x000008, "Wrong alignment on FBlueprintCameraDirectorActivateParams");
static_assert(sizeof(FBlueprintCameraDirectorActivateParams) == 0x000008, "Wrong size on FBlueprintCameraDirectorActivateParams");
static_assert(offsetof(FBlueprintCameraDirectorActivateParams, EvaluationContextOwner) == 0x000000, "Member 'FBlueprintCameraDirectorActivateParams::EvaluationContextOwner' has a wrong offset!");

// ScriptStruct GameplayCameras.BlueprintCameraDirectorDeactivateParams
// 0x0008 (0x0008 - 0x0000)
struct FBlueprintCameraDirectorDeactivateParams final
{
public:
	class UObject*                                EvaluationContextOwner;                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintCameraDirectorDeactivateParams) == 0x000008, "Wrong alignment on FBlueprintCameraDirectorDeactivateParams");
static_assert(sizeof(FBlueprintCameraDirectorDeactivateParams) == 0x000008, "Wrong size on FBlueprintCameraDirectorDeactivateParams");
static_assert(offsetof(FBlueprintCameraDirectorDeactivateParams, EvaluationContextOwner) == 0x000000, "Member 'FBlueprintCameraDirectorDeactivateParams::EvaluationContextOwner' has a wrong offset!");

// ScriptStruct GameplayCameras.BlueprintCameraDirectorEvaluationParams
// 0x0010 (0x0010 - 0x0000)
struct FBlueprintCameraDirectorEvaluationParams final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EvaluationContextOwner;                            // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintCameraDirectorEvaluationParams) == 0x000008, "Wrong alignment on FBlueprintCameraDirectorEvaluationParams");
static_assert(sizeof(FBlueprintCameraDirectorEvaluationParams) == 0x000010, "Wrong size on FBlueprintCameraDirectorEvaluationParams");
static_assert(offsetof(FBlueprintCameraDirectorEvaluationParams, DeltaTime) == 0x000000, "Member 'FBlueprintCameraDirectorEvaluationParams::DeltaTime' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraDirectorEvaluationParams, EvaluationContextOwner) == 0x000008, "Member 'FBlueprintCameraDirectorEvaluationParams::EvaluationContextOwner' has a wrong offset!");

// ScriptStruct GameplayCameras.CameraDirectorStateTreeEvaluationData
// 0x0020 (0x0020 - 0x0000)
struct FCameraDirectorStateTreeEvaluationData final
{
public:
	TArray<class UCameraRigAsset*>                ActiveCameraRigs;                                  // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UCameraRigProxyAsset*>           ActiveCameraRigProxies;                            // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraDirectorStateTreeEvaluationData) == 0x000008, "Wrong alignment on FCameraDirectorStateTreeEvaluationData");
static_assert(sizeof(FCameraDirectorStateTreeEvaluationData) == 0x000020, "Wrong size on FCameraDirectorStateTreeEvaluationData");
static_assert(offsetof(FCameraDirectorStateTreeEvaluationData, ActiveCameraRigs) == 0x000000, "Member 'FCameraDirectorStateTreeEvaluationData::ActiveCameraRigs' has a wrong offset!");
static_assert(offsetof(FCameraDirectorStateTreeEvaluationData, ActiveCameraRigProxies) == 0x000010, "Member 'FCameraDirectorStateTreeEvaluationData::ActiveCameraRigProxies' has a wrong offset!");

// ScriptStruct GameplayCameras.GameplayCamerasStateTreeTask
// 0x0000 (0x0028 - 0x0028)
struct FGameplayCamerasStateTreeTask : public FStateTreeTaskBase
{
};
static_assert(alignof(FGameplayCamerasStateTreeTask) == 0x000008, "Wrong alignment on FGameplayCamerasStateTreeTask");
static_assert(sizeof(FGameplayCamerasStateTreeTask) == 0x000028, "Wrong size on FGameplayCamerasStateTreeTask");

// ScriptStruct GameplayCameras.GameplayCamerasStateTreeCondition
// 0x0000 (0x0028 - 0x0028)
struct FGameplayCamerasStateTreeCondition final : public FStateTreeConditionBase
{
};
static_assert(alignof(FGameplayCamerasStateTreeCondition) == 0x000008, "Wrong alignment on FGameplayCamerasStateTreeCondition");
static_assert(sizeof(FGameplayCamerasStateTreeCondition) == 0x000028, "Wrong size on FGameplayCamerasStateTreeCondition");

// ScriptStruct GameplayCameras.GameplayCamerasActivateCameraRigTaskInstanceData
// 0x0008 (0x0008 - 0x0000)
struct FGameplayCamerasActivateCameraRigTaskInstanceData final
{
public:
	class UCameraRigAsset*                        CameraRig;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCamerasActivateCameraRigTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayCamerasActivateCameraRigTaskInstanceData");
static_assert(sizeof(FGameplayCamerasActivateCameraRigTaskInstanceData) == 0x000008, "Wrong size on FGameplayCamerasActivateCameraRigTaskInstanceData");
static_assert(offsetof(FGameplayCamerasActivateCameraRigTaskInstanceData, CameraRig) == 0x000000, "Member 'FGameplayCamerasActivateCameraRigTaskInstanceData::CameraRig' has a wrong offset!");

// ScriptStruct GameplayCameras.GameplayCamerasActivateCameraRigTask
// 0x0008 (0x0030 - 0x0028)
struct FGameplayCamerasActivateCameraRigTask final : public FGameplayCamerasStateTreeTask
{
public:
	uint8                                         Pad_28[0x6];                                       // 0x0028(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRunOnce;                                          // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCamerasActivateCameraRigTask) == 0x000008, "Wrong alignment on FGameplayCamerasActivateCameraRigTask");
static_assert(sizeof(FGameplayCamerasActivateCameraRigTask) == 0x000030, "Wrong size on FGameplayCamerasActivateCameraRigTask");
static_assert(offsetof(FGameplayCamerasActivateCameraRigTask, bRunOnce) == 0x00002E, "Member 'FGameplayCamerasActivateCameraRigTask::bRunOnce' has a wrong offset!");

// ScriptStruct GameplayCameras.GameplayCamerasActivateCameraRigViaProxyTaskInstanceData
// 0x0008 (0x0008 - 0x0000)
struct FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData final
{
public:
	class UCameraRigProxyAsset*                   CameraRigProxy;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData) == 0x000008, "Wrong alignment on FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData");
static_assert(sizeof(FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData) == 0x000008, "Wrong size on FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData");
static_assert(offsetof(FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData, CameraRigProxy) == 0x000000, "Member 'FGameplayCamerasActivateCameraRigViaProxyTaskInstanceData::CameraRigProxy' has a wrong offset!");

// ScriptStruct GameplayCameras.GameplayCamerasActivateCameraRigViaProxyTask
// 0x0008 (0x0030 - 0x0028)
struct FGameplayCamerasActivateCameraRigViaProxyTask final : public FGameplayCamerasStateTreeTask
{
public:
	uint8                                         Pad_28[0x6];                                       // 0x0028(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRunOnce;                                          // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCamerasActivateCameraRigViaProxyTask) == 0x000008, "Wrong alignment on FGameplayCamerasActivateCameraRigViaProxyTask");
static_assert(sizeof(FGameplayCamerasActivateCameraRigViaProxyTask) == 0x000030, "Wrong size on FGameplayCamerasActivateCameraRigViaProxyTask");
static_assert(offsetof(FGameplayCamerasActivateCameraRigViaProxyTask, bRunOnce) == 0x00002E, "Member 'FGameplayCamerasActivateCameraRigViaProxyTask::bRunOnce' has a wrong offset!");

// ScriptStruct GameplayCameras.BlueprintCameraPose
// 0x0070 (0x0070 - 0x0000)
struct FBlueprintCameraPose final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	double                                        TargetDistance;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocalLength;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Aperture;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShutterSpeed;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusDistance;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensorWidth;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SensorHeight;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ISO;                                               // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SqueezeFactor;                                     // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiaphragmBladeCount;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearClippingPlane;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarClippingPlane;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalCameraBlendWeight;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnablePhysicalCamera;                              // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConstrainAspectRatio;                              // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideAspectRatioAxisConstraint;                 // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAspectRatioAxisConstraint                    AspectRatioAxisConstraint;                         // 0x006F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintCameraPose) == 0x000008, "Wrong alignment on FBlueprintCameraPose");
static_assert(sizeof(FBlueprintCameraPose) == 0x000070, "Wrong size on FBlueprintCameraPose");
static_assert(offsetof(FBlueprintCameraPose, Location) == 0x000000, "Member 'FBlueprintCameraPose::Location' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, Rotation) == 0x000018, "Member 'FBlueprintCameraPose::Rotation' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, TargetDistance) == 0x000030, "Member 'FBlueprintCameraPose::TargetDistance' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, FieldOfView) == 0x000038, "Member 'FBlueprintCameraPose::FieldOfView' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, FocalLength) == 0x00003C, "Member 'FBlueprintCameraPose::FocalLength' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, Aperture) == 0x000040, "Member 'FBlueprintCameraPose::Aperture' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, ShutterSpeed) == 0x000044, "Member 'FBlueprintCameraPose::ShutterSpeed' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, FocusDistance) == 0x000048, "Member 'FBlueprintCameraPose::FocusDistance' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, SensorWidth) == 0x00004C, "Member 'FBlueprintCameraPose::SensorWidth' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, SensorHeight) == 0x000050, "Member 'FBlueprintCameraPose::SensorHeight' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, ISO) == 0x000054, "Member 'FBlueprintCameraPose::ISO' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, SqueezeFactor) == 0x000058, "Member 'FBlueprintCameraPose::SqueezeFactor' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, DiaphragmBladeCount) == 0x00005C, "Member 'FBlueprintCameraPose::DiaphragmBladeCount' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, NearClippingPlane) == 0x000060, "Member 'FBlueprintCameraPose::NearClippingPlane' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, FarClippingPlane) == 0x000064, "Member 'FBlueprintCameraPose::FarClippingPlane' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, PhysicalCameraBlendWeight) == 0x000068, "Member 'FBlueprintCameraPose::PhysicalCameraBlendWeight' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, EnablePhysicalCamera) == 0x00006C, "Member 'FBlueprintCameraPose::EnablePhysicalCamera' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, ConstrainAspectRatio) == 0x00006D, "Member 'FBlueprintCameraPose::ConstrainAspectRatio' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, OverrideAspectRatioAxisConstraint) == 0x00006E, "Member 'FBlueprintCameraPose::OverrideAspectRatioAxisConstraint' has a wrong offset!");
static_assert(offsetof(FBlueprintCameraPose, AspectRatioAxisConstraint) == 0x00006F, "Member 'FBlueprintCameraPose::AspectRatioAxisConstraint' has a wrong offset!");

// ScriptStruct GameplayCameras.BlueprintCameraVariableTable
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FBlueprintCameraVariableTable final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintCameraVariableTable) == 0x000008, "Wrong alignment on FBlueprintCameraVariableTable");
static_assert(sizeof(FBlueprintCameraVariableTable) == 0x000018, "Wrong size on FBlueprintCameraVariableTable");

}

