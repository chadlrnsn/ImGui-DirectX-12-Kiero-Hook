#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SM_Human_Light_Floodlight_Base_Blueprint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_LightSource_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SM_Human_Light_Floodlight_Base_Blueprint.SM_Human_Light_Floodlight_Base_Blueprint_C
// 0x0060 (0x0368 - 0x0308)
class ASM_Human_Light_Floodlight_Base_Blueprint_C final : public ABP_LightSource_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight1;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Floodlight_Head;                                   // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Floodlight_Hinge;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   base;                                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        LightTempeture;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensity;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateLight(bool Active);
	void ExecuteUbergraph_SM_Human_Light_Floodlight_Base_Blueprint(int32 EntryPoint);
	void UpdateTarget(const struct FVector& Target_location_World);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SM_Human_Light_Floodlight_Base_Blueprint_C">();
	}
	static class ASM_Human_Light_Floodlight_Base_Blueprint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASM_Human_Light_Floodlight_Base_Blueprint_C>();
	}
};
static_assert(alignof(ASM_Human_Light_Floodlight_Base_Blueprint_C) == 0x000008, "Wrong alignment on ASM_Human_Light_Floodlight_Base_Blueprint_C");
static_assert(sizeof(ASM_Human_Light_Floodlight_Base_Blueprint_C) == 0x000368, "Wrong size on ASM_Human_Light_Floodlight_Base_Blueprint_C");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, UberGraphFrame) == 0x000308, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, PointLight1) == 0x000310, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, SpotLight) == 0x000318, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, PointLight) == 0x000320, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::PointLight' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, Floodlight_Head) == 0x000328, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::Floodlight_Head' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, Floodlight_Hinge) == 0x000330, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::Floodlight_Hinge' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, base) == 0x000338, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::base' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, LightTempeture) == 0x000340, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::LightTempeture' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, LightIntensity) == 0x000348, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ASM_Human_Light_Floodlight_Base_Blueprint_C, Target) == 0x000350, "Member 'ASM_Human_Light_Floodlight_Base_Blueprint_C::Target' has a wrong offset!");

}

