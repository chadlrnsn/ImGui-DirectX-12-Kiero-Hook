#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWidgets

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Enum AudioWidgets.EAudioPanelLayoutType
// NumValues: 0x0003
enum class EAudioPanelLayoutType : uint8
{
	Basic                                    = 0,
	Advanced                                 = 1,
	EAudioPanelLayoutType_MAX                = 2,
};

// Enum AudioWidgets.EAudioOscilloscopeTriggerMode
// NumValues: 0x0004
enum class EAudioOscilloscopeTriggerMode : uint8
{
	None                                     = 0,
	Rising                                   = 1,
	Falling                                  = 2,
	EAudioOscilloscopeTriggerMode_MAX        = 3,
};

// Enum AudioWidgets.EYAxisLabelsUnit
// NumValues: 0x0003
enum class EYAxisLabelsUnit : uint8
{
	Linear                                   = 0,
	Db                                       = 1,
	EYAxisLabelsUnit_MAX                     = 2,
};

// Enum AudioWidgets.EXAxisLabelsUnit
// NumValues: 0x0003
enum class EXAxisLabelsUnit : uint8
{
	Samples                                  = 0,
	Seconds                                  = 1,
	EXAxisLabelsUnit_MAX                     = 2,
};

// Enum AudioWidgets.EAudioColorGradient
// NumValues: 0x0003
enum class EAudioColorGradient : uint8
{
	BlackToWhite                             = 0,
	WhiteToBlack                             = 1,
	EAudioColorGradient_MAX                  = 2,
};

// Enum AudioWidgets.EAudioMaterialEnvelopeType
// NumValues: 0x0003
enum class EAudioMaterialEnvelopeType : uint8
{
	AD                                       = 0,
	ADSR                                     = 1,
	EAudioMaterialEnvelopeType_MAX           = 2,
};

// Enum AudioWidgets.EAudioSpectrogramFrequencyAxisScale
// NumValues: 0x0003
enum class EAudioSpectrogramFrequencyAxisScale : uint8
{
	Linear                                   = 0,
	Logarithmic                              = 1,
	EAudioSpectrogramFrequencyAxisScale_MAX  = 2,
};

// Enum AudioWidgets.EAudioSpectrogramFrequencyAxisPixelBucketMode
// NumValues: 0x0004
enum class EAudioSpectrogramFrequencyAxisPixelBucketMode : uint8
{
	Sample                                   = 0,
	Peak                                     = 1,
	Average                                  = 2,
	EAudioSpectrogramFrequencyAxisPixelBucketMode_MAX = 3,
};

// Enum AudioWidgets.EAudioSpectrumAnalyzerBallistics
// NumValues: 0x0003
enum class EAudioSpectrumAnalyzerBallistics : uint8
{
	Analog                                   = 0,
	Digital                                  = 1,
	EAudioSpectrumAnalyzerBallistics_MAX     = 2,
};

// Enum AudioWidgets.EAudioSpectrumAnalyzerType
// NumValues: 0x0003
enum class EAudioSpectrumAnalyzerType : uint8
{
	FFT                                      = 0,
	CQT                                      = 1,
	EAudioSpectrumAnalyzerType_MAX           = 2,
};

// Enum AudioWidgets.EAudioUnitsValueType
// NumValues: 0x0004
enum class EAudioUnitsValueType : uint8
{
	Linear                                   = 0,
	Frequency                                = 1,
	Volume                                   = 2,
	EAudioUnitsValueType_MAX                 = 3,
};

// Enum AudioWidgets.EAudioRadialSliderLayout
// NumValues: 0x0004
enum class EAudioRadialSliderLayout : uint8
{
	Layout_LabelTop                          = 0,
	Layout_LabelCenter                       = 1,
	Layout_LabelBottom                       = 2,
	Layout_MAX                               = 3,
};

// Enum AudioWidgets.EAudioSpectrumPlotTilt
// NumValues: 0x0006
enum class EAudioSpectrumPlotTilt : uint8
{
	NoTilt                                   = 0,
	Plus1_5dBPerOctave                       = 1,
	Plus3dBPerOctave                         = 2,
	Plus4_5dBPerOctave                       = 3,
	Plus6dBPerOctave                         = 4,
	EAudioSpectrumPlotTilt_MAX               = 5,
};

// Enum AudioWidgets.EAudioSpectrumPlotFrequencyAxisScale
// NumValues: 0x0003
enum class EAudioSpectrumPlotFrequencyAxisScale : uint8
{
	Linear                                   = 0,
	Logarithmic                              = 1,
	EAudioSpectrumPlotFrequencyAxisScale_MAX = 2,
};

// Enum AudioWidgets.EAudioSpectrumPlotFrequencyAxisPixelBucketMode
// NumValues: 0x0004
enum class EAudioSpectrumPlotFrequencyAxisPixelBucketMode : uint8
{
	Sample                                   = 0,
	Peak                                     = 1,
	Average                                  = 2,
	EAudioSpectrumPlotFrequencyAxisPixelBucketMode_MAX = 3,
};

// ScriptStruct AudioWidgets.FixedSampleSequenceRulerStyle
// 0x0228 (0x0230 - 0x0008)
struct FFixedSampleSequenceRulerStyle final : public FSlateWidgetStyle
{
public:
	float                                         HandleWidth;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            HandleColor;                                       // 0x000C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            HandleBrush;                                       // 0x0020(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TicksColor;                                        // 0x00D0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            TicksTextColor;                                    // 0x00E4(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         TicksTextFont;                                     // 0x00F8(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TicksTextOffset;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x015C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFixedSampleSequenceRulerStyle) == 0x000010, "Wrong alignment on FFixedSampleSequenceRulerStyle");
static_assert(sizeof(FFixedSampleSequenceRulerStyle) == 0x000230, "Wrong size on FFixedSampleSequenceRulerStyle");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleWidth) == 0x000008, "Member 'FFixedSampleSequenceRulerStyle::HandleWidth' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleColor) == 0x00000C, "Member 'FFixedSampleSequenceRulerStyle::HandleColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, HandleBrush) == 0x000020, "Member 'FFixedSampleSequenceRulerStyle::HandleBrush' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksColor) == 0x0000D0, "Member 'FFixedSampleSequenceRulerStyle::TicksColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextColor) == 0x0000E4, "Member 'FFixedSampleSequenceRulerStyle::TicksTextColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextFont) == 0x0000F8, "Member 'FFixedSampleSequenceRulerStyle::TicksTextFont' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, TicksTextOffset) == 0x000158, "Member 'FFixedSampleSequenceRulerStyle::TicksTextOffset' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, BackgroundColor) == 0x00015C, "Member 'FFixedSampleSequenceRulerStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, BackgroundBrush) == 0x000170, "Member 'FFixedSampleSequenceRulerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, DesiredWidth) == 0x000220, "Member 'FFixedSampleSequenceRulerStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FFixedSampleSequenceRulerStyle, DesiredHeight) == 0x000224, "Member 'FFixedSampleSequenceRulerStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceValueGridOverlayStyle
// 0x0098 (0x00A0 - 0x0008)
struct FSampledSequenceValueGridOverlayStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            GridColor;                                         // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         GridThickness;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            LabelTextColor;                                    // 0x0020(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         LabelTextFont;                                     // 0x0038(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSampledSequenceValueGridOverlayStyle) == 0x000008, "Wrong alignment on FSampledSequenceValueGridOverlayStyle");
static_assert(sizeof(FSampledSequenceValueGridOverlayStyle) == 0x0000A0, "Wrong size on FSampledSequenceValueGridOverlayStyle");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, GridColor) == 0x000008, "Member 'FSampledSequenceValueGridOverlayStyle::GridColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, GridThickness) == 0x00001C, "Member 'FSampledSequenceValueGridOverlayStyle::GridThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, LabelTextColor) == 0x000020, "Member 'FSampledSequenceValueGridOverlayStyle::LabelTextColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, LabelTextFont) == 0x000038, "Member 'FSampledSequenceValueGridOverlayStyle::LabelTextFont' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, DesiredWidth) == 0x000098, "Member 'FSampledSequenceValueGridOverlayStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FSampledSequenceValueGridOverlayStyle, DesiredHeight) == 0x00009C, "Member 'FSampledSequenceValueGridOverlayStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceViewerStyle
// 0x0138 (0x0140 - 0x0008)
struct FSampledSequenceViewerStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            SequenceColor;                                     // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         SequenceLineThickness;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            MajorGridLineColor;                                // 0x0020(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            MinorGridLineColor;                                // 0x0034(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            ZeroCrossingLineColor;                             // 0x0048(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         ZeroCrossingLineThickness;                         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleMarkersSize;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SequenceBackgroundColor;                           // 0x0064(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0080(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSampledSequenceViewerStyle) == 0x000010, "Wrong alignment on FSampledSequenceViewerStyle");
static_assert(sizeof(FSampledSequenceViewerStyle) == 0x000140, "Wrong size on FSampledSequenceViewerStyle");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceColor) == 0x000008, "Member 'FSampledSequenceViewerStyle::SequenceColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceLineThickness) == 0x00001C, "Member 'FSampledSequenceViewerStyle::SequenceLineThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, MajorGridLineColor) == 0x000020, "Member 'FSampledSequenceViewerStyle::MajorGridLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, MinorGridLineColor) == 0x000034, "Member 'FSampledSequenceViewerStyle::MinorGridLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, ZeroCrossingLineColor) == 0x000048, "Member 'FSampledSequenceViewerStyle::ZeroCrossingLineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, ZeroCrossingLineThickness) == 0x00005C, "Member 'FSampledSequenceViewerStyle::ZeroCrossingLineThickness' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SampleMarkersSize) == 0x000060, "Member 'FSampledSequenceViewerStyle::SampleMarkersSize' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, SequenceBackgroundColor) == 0x000064, "Member 'FSampledSequenceViewerStyle::SequenceBackgroundColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, BackgroundBrush) == 0x000080, "Member 'FSampledSequenceViewerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, DesiredWidth) == 0x000130, "Member 'FSampledSequenceViewerStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FSampledSequenceViewerStyle, DesiredHeight) == 0x000134, "Member 'FSampledSequenceViewerStyle::DesiredHeight' has a wrong offset!");

// ScriptStruct AudioWidgets.TriggerThresholdLineStyle
// 0x0010 (0x0018 - 0x0008)
struct FTriggerThresholdLineStyle final : public FSlateWidgetStyle
{
public:
	struct FLinearColor                           LineColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerThresholdLineStyle) == 0x000008, "Wrong alignment on FTriggerThresholdLineStyle");
static_assert(sizeof(FTriggerThresholdLineStyle) == 0x000018, "Wrong size on FTriggerThresholdLineStyle");
static_assert(offsetof(FTriggerThresholdLineStyle, LineColor) == 0x000008, "Member 'FTriggerThresholdLineStyle::LineColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioOscilloscopePanelStyle
// 0x0438 (0x0440 - 0x0008)
struct FAudioOscilloscopePanelStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFixedSampleSequenceRulerStyle         TimeRulerStyle;                                    // 0x0010(0x0230)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSampledSequenceValueGridOverlayStyle  ValueGridStyle;                                    // 0x0240(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSampledSequenceViewerStyle            WaveViewerStyle;                                   // 0x02E0(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTriggerThresholdLineStyle             TriggerThresholdLineStyle;                         // 0x0420(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_438[0x8];                                      // 0x0438(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioOscilloscopePanelStyle) == 0x000010, "Wrong alignment on FAudioOscilloscopePanelStyle");
static_assert(sizeof(FAudioOscilloscopePanelStyle) == 0x000440, "Wrong size on FAudioOscilloscopePanelStyle");
static_assert(offsetof(FAudioOscilloscopePanelStyle, TimeRulerStyle) == 0x000010, "Member 'FAudioOscilloscopePanelStyle::TimeRulerStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, ValueGridStyle) == 0x000240, "Member 'FAudioOscilloscopePanelStyle::ValueGridStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, WaveViewerStyle) == 0x0002E0, "Member 'FAudioOscilloscopePanelStyle::WaveViewerStyle' has a wrong offset!");
static_assert(offsetof(FAudioOscilloscopePanelStyle, TriggerThresholdLineStyle) == 0x000420, "Member 'FAudioOscilloscopePanelStyle::TriggerThresholdLineStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.MeterChannelInfo
// 0x000C (0x000C - 0x0000)
struct FMeterChannelInfo final
{
public:
	float                                         MeterValue;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakValue;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClippingValue;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeterChannelInfo) == 0x000004, "Wrong alignment on FMeterChannelInfo");
static_assert(sizeof(FMeterChannelInfo) == 0x00000C, "Wrong size on FMeterChannelInfo");
static_assert(offsetof(FMeterChannelInfo, MeterValue) == 0x000000, "Member 'FMeterChannelInfo::MeterValue' has a wrong offset!");
static_assert(offsetof(FMeterChannelInfo, PeakValue) == 0x000004, "Member 'FMeterChannelInfo::PeakValue' has a wrong offset!");
static_assert(offsetof(FMeterChannelInfo, ClippingValue) == 0x000008, "Member 'FMeterChannelInfo::ClippingValue' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMeterDefaultColorStyle
// 0x0060 (0x0068 - 0x0008)
struct FAudioMeterDefaultColorStyle final : public FSlateWidgetStyle
{
public:
	struct FLinearColor                           MeterBackgroundColor;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterValueColor;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterPeakColor;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterClippingColor;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleColor;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterScaleLabelColor;                              // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMeterDefaultColorStyle) == 0x000008, "Wrong alignment on FAudioMeterDefaultColorStyle");
static_assert(sizeof(FAudioMeterDefaultColorStyle) == 0x000068, "Wrong size on FAudioMeterDefaultColorStyle");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterBackgroundColor) == 0x000008, "Member 'FAudioMeterDefaultColorStyle::MeterBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterValueColor) == 0x000018, "Member 'FAudioMeterDefaultColorStyle::MeterValueColor' has a wrong offset!");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterPeakColor) == 0x000028, "Member 'FAudioMeterDefaultColorStyle::MeterPeakColor' has a wrong offset!");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterClippingColor) == 0x000038, "Member 'FAudioMeterDefaultColorStyle::MeterClippingColor' has a wrong offset!");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterScaleColor) == 0x000048, "Member 'FAudioMeterDefaultColorStyle::MeterScaleColor' has a wrong offset!");
static_assert(offsetof(FAudioMeterDefaultColorStyle, MeterScaleLabelColor) == 0x000058, "Member 'FAudioMeterDefaultColorStyle::MeterScaleLabelColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialWidgetStyle
// 0x0010 (0x0018 - 0x0008)
struct FAudioMaterialWidgetStyle : public FSlateWidgetStyle
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              DesiredSize;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialWidgetStyle) == 0x000008, "Wrong alignment on FAudioMaterialWidgetStyle");
static_assert(sizeof(FAudioMaterialWidgetStyle) == 0x000018, "Wrong size on FAudioMaterialWidgetStyle");
static_assert(offsetof(FAudioMaterialWidgetStyle, Material) == 0x000008, "Member 'FAudioMaterialWidgetStyle::Material' has a wrong offset!");
static_assert(offsetof(FAudioMaterialWidgetStyle, DesiredSize) == 0x000010, "Member 'FAudioMaterialWidgetStyle::DesiredSize' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialMeterStyle
// 0x00D8 (0x00F0 - 0x0018)
struct FAudioMaterialMeterStyle final : public FAudioMaterialWidgetStyle
{
public:
	struct FLinearColor                           MeterFillMinColor;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterFillMidColor;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterFillMaxColor;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MeterFillBackgroundColor;                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MeterPadding;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ValueRangeDb;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowScale;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleSide;                                        // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleHashOffset;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashWidth;                                    // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashHeight;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecibelsPerHash;                                   // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0090(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialMeterStyle) == 0x000008, "Wrong alignment on FAudioMaterialMeterStyle");
static_assert(sizeof(FAudioMaterialMeterStyle) == 0x0000F0, "Wrong size on FAudioMaterialMeterStyle");
static_assert(offsetof(FAudioMaterialMeterStyle, MeterFillMinColor) == 0x000018, "Member 'FAudioMaterialMeterStyle::MeterFillMinColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, MeterFillMidColor) == 0x000028, "Member 'FAudioMaterialMeterStyle::MeterFillMidColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, MeterFillMaxColor) == 0x000038, "Member 'FAudioMaterialMeterStyle::MeterFillMaxColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, MeterFillBackgroundColor) == 0x000048, "Member 'FAudioMaterialMeterStyle::MeterFillBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, MeterPadding) == 0x000058, "Member 'FAudioMaterialMeterStyle::MeterPadding' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, ValueRangeDb) == 0x000068, "Member 'FAudioMaterialMeterStyle::ValueRangeDb' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, bShowScale) == 0x000078, "Member 'FAudioMaterialMeterStyle::bShowScale' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, bScaleSide) == 0x000079, "Member 'FAudioMaterialMeterStyle::bScaleSide' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, ScaleHashOffset) == 0x00007C, "Member 'FAudioMaterialMeterStyle::ScaleHashOffset' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, ScaleHashWidth) == 0x000080, "Member 'FAudioMaterialMeterStyle::ScaleHashWidth' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, ScaleHashHeight) == 0x000084, "Member 'FAudioMaterialMeterStyle::ScaleHashHeight' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, DecibelsPerHash) == 0x000088, "Member 'FAudioMaterialMeterStyle::DecibelsPerHash' has a wrong offset!");
static_assert(offsetof(FAudioMaterialMeterStyle, Font) == 0x000090, "Member 'FAudioMaterialMeterStyle::Font' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMeterStyle
// 0x0428 (0x0430 - 0x0008)
struct FAudioMeterStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            MeterValueImage;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackgroundImage;                                   // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterBackgroundImage;                              // 0x0170(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterValueBackgroundImage;                         // 0x0220(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            MeterPeakImage;                                    // 0x02D0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              MeterSize;                                         // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MeterPadding;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeterValuePadding;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakValueWidth;                                    // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ValueRangeDb;                                      // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowScale;                                        // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleSide;                                        // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BA[0x2];                                      // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScaleHashOffset;                                   // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashWidth;                                    // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleHashHeight;                                   // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecibelsPerHash;                                   // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x03D0(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMeterStyle) == 0x000010, "Wrong alignment on FAudioMeterStyle");
static_assert(sizeof(FAudioMeterStyle) == 0x000430, "Wrong size on FAudioMeterStyle");
static_assert(offsetof(FAudioMeterStyle, MeterValueImage) == 0x000010, "Member 'FAudioMeterStyle::MeterValueImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, BackgroundImage) == 0x0000C0, "Member 'FAudioMeterStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterBackgroundImage) == 0x000170, "Member 'FAudioMeterStyle::MeterBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterValueBackgroundImage) == 0x000220, "Member 'FAudioMeterStyle::MeterValueBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterPeakImage) == 0x0002D0, "Member 'FAudioMeterStyle::MeterPeakImage' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterSize) == 0x000380, "Member 'FAudioMeterStyle::MeterSize' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterPadding) == 0x000390, "Member 'FAudioMeterStyle::MeterPadding' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, MeterValuePadding) == 0x0003A0, "Member 'FAudioMeterStyle::MeterValuePadding' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, PeakValueWidth) == 0x0003A4, "Member 'FAudioMeterStyle::PeakValueWidth' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ValueRangeDb) == 0x0003A8, "Member 'FAudioMeterStyle::ValueRangeDb' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, bShowScale) == 0x0003B8, "Member 'FAudioMeterStyle::bShowScale' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, bScaleSide) == 0x0003B9, "Member 'FAudioMeterStyle::bScaleSide' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashOffset) == 0x0003BC, "Member 'FAudioMeterStyle::ScaleHashOffset' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashWidth) == 0x0003C0, "Member 'FAudioMeterStyle::ScaleHashWidth' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, ScaleHashHeight) == 0x0003C4, "Member 'FAudioMeterStyle::ScaleHashHeight' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, DecibelsPerHash) == 0x0003C8, "Member 'FAudioMeterStyle::DecibelsPerHash' has a wrong offset!");
static_assert(offsetof(FAudioMeterStyle, Font) == 0x0003D0, "Member 'FAudioMeterStyle::Font' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialButtonStyle
// 0x0070 (0x0088 - 0x0018)
struct FAudioMaterialButtonStyle final : public FAudioMaterialWidgetStyle
{
public:
	struct FLinearColor                           ButtonMainColor;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonMainColorTint_1;                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonMainColorTint_2;                             // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonAccentColor;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonShadowColor;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonUnpressedOutlineColor;                       // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ButtonPressedOutlineColor;                         // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialButtonStyle) == 0x000008, "Wrong alignment on FAudioMaterialButtonStyle");
static_assert(sizeof(FAudioMaterialButtonStyle) == 0x000088, "Wrong size on FAudioMaterialButtonStyle");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonMainColor) == 0x000018, "Member 'FAudioMaterialButtonStyle::ButtonMainColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonMainColorTint_1) == 0x000028, "Member 'FAudioMaterialButtonStyle::ButtonMainColorTint_1' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonMainColorTint_2) == 0x000038, "Member 'FAudioMaterialButtonStyle::ButtonMainColorTint_2' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonAccentColor) == 0x000048, "Member 'FAudioMaterialButtonStyle::ButtonAccentColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonShadowColor) == 0x000058, "Member 'FAudioMaterialButtonStyle::ButtonShadowColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonUnpressedOutlineColor) == 0x000068, "Member 'FAudioMaterialButtonStyle::ButtonUnpressedOutlineColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialButtonStyle, ButtonPressedOutlineColor) == 0x000078, "Member 'FAudioMaterialButtonStyle::ButtonPressedOutlineColor' has a wrong offset!");

// ScriptStruct AudioWidgets.SampledSequenceVectorViewerStyle
// 0x00E8 (0x00F0 - 0x0008)
struct FSampledSequenceVectorViewerStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            BackgroundColor;                                   // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0020(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           LineColor;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSampledSequenceVectorViewerStyle) == 0x000010, "Wrong alignment on FSampledSequenceVectorViewerStyle");
static_assert(sizeof(FSampledSequenceVectorViewerStyle) == 0x0000F0, "Wrong size on FSampledSequenceVectorViewerStyle");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, BackgroundColor) == 0x000008, "Member 'FSampledSequenceVectorViewerStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, BackgroundBrush) == 0x000020, "Member 'FSampledSequenceVectorViewerStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, LineColor) == 0x0000D0, "Member 'FSampledSequenceVectorViewerStyle::LineColor' has a wrong offset!");
static_assert(offsetof(FSampledSequenceVectorViewerStyle, LineThickness) == 0x0000E0, "Member 'FSampledSequenceVectorViewerStyle::LineThickness' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioVectorscopePanelStyle
// 0x0198 (0x01A0 - 0x0008)
struct FAudioVectorscopePanelStyle final : public FSlateWidgetStyle
{
public:
	struct FSampledSequenceValueGridOverlayStyle  ValueGridStyle;                                    // 0x0008(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSampledSequenceVectorViewerStyle      VectorViewerStyle;                                 // 0x00B0(0x00F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioVectorscopePanelStyle) == 0x000010, "Wrong alignment on FAudioVectorscopePanelStyle");
static_assert(sizeof(FAudioVectorscopePanelStyle) == 0x0001A0, "Wrong size on FAudioVectorscopePanelStyle");
static_assert(offsetof(FAudioVectorscopePanelStyle, ValueGridStyle) == 0x000008, "Member 'FAudioVectorscopePanelStyle::ValueGridStyle' has a wrong offset!");
static_assert(offsetof(FAudioVectorscopePanelStyle, VectorViewerStyle) == 0x0000B0, "Member 'FAudioVectorscopePanelStyle::VectorViewerStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialEnvelopeSettings
// 0x0024 (0x0024 - 0x0000)
struct FAudioMaterialEnvelopeSettings final
{
public:
	EAudioMaterialEnvelopeType                    EnvelopeType;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackCurve;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackValue;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackTime;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayCurve;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayTime;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SustainValue;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseCurve;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReleaseTime;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialEnvelopeSettings) == 0x000004, "Wrong alignment on FAudioMaterialEnvelopeSettings");
static_assert(sizeof(FAudioMaterialEnvelopeSettings) == 0x000024, "Wrong size on FAudioMaterialEnvelopeSettings");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, EnvelopeType) == 0x000000, "Member 'FAudioMaterialEnvelopeSettings::EnvelopeType' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, AttackCurve) == 0x000004, "Member 'FAudioMaterialEnvelopeSettings::AttackCurve' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, AttackValue) == 0x000008, "Member 'FAudioMaterialEnvelopeSettings::AttackValue' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, AttackTime) == 0x00000C, "Member 'FAudioMaterialEnvelopeSettings::AttackTime' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, DecayCurve) == 0x000010, "Member 'FAudioMaterialEnvelopeSettings::DecayCurve' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, DecayTime) == 0x000014, "Member 'FAudioMaterialEnvelopeSettings::DecayTime' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, SustainValue) == 0x000018, "Member 'FAudioMaterialEnvelopeSettings::SustainValue' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, ReleaseCurve) == 0x00001C, "Member 'FAudioMaterialEnvelopeSettings::ReleaseCurve' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeSettings, ReleaseTime) == 0x000020, "Member 'FAudioMaterialEnvelopeSettings::ReleaseTime' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioTextBoxStyle
// 0x00D8 (0x00E0 - 0x0008)
struct FAudioTextBoxStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            BackgroundImage;                                   // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            BackgroundColor;                                   // 0x00C0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioTextBoxStyle) == 0x000010, "Wrong alignment on FAudioTextBoxStyle");
static_assert(sizeof(FAudioTextBoxStyle) == 0x0000E0, "Wrong size on FAudioTextBoxStyle");
static_assert(offsetof(FAudioTextBoxStyle, BackgroundImage) == 0x000010, "Member 'FAudioTextBoxStyle::BackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioTextBoxStyle, BackgroundColor) == 0x0000C0, "Member 'FAudioTextBoxStyle::BackgroundColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialSliderStyle
// 0x0138 (0x0150 - 0x0018)
struct FAudioMaterialSliderStyle final : public FAudioMaterialWidgetStyle
{
public:
	struct FLinearColor                           SliderBackgroundColor;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderBackgroundAccentColor;                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderValueMainColor;                              // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleMainColor;                             // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleOutlineColor;                          // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x0070(0x00E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialSliderStyle) == 0x000010, "Wrong alignment on FAudioMaterialSliderStyle");
static_assert(sizeof(FAudioMaterialSliderStyle) == 0x000150, "Wrong size on FAudioMaterialSliderStyle");
static_assert(offsetof(FAudioMaterialSliderStyle, SliderBackgroundColor) == 0x000018, "Member 'FAudioMaterialSliderStyle::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialSliderStyle, SliderBackgroundAccentColor) == 0x000028, "Member 'FAudioMaterialSliderStyle::SliderBackgroundAccentColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialSliderStyle, SliderValueMainColor) == 0x000038, "Member 'FAudioMaterialSliderStyle::SliderValueMainColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialSliderStyle, SliderHandleMainColor) == 0x000048, "Member 'FAudioMaterialSliderStyle::SliderHandleMainColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialSliderStyle, SliderHandleOutlineColor) == 0x000058, "Member 'FAudioMaterialSliderStyle::SliderHandleOutlineColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialSliderStyle, TextBoxStyle) == 0x000070, "Member 'FAudioMaterialSliderStyle::TextBoxStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialKnobStyle
// 0x01A8 (0x01C0 - 0x0018)
struct FAudioMaterialKnobStyle final : public FAudioMaterialWidgetStyle
{
public:
	struct FLinearColor                           KnobMainColor;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobAccentColor;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobShadowColor;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobSmoothBevelColor;                              // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobIndicatorDotColor;                             // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobEdgeFillColor;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarColor;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarShadowColor;                                // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarFillMinColor;                               // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarFillMidColor;                               // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarFillMaxColor;                               // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           KnobBarFillTintColor;                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x00E0(0x00E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialKnobStyle) == 0x000010, "Wrong alignment on FAudioMaterialKnobStyle");
static_assert(sizeof(FAudioMaterialKnobStyle) == 0x0001C0, "Wrong size on FAudioMaterialKnobStyle");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobMainColor) == 0x000018, "Member 'FAudioMaterialKnobStyle::KnobMainColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobAccentColor) == 0x000028, "Member 'FAudioMaterialKnobStyle::KnobAccentColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobShadowColor) == 0x000038, "Member 'FAudioMaterialKnobStyle::KnobShadowColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobSmoothBevelColor) == 0x000048, "Member 'FAudioMaterialKnobStyle::KnobSmoothBevelColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobIndicatorDotColor) == 0x000058, "Member 'FAudioMaterialKnobStyle::KnobIndicatorDotColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobEdgeFillColor) == 0x000068, "Member 'FAudioMaterialKnobStyle::KnobEdgeFillColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarColor) == 0x000078, "Member 'FAudioMaterialKnobStyle::KnobBarColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarShadowColor) == 0x000088, "Member 'FAudioMaterialKnobStyle::KnobBarShadowColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarFillMinColor) == 0x000098, "Member 'FAudioMaterialKnobStyle::KnobBarFillMinColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarFillMidColor) == 0x0000A8, "Member 'FAudioMaterialKnobStyle::KnobBarFillMidColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarFillMaxColor) == 0x0000B8, "Member 'FAudioMaterialKnobStyle::KnobBarFillMaxColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, KnobBarFillTintColor) == 0x0000C8, "Member 'FAudioMaterialKnobStyle::KnobBarFillTintColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialKnobStyle, TextBoxStyle) == 0x0000E0, "Member 'FAudioMaterialKnobStyle::TextBoxStyle' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioMaterialEnvelopeStyle
// 0x0030 (0x0048 - 0x0018)
struct FAudioMaterialEnvelopeStyle final : public FAudioMaterialWidgetStyle
{
public:
	struct FLinearColor                           CurveColor;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundColor;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioMaterialEnvelopeStyle) == 0x000008, "Wrong alignment on FAudioMaterialEnvelopeStyle");
static_assert(sizeof(FAudioMaterialEnvelopeStyle) == 0x000048, "Wrong size on FAudioMaterialEnvelopeStyle");
static_assert(offsetof(FAudioMaterialEnvelopeStyle, CurveColor) == 0x000018, "Member 'FAudioMaterialEnvelopeStyle::CurveColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeStyle, BackgroundColor) == 0x000028, "Member 'FAudioMaterialEnvelopeStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioMaterialEnvelopeStyle, OutlineColor) == 0x000038, "Member 'FAudioMaterialEnvelopeStyle::OutlineColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioSpectrumPlotStyle
// 0x0128 (0x0130 - 0x0008)
struct FAudioSpectrumPlotStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            BackgroundColor;                                   // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            GridColor;                                         // 0x001C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            AxisLabelColor;                                    // 0x0030(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         AxisLabelFont;                                     // 0x0048(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SpectrumColor;                                     // 0x00A8(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            CrosshairColor;                                    // 0x00BC(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         CrosshairLabelFont;                                // 0x00D0(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioSpectrumPlotStyle) == 0x000008, "Wrong alignment on FAudioSpectrumPlotStyle");
static_assert(sizeof(FAudioSpectrumPlotStyle) == 0x000130, "Wrong size on FAudioSpectrumPlotStyle");
static_assert(offsetof(FAudioSpectrumPlotStyle, BackgroundColor) == 0x000008, "Member 'FAudioSpectrumPlotStyle::BackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, GridColor) == 0x00001C, "Member 'FAudioSpectrumPlotStyle::GridColor' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, AxisLabelColor) == 0x000030, "Member 'FAudioSpectrumPlotStyle::AxisLabelColor' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, AxisLabelFont) == 0x000048, "Member 'FAudioSpectrumPlotStyle::AxisLabelFont' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, SpectrumColor) == 0x0000A8, "Member 'FAudioSpectrumPlotStyle::SpectrumColor' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, CrosshairColor) == 0x0000BC, "Member 'FAudioSpectrumPlotStyle::CrosshairColor' has a wrong offset!");
static_assert(offsetof(FAudioSpectrumPlotStyle, CrosshairLabelFont) == 0x0000D0, "Member 'FAudioSpectrumPlotStyle::CrosshairLabelFont' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioSliderStyle
// 0x0648 (0x0650 - 0x0008)
struct FAudioSliderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSliderStyle                           SliderStyle;                                       // 0x0010(0x0440)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x0450(0x00E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateBrush                            WidgetBackgroundImage;                             // 0x0530(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBackgroundColor;                             // 0x05E0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SliderBackgroundSize;                              // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LabelPadding;                                      // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBarColor;                                    // 0x060C(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderThumbColor;                                  // 0x0620(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            WidgetBackgroundColor;                             // 0x0634(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioSliderStyle) == 0x000010, "Wrong alignment on FAudioSliderStyle");
static_assert(sizeof(FAudioSliderStyle) == 0x000650, "Wrong size on FAudioSliderStyle");
static_assert(offsetof(FAudioSliderStyle, SliderStyle) == 0x000010, "Member 'FAudioSliderStyle::SliderStyle' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, TextBoxStyle) == 0x000450, "Member 'FAudioSliderStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, WidgetBackgroundImage) == 0x000530, "Member 'FAudioSliderStyle::WidgetBackgroundImage' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBackgroundColor) == 0x0005E0, "Member 'FAudioSliderStyle::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBackgroundSize) == 0x0005F8, "Member 'FAudioSliderStyle::SliderBackgroundSize' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, LabelPadding) == 0x000608, "Member 'FAudioSliderStyle::LabelPadding' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderBarColor) == 0x00060C, "Member 'FAudioSliderStyle::SliderBarColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, SliderThumbColor) == 0x000620, "Member 'FAudioSliderStyle::SliderThumbColor' has a wrong offset!");
static_assert(offsetof(FAudioSliderStyle, WidgetBackgroundColor) == 0x000634, "Member 'FAudioSliderStyle::WidgetBackgroundColor' has a wrong offset!");

// ScriptStruct AudioWidgets.AudioRadialSliderStyle
// 0x0138 (0x0140 - 0x0008)
struct FAudioRadialSliderStyle final : public FSlateWidgetStyle
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAudioTextBoxStyle                     TextBoxStyle;                                      // 0x0010(0x00E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            CenterBackgroundColor;                             // 0x00F0(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderBarColor;                                    // 0x0104(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateColor                            SliderProgressColor;                               // 0x0118(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LabelPadding;                                      // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSliderRadius;                               // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAudioRadialSliderStyle) == 0x000010, "Wrong alignment on FAudioRadialSliderStyle");
static_assert(sizeof(FAudioRadialSliderStyle) == 0x000140, "Wrong size on FAudioRadialSliderStyle");
static_assert(offsetof(FAudioRadialSliderStyle, TextBoxStyle) == 0x000010, "Member 'FAudioRadialSliderStyle::TextBoxStyle' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, CenterBackgroundColor) == 0x0000F0, "Member 'FAudioRadialSliderStyle::CenterBackgroundColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, SliderBarColor) == 0x000104, "Member 'FAudioRadialSliderStyle::SliderBarColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, SliderProgressColor) == 0x000118, "Member 'FAudioRadialSliderStyle::SliderProgressColor' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, LabelPadding) == 0x00012C, "Member 'FAudioRadialSliderStyle::LabelPadding' has a wrong offset!");
static_assert(offsetof(FAudioRadialSliderStyle, DefaultSliderRadius) == 0x000130, "Member 'FAudioRadialSliderStyle::DefaultSliderRadius' has a wrong offset!");

// ScriptStruct AudioWidgets.PlayheadOverlayStyle
// 0x0020 (0x0028 - 0x0008)
struct FPlayheadOverlayStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateColor                            PlayheadColor;                                     // 0x0008(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         PlayheadWidth;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredWidth;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesiredHeight;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayheadOverlayStyle) == 0x000008, "Wrong alignment on FPlayheadOverlayStyle");
static_assert(sizeof(FPlayheadOverlayStyle) == 0x000028, "Wrong size on FPlayheadOverlayStyle");
static_assert(offsetof(FPlayheadOverlayStyle, PlayheadColor) == 0x000008, "Member 'FPlayheadOverlayStyle::PlayheadColor' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, PlayheadWidth) == 0x00001C, "Member 'FPlayheadOverlayStyle::PlayheadWidth' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, DesiredWidth) == 0x000020, "Member 'FPlayheadOverlayStyle::DesiredWidth' has a wrong offset!");
static_assert(offsetof(FPlayheadOverlayStyle, DesiredHeight) == 0x000024, "Member 'FPlayheadOverlayStyle::DesiredHeight' has a wrong offset!");

}

