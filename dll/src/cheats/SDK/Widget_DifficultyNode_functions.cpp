#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyNode

#include "Basic.hpp"

#include "Widget_DifficultyNode_classes.hpp"
#include "Widget_DifficultyNode_parameters.hpp"


namespace SDK
{

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.AutoAssignSavedPoints
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::AutoAssignSavedPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "AutoAssignSavedPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.BndEvt__Widget_SkillTreeNode_Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UWidget_DifficultyNode_C::BndEvt__Widget_SkillTreeNode_Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "BndEvt__Widget_SkillTreeNode_Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidget_DifficultyNode_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.DeductPoint
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::DeductPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "DeductPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.DestroyTooltip
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::DestroyTooltip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "DestroyTooltip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidget_DifficultyNode_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Does Next Node Have Points Assigned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   NextNodeHasPointsAssigned                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::Does_Next_Node_Have_Points_Assigned(bool* NextNodeHasPointsAssigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Does Next Node Have Points Assigned");

	Params::Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NextNodeHasPointsAssigned != nullptr)
		*NextNodeHasPointsAssigned = Parms.NextNodeHasPointsAssigned;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.ExecuteUbergraph_Widget_DifficultyNode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::ExecuteUbergraph_Widget_DifficultyNode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "ExecuteUbergraph_Widget_DifficultyNode");

	Params::Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetCurrentTierDescription
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText*                            Description                                            (Parm, OutParm)

void UWidget_DifficultyNode_C::GetCurrentTierDescription(class FText* Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetCurrentTierDescription");

	Params::Widget_DifficultyNode_C_GetCurrentTierDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Description != nullptr)
		*Description = std::move(Parms.Description);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetMutatorPrimaryAssetName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName*                            Name_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::GetMutatorPrimaryAssetName(class FName* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetMutatorPrimaryAssetName");

	Params::Widget_DifficultyNode_C_GetMutatorPrimaryAssetName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = Parms.Name_0;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetMutatorPrimaryAssetSkillTreeIdName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName*                            Name_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::GetMutatorPrimaryAssetSkillTreeIdName(class FName* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetMutatorPrimaryAssetSkillTreeIdName");

	Params::Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = Parms.Name_0;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetNextTierDescription
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText*                            Header                                                 (Parm, OutParm)
// class FText*                            Description                                            (Parm, OutParm)

void UWidget_DifficultyNode_C::GetNextTierDescription(class FText* Header, class FText* Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetNextTierDescription");

	Params::Widget_DifficultyNode_C_GetNextTierDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Header != nullptr)
		*Header = std::move(Parms.Header);

	if (Description != nullptr)
		*Description = std::move(Parms.Description);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetNumPointsAssigned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  NumPoints                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::GetNumPointsAssigned(int32* NumPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetNumPointsAssigned");

	Params::Widget_DifficultyNode_C_GetNumPointsAssigned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NumPoints != nullptr)
		*NumPoints = Parms.NumPoints;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetTooltipSize
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget_BaseTooltip_C*            ToolTipWidget_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       Values                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::GetTooltipSize(class UWidget_BaseTooltip_C* ToolTipWidget_0, struct FVector2D* Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetTooltipSize");

	Params::Widget_DifficultyNode_C_GetTooltipSize Parms{};

	Parms.ToolTipWidget_0 = ToolTipWidget_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Values != nullptr)
		*Values = std::move(Parms.Values);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetToolTipWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UWidget_DifficultyNode_C::GetToolTipWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetToolTipWidget");

	Params::Widget_DifficultyNode_C_GetToolTipWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetTotalAssignedPoints
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::GetTotalAssignedPoints(int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "GetTotalAssignedPoints");

	Params::Widget_DifficultyNode_C_GetTotalAssignedPoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.ImplementDifficultyEffect
// (BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::ImplementDifficultyEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "ImplementDifficultyEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.InitProgressVisualRandom
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::InitProgressVisualRandom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "InitProgressVisualRandom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Is Assigned Points Between Min Max
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   BetweenMinMax                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::Is_Assigned_Points_Between_Min_Max(bool* BetweenMinMax)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Is Assigned Points Between Min Max");

	Params::Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BetweenMinMax != nullptr)
		*BetweenMinMax = Parms.BetweenMinMax;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.IsCapped
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Capped                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::IsCapped(bool* Capped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "IsCapped");

	Params::Widget_DifficultyNode_C_IsCapped Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Capped != nullptr)
		*Capped = Parms.Capped;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.IsNodeLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsLocked                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::IsNodeLocked(bool* IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "IsNodeLocked");

	Params::Widget_DifficultyNode_C_IsNodeLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLocked != nullptr)
		*IsLocked = Parms.IsLocked;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.On_Icon_MouseButtonDown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FPointerEvent&             MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWidget_DifficultyNode_C::On_Icon_MouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "On_Icon_MouseButtonDown");

	Params::Widget_DifficultyNode_C_On_Icon_MouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.OnAddedToFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWidget_DifficultyNode_C::OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "OnAddedToFocusPath");

	Params::Widget_DifficultyNode_C_OnAddedToFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.OnRemovedFromFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FFocusEvent&               InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UWidget_DifficultyNode_C::OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "OnRemovedFromFocusPath");

	Params::Widget_DifficultyNode_C_OnRemovedFromFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "PreConstruct");

	Params::Widget_DifficultyNode_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.RemoveDifficultyEffect
// (BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::RemoveDifficultyEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "RemoveDifficultyEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.ResetNode
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::ResetNode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "ResetNode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.SetNumPointsAssigned
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewPoints                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::SetNumPointsAssigned(int32 NewPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "SetNumPointsAssigned");

	Params::Widget_DifficultyNode_C_SetNumPointsAssigned Parms{};

	Parms.NewPoints = NewPoints;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.SimulateClick
// (BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::SimulateClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "SimulateClick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Update Node State
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::Update_Node_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Update Node State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Update Points Assigned Text
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::Update_Points_Assigned_Text()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "Update Points Assigned Text");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateGamepadFocus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::UpdateGamepadFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "UpdateGamepadFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateProgressVisuals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PointsAssigned                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyNode_C::UpdateProgressVisuals(int32 PointsAssigned, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "UpdateProgressVisuals");

	Params::Widget_DifficultyNode_C_UpdateProgressVisuals Parms{};

	Parms.PointsAssigned = PointsAssigned;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateTooltipInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyNode_C::UpdateTooltipInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyNode_C", "UpdateTooltipInfo");

	UObject::ProcessEvent(Func, nullptr);
}

}

