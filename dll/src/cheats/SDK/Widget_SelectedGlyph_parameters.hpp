#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_SelectedGlyph

#include "Basic.hpp"

#include "CommonInput_structs.hpp"


namespace SDK::Params
{

// Function Widget_SelectedGlyph.Widget_SelectedGlyph_C.ExecuteUbergraph_Widget_SelectedGlyph
// 0x0030 (0x0030 - 0x0000)
struct Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputType bNewInputType)> K2Node_CreateDelegate_OutputDelegate;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Visibe;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Force;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph) == 0x000008, "Wrong alignment on Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph");
static_assert(sizeof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph) == 0x000030, "Wrong size on Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, EntryPoint) == 0x000000, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::EntryPoint' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue) == 0x000010, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::CallFunc_GetLocalPlayerSubSystemFromPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, K2Node_CustomEvent_Visibe) == 0x000028, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::K2Node_CustomEvent_Visibe' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, K2Node_CustomEvent_Force) == 0x000029, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::K2Node_CustomEvent_Force' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph, K2Node_Event_IsDesignTime) == 0x00002B, "Member 'Widget_SelectedGlyph_C_ExecuteUbergraph_Widget_SelectedGlyph::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function Widget_SelectedGlyph.Widget_SelectedGlyph_C.OnInputMethodChanged
// 0x0002 (0x0002 - 0x0000)
struct Widget_SelectedGlyph_C_OnInputMethodChanged final
{
public:
	ECommonInputType                              bNewInputType;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SelectedGlyph_C_OnInputMethodChanged) == 0x000001, "Wrong alignment on Widget_SelectedGlyph_C_OnInputMethodChanged");
static_assert(sizeof(Widget_SelectedGlyph_C_OnInputMethodChanged) == 0x000002, "Wrong size on Widget_SelectedGlyph_C_OnInputMethodChanged");
static_assert(offsetof(Widget_SelectedGlyph_C_OnInputMethodChanged, bNewInputType) == 0x000000, "Member 'Widget_SelectedGlyph_C_OnInputMethodChanged::bNewInputType' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_OnInputMethodChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'Widget_SelectedGlyph_C_OnInputMethodChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Widget_SelectedGlyph.Widget_SelectedGlyph_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Widget_SelectedGlyph_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SelectedGlyph_C_PreConstruct) == 0x000001, "Wrong alignment on Widget_SelectedGlyph_C_PreConstruct");
static_assert(sizeof(Widget_SelectedGlyph_C_PreConstruct) == 0x000001, "Wrong size on Widget_SelectedGlyph_C_PreConstruct");
static_assert(offsetof(Widget_SelectedGlyph_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Widget_SelectedGlyph_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Widget_SelectedGlyph.Widget_SelectedGlyph_C.SetActionGlyphVisibility
// 0x0002 (0x0002 - 0x0000)
struct Widget_SelectedGlyph_C_SetActionGlyphVisibility final
{
public:
	bool                                          Visibe;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_SelectedGlyph_C_SetActionGlyphVisibility) == 0x000001, "Wrong alignment on Widget_SelectedGlyph_C_SetActionGlyphVisibility");
static_assert(sizeof(Widget_SelectedGlyph_C_SetActionGlyphVisibility) == 0x000002, "Wrong size on Widget_SelectedGlyph_C_SetActionGlyphVisibility");
static_assert(offsetof(Widget_SelectedGlyph_C_SetActionGlyphVisibility, Visibe) == 0x000000, "Member 'Widget_SelectedGlyph_C_SetActionGlyphVisibility::Visibe' has a wrong offset!");
static_assert(offsetof(Widget_SelectedGlyph_C_SetActionGlyphVisibility, Force) == 0x000001, "Member 'Widget_SelectedGlyph_C_SetActionGlyphVisibility::Force' has a wrong offset!");

}

