#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pickupable_Mutator_GodCategory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_structs.hpp"
#include "BP_Pickupable_RandomMutator_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Pickupable_Mutator_GodCategory.BP_Pickupable_Mutator_GodCategory_C
// 0x0020 (0x0460 - 0x0440)
class ABP_Pickupable_Mutator_GodCategory_C final : public ABP_Pickupable_RandomMutator_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Pickupable_Mutator_GodCategory_C; // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         NumMutatorOptions;                                 // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44C[0x4];                                      // 0x044C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRLootSelectionOption>          GeneratedGodMutatorOptions;                        // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	bool CanInteract(class APlayerController* Controller);
	void ExecuteUbergraph_BP_Pickupable_Mutator_GodCategory(int32 EntryPoint);
	void FilterByMerchantBlacklist(TArray<struct FMutatorLootTableRow>& InRows, TArray<struct FMutatorLootTableRow>* OutRows);
	void GenerateGodCategory(class URMutatorRewardCategoryDataAsset** GeneratedCategory);
	void GenerateGodMutatorOptionsFromGodCategory(class URMutatorRewardCategoryDataAsset* GodCategory);
	void GenerateRandomGodCategory(class URMutatorRewardCategoryDataAsset** GeneratedCategory);
	void GenerateRandomGodCategoryFromEquippedCategories(const struct FGameplayTagContainer& EquippedGodCategories, class URMutatorRewardCategoryDataAsset** GeneratedCategory);
	void GetEquippedGodCategories(struct FGameplayTagContainer* EquippedGodCategories);
	class UDataAsset* GetGeneratedGodCategoryDataAsset();
	void GetNumUniqueEquippedMutatorCategories(class APlayerController* PlayerController, int32* Num);
	void HasEnoughMutatorsInCategoryToSpawn(class URMutatorRewardCategoryDataAsset* CategoryDA, bool* Value);
	void IsCategoryCapped(class URMutatorRewardCategoryDataAsset* CategoryDA, bool* Value);
	void OnInteract(class APlayerController* Controller);
	void OnInteractionSuccesful(class APlayerController* PlayerController);
	void OnLootOptionSelected_Event(const struct FRLootSelectionOption& LootSelectionOption);
	void PlayerHasGeneratedMutator(bool* Value);
	void PlayerHasGeneratedTriggerType(bool* Value);
	void ReceiveBeginPlay();
	void RegenerateOptions();
	void SetVisualIdentifier();
	void TryUpdatePlinthSettings();
	void UpdateGeneratedGodCategory(class URMutatorRewardCategoryDataAsset* NewGodCategory);
	void UpdateGeneratedMutatorOptions(const TArray<struct FRLootSelectionOption>& NewLootOptions);
	void UpdateMerchantOptionsAfterTriggerWasBought(class URMutatorPrimaryAsset* BoughtMutator);

	class FText GetInteractableAlternativeDescription() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableName() const;
	class FText GetInteractableSubHeader() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Pickupable_Mutator_GodCategory_C">();
	}
	static class ABP_Pickupable_Mutator_GodCategory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Pickupable_Mutator_GodCategory_C>();
	}
};
static_assert(alignof(ABP_Pickupable_Mutator_GodCategory_C) == 0x000008, "Wrong alignment on ABP_Pickupable_Mutator_GodCategory_C");
static_assert(sizeof(ABP_Pickupable_Mutator_GodCategory_C) == 0x000460, "Wrong size on ABP_Pickupable_Mutator_GodCategory_C");
static_assert(offsetof(ABP_Pickupable_Mutator_GodCategory_C, UberGraphFrame_BP_Pickupable_Mutator_GodCategory_C) == 0x000440, "Member 'ABP_Pickupable_Mutator_GodCategory_C::UberGraphFrame_BP_Pickupable_Mutator_GodCategory_C' has a wrong offset!");
static_assert(offsetof(ABP_Pickupable_Mutator_GodCategory_C, NumMutatorOptions) == 0x000448, "Member 'ABP_Pickupable_Mutator_GodCategory_C::NumMutatorOptions' has a wrong offset!");
static_assert(offsetof(ABP_Pickupable_Mutator_GodCategory_C, GeneratedGodMutatorOptions) == 0x000450, "Member 'ABP_Pickupable_Mutator_GodCategory_C::GeneratedGodMutatorOptions' has a wrong offset!");

}

