#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AudioExtensions_structs.hpp"
#include "RGame_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Niagara_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK::Params
{

// Function RGame.RPawnBase.GetIsAlive
// 0x0001 (0x0001 - 0x0000)
struct RPawnBase_GetIsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetIsAlive) == 0x000001, "Wrong alignment on RPawnBase_GetIsAlive");
static_assert(sizeof(RPawnBase_GetIsAlive) == 0x000001, "Wrong size on RPawnBase_GetIsAlive");
static_assert(offsetof(RPawnBase_GetIsAlive, ReturnValue) == 0x000000, "Member 'RPawnBase_GetIsAlive::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.OnDamageCombatEvent
// 0x00C0 (0x00C0 - 0x0000)
struct RPawnBase_OnDamageCombatEvent final
{
public:
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_OnDamageCombatEvent) == 0x000008, "Wrong alignment on RPawnBase_OnDamageCombatEvent");
static_assert(sizeof(RPawnBase_OnDamageCombatEvent) == 0x0000C0, "Wrong size on RPawnBase_OnDamageCombatEvent");
static_assert(offsetof(RPawnBase_OnDamageCombatEvent, DamageEventData) == 0x000000, "Member 'RPawnBase_OnDamageCombatEvent::DamageEventData' has a wrong offset!");

// Function RGame.RPawnBase.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetCapsuleComponent) == 0x000008, "Wrong alignment on RPawnBase_GetCapsuleComponent");
static_assert(sizeof(RPawnBase_GetCapsuleComponent) == 0x000008, "Wrong size on RPawnBase_GetCapsuleComponent");
static_assert(offsetof(RPawnBase_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'RPawnBase_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.GetGScriptCategory
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetGScriptCategory final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetGScriptCategory) == 0x000004, "Wrong alignment on RPawnBase_GetGScriptCategory");
static_assert(sizeof(RPawnBase_GetGScriptCategory) == 0x000008, "Wrong size on RPawnBase_GetGScriptCategory");
static_assert(offsetof(RPawnBase_GetGScriptCategory, ReturnValue) == 0x000000, "Member 'RPawnBase_GetGScriptCategory::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.GetGScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetGScriptComponent final
{
public:
	class URGScriptComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetGScriptComponent) == 0x000008, "Wrong alignment on RPawnBase_GetGScriptComponent");
static_assert(sizeof(RPawnBase_GetGScriptComponent) == 0x000008, "Wrong size on RPawnBase_GetGScriptComponent");
static_assert(offsetof(RPawnBase_GetGScriptComponent, ReturnValue) == 0x000000, "Member 'RPawnBase_GetGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.GetHealthComponent
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetHealthComponent final
{
public:
	class URHealthComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetHealthComponent) == 0x000008, "Wrong alignment on RPawnBase_GetHealthComponent");
static_assert(sizeof(RPawnBase_GetHealthComponent) == 0x000008, "Wrong size on RPawnBase_GetHealthComponent");
static_assert(offsetof(RPawnBase_GetHealthComponent, ReturnValue) == 0x000000, "Member 'RPawnBase_GetHealthComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.GetRPawnMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetRPawnMovementComponent final
{
public:
	class URPawnMovementComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetRPawnMovementComponent) == 0x000008, "Wrong alignment on RPawnBase_GetRPawnMovementComponent");
static_assert(sizeof(RPawnBase_GetRPawnMovementComponent) == 0x000008, "Wrong size on RPawnBase_GetRPawnMovementComponent");
static_assert(offsetof(RPawnBase_GetRPawnMovementComponent, ReturnValue) == 0x000000, "Member 'RPawnBase_GetRPawnMovementComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPawnBase.GetSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RPawnBase_GetSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnBase_GetSkeletalMeshComponent) == 0x000008, "Wrong alignment on RPawnBase_GetSkeletalMeshComponent");
static_assert(sizeof(RPawnBase_GetSkeletalMeshComponent) == 0x000008, "Wrong size on RPawnBase_GetSkeletalMeshComponent");
static_assert(offsetof(RPawnBase_GetSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'RPawnBase_GetSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetEquippedWeaponCategory
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetEquippedWeaponCategory final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetEquippedWeaponCategory) == 0x000004, "Wrong alignment on RPlayerPawn_GetEquippedWeaponCategory");
static_assert(sizeof(RPlayerPawn_GetEquippedWeaponCategory) == 0x000008, "Wrong size on RPlayerPawn_GetEquippedWeaponCategory");
static_assert(offsetof(RPlayerPawn_GetEquippedWeaponCategory, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetEquippedWeaponCategory::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.AddGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AddGameplayTag final
{
public:
	struct FGameplayTag                           NewGameplayTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddGameplayTag) == 0x000004, "Wrong alignment on RPlayerPawn_AddGameplayTag");
static_assert(sizeof(RPlayerPawn_AddGameplayTag) == 0x000008, "Wrong size on RPlayerPawn_AddGameplayTag");
static_assert(offsetof(RPlayerPawn_AddGameplayTag, NewGameplayTag) == 0x000000, "Member 'RPlayerPawn_AddGameplayTag::NewGameplayTag' has a wrong offset!");

// Function RGame.RPlayerPawn.AddPingInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AddPingInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddPingInputBlock) == 0x000004, "Wrong alignment on RPlayerPawn_AddPingInputBlock");
static_assert(sizeof(RPlayerPawn_AddPingInputBlock) == 0x000008, "Wrong size on RPlayerPawn_AddPingInputBlock");
static_assert(offsetof(RPlayerPawn_AddPingInputBlock, Key) == 0x000000, "Member 'RPlayerPawn_AddPingInputBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.AddPostProcessMaterial
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_AddPostProcessMaterial final
{
public:
	class APostProcessVolume*                     Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialParent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddPostProcessMaterial) == 0x000008, "Wrong alignment on RPlayerPawn_AddPostProcessMaterial");
static_assert(sizeof(RPlayerPawn_AddPostProcessMaterial) == 0x000018, "Wrong size on RPlayerPawn_AddPostProcessMaterial");
static_assert(offsetof(RPlayerPawn_AddPostProcessMaterial, Volume) == 0x000000, "Member 'RPlayerPawn_AddPostProcessMaterial::Volume' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddPostProcessMaterial, MaterialParent) == 0x000008, "Member 'RPlayerPawn_AddPostProcessMaterial::MaterialParent' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddPostProcessMaterial, ReturnValue) == 0x000010, "Member 'RPlayerPawn_AddPostProcessMaterial::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.AddRecoil
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_AddRecoil final
{
public:
	struct FRotator                               Recoil;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddRecoil) == 0x000008, "Wrong alignment on RPlayerPawn_AddRecoil");
static_assert(sizeof(RPlayerPawn_AddRecoil) == 0x000018, "Wrong size on RPlayerPawn_AddRecoil");
static_assert(offsetof(RPlayerPawn_AddRecoil, Recoil) == 0x000000, "Member 'RPlayerPawn_AddRecoil::Recoil' has a wrong offset!");

// Function RGame.RPlayerPawn.AddRespawnLocationUpdateBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AddRespawnLocationUpdateBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddRespawnLocationUpdateBlock) == 0x000004, "Wrong alignment on RPlayerPawn_AddRespawnLocationUpdateBlock");
static_assert(sizeof(RPlayerPawn_AddRespawnLocationUpdateBlock) == 0x000008, "Wrong size on RPlayerPawn_AddRespawnLocationUpdateBlock");
static_assert(offsetof(RPlayerPawn_AddRespawnLocationUpdateBlock, Key) == 0x000000, "Member 'RPlayerPawn_AddRespawnLocationUpdateBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.AddRoomObjectiveItemsHeld
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_AddRoomObjectiveItemsHeld final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddRoomObjectiveItemsHeld) == 0x000004, "Wrong alignment on RPlayerPawn_AddRoomObjectiveItemsHeld");
static_assert(sizeof(RPlayerPawn_AddRoomObjectiveItemsHeld) == 0x000004, "Wrong size on RPlayerPawn_AddRoomObjectiveItemsHeld");
static_assert(offsetof(RPlayerPawn_AddRoomObjectiveItemsHeld, Amount) == 0x000000, "Member 'RPlayerPawn_AddRoomObjectiveItemsHeld::Amount' has a wrong offset!");

// Function RGame.RPlayerPawn.AddRotationInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AddRotationInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddRotationInputBlock) == 0x000004, "Wrong alignment on RPlayerPawn_AddRotationInputBlock");
static_assert(sizeof(RPlayerPawn_AddRotationInputBlock) == 0x000008, "Wrong size on RPlayerPawn_AddRotationInputBlock");
static_assert(offsetof(RPlayerPawn_AddRotationInputBlock, Key) == 0x000000, "Member 'RPlayerPawn_AddRotationInputBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.AddTemporaryInputBlockers
// 0x0014 (0x0014 - 0x0000)
struct RPlayerPawn_AddTemporaryInputBlockers final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockControlInput;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockInputPhysics;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockDash;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockJump;                                        // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockRotation;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddTemporaryInputBlockers) == 0x000004, "Wrong alignment on RPlayerPawn_AddTemporaryInputBlockers");
static_assert(sizeof(RPlayerPawn_AddTemporaryInputBlockers) == 0x000014, "Wrong size on RPlayerPawn_AddTemporaryInputBlockers");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, Key) == 0x000000, "Member 'RPlayerPawn_AddTemporaryInputBlockers::Key' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, bBlockControlInput) == 0x000008, "Member 'RPlayerPawn_AddTemporaryInputBlockers::bBlockControlInput' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, bBlockInputPhysics) == 0x000009, "Member 'RPlayerPawn_AddTemporaryInputBlockers::bBlockInputPhysics' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, bBlockDash) == 0x00000A, "Member 'RPlayerPawn_AddTemporaryInputBlockers::bBlockDash' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, bBlockJump) == 0x00000B, "Member 'RPlayerPawn_AddTemporaryInputBlockers::bBlockJump' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, bBlockRotation) == 0x00000C, "Member 'RPlayerPawn_AddTemporaryInputBlockers::bBlockRotation' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_AddTemporaryInputBlockers, Duration) == 0x000010, "Member 'RPlayerPawn_AddTemporaryInputBlockers::Duration' has a wrong offset!");

// Function RGame.RPlayerPawn.AddWeaponVisibilityBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AddWeaponVisibilityBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AddWeaponVisibilityBlock) == 0x000004, "Wrong alignment on RPlayerPawn_AddWeaponVisibilityBlock");
static_assert(sizeof(RPlayerPawn_AddWeaponVisibilityBlock) == 0x000008, "Wrong size on RPlayerPawn_AddWeaponVisibilityBlock");
static_assert(offsetof(RPlayerPawn_AddWeaponVisibilityBlock, Key) == 0x000000, "Member 'RPlayerPawn_AddWeaponVisibilityBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.AnimEvent_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_AnimEvent_Multicast final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_AnimEvent_Multicast) == 0x000004, "Wrong alignment on RPlayerPawn_AnimEvent_Multicast");
static_assert(sizeof(RPlayerPawn_AnimEvent_Multicast) == 0x000008, "Wrong size on RPlayerPawn_AnimEvent_Multicast");
static_assert(offsetof(RPlayerPawn_AnimEvent_Multicast, Event) == 0x000000, "Member 'RPlayerPawn_AnimEvent_Multicast::Event' has a wrong offset!");

// Function RGame.RPlayerPawn.CallOnPlayerAreaAttack
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_CallOnPlayerAreaAttack final
{
public:
	TArray<struct FHitResult>                     Hits;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_CallOnPlayerAreaAttack) == 0x000008, "Wrong alignment on RPlayerPawn_CallOnPlayerAreaAttack");
static_assert(sizeof(RPlayerPawn_CallOnPlayerAreaAttack) == 0x000010, "Wrong size on RPlayerPawn_CallOnPlayerAreaAttack");
static_assert(offsetof(RPlayerPawn_CallOnPlayerAreaAttack, Hits) == 0x000000, "Member 'RPlayerPawn_CallOnPlayerAreaAttack::Hits' has a wrong offset!");

// Function RGame.RPlayerPawn.CallOnPlayerLesserAreaAttack
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_CallOnPlayerLesserAreaAttack final
{
public:
	TArray<struct FHitResult>                     Hits;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_CallOnPlayerLesserAreaAttack) == 0x000008, "Wrong alignment on RPlayerPawn_CallOnPlayerLesserAreaAttack");
static_assert(sizeof(RPlayerPawn_CallOnPlayerLesserAreaAttack) == 0x000010, "Wrong size on RPlayerPawn_CallOnPlayerLesserAreaAttack");
static_assert(offsetof(RPlayerPawn_CallOnPlayerLesserAreaAttack, Hits) == 0x000000, "Member 'RPlayerPawn_CallOnPlayerLesserAreaAttack::Hits' has a wrong offset!");

// Function RGame.RPlayerPawn.DisableActionsWhenDowned
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_DisableActionsWhenDowned final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_DisableActionsWhenDowned) == 0x000004, "Wrong alignment on RPlayerPawn_DisableActionsWhenDowned");
static_assert(sizeof(RPlayerPawn_DisableActionsWhenDowned) == 0x000008, "Wrong size on RPlayerPawn_DisableActionsWhenDowned");
static_assert(offsetof(RPlayerPawn_DisableActionsWhenDowned, Key) == 0x000000, "Member 'RPlayerPawn_DisableActionsWhenDowned::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.EnableActionsWhenRevived
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_EnableActionsWhenRevived final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_EnableActionsWhenRevived) == 0x000004, "Wrong alignment on RPlayerPawn_EnableActionsWhenRevived");
static_assert(sizeof(RPlayerPawn_EnableActionsWhenRevived) == 0x000008, "Wrong size on RPlayerPawn_EnableActionsWhenRevived");
static_assert(offsetof(RPlayerPawn_EnableActionsWhenRevived, Key) == 0x000000, "Member 'RPlayerPawn_EnableActionsWhenRevived::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.GetCharacterMaterials
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_GetCharacterMaterials final
{
public:
	TArray<class UMaterialInstanceDynamic*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetCharacterMaterials) == 0x000008, "Wrong alignment on RPlayerPawn_GetCharacterMaterials");
static_assert(sizeof(RPlayerPawn_GetCharacterMaterials) == 0x000010, "Wrong size on RPlayerPawn_GetCharacterMaterials");
static_assert(offsetof(RPlayerPawn_GetCharacterMaterials, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetCharacterMaterials::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetCrosshairWorldTransform
// 0x0030 (0x0030 - 0x0000)
struct RPlayerPawn_GetCrosshairWorldTransform final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetCrosshairWorldTransform) == 0x000008, "Wrong alignment on RPlayerPawn_GetCrosshairWorldTransform");
static_assert(sizeof(RPlayerPawn_GetCrosshairWorldTransform) == 0x000030, "Wrong size on RPlayerPawn_GetCrosshairWorldTransform");
static_assert(offsetof(RPlayerPawn_GetCrosshairWorldTransform, WorldLocation) == 0x000000, "Member 'RPlayerPawn_GetCrosshairWorldTransform::WorldLocation' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_GetCrosshairWorldTransform, WorldDirection) == 0x000018, "Member 'RPlayerPawn_GetCrosshairWorldTransform::WorldDirection' has a wrong offset!");

// Function RGame.RPlayerPawn.GetCurrentWeaponScript
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetCurrentWeaponScript final
{
public:
	class URGWeaponScript*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetCurrentWeaponScript) == 0x000008, "Wrong alignment on RPlayerPawn_GetCurrentWeaponScript");
static_assert(sizeof(RPlayerPawn_GetCurrentWeaponScript) == 0x000008, "Wrong size on RPlayerPawn_GetCurrentWeaponScript");
static_assert(offsetof(RPlayerPawn_GetCurrentWeaponScript, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetCurrentWeaponScript::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_GetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_GetMutatorRank) == 0x000008, "Wrong alignment on RPlayerPawn_GetMutatorRank");
static_assert(sizeof(RPlayerPawn_GetMutatorRank) == 0x000010, "Wrong size on RPlayerPawn_GetMutatorRank");
static_assert(offsetof(RPlayerPawn_GetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerPawn_GetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_GetMutatorRank, ReturnValue) == 0x000008, "Member 'RPlayerPawn_GetMutatorRank::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetMuzzleLocation
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_GetMuzzleLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetMuzzleLocation) == 0x000008, "Wrong alignment on RPlayerPawn_GetMuzzleLocation");
static_assert(sizeof(RPlayerPawn_GetMuzzleLocation) == 0x000018, "Wrong size on RPlayerPawn_GetMuzzleLocation");
static_assert(offsetof(RPlayerPawn_GetMuzzleLocation, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetMuzzleLocation::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetPawnViewTransform
// 0x0060 (0x0060 - 0x0000)
struct RPlayerPawn_GetPawnViewTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetPawnViewTransform) == 0x000010, "Wrong alignment on RPlayerPawn_GetPawnViewTransform");
static_assert(sizeof(RPlayerPawn_GetPawnViewTransform) == 0x000060, "Wrong size on RPlayerPawn_GetPawnViewTransform");
static_assert(offsetof(RPlayerPawn_GetPawnViewTransform, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetPawnViewTransform::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetPawnWorldViewTransform
// 0x0030 (0x0030 - 0x0000)
struct RPlayerPawn_GetPawnWorldViewTransform final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetPawnWorldViewTransform) == 0x000008, "Wrong alignment on RPlayerPawn_GetPawnWorldViewTransform");
static_assert(sizeof(RPlayerPawn_GetPawnWorldViewTransform) == 0x000030, "Wrong size on RPlayerPawn_GetPawnWorldViewTransform");
static_assert(offsetof(RPlayerPawn_GetPawnWorldViewTransform, WorldLocation) == 0x000000, "Member 'RPlayerPawn_GetPawnWorldViewTransform::WorldLocation' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_GetPawnWorldViewTransform, WorldDirection) == 0x000018, "Member 'RPlayerPawn_GetPawnWorldViewTransform::WorldDirection' has a wrong offset!");

// Function RGame.RPlayerPawn.GetPlayerColor
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_GetPlayerColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetPlayerColor) == 0x000004, "Wrong alignment on RPlayerPawn_GetPlayerColor");
static_assert(sizeof(RPlayerPawn_GetPlayerColor) == 0x000010, "Wrong size on RPlayerPawn_GetPlayerColor");
static_assert(offsetof(RPlayerPawn_GetPlayerColor, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetPlayerColor::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetReviveCastTime
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_GetReviveCastTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetReviveCastTime) == 0x000004, "Wrong alignment on RPlayerPawn_GetReviveCastTime");
static_assert(sizeof(RPlayerPawn_GetReviveCastTime) == 0x000004, "Wrong size on RPlayerPawn_GetReviveCastTime");
static_assert(offsetof(RPlayerPawn_GetReviveCastTime, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetReviveCastTime::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetReviveHealthCostPercentage
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_GetReviveHealthCostPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetReviveHealthCostPercentage) == 0x000004, "Wrong alignment on RPlayerPawn_GetReviveHealthCostPercentage");
static_assert(sizeof(RPlayerPawn_GetReviveHealthCostPercentage) == 0x000004, "Wrong size on RPlayerPawn_GetReviveHealthCostPercentage");
static_assert(offsetof(RPlayerPawn_GetReviveHealthCostPercentage, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetReviveHealthCostPercentage::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_HandleInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_HandleInputMethodChanged) == 0x000001, "Wrong alignment on RPlayerPawn_HandleInputMethodChanged");
static_assert(sizeof(RPlayerPawn_HandleInputMethodChanged) == 0x000001, "Wrong size on RPlayerPawn_HandleInputMethodChanged");
static_assert(offsetof(RPlayerPawn_HandleInputMethodChanged, NewInputType) == 0x000000, "Member 'RPlayerPawn_HandleInputMethodChanged::NewInputType' has a wrong offset!");

// Function RGame.RPlayerPawn.HasGameplayTag
// 0x000C (0x000C - 0x0000)
struct RPlayerPawn_HasGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_HasGameplayTag) == 0x000004, "Wrong alignment on RPlayerPawn_HasGameplayTag");
static_assert(sizeof(RPlayerPawn_HasGameplayTag) == 0x00000C, "Wrong size on RPlayerPawn_HasGameplayTag");
static_assert(offsetof(RPlayerPawn_HasGameplayTag, Tag) == 0x000000, "Member 'RPlayerPawn_HasGameplayTag::Tag' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_HasGameplayTag, ReturnValue) == 0x000008, "Member 'RPlayerPawn_HasGameplayTag::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsInEmoteState
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsInEmoteState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsInEmoteState) == 0x000001, "Wrong alignment on RPlayerPawn_IsInEmoteState");
static_assert(sizeof(RPlayerPawn_IsInEmoteState) == 0x000001, "Wrong size on RPlayerPawn_IsInEmoteState");
static_assert(offsetof(RPlayerPawn_IsInEmoteState, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsInEmoteState::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.OnAbilityActivate
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_OnAbilityActivate final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnAbilityActivate) == 0x000004, "Wrong alignment on RPlayerPawn_OnAbilityActivate");
static_assert(sizeof(RPlayerPawn_OnAbilityActivate) == 0x000004, "Wrong size on RPlayerPawn_OnAbilityActivate");
static_assert(offsetof(RPlayerPawn_OnAbilityActivate, AbilityIndex) == 0x000000, "Member 'RPlayerPawn_OnAbilityActivate::AbilityIndex' has a wrong offset!");

// Function RGame.RPlayerPawn.OnAbilityReleased
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_OnAbilityReleased final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnAbilityReleased) == 0x000004, "Wrong alignment on RPlayerPawn_OnAbilityReleased");
static_assert(sizeof(RPlayerPawn_OnAbilityReleased) == 0x000004, "Wrong size on RPlayerPawn_OnAbilityReleased");
static_assert(offsetof(RPlayerPawn_OnAbilityReleased, AbilityIndex) == 0x000000, "Member 'RPlayerPawn_OnAbilityReleased::AbilityIndex' has a wrong offset!");

// Function RGame.RPlayerPawn.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnEnemyKilled final
{
public:
	class ARNPCPawnBase*                          EnemyPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnEnemyKilled) == 0x000008, "Wrong alignment on RPlayerPawn_OnEnemyKilled");
static_assert(sizeof(RPlayerPawn_OnEnemyKilled) == 0x000008, "Wrong size on RPlayerPawn_OnEnemyKilled");
static_assert(offsetof(RPlayerPawn_OnEnemyKilled, EnemyPawn) == 0x000000, "Member 'RPlayerPawn_OnEnemyKilled::EnemyPawn' has a wrong offset!");

// Function RGame.RPlayerPawn.OnPlayerTeleported_Multicast
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_OnPlayerTeleported_Multicast final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnPlayerTeleported_Multicast) == 0x000008, "Wrong alignment on RPlayerPawn_OnPlayerTeleported_Multicast");
static_assert(sizeof(RPlayerPawn_OnPlayerTeleported_Multicast) == 0x000018, "Wrong size on RPlayerPawn_OnPlayerTeleported_Multicast");
static_assert(offsetof(RPlayerPawn_OnPlayerTeleported_Multicast, Location) == 0x000000, "Member 'RPlayerPawn_OnPlayerTeleported_Multicast::Location' has a wrong offset!");

// Function RGame.RPlayerPawn.OnPlayerWeaponModFired
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_OnPlayerWeaponModFired final
{
public:
	bool                                          IsPrimaryMod;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnPlayerWeaponModFired) == 0x000001, "Wrong alignment on RPlayerPawn_OnPlayerWeaponModFired");
static_assert(sizeof(RPlayerPawn_OnPlayerWeaponModFired) == 0x000001, "Wrong size on RPlayerPawn_OnPlayerWeaponModFired");
static_assert(offsetof(RPlayerPawn_OnPlayerWeaponModFired, IsPrimaryMod) == 0x000000, "Member 'RPlayerPawn_OnPlayerWeaponModFired::IsPrimaryMod' has a wrong offset!");

// Function RGame.RPlayerPawn.OnPostProcessVolumeAssigned
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnPostProcessVolumeAssigned final
{
public:
	class APostProcessVolume*                     Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnPostProcessVolumeAssigned) == 0x000008, "Wrong alignment on RPlayerPawn_OnPostProcessVolumeAssigned");
static_assert(sizeof(RPlayerPawn_OnPostProcessVolumeAssigned) == 0x000008, "Wrong size on RPlayerPawn_OnPostProcessVolumeAssigned");
static_assert(offsetof(RPlayerPawn_OnPostProcessVolumeAssigned, Volume) == 0x000000, "Member 'RPlayerPawn_OnPostProcessVolumeAssigned::Volume' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivedCastFinished_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnRevivedCastFinished_Multicast final
{
public:
	class ARPlayerPawn*                           RevivingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnRevivedCastFinished_Multicast) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivedCastFinished_Multicast");
static_assert(sizeof(RPlayerPawn_OnRevivedCastFinished_Multicast) == 0x000008, "Wrong size on RPlayerPawn_OnRevivedCastFinished_Multicast");
static_assert(offsetof(RPlayerPawn_OnRevivedCastFinished_Multicast, RevivingPlayer) == 0x000000, "Member 'RPlayerPawn_OnRevivedCastFinished_Multicast::RevivingPlayer' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivedCastInterrupted_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnRevivedCastInterrupted_Multicast final
{
public:
	class ARPlayerPawn*                           RevivingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnRevivedCastInterrupted_Multicast) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivedCastInterrupted_Multicast");
static_assert(sizeof(RPlayerPawn_OnRevivedCastInterrupted_Multicast) == 0x000008, "Wrong size on RPlayerPawn_OnRevivedCastInterrupted_Multicast");
static_assert(offsetof(RPlayerPawn_OnRevivedCastInterrupted_Multicast, RevivingPlayer) == 0x000000, "Member 'RPlayerPawn_OnRevivedCastInterrupted_Multicast::RevivingPlayer' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivedCastStarted_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_OnRevivedCastStarted_Multicast final
{
public:
	class ARPlayerPawn*                           RevivingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CastTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCastTime;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnRevivedCastStarted_Multicast) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivedCastStarted_Multicast");
static_assert(sizeof(RPlayerPawn_OnRevivedCastStarted_Multicast) == 0x000010, "Wrong size on RPlayerPawn_OnRevivedCastStarted_Multicast");
static_assert(offsetof(RPlayerPawn_OnRevivedCastStarted_Multicast, RevivingPlayer) == 0x000000, "Member 'RPlayerPawn_OnRevivedCastStarted_Multicast::RevivingPlayer' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_OnRevivedCastStarted_Multicast, CastTime) == 0x000008, "Member 'RPlayerPawn_OnRevivedCastStarted_Multicast::CastTime' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_OnRevivedCastStarted_Multicast, CurrentCastTime) == 0x00000C, "Member 'RPlayerPawn_OnRevivedCastStarted_Multicast::CurrentCastTime' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivingPlayerHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RPlayerPawn_OnRevivingPlayerHealthDepleted final
{
public:
	class URHealthComponent*                      RevivingPlayerHealthComponent;                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnRevivingPlayerHealthDepleted) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivingPlayerHealthDepleted");
static_assert(sizeof(RPlayerPawn_OnRevivingPlayerHealthDepleted) == 0x0000C8, "Wrong size on RPlayerPawn_OnRevivingPlayerHealthDepleted");
static_assert(offsetof(RPlayerPawn_OnRevivingPlayerHealthDepleted, RevivingPlayerHealthComponent) == 0x000000, "Member 'RPlayerPawn_OnRevivingPlayerHealthDepleted::RevivingPlayerHealthComponent' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_OnRevivingPlayerHealthDepleted, DamageEventData) == 0x000008, "Member 'RPlayerPawn_OnRevivingPlayerHealthDepleted::DamageEventData' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivingPlayerMovement
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnRevivingPlayerMovement final
{
public:
	class ARPawnBase*                             Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnRevivingPlayerMovement) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivingPlayerMovement");
static_assert(sizeof(RPlayerPawn_OnRevivingPlayerMovement) == 0x000008, "Wrong size on RPlayerPawn_OnRevivingPlayerMovement");
static_assert(offsetof(RPlayerPawn_OnRevivingPlayerMovement, Pawn) == 0x000000, "Member 'RPlayerPawn_OnRevivingPlayerMovement::Pawn' has a wrong offset!");

// Function RGame.RPlayerPawn.OnRevivingPlayerWeaponModFired
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_OnRevivingPlayerWeaponModFired final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPrimaryFire;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_OnRevivingPlayerWeaponModFired) == 0x000008, "Wrong alignment on RPlayerPawn_OnRevivingPlayerWeaponModFired");
static_assert(sizeof(RPlayerPawn_OnRevivingPlayerWeaponModFired) == 0x000010, "Wrong size on RPlayerPawn_OnRevivingPlayerWeaponModFired");
static_assert(offsetof(RPlayerPawn_OnRevivingPlayerWeaponModFired, Player) == 0x000000, "Member 'RPlayerPawn_OnRevivingPlayerWeaponModFired::Player' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_OnRevivingPlayerWeaponModFired, IsPrimaryFire) == 0x000008, "Member 'RPlayerPawn_OnRevivingPlayerWeaponModFired::IsPrimaryFire' has a wrong offset!");

// Function RGame.RPlayerPawn.OnSegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnSegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnSegmentCompleted) == 0x000008, "Wrong alignment on RPlayerPawn_OnSegmentCompleted");
static_assert(sizeof(RPlayerPawn_OnSegmentCompleted) == 0x000008, "Wrong size on RPlayerPawn_OnSegmentCompleted");
static_assert(offsetof(RPlayerPawn_OnSegmentCompleted, EnemySpawnAreaSegment) == 0x000000, "Member 'RPlayerPawn_OnSegmentCompleted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RPlayerPawn.OnSegmentStarted
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnSegmentStarted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnSegmentStarted) == 0x000008, "Wrong alignment on RPlayerPawn_OnSegmentStarted");
static_assert(sizeof(RPlayerPawn_OnSegmentStarted) == 0x000008, "Wrong size on RPlayerPawn_OnSegmentStarted");
static_assert(offsetof(RPlayerPawn_OnSegmentStarted, EnemySpawnAreaSegment) == 0x000000, "Member 'RPlayerPawn_OnSegmentStarted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RPlayerPawn.OnWidgetPushed
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_OnWidgetPushed final
{
public:
	class URCommonActivatableWidget*              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_OnWidgetPushed) == 0x000008, "Wrong alignment on RPlayerPawn_OnWidgetPushed");
static_assert(sizeof(RPlayerPawn_OnWidgetPushed) == 0x000008, "Wrong size on RPlayerPawn_OnWidgetPushed");
static_assert(offsetof(RPlayerPawn_OnWidgetPushed, Widget) == 0x000000, "Member 'RPlayerPawn_OnWidgetPushed::Widget' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayCameraShakeIfLocalPlayer
// 0x0028 (0x0028 - 0x0000)
struct RPlayerPawn_PlayCameraShakeIfLocalPlayer final
{
public:
	TSubclassOf<class UCameraShakeBase>           ShakeClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         SystemTemplate;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAutoPoolNiagara;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolingMethod;                                     // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_PlayCameraShakeIfLocalPlayer) == 0x000008, "Wrong alignment on RPlayerPawn_PlayCameraShakeIfLocalPlayer");
static_assert(sizeof(RPlayerPawn_PlayCameraShakeIfLocalPlayer) == 0x000028, "Wrong size on RPlayerPawn_PlayCameraShakeIfLocalPlayer");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, ShakeClass) == 0x000000, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::ShakeClass' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, DecalMaterial) == 0x000008, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::DecalMaterial' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, SystemTemplate) == 0x000010, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::SystemTemplate' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, Sound) == 0x000018, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::Sound' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, ShouldAutoPoolNiagara) == 0x000020, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::ShouldAutoPoolNiagara' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, PoolingMethod) == 0x000021, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::PoolingMethod' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayCameraShakeIfLocalPlayer, ReturnValue) == 0x000022, "Member 'RPlayerPawn_PlayCameraShakeIfLocalPlayer::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayDoorTeleportTimeline
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_PlayDoorTeleportTimeline final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayDoorTeleportTimeline) == 0x000004, "Wrong alignment on RPlayerPawn_PlayDoorTeleportTimeline");
static_assert(sizeof(RPlayerPawn_PlayDoorTeleportTimeline) == 0x000004, "Wrong size on RPlayerPawn_PlayDoorTeleportTimeline");
static_assert(offsetof(RPlayerPawn_PlayDoorTeleportTimeline, Duration) == 0x000000, "Member 'RPlayerPawn_PlayDoorTeleportTimeline::Duration' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayEmote
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_PlayEmote final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayEmote) == 0x000004, "Wrong alignment on RPlayerPawn_PlayEmote");
static_assert(sizeof(RPlayerPawn_PlayEmote) == 0x000008, "Wrong size on RPlayerPawn_PlayEmote");
static_assert(offsetof(RPlayerPawn_PlayEmote, EmoteName) == 0x000000, "Member 'RPlayerPawn_PlayEmote::EmoteName' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayEmote_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_PlayEmote_Multicast final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayEmote_Multicast) == 0x000004, "Wrong alignment on RPlayerPawn_PlayEmote_Multicast");
static_assert(sizeof(RPlayerPawn_PlayEmote_Multicast) == 0x000008, "Wrong size on RPlayerPawn_PlayEmote_Multicast");
static_assert(offsetof(RPlayerPawn_PlayEmote_Multicast, EmoteName) == 0x000000, "Member 'RPlayerPawn_PlayEmote_Multicast::EmoteName' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayEmote_Server
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_PlayEmote_Server final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayEmote_Server) == 0x000004, "Wrong alignment on RPlayerPawn_PlayEmote_Server");
static_assert(sizeof(RPlayerPawn_PlayEmote_Server) == 0x000008, "Wrong size on RPlayerPawn_PlayEmote_Server");
static_assert(offsetof(RPlayerPawn_PlayEmote_Server, EmoteName) == 0x000000, "Member 'RPlayerPawn_PlayEmote_Server::EmoteName' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayEmoteMontage
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_PlayEmoteMontage final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayEmoteMontage) == 0x000004, "Wrong alignment on RPlayerPawn_PlayEmoteMontage");
static_assert(sizeof(RPlayerPawn_PlayEmoteMontage) == 0x000008, "Wrong size on RPlayerPawn_PlayEmoteMontage");
static_assert(offsetof(RPlayerPawn_PlayEmoteMontage, EmoteName) == 0x000000, "Member 'RPlayerPawn_PlayEmoteMontage::EmoteName' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayPostProcessDamageTaken
// 0x00C0 (0x00C0 - 0x0000)
struct RPlayerPawn_PlayPostProcessDamageTaken final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayPostProcessDamageTaken) == 0x000008, "Wrong alignment on RPlayerPawn_PlayPostProcessDamageTaken");
static_assert(sizeof(RPlayerPawn_PlayPostProcessDamageTaken) == 0x0000C0, "Wrong size on RPlayerPawn_PlayPostProcessDamageTaken");
static_assert(offsetof(RPlayerPawn_PlayPostProcessDamageTaken, DamageCombatEvent) == 0x000000, "Member 'RPlayerPawn_PlayPostProcessDamageTaken::DamageCombatEvent' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayVignetteTimeline
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_PlayVignetteTimeline final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntensityMultiplier;                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayVignetteTimeline) == 0x000004, "Wrong alignment on RPlayerPawn_PlayVignetteTimeline");
static_assert(sizeof(RPlayerPawn_PlayVignetteTimeline) == 0x000008, "Wrong size on RPlayerPawn_PlayVignetteTimeline");
static_assert(offsetof(RPlayerPawn_PlayVignetteTimeline, Duration) == 0x000000, "Member 'RPlayerPawn_PlayVignetteTimeline::Duration' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayVignetteTimeline, IntensityMultiplier) == 0x000004, "Member 'RPlayerPawn_PlayVignetteTimeline::IntensityMultiplier' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayVoiceLine
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_PlayVoiceLine final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoiceQueryDataPair>            EventData;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayVoiceLine) == 0x000008, "Wrong alignment on RPlayerPawn_PlayVoiceLine");
static_assert(sizeof(RPlayerPawn_PlayVoiceLine) == 0x000018, "Wrong size on RPlayerPawn_PlayVoiceLine");
static_assert(offsetof(RPlayerPawn_PlayVoiceLine, Event) == 0x000000, "Member 'RPlayerPawn_PlayVoiceLine::Event' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayVoiceLine, EventData) == 0x000008, "Member 'RPlayerPawn_PlayVoiceLine::EventData' has a wrong offset!");

// Function RGame.RPlayerPawn.PlayVoiceLine_Server
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_PlayVoiceLine_Server final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVoiceQueryDataPair>            EventData;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_PlayVoiceLine_Server) == 0x000008, "Wrong alignment on RPlayerPawn_PlayVoiceLine_Server");
static_assert(sizeof(RPlayerPawn_PlayVoiceLine_Server) == 0x000018, "Wrong size on RPlayerPawn_PlayVoiceLine_Server");
static_assert(offsetof(RPlayerPawn_PlayVoiceLine_Server, Event) == 0x000000, "Member 'RPlayerPawn_PlayVoiceLine_Server::Event' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_PlayVoiceLine_Server, EventData) == 0x000008, "Member 'RPlayerPawn_PlayVoiceLine_Server::EventData' has a wrong offset!");

// Function RGame.RPlayerPawn.RemoveGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_RemoveGameplayTag) == 0x000008, "Wrong alignment on RPlayerPawn_RemoveGameplayTag");
static_assert(sizeof(RPlayerPawn_RemoveGameplayTag) == 0x000010, "Wrong size on RPlayerPawn_RemoveGameplayTag");
static_assert(offsetof(RPlayerPawn_RemoveGameplayTag, GameplayTag) == 0x000000, "Member 'RPlayerPawn_RemoveGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_RemoveGameplayTag, TimerHandle) == 0x000008, "Member 'RPlayerPawn_RemoveGameplayTag::TimerHandle' has a wrong offset!");

// Function RGame.RPlayerPawn.RemovePingInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_RemovePingInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_RemovePingInputBlock) == 0x000004, "Wrong alignment on RPlayerPawn_RemovePingInputBlock");
static_assert(sizeof(RPlayerPawn_RemovePingInputBlock) == 0x000008, "Wrong size on RPlayerPawn_RemovePingInputBlock");
static_assert(offsetof(RPlayerPawn_RemovePingInputBlock, Key) == 0x000000, "Member 'RPlayerPawn_RemovePingInputBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.RemoveRespawnLocationUpdateBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_RemoveRespawnLocationUpdateBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_RemoveRespawnLocationUpdateBlock) == 0x000004, "Wrong alignment on RPlayerPawn_RemoveRespawnLocationUpdateBlock");
static_assert(sizeof(RPlayerPawn_RemoveRespawnLocationUpdateBlock) == 0x000008, "Wrong size on RPlayerPawn_RemoveRespawnLocationUpdateBlock");
static_assert(offsetof(RPlayerPawn_RemoveRespawnLocationUpdateBlock, Key) == 0x000000, "Member 'RPlayerPawn_RemoveRespawnLocationUpdateBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.RemoveRotationInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_RemoveRotationInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_RemoveRotationInputBlock) == 0x000004, "Wrong alignment on RPlayerPawn_RemoveRotationInputBlock");
static_assert(sizeof(RPlayerPawn_RemoveRotationInputBlock) == 0x000008, "Wrong size on RPlayerPawn_RemoveRotationInputBlock");
static_assert(offsetof(RPlayerPawn_RemoveRotationInputBlock, Key) == 0x000000, "Member 'RPlayerPawn_RemoveRotationInputBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.RemoveWeaponVisibilityBlock
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_RemoveWeaponVisibilityBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_RemoveWeaponVisibilityBlock) == 0x000004, "Wrong alignment on RPlayerPawn_RemoveWeaponVisibilityBlock");
static_assert(sizeof(RPlayerPawn_RemoveWeaponVisibilityBlock) == 0x000008, "Wrong size on RPlayerPawn_RemoveWeaponVisibilityBlock");
static_assert(offsetof(RPlayerPawn_RemoveWeaponVisibilityBlock, Key) == 0x000000, "Member 'RPlayerPawn_RemoveWeaponVisibilityBlock::Key' has a wrong offset!");

// Function RGame.RPlayerPawn.ResetEnvironmentFX
// 0x000C (0x000C - 0x0000)
struct RPlayerPawn_ResetEnvironmentFX final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ResetEnvironmentFX) == 0x000004, "Wrong alignment on RPlayerPawn_ResetEnvironmentFX");
static_assert(sizeof(RPlayerPawn_ResetEnvironmentFX) == 0x00000C, "Wrong size on RPlayerPawn_ResetEnvironmentFX");
static_assert(offsetof(RPlayerPawn_ResetEnvironmentFX, ParameterName) == 0x000000, "Member 'RPlayerPawn_ResetEnvironmentFX::ParameterName' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ResetEnvironmentFX, Param) == 0x000008, "Member 'RPlayerPawn_ResetEnvironmentFX::Param' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnAbilityActivate
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnAbilityActivate final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnAbilityActivate) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnAbilityActivate");
static_assert(sizeof(RPlayerPawn_ServerOnAbilityActivate) == 0x000004, "Wrong size on RPlayerPawn_ServerOnAbilityActivate");
static_assert(offsetof(RPlayerPawn_ServerOnAbilityActivate, AbilityIndex) == 0x000000, "Member 'RPlayerPawn_ServerOnAbilityActivate::AbilityIndex' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnAbilityReleased
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnAbilityReleased final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnAbilityReleased) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnAbilityReleased");
static_assert(sizeof(RPlayerPawn_ServerOnAbilityReleased) == 0x000004, "Wrong size on RPlayerPawn_ServerOnAbilityReleased");
static_assert(offsetof(RPlayerPawn_ServerOnAbilityReleased, AbilityIndex) == 0x000000, "Member 'RPlayerPawn_ServerOnAbilityReleased::AbilityIndex' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnFire
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnFire) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnFire");
static_assert(sizeof(RPlayerPawn_ServerOnFire) == 0x000004, "Wrong size on RPlayerPawn_ServerOnFire");
static_assert(offsetof(RPlayerPawn_ServerOnFire, CurrentAmmo) == 0x000000, "Member 'RPlayerPawn_ServerOnFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnReleaseFire
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnReleaseFire final
{
public:
	uint32                                        LastProjectileId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnReleaseFire) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnReleaseFire");
static_assert(sizeof(RPlayerPawn_ServerOnReleaseFire) == 0x000004, "Wrong size on RPlayerPawn_ServerOnReleaseFire");
static_assert(offsetof(RPlayerPawn_ServerOnReleaseFire, LastProjectileId) == 0x000000, "Member 'RPlayerPawn_ServerOnReleaseFire::LastProjectileId' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnReleaseSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnReleaseSecondaryFire final
{
public:
	uint32                                        LastProjectileId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnReleaseSecondaryFire) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnReleaseSecondaryFire");
static_assert(sizeof(RPlayerPawn_ServerOnReleaseSecondaryFire) == 0x000004, "Wrong size on RPlayerPawn_ServerOnReleaseSecondaryFire");
static_assert(offsetof(RPlayerPawn_ServerOnReleaseSecondaryFire, LastProjectileId) == 0x000000, "Member 'RPlayerPawn_ServerOnReleaseSecondaryFire::LastProjectileId' has a wrong offset!");

// Function RGame.RPlayerPawn.ServerOnSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_ServerOnSecondaryFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ServerOnSecondaryFire) == 0x000004, "Wrong alignment on RPlayerPawn_ServerOnSecondaryFire");
static_assert(sizeof(RPlayerPawn_ServerOnSecondaryFire) == 0x000004, "Wrong size on RPlayerPawn_ServerOnSecondaryFire");
static_assert(offsetof(RPlayerPawn_ServerOnSecondaryFire, CurrentAmmo) == 0x000000, "Member 'RPlayerPawn_ServerOnSecondaryFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RPlayerPawn.SetFOV
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_SetFOV final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SetFOV) == 0x000004, "Wrong alignment on RPlayerPawn_SetFOV");
static_assert(sizeof(RPlayerPawn_SetFOV) == 0x000004, "Wrong size on RPlayerPawn_SetFOV");
static_assert(offsetof(RPlayerPawn_SetFOV, FOV) == 0x000000, "Member 'RPlayerPawn_SetFOV::FOV' has a wrong offset!");

// Function RGame.RPlayerPawn.SetLocationAndRotation_Multicast
// 0x0030 (0x0030 - 0x0000)
struct RPlayerPawn_SetLocationAndRotation_Multicast final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SetLocationAndRotation_Multicast) == 0x000008, "Wrong alignment on RPlayerPawn_SetLocationAndRotation_Multicast");
static_assert(sizeof(RPlayerPawn_SetLocationAndRotation_Multicast) == 0x000030, "Wrong size on RPlayerPawn_SetLocationAndRotation_Multicast");
static_assert(offsetof(RPlayerPawn_SetLocationAndRotation_Multicast, NewLocation) == 0x000000, "Member 'RPlayerPawn_SetLocationAndRotation_Multicast::NewLocation' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SetLocationAndRotation_Multicast, NewRotation) == 0x000018, "Member 'RPlayerPawn_SetLocationAndRotation_Multicast::NewRotation' has a wrong offset!");

// Function RGame.RPlayerPawn.SetLookUpRate
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_SetLookUpRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SetLookUpRate) == 0x000004, "Wrong alignment on RPlayerPawn_SetLookUpRate");
static_assert(sizeof(RPlayerPawn_SetLookUpRate) == 0x000004, "Wrong size on RPlayerPawn_SetLookUpRate");
static_assert(offsetof(RPlayerPawn_SetLookUpRate, Value) == 0x000000, "Member 'RPlayerPawn_SetLookUpRate::Value' has a wrong offset!");

// Function RGame.RPlayerPawn.SetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_SetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewRank;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_SetMutatorRank) == 0x000008, "Wrong alignment on RPlayerPawn_SetMutatorRank");
static_assert(sizeof(RPlayerPawn_SetMutatorRank) == 0x000010, "Wrong size on RPlayerPawn_SetMutatorRank");
static_assert(offsetof(RPlayerPawn_SetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerPawn_SetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SetMutatorRank, NewRank) == 0x000008, "Member 'RPlayerPawn_SetMutatorRank::NewRank' has a wrong offset!");

// Function RGame.RPlayerPawn.SetSyringeVisibility
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_SetSyringeVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SetSyringeVisibility) == 0x000008, "Wrong alignment on RPlayerPawn_SetSyringeVisibility");
static_assert(sizeof(RPlayerPawn_SetSyringeVisibility) == 0x000010, "Wrong size on RPlayerPawn_SetSyringeVisibility");
static_assert(offsetof(RPlayerPawn_SetSyringeVisibility, Visibility) == 0x000000, "Member 'RPlayerPawn_SetSyringeVisibility::Visibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SetSyringeVisibility, ReturnValue) == 0x000008, "Member 'RPlayerPawn_SetSyringeVisibility::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.SetTurnRate
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_SetTurnRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SetTurnRate) == 0x000004, "Wrong alignment on RPlayerPawn_SetTurnRate");
static_assert(sizeof(RPlayerPawn_SetTurnRate) == 0x000004, "Wrong size on RPlayerPawn_SetTurnRate");
static_assert(offsetof(RPlayerPawn_SetTurnRate, Value) == 0x000000, "Member 'RPlayerPawn_SetTurnRate::Value' has a wrong offset!");

// Function RGame.RPlayerPawn.ShowDownedHighlighting
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_ShowDownedHighlighting final
{
public:
	bool                                          bNewShow;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ShowDownedHighlighting) == 0x000001, "Wrong alignment on RPlayerPawn_ShowDownedHighlighting");
static_assert(sizeof(RPlayerPawn_ShowDownedHighlighting) == 0x000001, "Wrong size on RPlayerPawn_ShowDownedHighlighting");
static_assert(offsetof(RPlayerPawn_ShowDownedHighlighting, bNewShow) == 0x000000, "Member 'RPlayerPawn_ShowDownedHighlighting::bNewShow' has a wrong offset!");

// Function RGame.RPlayerPawn.SimulateMoveForward
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_SimulateMoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SimulateMoveForward) == 0x000004, "Wrong alignment on RPlayerPawn_SimulateMoveForward");
static_assert(sizeof(RPlayerPawn_SimulateMoveForward) == 0x000004, "Wrong size on RPlayerPawn_SimulateMoveForward");
static_assert(offsetof(RPlayerPawn_SimulateMoveForward, Value) == 0x000000, "Member 'RPlayerPawn_SimulateMoveForward::Value' has a wrong offset!");

// Function RGame.RPlayerPawn.SpawnVoiceLine
// 0x0080 (0x0080 - 0x0000)
struct RPlayerPawn_SpawnVoiceLine final
{
public:
	struct FVoiceData                             VoiceOverData;                                     // 0x0000(0x0078)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0078(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_SpawnVoiceLine) == 0x000008, "Wrong alignment on RPlayerPawn_SpawnVoiceLine");
static_assert(sizeof(RPlayerPawn_SpawnVoiceLine) == 0x000080, "Wrong size on RPlayerPawn_SpawnVoiceLine");
static_assert(offsetof(RPlayerPawn_SpawnVoiceLine, VoiceOverData) == 0x000000, "Member 'RPlayerPawn_SpawnVoiceLine::VoiceOverData' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SpawnVoiceLine, Priority) == 0x000078, "Member 'RPlayerPawn_SpawnVoiceLine::Priority' has a wrong offset!");

// Function RGame.RPlayerPawn.SpawnVoiceLine_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_SpawnVoiceLine_Multicast final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VariationsIndex;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SpawnVoiceLine_Multicast) == 0x000004, "Wrong alignment on RPlayerPawn_SpawnVoiceLine_Multicast");
static_assert(sizeof(RPlayerPawn_SpawnVoiceLine_Multicast) == 0x000010, "Wrong size on RPlayerPawn_SpawnVoiceLine_Multicast");
static_assert(offsetof(RPlayerPawn_SpawnVoiceLine_Multicast, Event) == 0x000000, "Member 'RPlayerPawn_SpawnVoiceLine_Multicast::Event' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SpawnVoiceLine_Multicast, Priority) == 0x000008, "Member 'RPlayerPawn_SpawnVoiceLine_Multicast::Priority' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SpawnVoiceLine_Multicast, VariationsIndex) == 0x00000C, "Member 'RPlayerPawn_SpawnVoiceLine_Multicast::VariationsIndex' has a wrong offset!");

// Function RGame.RPlayerPawn.StartFadeOutTeleport
// 0x0004 (0x0004 - 0x0000)
struct RPlayerPawn_StartFadeOutTeleport final
{
public:
	float                                         FadeTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_StartFadeOutTeleport) == 0x000004, "Wrong alignment on RPlayerPawn_StartFadeOutTeleport");
static_assert(sizeof(RPlayerPawn_StartFadeOutTeleport) == 0x000004, "Wrong size on RPlayerPawn_StartFadeOutTeleport");
static_assert(offsetof(RPlayerPawn_StartFadeOutTeleport, FadeTime) == 0x000000, "Member 'RPlayerPawn_StartFadeOutTeleport::FadeTime' has a wrong offset!");

// Function RGame.RPlayerPawn.StartVoiceLineCooldown
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_StartVoiceLineCooldown final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_StartVoiceLineCooldown) == 0x000004, "Wrong alignment on RPlayerPawn_StartVoiceLineCooldown");
static_assert(sizeof(RPlayerPawn_StartVoiceLineCooldown) == 0x000008, "Wrong size on RPlayerPawn_StartVoiceLineCooldown");
static_assert(offsetof(RPlayerPawn_StartVoiceLineCooldown, Time) == 0x000000, "Member 'RPlayerPawn_StartVoiceLineCooldown::Time' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_StartVoiceLineCooldown, Priority) == 0x000004, "Member 'RPlayerPawn_StartVoiceLineCooldown::Priority' has a wrong offset!");

// Function RGame.RPlayerPawn.SweepMeleeHitActors
// 0x0018 (0x0018 - 0x0000)
struct RPlayerPawn_SweepMeleeHitActors final
{
public:
	float                                         RangeOverride;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_SweepMeleeHitActors) == 0x000008, "Wrong alignment on RPlayerPawn_SweepMeleeHitActors");
static_assert(sizeof(RPlayerPawn_SweepMeleeHitActors) == 0x000018, "Wrong size on RPlayerPawn_SweepMeleeHitActors");
static_assert(offsetof(RPlayerPawn_SweepMeleeHitActors, RangeOverride) == 0x000000, "Member 'RPlayerPawn_SweepMeleeHitActors::RangeOverride' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_SweepMeleeHitActors, ReturnValue) == 0x000008, "Member 'RPlayerPawn_SweepMeleeHitActors::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.ToggleAbilityVisibility
// 0x0003 (0x0003 - 0x0000)
struct RPlayerPawn_ToggleAbilityVisibility final
{
public:
	bool                                          AnchorVisibility;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DropShieldVisibility;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AtlanteanCubeVisibility;                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ToggleAbilityVisibility) == 0x000001, "Wrong alignment on RPlayerPawn_ToggleAbilityVisibility");
static_assert(sizeof(RPlayerPawn_ToggleAbilityVisibility) == 0x000003, "Wrong size on RPlayerPawn_ToggleAbilityVisibility");
static_assert(offsetof(RPlayerPawn_ToggleAbilityVisibility, AnchorVisibility) == 0x000000, "Member 'RPlayerPawn_ToggleAbilityVisibility::AnchorVisibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleAbilityVisibility, DropShieldVisibility) == 0x000001, "Member 'RPlayerPawn_ToggleAbilityVisibility::DropShieldVisibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleAbilityVisibility, AtlanteanCubeVisibility) == 0x000002, "Member 'RPlayerPawn_ToggleAbilityVisibility::AtlanteanCubeVisibility' has a wrong offset!");

// Function RGame.RPlayerPawn.ToggleElementalPostProcessVisual
// 0x000C (0x000C - 0x0000)
struct RPlayerPawn_ToggleElementalPostProcessVisual final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ToggleElementalPostProcessVisual) == 0x000004, "Wrong alignment on RPlayerPawn_ToggleElementalPostProcessVisual");
static_assert(sizeof(RPlayerPawn_ToggleElementalPostProcessVisual) == 0x00000C, "Wrong size on RPlayerPawn_ToggleElementalPostProcessVisual");
static_assert(offsetof(RPlayerPawn_ToggleElementalPostProcessVisual, ParameterName) == 0x000000, "Member 'RPlayerPawn_ToggleElementalPostProcessVisual::ParameterName' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleElementalPostProcessVisual, Value) == 0x000008, "Member 'RPlayerPawn_ToggleElementalPostProcessVisual::Value' has a wrong offset!");

// Function RGame.RPlayerPawn.TogglePayload
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_TogglePayload final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_TogglePayload) == 0x000001, "Wrong alignment on RPlayerPawn_TogglePayload");
static_assert(sizeof(RPlayerPawn_TogglePayload) == 0x000001, "Wrong size on RPlayerPawn_TogglePayload");
static_assert(offsetof(RPlayerPawn_TogglePayload, Active) == 0x000000, "Member 'RPlayerPawn_TogglePayload::Active' has a wrong offset!");

// Function RGame.RPlayerPawn.ToggleUnderwaterPostProcessVisual
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_ToggleUnderwaterPostProcessVisual final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ToggleUnderwaterPostProcessVisual) == 0x000001, "Wrong alignment on RPlayerPawn_ToggleUnderwaterPostProcessVisual");
static_assert(sizeof(RPlayerPawn_ToggleUnderwaterPostProcessVisual) == 0x000001, "Wrong size on RPlayerPawn_ToggleUnderwaterPostProcessVisual");
static_assert(offsetof(RPlayerPawn_ToggleUnderwaterPostProcessVisual, bVisible) == 0x000000, "Member 'RPlayerPawn_ToggleUnderwaterPostProcessVisual::bVisible' has a wrong offset!");

// Function RGame.RPlayerPawn.ToggleWeaponVisibilities
// 0x0010 (0x0010 - 0x0000)
struct RPlayerPawn_ToggleWeaponVisibilities final
{
public:
	bool                                          bNewMeleeVisibility;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewWeaponVisibility;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideOnServer;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerPawn_ToggleWeaponVisibilities) == 0x000004, "Wrong alignment on RPlayerPawn_ToggleWeaponVisibilities");
static_assert(sizeof(RPlayerPawn_ToggleWeaponVisibilities) == 0x000010, "Wrong size on RPlayerPawn_ToggleWeaponVisibilities");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibilities, bNewMeleeVisibility) == 0x000000, "Member 'RPlayerPawn_ToggleWeaponVisibilities::bNewMeleeVisibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibilities, bNewWeaponVisibility) == 0x000001, "Member 'RPlayerPawn_ToggleWeaponVisibilities::bNewWeaponVisibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibilities, Key) == 0x000004, "Member 'RPlayerPawn_ToggleWeaponVisibilities::Key' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibilities, bHideOnServer) == 0x00000C, "Member 'RPlayerPawn_ToggleWeaponVisibilities::bHideOnServer' has a wrong offset!");

// Function RGame.RPlayerPawn.ToggleWeaponVisibility
// 0x0002 (0x0002 - 0x0000)
struct RPlayerPawn_ToggleWeaponVisibility final
{
public:
	bool                                          MeleeNewVisibility;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrimaryNewVisibility;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_ToggleWeaponVisibility) == 0x000001, "Wrong alignment on RPlayerPawn_ToggleWeaponVisibility");
static_assert(sizeof(RPlayerPawn_ToggleWeaponVisibility) == 0x000002, "Wrong size on RPlayerPawn_ToggleWeaponVisibility");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibility, MeleeNewVisibility) == 0x000000, "Member 'RPlayerPawn_ToggleWeaponVisibility::MeleeNewVisibility' has a wrong offset!");
static_assert(offsetof(RPlayerPawn_ToggleWeaponVisibility, PrimaryNewVisibility) == 0x000001, "Member 'RPlayerPawn_ToggleWeaponVisibility::PrimaryNewVisibility' has a wrong offset!");

// Function RGame.RPlayerPawn.UnequipWeapon
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_UnequipWeapon final
{
public:
	class ARWeapon*                               Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_UnequipWeapon) == 0x000008, "Wrong alignment on RPlayerPawn_UnequipWeapon");
static_assert(sizeof(RPlayerPawn_UnequipWeapon) == 0x000008, "Wrong size on RPlayerPawn_UnequipWeapon");
static_assert(offsetof(RPlayerPawn_UnequipWeapon, Weapon) == 0x000000, "Member 'RPlayerPawn_UnequipWeapon::Weapon' has a wrong offset!");

// Function RGame.RPlayerPawn.GetArmsSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetArmsSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetArmsSkeletalMeshComponent) == 0x000008, "Wrong alignment on RPlayerPawn_GetArmsSkeletalMeshComponent");
static_assert(sizeof(RPlayerPawn_GetArmsSkeletalMeshComponent) == 0x000008, "Wrong size on RPlayerPawn_GetArmsSkeletalMeshComponent");
static_assert(offsetof(RPlayerPawn_GetArmsSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetArmsSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetDefaultArmsMontage
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetDefaultArmsMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetDefaultArmsMontage) == 0x000008, "Wrong alignment on RPlayerPawn_GetDefaultArmsMontage");
static_assert(sizeof(RPlayerPawn_GetDefaultArmsMontage) == 0x000008, "Wrong size on RPlayerPawn_GetDefaultArmsMontage");
static_assert(offsetof(RPlayerPawn_GetDefaultArmsMontage, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetDefaultArmsMontage::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetDefaultArmsMontageAdditive
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetDefaultArmsMontageAdditive final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetDefaultArmsMontageAdditive) == 0x000008, "Wrong alignment on RPlayerPawn_GetDefaultArmsMontageAdditive");
static_assert(sizeof(RPlayerPawn_GetDefaultArmsMontageAdditive) == 0x000008, "Wrong size on RPlayerPawn_GetDefaultArmsMontageAdditive");
static_assert(offsetof(RPlayerPawn_GetDefaultArmsMontageAdditive, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetDefaultArmsMontageAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetDefaultCharacterMontage
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetDefaultCharacterMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetDefaultCharacterMontage) == 0x000008, "Wrong alignment on RPlayerPawn_GetDefaultCharacterMontage");
static_assert(sizeof(RPlayerPawn_GetDefaultCharacterMontage) == 0x000008, "Wrong size on RPlayerPawn_GetDefaultCharacterMontage");
static_assert(offsetof(RPlayerPawn_GetDefaultCharacterMontage, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetDefaultCharacterMontage::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetDefaultCharacterMontageAdditive
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetDefaultCharacterMontageAdditive final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetDefaultCharacterMontageAdditive) == 0x000008, "Wrong alignment on RPlayerPawn_GetDefaultCharacterMontageAdditive");
static_assert(sizeof(RPlayerPawn_GetDefaultCharacterMontageAdditive) == 0x000008, "Wrong size on RPlayerPawn_GetDefaultCharacterMontageAdditive");
static_assert(offsetof(RPlayerPawn_GetDefaultCharacterMontageAdditive, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetDefaultCharacterMontageAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetEquippedWeapon final
{
public:
	class ARWeapon*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetEquippedWeapon) == 0x000008, "Wrong alignment on RPlayerPawn_GetEquippedWeapon");
static_assert(sizeof(RPlayerPawn_GetEquippedWeapon) == 0x000008, "Wrong size on RPlayerPawn_GetEquippedWeapon");
static_assert(offsetof(RPlayerPawn_GetEquippedWeapon, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetEquippedWeapon::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetFirstPersonCamera
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetFirstPersonCamera final
{
public:
	class UCineCameraComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetFirstPersonCamera) == 0x000008, "Wrong alignment on RPlayerPawn_GetFirstPersonCamera");
static_assert(sizeof(RPlayerPawn_GetFirstPersonCamera) == 0x000008, "Wrong size on RPlayerPawn_GetFirstPersonCamera");
static_assert(offsetof(RPlayerPawn_GetFirstPersonCamera, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetFirstPersonCamera::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetHelmetStaticMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetHelmetStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetHelmetStaticMeshComponent) == 0x000008, "Wrong alignment on RPlayerPawn_GetHelmetStaticMeshComponent");
static_assert(sizeof(RPlayerPawn_GetHelmetStaticMeshComponent) == 0x000008, "Wrong size on RPlayerPawn_GetHelmetStaticMeshComponent");
static_assert(offsetof(RPlayerPawn_GetHelmetStaticMeshComponent, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetHelmetStaticMeshComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.GetProximitySphereComponent
// 0x0008 (0x0008 - 0x0000)
struct RPlayerPawn_GetProximitySphereComponent final
{
public:
	class UDMActorProximitySphereComponent*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_GetProximitySphereComponent) == 0x000008, "Wrong alignment on RPlayerPawn_GetProximitySphereComponent");
static_assert(sizeof(RPlayerPawn_GetProximitySphereComponent) == 0x000008, "Wrong size on RPlayerPawn_GetProximitySphereComponent");
static_assert(offsetof(RPlayerPawn_GetProximitySphereComponent, ReturnValue) == 0x000000, "Member 'RPlayerPawn_GetProximitySphereComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsDowned
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsDowned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsDowned) == 0x000001, "Wrong alignment on RPlayerPawn_IsDowned");
static_assert(sizeof(RPlayerPawn_IsDowned) == 0x000001, "Wrong size on RPlayerPawn_IsDowned");
static_assert(offsetof(RPlayerPawn_IsDowned, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsDowned::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsPingInputBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsPingInputBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsPingInputBlocked) == 0x000001, "Wrong alignment on RPlayerPawn_IsPingInputBlocked");
static_assert(sizeof(RPlayerPawn_IsPingInputBlocked) == 0x000001, "Wrong size on RPlayerPawn_IsPingInputBlocked");
static_assert(offsetof(RPlayerPawn_IsPingInputBlocked, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsPingInputBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsRespawnLocationUpdateBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsRespawnLocationUpdateBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsRespawnLocationUpdateBlocked) == 0x000001, "Wrong alignment on RPlayerPawn_IsRespawnLocationUpdateBlocked");
static_assert(sizeof(RPlayerPawn_IsRespawnLocationUpdateBlocked) == 0x000001, "Wrong size on RPlayerPawn_IsRespawnLocationUpdateBlocked");
static_assert(offsetof(RPlayerPawn_IsRespawnLocationUpdateBlocked, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsRespawnLocationUpdateBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsRotationInputBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsRotationInputBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsRotationInputBlocked) == 0x000001, "Wrong alignment on RPlayerPawn_IsRotationInputBlocked");
static_assert(sizeof(RPlayerPawn_IsRotationInputBlocked) == 0x000001, "Wrong size on RPlayerPawn_IsRotationInputBlocked");
static_assert(offsetof(RPlayerPawn_IsRotationInputBlocked, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsRotationInputBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerPawn.IsWeaponVisibilityBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPlayerPawn_IsWeaponVisibilityBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerPawn_IsWeaponVisibilityBlocked) == 0x000001, "Wrong alignment on RPlayerPawn_IsWeaponVisibilityBlocked");
static_assert(sizeof(RPlayerPawn_IsWeaponVisibilityBlocked) == 0x000001, "Wrong size on RPlayerPawn_IsWeaponVisibilityBlocked");
static_assert(offsetof(RPlayerPawn_IsWeaponVisibilityBlocked, ReturnValue) == 0x000000, "Member 'RPlayerPawn_IsWeaponVisibilityBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RClientPredictionDebugContext.DrawClientPredictionDebugCapsule
// 0x0038 (0x0038 - 0x0000)
struct RClientPredictionDebugContext_DrawClientPredictionDebugCapsule final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule) == 0x000008, "Wrong alignment on RClientPredictionDebugContext_DrawClientPredictionDebugCapsule");
static_assert(sizeof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule) == 0x000038, "Wrong size on RClientPredictionDebugContext_DrawClientPredictionDebugCapsule");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule, Radius) == 0x000000, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugCapsule::Radius' has a wrong offset!");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule, HalfHeight) == 0x000004, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule, Location) == 0x000008, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugCapsule::Location' has a wrong offset!");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugCapsule, Rotation) == 0x000020, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugCapsule::Rotation' has a wrong offset!");

// Function RGame.RClientPredictionDebugContext.DrawClientPredictionDebugSphere
// 0x0020 (0x0020 - 0x0000)
struct RClientPredictionDebugContext_DrawClientPredictionDebugSphere final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RClientPredictionDebugContext_DrawClientPredictionDebugSphere) == 0x000008, "Wrong alignment on RClientPredictionDebugContext_DrawClientPredictionDebugSphere");
static_assert(sizeof(RClientPredictionDebugContext_DrawClientPredictionDebugSphere) == 0x000020, "Wrong size on RClientPredictionDebugContext_DrawClientPredictionDebugSphere");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugSphere, Radius) == 0x000000, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugSphere::Radius' has a wrong offset!");
static_assert(offsetof(RClientPredictionDebugContext_DrawClientPredictionDebugSphere, Location) == 0x000008, "Member 'RClientPredictionDebugContext_DrawClientPredictionDebugSphere::Location' has a wrong offset!");

// Function RGame.RClientPredictionDebugContext.GetTag
// 0x0008 (0x0008 - 0x0000)
struct RClientPredictionDebugContext_GetTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RClientPredictionDebugContext_GetTag) == 0x000004, "Wrong alignment on RClientPredictionDebugContext_GetTag");
static_assert(sizeof(RClientPredictionDebugContext_GetTag) == 0x000008, "Wrong size on RClientPredictionDebugContext_GetTag");
static_assert(offsetof(RClientPredictionDebugContext_GetTag, ReturnValue) == 0x000000, "Member 'RClientPredictionDebugContext_GetTag::ReturnValue' has a wrong offset!");

// Function RGame.ClientPredictionInterface.DebugClientPredictionState
// 0x0008 (0x0008 - 0x0000)
struct ClientPredictionInterface_DebugClientPredictionState final
{
public:
	class URClientPredictionDebugContext*         DebugContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientPredictionInterface_DebugClientPredictionState) == 0x000008, "Wrong alignment on ClientPredictionInterface_DebugClientPredictionState");
static_assert(sizeof(ClientPredictionInterface_DebugClientPredictionState) == 0x000008, "Wrong size on ClientPredictionInterface_DebugClientPredictionState");
static_assert(offsetof(ClientPredictionInterface_DebugClientPredictionState, DebugContext) == 0x000000, "Member 'ClientPredictionInterface_DebugClientPredictionState::DebugContext' has a wrong offset!");

// Function RGame.ClientPredictionInterface.TickPredictedObject
// 0x0004 (0x0004 - 0x0000)
struct ClientPredictionInterface_TickPredictedObject final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientPredictionInterface_TickPredictedObject) == 0x000004, "Wrong alignment on ClientPredictionInterface_TickPredictedObject");
static_assert(sizeof(ClientPredictionInterface_TickPredictedObject) == 0x000004, "Wrong size on ClientPredictionInterface_TickPredictedObject");
static_assert(offsetof(ClientPredictionInterface_TickPredictedObject, DeltaTime) == 0x000000, "Member 'ClientPredictionInterface_TickPredictedObject::DeltaTime' has a wrong offset!");

// Function RGame.ClientPredictionInterface.IsOwnerOfClientPredictionInput
// 0x0001 (0x0001 - 0x0000)
struct ClientPredictionInterface_IsOwnerOfClientPredictionInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClientPredictionInterface_IsOwnerOfClientPredictionInput) == 0x000001, "Wrong alignment on ClientPredictionInterface_IsOwnerOfClientPredictionInput");
static_assert(sizeof(ClientPredictionInterface_IsOwnerOfClientPredictionInput) == 0x000001, "Wrong size on ClientPredictionInterface_IsOwnerOfClientPredictionInput");
static_assert(offsetof(ClientPredictionInterface_IsOwnerOfClientPredictionInput, ReturnValue) == 0x000000, "Member 'ClientPredictionInterface_IsOwnerOfClientPredictionInput::ReturnValue' has a wrong offset!");

// Function RGame.RObjectiveManager.GetObjectiveManager
// 0x0010 (0x0010 - 0x0000)
struct RObjectiveManager_GetObjectiveManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARObjectiveManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_GetObjectiveManager) == 0x000008, "Wrong alignment on RObjectiveManager_GetObjectiveManager");
static_assert(sizeof(RObjectiveManager_GetObjectiveManager) == 0x000010, "Wrong size on RObjectiveManager_GetObjectiveManager");
static_assert(offsetof(RObjectiveManager_GetObjectiveManager, WorldContextObject) == 0x000000, "Member 'RObjectiveManager_GetObjectiveManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_GetObjectiveManager, ReturnValue) == 0x000008, "Member 'RObjectiveManager_GetObjectiveManager::ReturnValue' has a wrong offset!");

// Function RGame.RObjectiveManager.AdjustObjectsByNumPlayers
// 0x0008 (0x0008 - 0x0000)
struct RObjectiveManager_AdjustObjectsByNumPlayers final
{
public:
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_AdjustObjectsByNumPlayers) == 0x000008, "Wrong alignment on RObjectiveManager_AdjustObjectsByNumPlayers");
static_assert(sizeof(RObjectiveManager_AdjustObjectsByNumPlayers) == 0x000008, "Wrong size on RObjectiveManager_AdjustObjectsByNumPlayers");
static_assert(offsetof(RObjectiveManager_AdjustObjectsByNumPlayers, Segment) == 0x000000, "Member 'RObjectiveManager_AdjustObjectsByNumPlayers::Segment' has a wrong offset!");

// Function RGame.RObjectiveManager.EndObjective
// 0x000C (0x000C - 0x0000)
struct RObjectiveManager_EndObjective final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RObjectiveManager_EndObjective) == 0x000004, "Wrong alignment on RObjectiveManager_EndObjective");
static_assert(sizeof(RObjectiveManager_EndObjective) == 0x00000C, "Wrong size on RObjectiveManager_EndObjective");
static_assert(offsetof(RObjectiveManager_EndObjective, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_EndObjective::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_EndObjective, bCompleted) == 0x000008, "Member 'RObjectiveManager_EndObjective::bCompleted' has a wrong offset!");

// Function RGame.RObjectiveManager.GetFirstObjectiveAssetByTag
// 0x0010 (0x0010 - 0x0000)
struct RObjectiveManager_GetFirstObjectiveAssetByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URObjectivePrimaryDataAsset*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_GetFirstObjectiveAssetByTag) == 0x000008, "Wrong alignment on RObjectiveManager_GetFirstObjectiveAssetByTag");
static_assert(sizeof(RObjectiveManager_GetFirstObjectiveAssetByTag) == 0x000010, "Wrong size on RObjectiveManager_GetFirstObjectiveAssetByTag");
static_assert(offsetof(RObjectiveManager_GetFirstObjectiveAssetByTag, Tag) == 0x000000, "Member 'RObjectiveManager_GetFirstObjectiveAssetByTag::Tag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_GetFirstObjectiveAssetByTag, ReturnValue) == 0x000008, "Member 'RObjectiveManager_GetFirstObjectiveAssetByTag::ReturnValue' has a wrong offset!");

// Function RGame.RObjectiveManager.GetObjectiveAssetsByTag
// 0x0018 (0x0018 - 0x0000)
struct RObjectiveManager_GetObjectiveAssetsByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URObjectivePrimaryDataAsset*>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_GetObjectiveAssetsByTag) == 0x000008, "Wrong alignment on RObjectiveManager_GetObjectiveAssetsByTag");
static_assert(sizeof(RObjectiveManager_GetObjectiveAssetsByTag) == 0x000018, "Wrong size on RObjectiveManager_GetObjectiveAssetsByTag");
static_assert(offsetof(RObjectiveManager_GetObjectiveAssetsByTag, Tag) == 0x000000, "Member 'RObjectiveManager_GetObjectiveAssetsByTag::Tag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_GetObjectiveAssetsByTag, ReturnValue) == 0x000008, "Member 'RObjectiveManager_GetObjectiveAssetsByTag::ReturnValue' has a wrong offset!");

// Function RGame.RObjectiveManager.HandlePlayerLeft
// 0x0008 (0x0008 - 0x0000)
struct RObjectiveManager_HandlePlayerLeft final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_HandlePlayerLeft) == 0x000008, "Wrong alignment on RObjectiveManager_HandlePlayerLeft");
static_assert(sizeof(RObjectiveManager_HandlePlayerLeft) == 0x000008, "Wrong size on RObjectiveManager_HandlePlayerLeft");
static_assert(offsetof(RObjectiveManager_HandlePlayerLeft, PlayerState) == 0x000000, "Member 'RObjectiveManager_HandlePlayerLeft::PlayerState' has a wrong offset!");

// Function RGame.RObjectiveManager.OnAreaChanged
// 0x0008 (0x0008 - 0x0000)
struct RObjectiveManager_OnAreaChanged final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_OnAreaChanged) == 0x000004, "Wrong alignment on RObjectiveManager_OnAreaChanged");
static_assert(sizeof(RObjectiveManager_OnAreaChanged) == 0x000008, "Wrong size on RObjectiveManager_OnAreaChanged");
static_assert(offsetof(RObjectiveManager_OnAreaChanged, AreaName) == 0x000000, "Member 'RObjectiveManager_OnAreaChanged::AreaName' has a wrong offset!");

// Function RGame.RObjectiveManager.OnSpawnAreaSegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct RObjectiveManager_OnSpawnAreaSegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_OnSpawnAreaSegmentCompleted) == 0x000008, "Wrong alignment on RObjectiveManager_OnSpawnAreaSegmentCompleted");
static_assert(sizeof(RObjectiveManager_OnSpawnAreaSegmentCompleted) == 0x000008, "Wrong size on RObjectiveManager_OnSpawnAreaSegmentCompleted");
static_assert(offsetof(RObjectiveManager_OnSpawnAreaSegmentCompleted, Segment) == 0x000000, "Member 'RObjectiveManager_OnSpawnAreaSegmentCompleted::Segment' has a wrong offset!");

// Function RGame.RObjectiveManager.StartObjective
// 0x0040 (0x0040 - 0x0000)
struct RObjectiveManager_StartObjective final
{
public:
	struct FRObjectiveData                        ObjectiveData;                                     // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_StartObjective) == 0x000008, "Wrong alignment on RObjectiveManager_StartObjective");
static_assert(sizeof(RObjectiveManager_StartObjective) == 0x000040, "Wrong size on RObjectiveManager_StartObjective");
static_assert(offsetof(RObjectiveManager_StartObjective, ObjectiveData) == 0x000000, "Member 'RObjectiveManager_StartObjective::ObjectiveData' has a wrong offset!");

// Function RGame.RObjectiveManager.UpdateObjective
// 0x0018 (0x0018 - 0x0000)
struct RObjectiveManager_UpdateObjective final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpdateInfo;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_UpdateObjective) == 0x000008, "Wrong alignment on RObjectiveManager_UpdateObjective");
static_assert(sizeof(RObjectiveManager_UpdateObjective) == 0x000018, "Wrong size on RObjectiveManager_UpdateObjective");
static_assert(offsetof(RObjectiveManager_UpdateObjective, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_UpdateObjective::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_UpdateObjective, UpdateInfo) == 0x000008, "Member 'RObjectiveManager_UpdateObjective::UpdateInfo' has a wrong offset!");

// Function RGame.RObjectiveManager.BroadcastObjectiveEnded_Multicast
// 0x000C (0x000C - 0x0000)
struct RObjectiveManager_BroadcastObjectiveEnded_Multicast final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RObjectiveManager_BroadcastObjectiveEnded_Multicast) == 0x000004, "Wrong alignment on RObjectiveManager_BroadcastObjectiveEnded_Multicast");
static_assert(sizeof(RObjectiveManager_BroadcastObjectiveEnded_Multicast) == 0x00000C, "Wrong size on RObjectiveManager_BroadcastObjectiveEnded_Multicast");
static_assert(offsetof(RObjectiveManager_BroadcastObjectiveEnded_Multicast, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_BroadcastObjectiveEnded_Multicast::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_BroadcastObjectiveEnded_Multicast, bCompleted) == 0x000008, "Member 'RObjectiveManager_BroadcastObjectiveEnded_Multicast::bCompleted' has a wrong offset!");

// Function RGame.RObjectiveManager.BroadcastObjectiveRemoved_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RObjectiveManager_BroadcastObjectiveRemoved_Multicast final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_BroadcastObjectiveRemoved_Multicast) == 0x000004, "Wrong alignment on RObjectiveManager_BroadcastObjectiveRemoved_Multicast");
static_assert(sizeof(RObjectiveManager_BroadcastObjectiveRemoved_Multicast) == 0x000008, "Wrong size on RObjectiveManager_BroadcastObjectiveRemoved_Multicast");
static_assert(offsetof(RObjectiveManager_BroadcastObjectiveRemoved_Multicast, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_BroadcastObjectiveRemoved_Multicast::ObjectiveTag' has a wrong offset!");

// Function RGame.RObjectiveManager.BroadcastObjectiveUpdated_Multicast
// 0x0018 (0x0018 - 0x0000)
struct RObjectiveManager_BroadcastObjectiveUpdated_Multicast final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpdateInfo;                                        // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_BroadcastObjectiveUpdated_Multicast) == 0x000008, "Wrong alignment on RObjectiveManager_BroadcastObjectiveUpdated_Multicast");
static_assert(sizeof(RObjectiveManager_BroadcastObjectiveUpdated_Multicast) == 0x000018, "Wrong size on RObjectiveManager_BroadcastObjectiveUpdated_Multicast");
static_assert(offsetof(RObjectiveManager_BroadcastObjectiveUpdated_Multicast, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_BroadcastObjectiveUpdated_Multicast::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_BroadcastObjectiveUpdated_Multicast, UpdateInfo) == 0x000008, "Member 'RObjectiveManager_BroadcastObjectiveUpdated_Multicast::UpdateInfo' has a wrong offset!");

// Function RGame.RObjectiveManager.LocalBroadcastObjectiveEnded
// 0x000C (0x000C - 0x0000)
struct RObjectiveManager_LocalBroadcastObjectiveEnded final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompleted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RObjectiveManager_LocalBroadcastObjectiveEnded) == 0x000004, "Wrong alignment on RObjectiveManager_LocalBroadcastObjectiveEnded");
static_assert(sizeof(RObjectiveManager_LocalBroadcastObjectiveEnded) == 0x00000C, "Wrong size on RObjectiveManager_LocalBroadcastObjectiveEnded");
static_assert(offsetof(RObjectiveManager_LocalBroadcastObjectiveEnded, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_LocalBroadcastObjectiveEnded::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_LocalBroadcastObjectiveEnded, bCompleted) == 0x000008, "Member 'RObjectiveManager_LocalBroadcastObjectiveEnded::bCompleted' has a wrong offset!");

// Function RGame.RObjectiveManager.LocalBroadcastObjectiveUpdated
// 0x0018 (0x0018 - 0x0000)
struct RObjectiveManager_LocalBroadcastObjectiveUpdated final
{
public:
	struct FGameplayTag                           ObjectiveTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   UpdateInfo;                                        // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectiveManager_LocalBroadcastObjectiveUpdated) == 0x000008, "Wrong alignment on RObjectiveManager_LocalBroadcastObjectiveUpdated");
static_assert(sizeof(RObjectiveManager_LocalBroadcastObjectiveUpdated) == 0x000018, "Wrong size on RObjectiveManager_LocalBroadcastObjectiveUpdated");
static_assert(offsetof(RObjectiveManager_LocalBroadcastObjectiveUpdated, ObjectiveTag) == 0x000000, "Member 'RObjectiveManager_LocalBroadcastObjectiveUpdated::ObjectiveTag' has a wrong offset!");
static_assert(offsetof(RObjectiveManager_LocalBroadcastObjectiveUpdated, UpdateInfo) == 0x000008, "Member 'RObjectiveManager_LocalBroadcastObjectiveUpdated::UpdateInfo' has a wrong offset!");

// Function RGame.ProximityCylinder.GetCylinderHeight
// 0x0004 (0x0004 - 0x0000)
struct ProximityCylinder_GetCylinderHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProximityCylinder_GetCylinderHeight) == 0x000004, "Wrong alignment on ProximityCylinder_GetCylinderHeight");
static_assert(sizeof(ProximityCylinder_GetCylinderHeight) == 0x000004, "Wrong size on ProximityCylinder_GetCylinderHeight");
static_assert(offsetof(ProximityCylinder_GetCylinderHeight, ReturnValue) == 0x000000, "Member 'ProximityCylinder_GetCylinderHeight::ReturnValue' has a wrong offset!");

// Function RGame.ProximityCylinder.GetUnscaledCylinderRadius
// 0x0004 (0x0004 - 0x0000)
struct ProximityCylinder_GetUnscaledCylinderRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProximityCylinder_GetUnscaledCylinderRadius) == 0x000004, "Wrong alignment on ProximityCylinder_GetUnscaledCylinderRadius");
static_assert(sizeof(ProximityCylinder_GetUnscaledCylinderRadius) == 0x000004, "Wrong size on ProximityCylinder_GetUnscaledCylinderRadius");
static_assert(offsetof(ProximityCylinder_GetUnscaledCylinderRadius, ReturnValue) == 0x000000, "Member 'ProximityCylinder_GetUnscaledCylinderRadius::ReturnValue' has a wrong offset!");

// Function RGame.DMActorProximityCylinderComponent.GetCylinderRadiusAndHeight
// 0x0008 (0x0008 - 0x0000)
struct DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight final
{
public:
	float                                         ReturnCylinderHeight;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnCylinderRadius;                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight) == 0x000004, "Wrong alignment on DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight");
static_assert(sizeof(DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight) == 0x000008, "Wrong size on DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight");
static_assert(offsetof(DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight, ReturnCylinderHeight) == 0x000000, "Member 'DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight::ReturnCylinderHeight' has a wrong offset!");
static_assert(offsetof(DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight, ReturnCylinderRadius) == 0x000004, "Member 'DMActorProximityCylinderComponent_GetCylinderRadiusAndHeight::ReturnCylinderRadius' has a wrong offset!");

// Function RGame.DMActorProximityCylinderComponent.GetProximityCylinder
// 0x0008 (0x0008 - 0x0000)
struct DMActorProximityCylinderComponent_GetProximityCylinder final
{
public:
	class UProximityCylinder*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityCylinderComponent_GetProximityCylinder) == 0x000008, "Wrong alignment on DMActorProximityCylinderComponent_GetProximityCylinder");
static_assert(sizeof(DMActorProximityCylinderComponent_GetProximityCylinder) == 0x000008, "Wrong size on DMActorProximityCylinderComponent_GetProximityCylinder");
static_assert(offsetof(DMActorProximityCylinderComponent_GetProximityCylinder, ReturnValue) == 0x000000, "Member 'DMActorProximityCylinderComponent_GetProximityCylinder::ReturnValue' has a wrong offset!");

// Function RGame.DMActorProximityCylinderComponent.UpdateProximityCylinderSize
// 0x0018 (0x0018 - 0x0000)
struct DMActorProximityCylinderComponent_UpdateProximityCylinderSize final
{
public:
	struct FVector                                ScaleMulti;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximityCylinderComponent_UpdateProximityCylinderSize) == 0x000008, "Wrong alignment on DMActorProximityCylinderComponent_UpdateProximityCylinderSize");
static_assert(sizeof(DMActorProximityCylinderComponent_UpdateProximityCylinderSize) == 0x000018, "Wrong size on DMActorProximityCylinderComponent_UpdateProximityCylinderSize");
static_assert(offsetof(DMActorProximityCylinderComponent_UpdateProximityCylinderSize, ScaleMulti) == 0x000000, "Member 'DMActorProximityCylinderComponent_UpdateProximityCylinderSize::ScaleMulti' has a wrong offset!");

// Function RGame.RGScript.BranchByNetRole
// 0x0001 (0x0001 - 0x0000)
struct RGScript_BranchByNetRole final
{
public:
	EGScriptNetRole                               Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_BranchByNetRole) == 0x000001, "Wrong alignment on RGScript_BranchByNetRole");
static_assert(sizeof(RGScript_BranchByNetRole) == 0x000001, "Wrong size on RGScript_BranchByNetRole");
static_assert(offsetof(RGScript_BranchByNetRole, Branches) == 0x000000, "Member 'RGScript_BranchByNetRole::Branches' has a wrong offset!");

// Function RGame.RGScript.FinishExecution
// 0x000C (0x000C - 0x0000)
struct RGScript_FinishExecution final
{
public:
	class FName                                   FunctionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         consumePriority;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_FinishExecution) == 0x000004, "Wrong alignment on RGScript_FinishExecution");
static_assert(sizeof(RGScript_FinishExecution) == 0x00000C, "Wrong size on RGScript_FinishExecution");
static_assert(offsetof(RGScript_FinishExecution, FunctionName) == 0x000000, "Member 'RGScript_FinishExecution::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScript_FinishExecution, consumePriority) == 0x000008, "Member 'RGScript_FinishExecution::consumePriority' has a wrong offset!");

// Function RGame.RGScript.K2_FinishCurrentExecution
// 0x0004 (0x0004 - 0x0000)
struct RGScript_K2_FinishCurrentExecution final
{
public:
	int32                                         consumePriority;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_FinishCurrentExecution) == 0x000004, "Wrong alignment on RGScript_K2_FinishCurrentExecution");
static_assert(sizeof(RGScript_K2_FinishCurrentExecution) == 0x000004, "Wrong size on RGScript_K2_FinishCurrentExecution");
static_assert(offsetof(RGScript_K2_FinishCurrentExecution, consumePriority) == 0x000000, "Member 'RGScript_K2_FinishCurrentExecution::consumePriority' has a wrong offset!");

// Function RGame.RGScript.K2_TickScript
// 0x0004 (0x0004 - 0x0000)
struct RGScript_K2_TickScript final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_TickScript) == 0x000004, "Wrong alignment on RGScript_K2_TickScript");
static_assert(sizeof(RGScript_K2_TickScript) == 0x000004, "Wrong size on RGScript_K2_TickScript");
static_assert(offsetof(RGScript_K2_TickScript, DeltaTime) == 0x000000, "Member 'RGScript_K2_TickScript::DeltaTime' has a wrong offset!");

// Function RGame.RGScript.OnRep_bActivated
// 0x0001 (0x0001 - 0x0000)
struct RGScript_OnRep_bActivated final
{
public:
	bool                                          bPreviousValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_OnRep_bActivated) == 0x000001, "Wrong alignment on RGScript_OnRep_bActivated");
static_assert(sizeof(RGScript_OnRep_bActivated) == 0x000001, "Wrong size on RGScript_OnRep_bActivated");
static_assert(offsetof(RGScript_OnRep_bActivated, bPreviousValue) == 0x000000, "Member 'RGScript_OnRep_bActivated::bPreviousValue' has a wrong offset!");

// Function RGame.RGScript.SetTickScriptEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGScript_SetTickScriptEnabled final
{
public:
	bool                                          bShouldTickScript;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_SetTickScriptEnabled) == 0x000001, "Wrong alignment on RGScript_SetTickScriptEnabled");
static_assert(sizeof(RGScript_SetTickScriptEnabled) == 0x000001, "Wrong size on RGScript_SetTickScriptEnabled");
static_assert(offsetof(RGScript_SetTickScriptEnabled, bShouldTickScript) == 0x000000, "Member 'RGScript_SetTickScriptEnabled::bShouldTickScript' has a wrong offset!");

// Function RGame.RGScript.SetTickScriptInterval
// 0x0004 (0x0004 - 0x0000)
struct RGScript_SetTickScriptInterval final
{
public:
	float                                         TickInterval;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_SetTickScriptInterval) == 0x000004, "Wrong alignment on RGScript_SetTickScriptInterval");
static_assert(sizeof(RGScript_SetTickScriptInterval) == 0x000004, "Wrong size on RGScript_SetTickScriptInterval");
static_assert(offsetof(RGScript_SetTickScriptInterval, TickInterval) == 0x000000, "Member 'RGScript_SetTickScriptInterval::TickInterval' has a wrong offset!");

// Function RGame.RGScript.ShouldSkipExecution
// 0x000C (0x000C - 0x0000)
struct RGScript_ShouldSkipExecution final
{
public:
	class FName                                   FunctionName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScript_ShouldSkipExecution) == 0x000004, "Wrong alignment on RGScript_ShouldSkipExecution");
static_assert(sizeof(RGScript_ShouldSkipExecution) == 0x00000C, "Wrong size on RGScript_ShouldSkipExecution");
static_assert(offsetof(RGScript_ShouldSkipExecution, FunctionName) == 0x000000, "Member 'RGScript_ShouldSkipExecution::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScript_ShouldSkipExecution, ReturnValue) == 0x000008, "Member 'RGScript_ShouldSkipExecution::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.GetScriptFName
// 0x0008 (0x0008 - 0x0000)
struct RGScript_GetScriptFName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_GetScriptFName) == 0x000004, "Wrong alignment on RGScript_GetScriptFName");
static_assert(sizeof(RGScript_GetScriptFName) == 0x000008, "Wrong size on RGScript_GetScriptFName");
static_assert(offsetof(RGScript_GetScriptFName, ReturnValue) == 0x000000, "Member 'RGScript_GetScriptFName::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.GetTickScriptInterval
// 0x0004 (0x0004 - 0x0000)
struct RGScript_GetTickScriptInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_GetTickScriptInterval) == 0x000004, "Wrong alignment on RGScript_GetTickScriptInterval");
static_assert(sizeof(RGScript_GetTickScriptInterval) == 0x000004, "Wrong size on RGScript_GetTickScriptInterval");
static_assert(offsetof(RGScript_GetTickScriptInterval, ReturnValue) == 0x000000, "Member 'RGScript_GetTickScriptInterval::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetCurrentActorInfo
// 0x0030 (0x0030 - 0x0000)
struct RGScript_K2_GetCurrentActorInfo final
{
public:
	struct FGScriptActorInfo                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetCurrentActorInfo) == 0x000008, "Wrong alignment on RGScript_K2_GetCurrentActorInfo");
static_assert(sizeof(RGScript_K2_GetCurrentActorInfo) == 0x000030, "Wrong size on RGScript_K2_GetCurrentActorInfo");
static_assert(offsetof(RGScript_K2_GetCurrentActorInfo, ReturnValue) == 0x000000, "Member 'RGScript_K2_GetCurrentActorInfo::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetInstigatorController
// 0x0008 (0x0008 - 0x0000)
struct RGScript_K2_GetInstigatorController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetInstigatorController) == 0x000008, "Wrong alignment on RGScript_K2_GetInstigatorController");
static_assert(sizeof(RGScript_K2_GetInstigatorController) == 0x000008, "Wrong size on RGScript_K2_GetInstigatorController");
static_assert(offsetof(RGScript_K2_GetInstigatorController, ReturnValue) == 0x000000, "Member 'RGScript_K2_GetInstigatorController::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetInstigatorPawn
// 0x0008 (0x0008 - 0x0000)
struct RGScript_K2_GetInstigatorPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetInstigatorPawn) == 0x000008, "Wrong alignment on RGScript_K2_GetInstigatorPawn");
static_assert(sizeof(RGScript_K2_GetInstigatorPawn) == 0x000008, "Wrong size on RGScript_K2_GetInstigatorPawn");
static_assert(offsetof(RGScript_K2_GetInstigatorPawn, ReturnValue) == 0x000000, "Member 'RGScript_K2_GetInstigatorPawn::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct RGScript_K2_GetPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetPlayerController) == 0x000008, "Wrong alignment on RGScript_K2_GetPlayerController");
static_assert(sizeof(RGScript_K2_GetPlayerController) == 0x000008, "Wrong size on RGScript_K2_GetPlayerController");
static_assert(offsetof(RGScript_K2_GetPlayerController, ReturnValue) == 0x000000, "Member 'RGScript_K2_GetPlayerController::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetRGScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RGScript_K2_GetRGScriptComponent final
{
public:
	class URGScriptComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetRGScriptComponent) == 0x000008, "Wrong alignment on RGScript_K2_GetRGScriptComponent");
static_assert(sizeof(RGScript_K2_GetRGScriptComponent) == 0x000008, "Wrong size on RGScript_K2_GetRGScriptComponent");
static_assert(offsetof(RGScript_K2_GetRGScriptComponent, ReturnValue) == 0x000000, "Member 'RGScript_K2_GetRGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_GetSkeletalmesh
// 0x0010 (0x0010 - 0x0000)
struct RGScript_K2_GetSkeletalmesh final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_GetSkeletalmesh) == 0x000008, "Wrong alignment on RGScript_K2_GetSkeletalmesh");
static_assert(sizeof(RGScript_K2_GetSkeletalmesh) == 0x000010, "Wrong size on RGScript_K2_GetSkeletalmesh");
static_assert(offsetof(RGScript_K2_GetSkeletalmesh, Tag) == 0x000000, "Member 'RGScript_K2_GetSkeletalmesh::Tag' has a wrong offset!");
static_assert(offsetof(RGScript_K2_GetSkeletalmesh, ReturnValue) == 0x000008, "Member 'RGScript_K2_GetSkeletalmesh::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_IsInstigatorLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct RGScript_K2_IsInstigatorLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_IsInstigatorLocallyControlled) == 0x000001, "Wrong alignment on RGScript_K2_IsInstigatorLocallyControlled");
static_assert(sizeof(RGScript_K2_IsInstigatorLocallyControlled) == 0x000001, "Wrong size on RGScript_K2_IsInstigatorLocallyControlled");
static_assert(offsetof(RGScript_K2_IsInstigatorLocallyControlled, ReturnValue) == 0x000000, "Member 'RGScript_K2_IsInstigatorLocallyControlled::ReturnValue' has a wrong offset!");

// Function RGame.RGScript.K2_IsScriptLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct RGScript_K2_IsScriptLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScript_K2_IsScriptLocallyControlled) == 0x000001, "Wrong alignment on RGScript_K2_IsScriptLocallyControlled");
static_assert(sizeof(RGScript_K2_IsScriptLocallyControlled) == 0x000001, "Wrong size on RGScript_K2_IsScriptLocallyControlled");
static_assert(offsetof(RGScript_K2_IsScriptLocallyControlled, ReturnValue) == 0x000000, "Member 'RGScript_K2_IsScriptLocallyControlled::ReturnValue' has a wrong offset!");

// Function RGame.RStatusEffectGScript.AttachStatusEffectToPawn
// 0x0038 (0x0038 - 0x0000)
struct RStatusEffectGScript_AttachStatusEffectToPawn final
{
public:
	TSubclassOf<class URStatusEffectGScript>      StatusEffectClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARPawnBase*                             Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStack;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDeathCheck;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Rank;                                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScript*                              StatusEffectInstigatorScript;                      // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URStatusEffectGScript*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_AttachStatusEffectToPawn) == 0x000008, "Wrong alignment on RStatusEffectGScript_AttachStatusEffectToPawn");
static_assert(sizeof(RStatusEffectGScript_AttachStatusEffectToPawn) == 0x000038, "Wrong size on RStatusEffectGScript_AttachStatusEffectToPawn");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, StatusEffectClass) == 0x000000, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, Pawn) == 0x000008, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::Pawn' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, bStack) == 0x000010, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::bStack' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, InstigatorScriptComponent) == 0x000018, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, bSkipDeathCheck) == 0x000020, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::bSkipDeathCheck' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, Rank) == 0x000024, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::Rank' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, StatusEffectInstigatorScript) == 0x000028, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::StatusEffectInstigatorScript' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachStatusEffectToPawn, ReturnValue) == 0x000030, "Member 'RStatusEffectGScript_AttachStatusEffectToPawn::ReturnValue' has a wrong offset!");

// Function RGame.RStatusEffectGScript.AttachParticlesToOwnerSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh final
{
public:
	class UNiagaraSystem*                         SystemTemplate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh) == 0x000008, "Wrong alignment on RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh");
static_assert(sizeof(RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh) == 0x000010, "Wrong size on RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh");
static_assert(offsetof(RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh, SystemTemplate) == 0x000000, "Member 'RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh::SystemTemplate' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh, ReturnValue) == 0x000008, "Member 'RStatusEffectGScript_AttachParticlesToOwnerSkeletalMesh::ReturnValue' has a wrong offset!");

// Function RGame.RStatusEffectGScript.ExtendRemainingDuration
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_ExtendRemainingDuration final
{
public:
	float                                         DeltaDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_ExtendRemainingDuration) == 0x000004, "Wrong alignment on RStatusEffectGScript_ExtendRemainingDuration");
static_assert(sizeof(RStatusEffectGScript_ExtendRemainingDuration) == 0x000004, "Wrong size on RStatusEffectGScript_ExtendRemainingDuration");
static_assert(offsetof(RStatusEffectGScript_ExtendRemainingDuration, DeltaDuration) == 0x000000, "Member 'RStatusEffectGScript_ExtendRemainingDuration::DeltaDuration' has a wrong offset!");

// Function RGame.RStatusEffectGScript.OnRep_CurrentStackCount
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_OnRep_CurrentStackCount final
{
public:
	int32                                         PrevStackCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_OnRep_CurrentStackCount) == 0x000004, "Wrong alignment on RStatusEffectGScript_OnRep_CurrentStackCount");
static_assert(sizeof(RStatusEffectGScript_OnRep_CurrentStackCount) == 0x000004, "Wrong size on RStatusEffectGScript_OnRep_CurrentStackCount");
static_assert(offsetof(RStatusEffectGScript_OnRep_CurrentStackCount, PrevStackCount) == 0x000000, "Member 'RStatusEffectGScript_OnRep_CurrentStackCount::PrevStackCount' has a wrong offset!");

// Function RGame.RStatusEffectGScript.OnUpdateDuration_Client
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_OnUpdateDuration_Client final
{
public:
	float                                         NewDuration;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_OnUpdateDuration_Client) == 0x000004, "Wrong alignment on RStatusEffectGScript_OnUpdateDuration_Client");
static_assert(sizeof(RStatusEffectGScript_OnUpdateDuration_Client) == 0x000004, "Wrong size on RStatusEffectGScript_OnUpdateDuration_Client");
static_assert(offsetof(RStatusEffectGScript_OnUpdateDuration_Client, NewDuration) == 0x000000, "Member 'RStatusEffectGScript_OnUpdateDuration_Client::NewDuration' has a wrong offset!");

// Function RGame.RStatusEffectGScript.SetCurrentStackCount
// 0x0008 (0x0008 - 0x0000)
struct RStatusEffectGScript_SetCurrentStackCount final
{
public:
	int32                                         _CurrentStackCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_SetCurrentStackCount) == 0x000004, "Wrong alignment on RStatusEffectGScript_SetCurrentStackCount");
static_assert(sizeof(RStatusEffectGScript_SetCurrentStackCount) == 0x000008, "Wrong size on RStatusEffectGScript_SetCurrentStackCount");
static_assert(offsetof(RStatusEffectGScript_SetCurrentStackCount, _CurrentStackCount) == 0x000000, "Member 'RStatusEffectGScript_SetCurrentStackCount::_CurrentStackCount' has a wrong offset!");
static_assert(offsetof(RStatusEffectGScript_SetCurrentStackCount, ReturnValue) == 0x000004, "Member 'RStatusEffectGScript_SetCurrentStackCount::ReturnValue' has a wrong offset!");

// Function RGame.RStatusEffectGScript.SetEffectDuration
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_SetEffectDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_SetEffectDuration) == 0x000004, "Wrong alignment on RStatusEffectGScript_SetEffectDuration");
static_assert(sizeof(RStatusEffectGScript_SetEffectDuration) == 0x000004, "Wrong size on RStatusEffectGScript_SetEffectDuration");
static_assert(offsetof(RStatusEffectGScript_SetEffectDuration, Duration) == 0x000000, "Member 'RStatusEffectGScript_SetEffectDuration::Duration' has a wrong offset!");

// Function RGame.RStatusEffectGScript.SetMaxStackCount
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_SetMaxStackCount final
{
public:
	int32                                         MaxStacks;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_SetMaxStackCount) == 0x000004, "Wrong alignment on RStatusEffectGScript_SetMaxStackCount");
static_assert(sizeof(RStatusEffectGScript_SetMaxStackCount) == 0x000004, "Wrong size on RStatusEffectGScript_SetMaxStackCount");
static_assert(offsetof(RStatusEffectGScript_SetMaxStackCount, MaxStacks) == 0x000000, "Member 'RStatusEffectGScript_SetMaxStackCount::MaxStacks' has a wrong offset!");

// Function RGame.RStatusEffectGScript.GetCurrentStackCount
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_GetCurrentStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_GetCurrentStackCount) == 0x000004, "Wrong alignment on RStatusEffectGScript_GetCurrentStackCount");
static_assert(sizeof(RStatusEffectGScript_GetCurrentStackCount) == 0x000004, "Wrong size on RStatusEffectGScript_GetCurrentStackCount");
static_assert(offsetof(RStatusEffectGScript_GetCurrentStackCount, ReturnValue) == 0x000000, "Member 'RStatusEffectGScript_GetCurrentStackCount::ReturnValue' has a wrong offset!");

// Function RGame.RStatusEffectGScript.GetRemainingDuration
// 0x0004 (0x0004 - 0x0000)
struct RStatusEffectGScript_GetRemainingDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatusEffectGScript_GetRemainingDuration) == 0x000004, "Wrong alignment on RStatusEffectGScript_GetRemainingDuration");
static_assert(sizeof(RStatusEffectGScript_GetRemainingDuration) == 0x000004, "Wrong size on RStatusEffectGScript_GetRemainingDuration");
static_assert(offsetof(RStatusEffectGScript_GetRemainingDuration, ReturnValue) == 0x000000, "Member 'RStatusEffectGScript_GetRemainingDuration::ReturnValue' has a wrong offset!");

// Function RGame.ProximitySphere.GetUnscaledSphereRadius
// 0x0004 (0x0004 - 0x0000)
struct ProximitySphere_GetUnscaledSphereRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProximitySphere_GetUnscaledSphereRadius) == 0x000004, "Wrong alignment on ProximitySphere_GetUnscaledSphereRadius");
static_assert(sizeof(ProximitySphere_GetUnscaledSphereRadius) == 0x000004, "Wrong size on ProximitySphere_GetUnscaledSphereRadius");
static_assert(offsetof(ProximitySphere_GetUnscaledSphereRadius, ReturnValue) == 0x000000, "Member 'ProximitySphere_GetUnscaledSphereRadius::ReturnValue' has a wrong offset!");

// Function RGame.DMActorProximitySphereComponent.GetActorsInProximitySphereAsArray
// 0x0020 (0x0020 - 0x0000)
struct DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray final
{
public:
	class UProximitySphere*                       ProximitySphere;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     OptionalType;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray) == 0x000008, "Wrong alignment on DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray");
static_assert(sizeof(DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray) == 0x000020, "Wrong size on DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray");
static_assert(offsetof(DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray, ProximitySphere) == 0x000000, "Member 'DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray::ProximitySphere' has a wrong offset!");
static_assert(offsetof(DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray, OptionalType) == 0x000008, "Member 'DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray::OptionalType' has a wrong offset!");
static_assert(offsetof(DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray, ReturnValue) == 0x000010, "Member 'DMActorProximitySphereComponent_GetActorsInProximitySphereAsArray::ReturnValue' has a wrong offset!");

// Function RGame.DMActorProximitySphereComponent.GetClosestActorInProximitySphere
// 0x0010 (0x0010 - 0x0000)
struct DMActorProximitySphereComponent_GetClosestActorInProximitySphere final
{
public:
	class UProximitySphere*                       ProximitySphere;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximitySphereComponent_GetClosestActorInProximitySphere) == 0x000008, "Wrong alignment on DMActorProximitySphereComponent_GetClosestActorInProximitySphere");
static_assert(sizeof(DMActorProximitySphereComponent_GetClosestActorInProximitySphere) == 0x000010, "Wrong size on DMActorProximitySphereComponent_GetClosestActorInProximitySphere");
static_assert(offsetof(DMActorProximitySphereComponent_GetClosestActorInProximitySphere, ProximitySphere) == 0x000000, "Member 'DMActorProximitySphereComponent_GetClosestActorInProximitySphere::ProximitySphere' has a wrong offset!");
static_assert(offsetof(DMActorProximitySphereComponent_GetClosestActorInProximitySphere, ReturnValue) == 0x000008, "Member 'DMActorProximitySphereComponent_GetClosestActorInProximitySphere::ReturnValue' has a wrong offset!");

// Function RGame.DMActorProximitySphereComponent.GetProximitySphere
// 0x0010 (0x0010 - 0x0000)
struct DMActorProximitySphereComponent_GetProximitySphere final
{
public:
	float                                         SphereRadius;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProximitySphere*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DMActorProximitySphereComponent_GetProximitySphere) == 0x000008, "Wrong alignment on DMActorProximitySphereComponent_GetProximitySphere");
static_assert(sizeof(DMActorProximitySphereComponent_GetProximitySphere) == 0x000010, "Wrong size on DMActorProximitySphereComponent_GetProximitySphere");
static_assert(offsetof(DMActorProximitySphereComponent_GetProximitySphere, SphereRadius) == 0x000000, "Member 'DMActorProximitySphereComponent_GetProximitySphere::SphereRadius' has a wrong offset!");
static_assert(offsetof(DMActorProximitySphereComponent_GetProximitySphere, ReturnValue) == 0x000008, "Member 'DMActorProximitySphereComponent_GetProximitySphere::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetMutatorDescription
// 0x0010 (0x0010 - 0x0000)
struct RGWeaponMutatorScript_GetMutatorDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetMutatorDescription) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetMutatorDescription");
static_assert(sizeof(RGWeaponMutatorScript_GetMutatorDescription) == 0x000010, "Wrong size on RGWeaponMutatorScript_GetMutatorDescription");
static_assert(offsetof(RGWeaponMutatorScript_GetMutatorDescription, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetMutatorDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RGWeaponMutatorScript_GetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponMutatorScript_GetMutatorRank) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetMutatorRank");
static_assert(sizeof(RGWeaponMutatorScript_GetMutatorRank) == 0x000010, "Wrong size on RGWeaponMutatorScript_GetMutatorRank");
static_assert(offsetof(RGWeaponMutatorScript_GetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RGWeaponMutatorScript_GetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGWeaponMutatorScript_GetMutatorRank, ReturnValue) == 0x000008, "Member 'RGWeaponMutatorScript_GetMutatorRank::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.K2_OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_K2_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_K2_OnEnemyKilled) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_K2_OnEnemyKilled");
static_assert(sizeof(RGWeaponMutatorScript_K2_OnEnemyKilled) == 0x000008, "Wrong size on RGWeaponMutatorScript_K2_OnEnemyKilled");
static_assert(offsetof(RGWeaponMutatorScript_K2_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGWeaponMutatorScript_K2_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.K2_OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_K2_OnProjectileSpawned final
{
public:
	class ARProjectileBase*                       SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_K2_OnProjectileSpawned) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_K2_OnProjectileSpawned");
static_assert(sizeof(RGWeaponMutatorScript_K2_OnProjectileSpawned) == 0x000008, "Wrong size on RGWeaponMutatorScript_K2_OnProjectileSpawned");
static_assert(offsetof(RGWeaponMutatorScript_K2_OnProjectileSpawned, SpawnedProjectile) == 0x000000, "Member 'RGWeaponMutatorScript_K2_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.K2_OnProjectileSpawnedClientDummy
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy");
static_assert(sizeof(RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy) == 0x000018, "Wrong size on RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy");
static_assert(offsetof(RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy, Direction) == 0x000000, "Member 'RGWeaponMutatorScript_K2_OnProjectileSpawnedClientDummy::Direction' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.OnBeginFire
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponMutatorScript_OnBeginFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_OnBeginFire) == 0x000004, "Wrong alignment on RGWeaponMutatorScript_OnBeginFire");
static_assert(sizeof(RGWeaponMutatorScript_OnBeginFire) == 0x000004, "Wrong size on RGWeaponMutatorScript_OnBeginFire");
static_assert(offsetof(RGWeaponMutatorScript_OnBeginFire, CurrentAmmo) == 0x000000, "Member 'RGWeaponMutatorScript_OnBeginFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.OnBeginSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponMutatorScript_OnBeginSecondaryFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_OnBeginSecondaryFire) == 0x000004, "Wrong alignment on RGWeaponMutatorScript_OnBeginSecondaryFire");
static_assert(sizeof(RGWeaponMutatorScript_OnBeginSecondaryFire) == 0x000004, "Wrong size on RGWeaponMutatorScript_OnBeginSecondaryFire");
static_assert(offsetof(RGWeaponMutatorScript_OnBeginSecondaryFire, CurrentAmmo) == 0x000000, "Member 'RGWeaponMutatorScript_OnBeginSecondaryFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_OnEnemyKilled) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_OnEnemyKilled");
static_assert(sizeof(RGWeaponMutatorScript_OnEnemyKilled) == 0x000008, "Wrong size on RGWeaponMutatorScript_OnEnemyKilled");
static_assert(offsetof(RGWeaponMutatorScript_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGWeaponMutatorScript_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_OnProjectileSpawned final
{
public:
	class ARProjectileBase*                       SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_OnProjectileSpawned) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_OnProjectileSpawned");
static_assert(sizeof(RGWeaponMutatorScript_OnProjectileSpawned) == 0x000008, "Wrong size on RGWeaponMutatorScript_OnProjectileSpawned");
static_assert(offsetof(RGWeaponMutatorScript_OnProjectileSpawned, SpawnedProjectile) == 0x000000, "Member 'RGWeaponMutatorScript_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.OnProjectileSpawnedClientDummy
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponMutatorScript_OnProjectileSpawnedClientDummy final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_OnProjectileSpawnedClientDummy) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_OnProjectileSpawnedClientDummy");
static_assert(sizeof(RGWeaponMutatorScript_OnProjectileSpawnedClientDummy) == 0x000018, "Wrong size on RGWeaponMutatorScript_OnProjectileSpawnedClientDummy");
static_assert(offsetof(RGWeaponMutatorScript_OnProjectileSpawnedClientDummy, Direction) == 0x000000, "Member 'RGWeaponMutatorScript_OnProjectileSpawnedClientDummy::Direction' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetBaseWeaponSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetBaseWeaponSettings final
{
public:
	class URBaseWeaponSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetBaseWeaponSettings) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetBaseWeaponSettings");
static_assert(sizeof(RGWeaponMutatorScript_GetBaseWeaponSettings) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetBaseWeaponSettings");
static_assert(offsetof(RGWeaponMutatorScript_GetBaseWeaponSettings, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetBaseWeaponSettings::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct RGWeaponMutatorScript_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetDescription) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetDescription");
static_assert(sizeof(RGWeaponMutatorScript_GetDescription) == 0x000010, "Wrong size on RGWeaponMutatorScript_GetDescription");
static_assert(offsetof(RGWeaponMutatorScript_GetDescription, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetFloatWeaponStat
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetFloatWeaponStat final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetFloatWeaponStat) == 0x000004, "Wrong alignment on RGWeaponMutatorScript_GetFloatWeaponStat");
static_assert(sizeof(RGWeaponMutatorScript_GetFloatWeaponStat) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetFloatWeaponStat");
static_assert(offsetof(RGWeaponMutatorScript_GetFloatWeaponStat, Stat) == 0x000000, "Member 'RGWeaponMutatorScript_GetFloatWeaponStat::Stat' has a wrong offset!");
static_assert(offsetof(RGWeaponMutatorScript_GetFloatWeaponStat, ReturnValue) == 0x000004, "Member 'RGWeaponMutatorScript_GetFloatWeaponStat::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetGlobalWeaponModifiers
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetGlobalWeaponModifiers final
{
public:
	class URGlobalWeaponModifiers*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetGlobalWeaponModifiers) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetGlobalWeaponModifiers");
static_assert(sizeof(RGWeaponMutatorScript_GetGlobalWeaponModifiers) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetGlobalWeaponModifiers");
static_assert(offsetof(RGWeaponMutatorScript_GetGlobalWeaponModifiers, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetGlobalWeaponModifiers::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetIntegerWeaponStat
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetIntegerWeaponStat final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetIntegerWeaponStat) == 0x000004, "Wrong alignment on RGWeaponMutatorScript_GetIntegerWeaponStat");
static_assert(sizeof(RGWeaponMutatorScript_GetIntegerWeaponStat) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetIntegerWeaponStat");
static_assert(offsetof(RGWeaponMutatorScript_GetIntegerWeaponStat, Stat) == 0x000000, "Member 'RGWeaponMutatorScript_GetIntegerWeaponStat::Stat' has a wrong offset!");
static_assert(offsetof(RGWeaponMutatorScript_GetIntegerWeaponStat, ReturnValue) == 0x000004, "Member 'RGWeaponMutatorScript_GetIntegerWeaponStat::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetMutableWeaponSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetMutableWeaponSettings final
{
public:
	class URMutableWeaponSettings*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetMutableWeaponSettings) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetMutableWeaponSettings");
static_assert(sizeof(RGWeaponMutatorScript_GetMutableWeaponSettings) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetMutableWeaponSettings");
static_assert(offsetof(RGWeaponMutatorScript_GetMutableWeaponSettings, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetMutableWeaponSettings::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetWeaponActor
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetWeaponActor final
{
public:
	class ARWeapon*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetWeaponActor) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetWeaponActor");
static_assert(sizeof(RGWeaponMutatorScript_GetWeaponActor) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetWeaponActor");
static_assert(offsetof(RGWeaponMutatorScript_GetWeaponActor, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetWeaponActor::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.GetWeaponScript
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_GetWeaponScript final
{
public:
	class URGWeaponScript*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponMutatorScript_GetWeaponScript) == 0x000008, "Wrong alignment on RGWeaponMutatorScript_GetWeaponScript");
static_assert(sizeof(RGWeaponMutatorScript_GetWeaponScript) == 0x000008, "Wrong size on RGWeaponMutatorScript_GetWeaponScript");
static_assert(offsetof(RGWeaponMutatorScript_GetWeaponScript, ReturnValue) == 0x000000, "Member 'RGWeaponMutatorScript_GetWeaponScript::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponMutatorScript.RollProcChance
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponMutatorScript_RollProcChance final
{
public:
	int32                                         Chance;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponMutatorScript_RollProcChance) == 0x000004, "Wrong alignment on RGWeaponMutatorScript_RollProcChance");
static_assert(sizeof(RGWeaponMutatorScript_RollProcChance) == 0x000008, "Wrong size on RGWeaponMutatorScript_RollProcChance");
static_assert(offsetof(RGWeaponMutatorScript_RollProcChance, Chance) == 0x000000, "Member 'RGWeaponMutatorScript_RollProcChance::Chance' has a wrong offset!");
static_assert(offsetof(RGWeaponMutatorScript_RollProcChance, ReturnValue) == 0x000004, "Member 'RGWeaponMutatorScript_RollProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RAIController.InitializeBehaviorTree
// 0x0070 (0x0070 - 0x0000)
struct RAIController_InitializeBehaviorTree final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRAISettings                           Settings;                                          // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIController_InitializeBehaviorTree) == 0x000008, "Wrong alignment on RAIController_InitializeBehaviorTree");
static_assert(sizeof(RAIController_InitializeBehaviorTree) == 0x000070, "Wrong size on RAIController_InitializeBehaviorTree");
static_assert(offsetof(RAIController_InitializeBehaviorTree, Controller) == 0x000000, "Member 'RAIController_InitializeBehaviorTree::Controller' has a wrong offset!");
static_assert(offsetof(RAIController_InitializeBehaviorTree, Settings) == 0x000008, "Member 'RAIController_InitializeBehaviorTree::Settings' has a wrong offset!");

// Function RGame.RHealthbarWidget.OnArmorUpdated
// 0x0048 (0x0048 - 0x0000)
struct RHealthbarWidget_OnArmorUpdated final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentArmor;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHealCombatEvent                       HealEvent;                                         // 0x0010(0x0038)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_OnArmorUpdated) == 0x000008, "Wrong alignment on RHealthbarWidget_OnArmorUpdated");
static_assert(sizeof(RHealthbarWidget_OnArmorUpdated) == 0x000048, "Wrong size on RHealthbarWidget_OnArmorUpdated");
static_assert(offsetof(RHealthbarWidget_OnArmorUpdated, Component) == 0x000000, "Member 'RHealthbarWidget_OnArmorUpdated::Component' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnArmorUpdated, CurrentArmor) == 0x000008, "Member 'RHealthbarWidget_OnArmorUpdated::CurrentArmor' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnArmorUpdated, Delta) == 0x00000C, "Member 'RHealthbarWidget_OnArmorUpdated::Delta' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnArmorUpdated, HealEvent) == 0x000010, "Member 'RHealthbarWidget_OnArmorUpdated::HealEvent' has a wrong offset!");

// Function RGame.RHealthbarWidget.OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RHealthbarWidget_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_OnDamageTaken) == 0x000008, "Wrong alignment on RHealthbarWidget_OnDamageTaken");
static_assert(sizeof(RHealthbarWidget_OnDamageTaken) == 0x0000C8, "Wrong size on RHealthbarWidget_OnDamageTaken");
static_assert(offsetof(RHealthbarWidget_OnDamageTaken, Component) == 0x000000, "Member 'RHealthbarWidget_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnDamageTaken, DamageData) == 0x000008, "Member 'RHealthbarWidget_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RHealthbarWidget.OnDamageTakenServerValidated
// 0x00C8 (0x00C8 - 0x0000)
struct RHealthbarWidget_OnDamageTakenServerValidated final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_OnDamageTakenServerValidated) == 0x000008, "Wrong alignment on RHealthbarWidget_OnDamageTakenServerValidated");
static_assert(sizeof(RHealthbarWidget_OnDamageTakenServerValidated) == 0x0000C8, "Wrong size on RHealthbarWidget_OnDamageTakenServerValidated");
static_assert(offsetof(RHealthbarWidget_OnDamageTakenServerValidated, Component) == 0x000000, "Member 'RHealthbarWidget_OnDamageTakenServerValidated::Component' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnDamageTakenServerValidated, DamageData) == 0x000008, "Member 'RHealthbarWidget_OnDamageTakenServerValidated::DamageData' has a wrong offset!");

// Function RGame.RHealthbarWidget.OnHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RHealthbarWidget_OnHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_OnHealthDepleted) == 0x000008, "Wrong alignment on RHealthbarWidget_OnHealthDepleted");
static_assert(sizeof(RHealthbarWidget_OnHealthDepleted) == 0x0000C8, "Wrong size on RHealthbarWidget_OnHealthDepleted");
static_assert(offsetof(RHealthbarWidget_OnHealthDepleted, Component) == 0x000000, "Member 'RHealthbarWidget_OnHealthDepleted::Component' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnHealthDepleted, DamageData) == 0x000008, "Member 'RHealthbarWidget_OnHealthDepleted::DamageData' has a wrong offset!");

// Function RGame.RHealthbarWidget.OnHealthUpdated
// 0x0048 (0x0048 - 0x0000)
struct RHealthbarWidget_OnHealthUpdated final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         currentHealth;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHealCombatEvent                       HealEvent;                                         // 0x0010(0x0038)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_OnHealthUpdated) == 0x000008, "Wrong alignment on RHealthbarWidget_OnHealthUpdated");
static_assert(sizeof(RHealthbarWidget_OnHealthUpdated) == 0x000048, "Wrong size on RHealthbarWidget_OnHealthUpdated");
static_assert(offsetof(RHealthbarWidget_OnHealthUpdated, Component) == 0x000000, "Member 'RHealthbarWidget_OnHealthUpdated::Component' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnHealthUpdated, currentHealth) == 0x000008, "Member 'RHealthbarWidget_OnHealthUpdated::currentHealth' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnHealthUpdated, Delta) == 0x00000C, "Member 'RHealthbarWidget_OnHealthUpdated::Delta' has a wrong offset!");
static_assert(offsetof(RHealthbarWidget_OnHealthUpdated, HealEvent) == 0x000010, "Member 'RHealthbarWidget_OnHealthUpdated::HealEvent' has a wrong offset!");

// Function RGame.RHealthbarWidget.ReinitHealthbarWithNewTarget
// 0x0008 (0x0008 - 0x0000)
struct RHealthbarWidget_ReinitHealthbarWithNewTarget final
{
public:
	class URHealthComponent*                      NewComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_ReinitHealthbarWithNewTarget) == 0x000008, "Wrong alignment on RHealthbarWidget_ReinitHealthbarWithNewTarget");
static_assert(sizeof(RHealthbarWidget_ReinitHealthbarWithNewTarget) == 0x000008, "Wrong size on RHealthbarWidget_ReinitHealthbarWithNewTarget");
static_assert(offsetof(RHealthbarWidget_ReinitHealthbarWithNewTarget, NewComponent) == 0x000000, "Member 'RHealthbarWidget_ReinitHealthbarWithNewTarget::NewComponent' has a wrong offset!");

// Function RGame.RHealthbarWidget.SetHealthbarComponent
// 0x0008 (0x0008 - 0x0000)
struct RHealthbarWidget_SetHealthbarComponent final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_SetHealthbarComponent) == 0x000008, "Wrong alignment on RHealthbarWidget_SetHealthbarComponent");
static_assert(sizeof(RHealthbarWidget_SetHealthbarComponent) == 0x000008, "Wrong size on RHealthbarWidget_SetHealthbarComponent");
static_assert(offsetof(RHealthbarWidget_SetHealthbarComponent, Component) == 0x000000, "Member 'RHealthbarWidget_SetHealthbarComponent::Component' has a wrong offset!");

// Function RGame.RHealthbarWidget.SetName
// 0x0010 (0x0010 - 0x0000)
struct RHealthbarWidget_SetName final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthbarWidget_SetName) == 0x000008, "Wrong alignment on RHealthbarWidget_SetName");
static_assert(sizeof(RHealthbarWidget_SetName) == 0x000010, "Wrong size on RHealthbarWidget_SetName");
static_assert(offsetof(RHealthbarWidget_SetName, Name_0) == 0x000000, "Member 'RHealthbarWidget_SetName::Name_0' has a wrong offset!");

// Function RGame.RAIHelper.FindAndCreatePatrolingPathWithClosestPoints
// 0x0030 (0x0030 - 0x0000)
struct RAIHelper_FindAndCreatePatrolingPathWithClosestPoints final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints) == 0x000008, "Wrong alignment on RAIHelper_FindAndCreatePatrolingPathWithClosestPoints");
static_assert(sizeof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints) == 0x000030, "Wrong size on RAIHelper_FindAndCreatePatrolingPathWithClosestPoints");
static_assert(offsetof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints, Pawn) == 0x000000, "Member 'RAIHelper_FindAndCreatePatrolingPathWithClosestPoints::Pawn' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints, Tag) == 0x000008, "Member 'RAIHelper_FindAndCreatePatrolingPathWithClosestPoints::Tag' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints, OutLocation) == 0x000010, "Member 'RAIHelper_FindAndCreatePatrolingPathWithClosestPoints::OutLocation' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreatePatrolingPathWithClosestPoints, ReturnValue) == 0x000028, "Member 'RAIHelper_FindAndCreatePatrolingPathWithClosestPoints::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.FindAndCreateSpecifiedPatrolingPath
// 0x0030 (0x0030 - 0x0000)
struct RAIHelper_FindAndCreateSpecifiedPatrolingPath final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAIHelper_FindAndCreateSpecifiedPatrolingPath) == 0x000008, "Wrong alignment on RAIHelper_FindAndCreateSpecifiedPatrolingPath");
static_assert(sizeof(RAIHelper_FindAndCreateSpecifiedPatrolingPath) == 0x000030, "Wrong size on RAIHelper_FindAndCreateSpecifiedPatrolingPath");
static_assert(offsetof(RAIHelper_FindAndCreateSpecifiedPatrolingPath, Pawn) == 0x000000, "Member 'RAIHelper_FindAndCreateSpecifiedPatrolingPath::Pawn' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreateSpecifiedPatrolingPath, Tag) == 0x000008, "Member 'RAIHelper_FindAndCreateSpecifiedPatrolingPath::Tag' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreateSpecifiedPatrolingPath, OutLocation) == 0x000010, "Member 'RAIHelper_FindAndCreateSpecifiedPatrolingPath::OutLocation' has a wrong offset!");
static_assert(offsetof(RAIHelper_FindAndCreateSpecifiedPatrolingPath, ReturnValue) == 0x000028, "Member 'RAIHelper_FindAndCreateSpecifiedPatrolingPath::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetClosestMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct RAIHelper_GetClosestMoveToLocation final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAIHelper_GetClosestMoveToLocation) == 0x000008, "Wrong alignment on RAIHelper_GetClosestMoveToLocation");
static_assert(sizeof(RAIHelper_GetClosestMoveToLocation) == 0x000030, "Wrong size on RAIHelper_GetClosestMoveToLocation");
static_assert(offsetof(RAIHelper_GetClosestMoveToLocation, Pawn) == 0x000000, "Member 'RAIHelper_GetClosestMoveToLocation::Pawn' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetClosestMoveToLocation, Tag) == 0x000008, "Member 'RAIHelper_GetClosestMoveToLocation::Tag' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetClosestMoveToLocation, OutLocation) == 0x000010, "Member 'RAIHelper_GetClosestMoveToLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetClosestMoveToLocation, ReturnValue) == 0x000028, "Member 'RAIHelper_GetClosestMoveToLocation::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetInstance
// 0x0010 (0x0010 - 0x0000)
struct RAIHelper_GetInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARAIHelper*                       ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIHelper_GetInstance) == 0x000008, "Wrong alignment on RAIHelper_GetInstance");
static_assert(sizeof(RAIHelper_GetInstance) == 0x000010, "Wrong size on RAIHelper_GetInstance");
static_assert(offsetof(RAIHelper_GetInstance, WorldContextObject) == 0x000000, "Member 'RAIHelper_GetInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetInstance, ReturnValue) == 0x000008, "Member 'RAIHelper_GetInstance::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetRandomMoveToLocation
// 0x0030 (0x0030 - 0x0000)
struct RAIHelper_GetRandomMoveToLocation final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAIHelper_GetRandomMoveToLocation) == 0x000008, "Wrong alignment on RAIHelper_GetRandomMoveToLocation");
static_assert(sizeof(RAIHelper_GetRandomMoveToLocation) == 0x000030, "Wrong size on RAIHelper_GetRandomMoveToLocation");
static_assert(offsetof(RAIHelper_GetRandomMoveToLocation, Pawn) == 0x000000, "Member 'RAIHelper_GetRandomMoveToLocation::Pawn' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRandomMoveToLocation, Tag) == 0x000008, "Member 'RAIHelper_GetRandomMoveToLocation::Tag' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRandomMoveToLocation, OutLocation) == 0x000010, "Member 'RAIHelper_GetRandomMoveToLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRandomMoveToLocation, ReturnValue) == 0x000028, "Member 'RAIHelper_GetRandomMoveToLocation::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetRNavigationManager
// 0x0010 (0x0010 - 0x0000)
struct RAIHelper_GetRNavigationManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARNavigationManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIHelper_GetRNavigationManager) == 0x000008, "Wrong alignment on RAIHelper_GetRNavigationManager");
static_assert(sizeof(RAIHelper_GetRNavigationManager) == 0x000010, "Wrong size on RAIHelper_GetRNavigationManager");
static_assert(offsetof(RAIHelper_GetRNavigationManager, WorldContextObject) == 0x000000, "Member 'RAIHelper_GetRNavigationManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRNavigationManager, ReturnValue) == 0x000008, "Member 'RAIHelper_GetRNavigationManager::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetRNavigationManagerForActor
// 0x0010 (0x0010 - 0x0000)
struct RAIHelper_GetRNavigationManagerForActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARNavigationManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIHelper_GetRNavigationManagerForActor) == 0x000008, "Wrong alignment on RAIHelper_GetRNavigationManagerForActor");
static_assert(sizeof(RAIHelper_GetRNavigationManagerForActor) == 0x000010, "Wrong size on RAIHelper_GetRNavigationManagerForActor");
static_assert(offsetof(RAIHelper_GetRNavigationManagerForActor, Actor) == 0x000000, "Member 'RAIHelper_GetRNavigationManagerForActor::Actor' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRNavigationManagerForActor, ReturnValue) == 0x000008, "Member 'RAIHelper_GetRNavigationManagerForActor::ReturnValue' has a wrong offset!");

// Function RGame.RAIHelper.GetRNavigationManagerForLocation
// 0x0028 (0x0028 - 0x0000)
struct RAIHelper_GetRNavigationManagerForLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARNavigationManager*                    ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIHelper_GetRNavigationManagerForLocation) == 0x000008, "Wrong alignment on RAIHelper_GetRNavigationManagerForLocation");
static_assert(sizeof(RAIHelper_GetRNavigationManagerForLocation) == 0x000028, "Wrong size on RAIHelper_GetRNavigationManagerForLocation");
static_assert(offsetof(RAIHelper_GetRNavigationManagerForLocation, WorldContextObject) == 0x000000, "Member 'RAIHelper_GetRNavigationManagerForLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRNavigationManagerForLocation, Location) == 0x000008, "Member 'RAIHelper_GetRNavigationManagerForLocation::Location' has a wrong offset!");
static_assert(offsetof(RAIHelper_GetRNavigationManagerForLocation, ReturnValue) == 0x000020, "Member 'RAIHelper_GetRNavigationManagerForLocation::ReturnValue' has a wrong offset!");

// Function RGame.RAIMovementLocation.GetNextMovementLocation
// 0x0008 (0x0008 - 0x0000)
struct RAIMovementLocation_GetNextMovementLocation final
{
public:
	class ARAIMovementLocation*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAIMovementLocation_GetNextMovementLocation) == 0x000008, "Wrong alignment on RAIMovementLocation_GetNextMovementLocation");
static_assert(sizeof(RAIMovementLocation_GetNextMovementLocation) == 0x000008, "Wrong size on RAIMovementLocation_GetNextMovementLocation");
static_assert(offsetof(RAIMovementLocation_GetNextMovementLocation, ReturnValue) == 0x000000, "Member 'RAIMovementLocation_GetNextMovementLocation::ReturnValue' has a wrong offset!");

// Function RGame.RPrimaryDataAsset.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct RPrimaryDataAsset_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPrimaryDataAsset_GetDescription) == 0x000008, "Wrong alignment on RPrimaryDataAsset_GetDescription");
static_assert(sizeof(RPrimaryDataAsset_GetDescription) == 0x000010, "Wrong size on RPrimaryDataAsset_GetDescription");
static_assert(offsetof(RPrimaryDataAsset_GetDescription, ReturnValue) == 0x000000, "Member 'RPrimaryDataAsset_GetDescription::ReturnValue' has a wrong offset!");

// Function RGame.RAnimationNotifyListener.OnAnimationTriggerEvent
// 0x0008 (0x0008 - 0x0000)
struct RAnimationNotifyListener_OnAnimationTriggerEvent final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAnimationNotifyListener_OnAnimationTriggerEvent) == 0x000004, "Wrong alignment on RAnimationNotifyListener_OnAnimationTriggerEvent");
static_assert(sizeof(RAnimationNotifyListener_OnAnimationTriggerEvent) == 0x000008, "Wrong size on RAnimationNotifyListener_OnAnimationTriggerEvent");
static_assert(offsetof(RAnimationNotifyListener_OnAnimationTriggerEvent, EventName) == 0x000000, "Member 'RAnimationNotifyListener_OnAnimationTriggerEvent::EventName' has a wrong offset!");

// Function RGame.RAnimationNotifyListener.OnToggleEvent
// 0x000C (0x000C - 0x0000)
struct RAnimationNotifyListener_OnToggleEvent final
{
public:
	class FName                                   Socket;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bool;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAnimationNotifyListener_OnToggleEvent) == 0x000004, "Wrong alignment on RAnimationNotifyListener_OnToggleEvent");
static_assert(sizeof(RAnimationNotifyListener_OnToggleEvent) == 0x00000C, "Wrong size on RAnimationNotifyListener_OnToggleEvent");
static_assert(offsetof(RAnimationNotifyListener_OnToggleEvent, Socket) == 0x000000, "Member 'RAnimationNotifyListener_OnToggleEvent::Socket' has a wrong offset!");
static_assert(offsetof(RAnimationNotifyListener_OnToggleEvent, Bool) == 0x000008, "Member 'RAnimationNotifyListener_OnToggleEvent::Bool' has a wrong offset!");

// Function RGame.RGEnemyMutatorScript.K2_OnDamageDealt
// 0x00C0 (0x00C0 - 0x0000)
struct RGEnemyMutatorScript_K2_OnDamageDealt final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyMutatorScript_K2_OnDamageDealt) == 0x000008, "Wrong alignment on RGEnemyMutatorScript_K2_OnDamageDealt");
static_assert(sizeof(RGEnemyMutatorScript_K2_OnDamageDealt) == 0x0000C0, "Wrong size on RGEnemyMutatorScript_K2_OnDamageDealt");
static_assert(offsetof(RGEnemyMutatorScript_K2_OnDamageDealt, DamageCombatEvent) == 0x000000, "Member 'RGEnemyMutatorScript_K2_OnDamageDealt::DamageCombatEvent' has a wrong offset!");

// Function RGame.RGEnemyMutatorScript.K2_OnPreDamageDealt
// 0x00C0 (0x00C0 - 0x0000)
struct RGEnemyMutatorScript_K2_OnPreDamageDealt final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyMutatorScript_K2_OnPreDamageDealt) == 0x000008, "Wrong alignment on RGEnemyMutatorScript_K2_OnPreDamageDealt");
static_assert(sizeof(RGEnemyMutatorScript_K2_OnPreDamageDealt) == 0x0000C0, "Wrong size on RGEnemyMutatorScript_K2_OnPreDamageDealt");
static_assert(offsetof(RGEnemyMutatorScript_K2_OnPreDamageDealt, DamageCombatEvent) == 0x000000, "Member 'RGEnemyMutatorScript_K2_OnPreDamageDealt::DamageCombatEvent' has a wrong offset!");

// Function RGame.RGEnemyMutatorScript.OnDamageDealt
// 0x00C0 (0x00C0 - 0x0000)
struct RGEnemyMutatorScript_OnDamageDealt final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyMutatorScript_OnDamageDealt) == 0x000008, "Wrong alignment on RGEnemyMutatorScript_OnDamageDealt");
static_assert(sizeof(RGEnemyMutatorScript_OnDamageDealt) == 0x0000C0, "Wrong size on RGEnemyMutatorScript_OnDamageDealt");
static_assert(offsetof(RGEnemyMutatorScript_OnDamageDealt, DamageCombatEvent) == 0x000000, "Member 'RGEnemyMutatorScript_OnDamageDealt::DamageCombatEvent' has a wrong offset!");

// Function RGame.RGEnemyMutatorScript.OnPreDamageDealt
// 0x00C0 (0x00C0 - 0x0000)
struct RGEnemyMutatorScript_OnPreDamageDealt final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyMutatorScript_OnPreDamageDealt) == 0x000008, "Wrong alignment on RGEnemyMutatorScript_OnPreDamageDealt");
static_assert(sizeof(RGEnemyMutatorScript_OnPreDamageDealt) == 0x0000C0, "Wrong size on RGEnemyMutatorScript_OnPreDamageDealt");
static_assert(offsetof(RGEnemyMutatorScript_OnPreDamageDealt, DamageCombatEvent) == 0x000000, "Member 'RGEnemyMutatorScript_OnPreDamageDealt::DamageCombatEvent' has a wrong offset!");

// Function RGame.RAnimFunctionLibrary.GetMontageLength
// 0x0018 (0x0018 - 0x0000)
struct RAnimFunctionLibrary_GetMontageLength final
{
public:
	const class ARPlayerPawn*                     PlayerPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageSection;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Additive;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAnimFunctionLibrary_GetMontageLength) == 0x000008, "Wrong alignment on RAnimFunctionLibrary_GetMontageLength");
static_assert(sizeof(RAnimFunctionLibrary_GetMontageLength) == 0x000018, "Wrong size on RAnimFunctionLibrary_GetMontageLength");
static_assert(offsetof(RAnimFunctionLibrary_GetMontageLength, PlayerPawn) == 0x000000, "Member 'RAnimFunctionLibrary_GetMontageLength::PlayerPawn' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_GetMontageLength, MontageSection) == 0x000008, "Member 'RAnimFunctionLibrary_GetMontageLength::MontageSection' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_GetMontageLength, Additive) == 0x000010, "Member 'RAnimFunctionLibrary_GetMontageLength::Additive' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_GetMontageLength, ReturnValue) == 0x000014, "Member 'RAnimFunctionLibrary_GetMontageLength::ReturnValue' has a wrong offset!");

// Function RGame.RAnimFunctionLibrary.PlaySynchedMontage
// 0x0018 (0x0018 - 0x0000)
struct RAnimFunctionLibrary_PlaySynchedMontage final
{
public:
	const class ARPlayerPawn*                     PlayerPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageSection;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharacterAdditive;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ArmsAdditive;                                      // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAnimFunctionLibrary_PlaySynchedMontage) == 0x000008, "Wrong alignment on RAnimFunctionLibrary_PlaySynchedMontage");
static_assert(sizeof(RAnimFunctionLibrary_PlaySynchedMontage) == 0x000018, "Wrong size on RAnimFunctionLibrary_PlaySynchedMontage");
static_assert(offsetof(RAnimFunctionLibrary_PlaySynchedMontage, PlayerPawn) == 0x000000, "Member 'RAnimFunctionLibrary_PlaySynchedMontage::PlayerPawn' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_PlaySynchedMontage, MontageSection) == 0x000008, "Member 'RAnimFunctionLibrary_PlaySynchedMontage::MontageSection' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_PlaySynchedMontage, PlayRate) == 0x000010, "Member 'RAnimFunctionLibrary_PlaySynchedMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_PlaySynchedMontage, CharacterAdditive) == 0x000014, "Member 'RAnimFunctionLibrary_PlaySynchedMontage::CharacterAdditive' has a wrong offset!");
static_assert(offsetof(RAnimFunctionLibrary_PlaySynchedMontage, ArmsAdditive) == 0x000015, "Member 'RAnimFunctionLibrary_PlaySynchedMontage::ArmsAdditive' has a wrong offset!");

// Function RGame.RAreaEffect.AddAreaEffectScript
// 0x0008 (0x0008 - 0x0000)
struct RAreaEffect_AddAreaEffectScript final
{
public:
	TSubclassOf<class URGAreaEffectScript>        AreaEffectScript;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_AddAreaEffectScript) == 0x000008, "Wrong alignment on RAreaEffect_AddAreaEffectScript");
static_assert(sizeof(RAreaEffect_AddAreaEffectScript) == 0x000008, "Wrong size on RAreaEffect_AddAreaEffectScript");
static_assert(offsetof(RAreaEffect_AddAreaEffectScript, AreaEffectScript) == 0x000000, "Member 'RAreaEffect_AddAreaEffectScript::AreaEffectScript' has a wrong offset!");

// Function RGame.RAreaEffect.GetActorsInArea
// 0x0010 (0x0010 - 0x0000)
struct RAreaEffect_GetActorsInArea final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_GetActorsInArea) == 0x000008, "Wrong alignment on RAreaEffect_GetActorsInArea");
static_assert(sizeof(RAreaEffect_GetActorsInArea) == 0x000010, "Wrong size on RAreaEffect_GetActorsInArea");
static_assert(offsetof(RAreaEffect_GetActorsInArea, ReturnValue) == 0x000000, "Member 'RAreaEffect_GetActorsInArea::ReturnValue' has a wrong offset!");

// Function RGame.RAreaEffect.GetGScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RAreaEffect_GetGScriptComponent final
{
public:
	class URGScriptComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_GetGScriptComponent) == 0x000008, "Wrong alignment on RAreaEffect_GetGScriptComponent");
static_assert(sizeof(RAreaEffect_GetGScriptComponent) == 0x000008, "Wrong size on RAreaEffect_GetGScriptComponent");
static_assert(offsetof(RAreaEffect_GetGScriptComponent, ReturnValue) == 0x000000, "Member 'RAreaEffect_GetGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RAreaEffect.OnActorEnterArea
// 0x0008 (0x0008 - 0x0000)
struct RAreaEffect_OnActorEnterArea final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_OnActorEnterArea) == 0x000008, "Wrong alignment on RAreaEffect_OnActorEnterArea");
static_assert(sizeof(RAreaEffect_OnActorEnterArea) == 0x000008, "Wrong size on RAreaEffect_OnActorEnterArea");
static_assert(offsetof(RAreaEffect_OnActorEnterArea, OtherActor) == 0x000000, "Member 'RAreaEffect_OnActorEnterArea::OtherActor' has a wrong offset!");

// Function RGame.RAreaEffect.OnActorExitArea
// 0x0008 (0x0008 - 0x0000)
struct RAreaEffect_OnActorExitArea final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_OnActorExitArea) == 0x000008, "Wrong alignment on RAreaEffect_OnActorExitArea");
static_assert(sizeof(RAreaEffect_OnActorExitArea) == 0x000008, "Wrong size on RAreaEffect_OnActorExitArea");
static_assert(offsetof(RAreaEffect_OnActorExitArea, OtherActor) == 0x000000, "Member 'RAreaEffect_OnActorExitArea::OtherActor' has a wrong offset!");

// Function RGame.RAreaEffect.GetAreaEffectScripts
// 0x0010 (0x0010 - 0x0000)
struct RAreaEffect_GetAreaEffectScripts final
{
public:
	TArray<class URGAreaEffectScript*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAreaEffect_GetAreaEffectScripts) == 0x000008, "Wrong alignment on RAreaEffect_GetAreaEffectScripts");
static_assert(sizeof(RAreaEffect_GetAreaEffectScripts) == 0x000010, "Wrong size on RAreaEffect_GetAreaEffectScripts");
static_assert(offsetof(RAreaEffect_GetAreaEffectScripts, ReturnValue) == 0x000000, "Member 'RAreaEffect_GetAreaEffectScripts::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.GetPoolFromDataTable
// 0x0028 (0x0028 - 0x0000)
struct RGBossScript_GetPoolFromDataTable final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Phase;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetPoolOutcome                               Branches;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DesiredQueueLength;                                // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRBossAbilitySettings>          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_GetPoolFromDataTable) == 0x000008, "Wrong alignment on RGBossScript_GetPoolFromDataTable");
static_assert(sizeof(RGBossScript_GetPoolFromDataTable) == 0x000028, "Wrong size on RGBossScript_GetPoolFromDataTable");
static_assert(offsetof(RGBossScript_GetPoolFromDataTable, DataTable) == 0x000000, "Member 'RGBossScript_GetPoolFromDataTable::DataTable' has a wrong offset!");
static_assert(offsetof(RGBossScript_GetPoolFromDataTable, Phase) == 0x000008, "Member 'RGBossScript_GetPoolFromDataTable::Phase' has a wrong offset!");
static_assert(offsetof(RGBossScript_GetPoolFromDataTable, Branches) == 0x000010, "Member 'RGBossScript_GetPoolFromDataTable::Branches' has a wrong offset!");
static_assert(offsetof(RGBossScript_GetPoolFromDataTable, DesiredQueueLength) == 0x000014, "Member 'RGBossScript_GetPoolFromDataTable::DesiredQueueLength' has a wrong offset!");
static_assert(offsetof(RGBossScript_GetPoolFromDataTable, ReturnValue) == 0x000018, "Member 'RGBossScript_GetPoolFromDataTable::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.DequeueAbility
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_DequeueAbility final
{
public:
	TSubclassOf<class URGBossAbilityScript>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_DequeueAbility) == 0x000008, "Wrong alignment on RGBossScript_DequeueAbility");
static_assert(sizeof(RGBossScript_DequeueAbility) == 0x000008, "Wrong size on RGBossScript_DequeueAbility");
static_assert(offsetof(RGBossScript_DequeueAbility, ReturnValue) == 0x000000, "Member 'RGBossScript_DequeueAbility::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.EnqueueAbility
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_EnqueueAbility final
{
public:
	TSubclassOf<class URGBossAbilityScript>       AbilityScript;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_EnqueueAbility) == 0x000008, "Wrong alignment on RGBossScript_EnqueueAbility");
static_assert(sizeof(RGBossScript_EnqueueAbility) == 0x000008, "Wrong size on RGBossScript_EnqueueAbility");
static_assert(offsetof(RGBossScript_EnqueueAbility, AbilityScript) == 0x000000, "Member 'RGBossScript_EnqueueAbility::AbilityScript' has a wrong offset!");

// Function RGame.RGBossScript.EnqueueAbilityAt
// 0x0010 (0x0010 - 0x0000)
struct RGBossScript_EnqueueAbilityAt final
{
public:
	TSubclassOf<class URGBossAbilityScript>       AbilityScript;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGBossScript_EnqueueAbilityAt) == 0x000008, "Wrong alignment on RGBossScript_EnqueueAbilityAt");
static_assert(sizeof(RGBossScript_EnqueueAbilityAt) == 0x000010, "Wrong size on RGBossScript_EnqueueAbilityAt");
static_assert(offsetof(RGBossScript_EnqueueAbilityAt, AbilityScript) == 0x000000, "Member 'RGBossScript_EnqueueAbilityAt::AbilityScript' has a wrong offset!");
static_assert(offsetof(RGBossScript_EnqueueAbilityAt, Index_0) == 0x000008, "Member 'RGBossScript_EnqueueAbilityAt::Index_0' has a wrong offset!");

// Function RGame.RGBossScript.ExecuteAbility
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_ExecuteAbility final
{
public:
	TSubclassOf<class URGBossAbilityScript>       AbilityScript;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_ExecuteAbility) == 0x000008, "Wrong alignment on RGBossScript_ExecuteAbility");
static_assert(sizeof(RGBossScript_ExecuteAbility) == 0x000008, "Wrong size on RGBossScript_ExecuteAbility");
static_assert(offsetof(RGBossScript_ExecuteAbility, AbilityScript) == 0x000000, "Member 'RGBossScript_ExecuteAbility::AbilityScript' has a wrong offset!");

// Function RGame.RGBossScript.GetAbilityToEnqueue
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_GetAbilityToEnqueue final
{
public:
	TSubclassOf<class URGBossAbilityScript>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_GetAbilityToEnqueue) == 0x000008, "Wrong alignment on RGBossScript_GetAbilityToEnqueue");
static_assert(sizeof(RGBossScript_GetAbilityToEnqueue) == 0x000008, "Wrong size on RGBossScript_GetAbilityToEnqueue");
static_assert(offsetof(RGBossScript_GetAbilityToEnqueue, ReturnValue) == 0x000000, "Member 'RGBossScript_GetAbilityToEnqueue::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.GetCurrentPhase
// 0x0014 (0x0014 - 0x0000)
struct RGBossScript_GetCurrentPhase final
{
public:
	struct FBossPhase                             ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_GetCurrentPhase) == 0x000004, "Wrong alignment on RGBossScript_GetCurrentPhase");
static_assert(sizeof(RGBossScript_GetCurrentPhase) == 0x000014, "Wrong size on RGBossScript_GetCurrentPhase");
static_assert(offsetof(RGBossScript_GetCurrentPhase, ReturnValue) == 0x000000, "Member 'RGBossScript_GetCurrentPhase::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.GetCurrentPhaseName
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_GetCurrentPhaseName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_GetCurrentPhaseName) == 0x000004, "Wrong alignment on RGBossScript_GetCurrentPhaseName");
static_assert(sizeof(RGBossScript_GetCurrentPhaseName) == 0x000008, "Wrong size on RGBossScript_GetCurrentPhaseName");
static_assert(offsetof(RGBossScript_GetCurrentPhaseName, ReturnValue) == 0x000000, "Member 'RGBossScript_GetCurrentPhaseName::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.K2_OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RGBossScript_K2_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_K2_OnDamageTaken) == 0x000008, "Wrong alignment on RGBossScript_K2_OnDamageTaken");
static_assert(sizeof(RGBossScript_K2_OnDamageTaken) == 0x0000C8, "Wrong size on RGBossScript_K2_OnDamageTaken");
static_assert(offsetof(RGBossScript_K2_OnDamageTaken, Component) == 0x000000, "Member 'RGBossScript_K2_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGBossScript_K2_OnDamageTaken, DamageData) == 0x000008, "Member 'RGBossScript_K2_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RGBossScript.K2_OnEnterPhase
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_K2_OnEnterPhase final
{
public:
	class FName                                   Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_K2_OnEnterPhase) == 0x000004, "Wrong alignment on RGBossScript_K2_OnEnterPhase");
static_assert(sizeof(RGBossScript_K2_OnEnterPhase) == 0x000008, "Wrong size on RGBossScript_K2_OnEnterPhase");
static_assert(offsetof(RGBossScript_K2_OnEnterPhase, Phase) == 0x000000, "Member 'RGBossScript_K2_OnEnterPhase::Phase' has a wrong offset!");

// Function RGame.RGBossScript.K2_OnPreDamageTaken
// 0x0010 (0x0010 - 0x0000)
struct RGBossScript_K2_OnPreDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGBossScript_K2_OnPreDamageTaken) == 0x000008, "Wrong alignment on RGBossScript_K2_OnPreDamageTaken");
static_assert(sizeof(RGBossScript_K2_OnPreDamageTaken) == 0x000010, "Wrong size on RGBossScript_K2_OnPreDamageTaken");
static_assert(offsetof(RGBossScript_K2_OnPreDamageTaken, Component) == 0x000000, "Member 'RGBossScript_K2_OnPreDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGBossScript_K2_OnPreDamageTaken, Damage) == 0x000008, "Member 'RGBossScript_K2_OnPreDamageTaken::Damage' has a wrong offset!");

// Function RGame.RGBossScript.Multicast_OnEnterPhase
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_Multicast_OnEnterPhase final
{
public:
	class FName                                   Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_Multicast_OnEnterPhase) == 0x000004, "Wrong alignment on RGBossScript_Multicast_OnEnterPhase");
static_assert(sizeof(RGBossScript_Multicast_OnEnterPhase) == 0x000008, "Wrong size on RGBossScript_Multicast_OnEnterPhase");
static_assert(offsetof(RGBossScript_Multicast_OnEnterPhase, Phase) == 0x000000, "Member 'RGBossScript_Multicast_OnEnterPhase::Phase' has a wrong offset!");

// Function RGame.RGBossScript.OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RGBossScript_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_OnDamageTaken) == 0x000008, "Wrong alignment on RGBossScript_OnDamageTaken");
static_assert(sizeof(RGBossScript_OnDamageTaken) == 0x0000C8, "Wrong size on RGBossScript_OnDamageTaken");
static_assert(offsetof(RGBossScript_OnDamageTaken, Component) == 0x000000, "Member 'RGBossScript_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGBossScript_OnDamageTaken, DamageData) == 0x000008, "Member 'RGBossScript_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RGBossScript.OnEnterPhase
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_OnEnterPhase final
{
public:
	class FName                                   Phase;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_OnEnterPhase) == 0x000004, "Wrong alignment on RGBossScript_OnEnterPhase");
static_assert(sizeof(RGBossScript_OnEnterPhase) == 0x000008, "Wrong size on RGBossScript_OnEnterPhase");
static_assert(offsetof(RGBossScript_OnEnterPhase, Phase) == 0x000000, "Member 'RGBossScript_OnEnterPhase::Phase' has a wrong offset!");

// Function RGame.RGBossScript.OnHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RGBossScript_OnHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_OnHealthDepleted) == 0x000008, "Wrong alignment on RGBossScript_OnHealthDepleted");
static_assert(sizeof(RGBossScript_OnHealthDepleted) == 0x0000C8, "Wrong size on RGBossScript_OnHealthDepleted");
static_assert(offsetof(RGBossScript_OnHealthDepleted, Component) == 0x000000, "Member 'RGBossScript_OnHealthDepleted::Component' has a wrong offset!");
static_assert(offsetof(RGBossScript_OnHealthDepleted, DamageData) == 0x000008, "Member 'RGBossScript_OnHealthDepleted::DamageData' has a wrong offset!");

// Function RGame.RGBossScript.OnPreDamageTaken
// 0x0010 (0x0010 - 0x0000)
struct RGBossScript_OnPreDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGBossScript_OnPreDamageTaken) == 0x000008, "Wrong alignment on RGBossScript_OnPreDamageTaken");
static_assert(sizeof(RGBossScript_OnPreDamageTaken) == 0x000010, "Wrong size on RGBossScript_OnPreDamageTaken");
static_assert(offsetof(RGBossScript_OnPreDamageTaken, Component) == 0x000000, "Member 'RGBossScript_OnPreDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGBossScript_OnPreDamageTaken, Damage) == 0x000008, "Member 'RGBossScript_OnPreDamageTaken::Damage' has a wrong offset!");

// Function RGame.RGBossScript.PeekAbilityQueue
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_PeekAbilityQueue final
{
public:
	TSubclassOf<class URGBossAbilityScript>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_PeekAbilityQueue) == 0x000008, "Wrong alignment on RGBossScript_PeekAbilityQueue");
static_assert(sizeof(RGBossScript_PeekAbilityQueue) == 0x000008, "Wrong size on RGBossScript_PeekAbilityQueue");
static_assert(offsetof(RGBossScript_PeekAbilityQueue, ReturnValue) == 0x000000, "Member 'RGBossScript_PeekAbilityQueue::ReturnValue' has a wrong offset!");

// Function RGame.RGBossScript.SetCurrentPhaseQueueLength
// 0x0004 (0x0004 - 0x0000)
struct RGBossScript_SetCurrentPhaseQueueLength final
{
public:
	int32                                         NewLength;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_SetCurrentPhaseQueueLength) == 0x000004, "Wrong alignment on RGBossScript_SetCurrentPhaseQueueLength");
static_assert(sizeof(RGBossScript_SetCurrentPhaseQueueLength) == 0x000004, "Wrong size on RGBossScript_SetCurrentPhaseQueueLength");
static_assert(offsetof(RGBossScript_SetCurrentPhaseQueueLength, NewLength) == 0x000000, "Member 'RGBossScript_SetCurrentPhaseQueueLength::NewLength' has a wrong offset!");

// Function RGame.RGBossScript.GetActiveAbilityScript
// 0x0008 (0x0008 - 0x0000)
struct RGBossScript_GetActiveAbilityScript final
{
public:
	class URGBossAbilityScript*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossScript_GetActiveAbilityScript) == 0x000008, "Wrong alignment on RGBossScript_GetActiveAbilityScript");
static_assert(sizeof(RGBossScript_GetActiveAbilityScript) == 0x000008, "Wrong size on RGBossScript_GetActiveAbilityScript");
static_assert(offsetof(RGBossScript_GetActiveAbilityScript, ReturnValue) == 0x000000, "Member 'RGBossScript_GetActiveAbilityScript::ReturnValue' has a wrong offset!");

// Function RGame.RAssetLoader.GetAssetLoader
// 0x0010 (0x0010 - 0x0000)
struct RAssetLoader_GetAssetLoader final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARAssetLoader*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetLoader_GetAssetLoader) == 0x000008, "Wrong alignment on RAssetLoader_GetAssetLoader");
static_assert(sizeof(RAssetLoader_GetAssetLoader) == 0x000010, "Wrong size on RAssetLoader_GetAssetLoader");
static_assert(offsetof(RAssetLoader_GetAssetLoader, WorldContextObject) == 0x000000, "Member 'RAssetLoader_GetAssetLoader::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RAssetLoader_GetAssetLoader, ReturnValue) == 0x000008, "Member 'RAssetLoader_GetAssetLoader::ReturnValue' has a wrong offset!");

// Function RGame.RAssetLoader.OnAreaChanged
// 0x0008 (0x0008 - 0x0000)
struct RAssetLoader_OnAreaChanged final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetLoader_OnAreaChanged) == 0x000004, "Wrong alignment on RAssetLoader_OnAreaChanged");
static_assert(sizeof(RAssetLoader_OnAreaChanged) == 0x000008, "Wrong size on RAssetLoader_OnAreaChanged");
static_assert(offsetof(RAssetLoader_OnAreaChanged, AreaName) == 0x000000, "Member 'RAssetLoader_OnAreaChanged::AreaName' has a wrong offset!");

// Function RGame.RAssetLoader.OnPreAreaChanged
// 0x0008 (0x0008 - 0x0000)
struct RAssetLoader_OnPreAreaChanged final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetLoader_OnPreAreaChanged) == 0x000004, "Wrong alignment on RAssetLoader_OnPreAreaChanged");
static_assert(sizeof(RAssetLoader_OnPreAreaChanged) == 0x000008, "Wrong size on RAssetLoader_OnPreAreaChanged");
static_assert(offsetof(RAssetLoader_OnPreAreaChanged, AreaName) == 0x000000, "Member 'RAssetLoader_OnPreAreaChanged::AreaName' has a wrong offset!");

// Function RGame.RMutatorPrimaryAsset.SetMutatorDescription
// 0x0010 (0x0010 - 0x0000)
struct RMutatorPrimaryAsset_SetMutatorDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutatorPrimaryAsset_SetMutatorDescription) == 0x000008, "Wrong alignment on RMutatorPrimaryAsset_SetMutatorDescription");
static_assert(sizeof(RMutatorPrimaryAsset_SetMutatorDescription) == 0x000010, "Wrong size on RMutatorPrimaryAsset_SetMutatorDescription");
static_assert(offsetof(RMutatorPrimaryAsset_SetMutatorDescription, Description) == 0x000000, "Member 'RMutatorPrimaryAsset_SetMutatorDescription::Description' has a wrong offset!");

// Function RGame.RMutatorPrimaryAsset.GetMutatorName
// 0x0010 (0x0010 - 0x0000)
struct RMutatorPrimaryAsset_GetMutatorName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutatorPrimaryAsset_GetMutatorName) == 0x000008, "Wrong alignment on RMutatorPrimaryAsset_GetMutatorName");
static_assert(sizeof(RMutatorPrimaryAsset_GetMutatorName) == 0x000010, "Wrong size on RMutatorPrimaryAsset_GetMutatorName");
static_assert(offsetof(RMutatorPrimaryAsset_GetMutatorName, ReturnValue) == 0x000000, "Member 'RMutatorPrimaryAsset_GetMutatorName::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBaseScript.AddProjectileEffect
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBaseScript_AddProjectileEffect final
{
public:
	TSubclassOf<class URGProjectileEffectScript>  EffectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBaseScript_AddProjectileEffect) == 0x000008, "Wrong alignment on RProjectileBaseScript_AddProjectileEffect");
static_assert(sizeof(RProjectileBaseScript_AddProjectileEffect) == 0x000008, "Wrong size on RProjectileBaseScript_AddProjectileEffect");
static_assert(offsetof(RProjectileBaseScript_AddProjectileEffect, EffectClass) == 0x000000, "Member 'RProjectileBaseScript_AddProjectileEffect::EffectClass' has a wrong offset!");

// Function RGame.RProjectileBaseScript.SetStatusEffectsStack
// 0x0001 (0x0001 - 0x0000)
struct RProjectileBaseScript_SetStatusEffectsStack final
{
public:
	bool                                          bStack;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBaseScript_SetStatusEffectsStack) == 0x000001, "Wrong alignment on RProjectileBaseScript_SetStatusEffectsStack");
static_assert(sizeof(RProjectileBaseScript_SetStatusEffectsStack) == 0x000001, "Wrong size on RProjectileBaseScript_SetStatusEffectsStack");
static_assert(offsetof(RProjectileBaseScript_SetStatusEffectsStack, bStack) == 0x000000, "Member 'RProjectileBaseScript_SetStatusEffectsStack::bStack' has a wrong offset!");

// Function RGame.RProjectileBaseScript.GetOwningProjectile
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBaseScript_GetOwningProjectile final
{
public:
	class ARProjectileBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBaseScript_GetOwningProjectile) == 0x000008, "Wrong alignment on RProjectileBaseScript_GetOwningProjectile");
static_assert(sizeof(RProjectileBaseScript_GetOwningProjectile) == 0x000008, "Wrong size on RProjectileBaseScript_GetOwningProjectile");
static_assert(offsetof(RProjectileBaseScript_GetOwningProjectile, ReturnValue) == 0x000000, "Member 'RProjectileBaseScript_GetOwningProjectile::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAllDifficultyPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetAllDifficultyPrimaryAssets final
{
public:
	TArray<class URDifficultyPrimaryAsset*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAllDifficultyPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetAllDifficultyPrimaryAssets");
static_assert(sizeof(RAssetManager_GetAllDifficultyPrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetAllDifficultyPrimaryAssets");
static_assert(offsetof(RAssetManager_GetAllDifficultyPrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetAllDifficultyPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAllMutatorPrimaryAssets
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetAllMutatorPrimaryAssets final
{
public:
	bool                                          bAllowDisabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAssignedOnly;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAllMutatorPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetAllMutatorPrimaryAssets");
static_assert(sizeof(RAssetManager_GetAllMutatorPrimaryAssets) == 0x000018, "Wrong size on RAssetManager_GetAllMutatorPrimaryAssets");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssets, bAllowDisabled) == 0x000000, "Member 'RAssetManager_GetAllMutatorPrimaryAssets::bAllowDisabled' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssets, bAllowAssignedOnly) == 0x000001, "Member 'RAssetManager_GetAllMutatorPrimaryAssets::bAllowAssignedOnly' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssets, ReturnValue) == 0x000008, "Member 'RAssetManager_GetAllMutatorPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAllMutatorPrimaryAssetsRarityAndNameSorted
// 0x0020 (0x0020 - 0x0000)
struct RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted final
{
public:
	class ARLootTableManager*                     LootTableManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDisabled;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAssignedOnly;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted) == 0x000008, "Wrong alignment on RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted");
static_assert(sizeof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted) == 0x000020, "Wrong size on RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted, LootTableManager) == 0x000000, "Member 'RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted::LootTableManager' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted, bAllowDisabled) == 0x000008, "Member 'RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted::bAllowDisabled' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted, bAllowAssignedOnly) == 0x000009, "Member 'RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted::bAllowAssignedOnly' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted, ReturnValue) == 0x000010, "Member 'RAssetManager_GetAllMutatorPrimaryAssetsRarityAndNameSorted::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAllRewardTablePrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetAllRewardTablePrimaryAssets final
{
public:
	TArray<class URRewardTablePrimaryAsset*>      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAllRewardTablePrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetAllRewardTablePrimaryAssets");
static_assert(sizeof(RAssetManager_GetAllRewardTablePrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetAllRewardTablePrimaryAssets");
static_assert(offsetof(RAssetManager_GetAllRewardTablePrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetAllRewardTablePrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAllSkillTreeCategoryPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetAllSkillTreeCategoryPrimaryAssets final
{
public:
	TArray<class URSkillTreeCategoryPrimaryAsset*> ReturnValue;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAllSkillTreeCategoryPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetAllSkillTreeCategoryPrimaryAssets");
static_assert(sizeof(RAssetManager_GetAllSkillTreeCategoryPrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetAllSkillTreeCategoryPrimaryAssets");
static_assert(offsetof(RAssetManager_GetAllSkillTreeCategoryPrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetAllSkillTreeCategoryPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetAssetManager
// 0x0008 (0x0008 - 0x0000)
struct RAssetManager_GetAssetManager final
{
public:
	class URAssetManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetAssetManager) == 0x000008, "Wrong alignment on RAssetManager_GetAssetManager");
static_assert(sizeof(RAssetManager_GetAssetManager) == 0x000008, "Wrong size on RAssetManager_GetAssetManager");
static_assert(offsetof(RAssetManager_GetAssetManager, ReturnValue) == 0x000000, "Member 'RAssetManager_GetAssetManager::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetCharacterMutatorPrimaryAssets
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetCharacterMutatorPrimaryAssets final
{
public:
	bool                                          bAllowDisabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URCharacterMutatorPrimaryAsset*> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetCharacterMutatorPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetCharacterMutatorPrimaryAssets");
static_assert(sizeof(RAssetManager_GetCharacterMutatorPrimaryAssets) == 0x000018, "Wrong size on RAssetManager_GetCharacterMutatorPrimaryAssets");
static_assert(offsetof(RAssetManager_GetCharacterMutatorPrimaryAssets, bAllowDisabled) == 0x000000, "Member 'RAssetManager_GetCharacterMutatorPrimaryAssets::bAllowDisabled' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetCharacterMutatorPrimaryAssets, ReturnValue) == 0x000008, "Member 'RAssetManager_GetCharacterMutatorPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetMutatorPreloadBlueprintData
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetMutatorPreloadBlueprintData final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetMutatorPreloadBlueprintData) == 0x000008, "Wrong alignment on RAssetManager_GetMutatorPreloadBlueprintData");
static_assert(sizeof(RAssetManager_GetMutatorPreloadBlueprintData) == 0x000018, "Wrong size on RAssetManager_GetMutatorPreloadBlueprintData");
static_assert(offsetof(RAssetManager_GetMutatorPreloadBlueprintData, Table) == 0x000000, "Member 'RAssetManager_GetMutatorPreloadBlueprintData::Table' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetMutatorPreloadBlueprintData, ReturnValue) == 0x000008, "Member 'RAssetManager_GetMutatorPreloadBlueprintData::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetMutatorPreloadPrimaryAssetData
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetMutatorPreloadPrimaryAssetData final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetMutatorPreloadPrimaryAssetData) == 0x000008, "Wrong alignment on RAssetManager_GetMutatorPreloadPrimaryAssetData");
static_assert(sizeof(RAssetManager_GetMutatorPreloadPrimaryAssetData) == 0x000018, "Wrong size on RAssetManager_GetMutatorPreloadPrimaryAssetData");
static_assert(offsetof(RAssetManager_GetMutatorPreloadPrimaryAssetData, Table) == 0x000000, "Member 'RAssetManager_GetMutatorPreloadPrimaryAssetData::Table' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetMutatorPreloadPrimaryAssetData, ReturnValue) == 0x000008, "Member 'RAssetManager_GetMutatorPreloadPrimaryAssetData::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetPreloadData
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetPreloadData final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetPreloadData) == 0x000008, "Wrong alignment on RAssetManager_GetPreloadData");
static_assert(sizeof(RAssetManager_GetPreloadData) == 0x000018, "Wrong size on RAssetManager_GetPreloadData");
static_assert(offsetof(RAssetManager_GetPreloadData, Table) == 0x000000, "Member 'RAssetManager_GetPreloadData::Table' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetPreloadData, ReturnValue) == 0x000008, "Member 'RAssetManager_GetPreloadData::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetPrimaryAssetsFromType
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetPrimaryAssetsFromType final
{
public:
	struct FPrimaryAssetType                      Type;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URPrimaryDataAsset*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetPrimaryAssetsFromType) == 0x000008, "Wrong alignment on RAssetManager_GetPrimaryAssetsFromType");
static_assert(sizeof(RAssetManager_GetPrimaryAssetsFromType) == 0x000018, "Wrong size on RAssetManager_GetPrimaryAssetsFromType");
static_assert(offsetof(RAssetManager_GetPrimaryAssetsFromType, Type) == 0x000000, "Member 'RAssetManager_GetPrimaryAssetsFromType::Type' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetPrimaryAssetsFromType, ReturnValue) == 0x000008, "Member 'RAssetManager_GetPrimaryAssetsFromType::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetProjectileMutatorPrimaryAssets
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetProjectileMutatorPrimaryAssets final
{
public:
	bool                                          bAllowDisabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URProjectileMutatorPrimaryAsset*> ReturnValue;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetProjectileMutatorPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetProjectileMutatorPrimaryAssets");
static_assert(sizeof(RAssetManager_GetProjectileMutatorPrimaryAssets) == 0x000018, "Wrong size on RAssetManager_GetProjectileMutatorPrimaryAssets");
static_assert(offsetof(RAssetManager_GetProjectileMutatorPrimaryAssets, bAllowDisabled) == 0x000000, "Member 'RAssetManager_GetProjectileMutatorPrimaryAssets::bAllowDisabled' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetProjectileMutatorPrimaryAssets, ReturnValue) == 0x000008, "Member 'RAssetManager_GetProjectileMutatorPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetSelectableActivatableCharacterMutatorPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets final
{
public:
	TArray<class URCharacterMutatorPrimaryAsset*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets");
static_assert(sizeof(RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets");
static_assert(offsetof(RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetSelectableActivatableCharacterMutatorPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetTotemTablePrimaryAsset
// 0x0008 (0x0008 - 0x0000)
struct RAssetManager_GetTotemTablePrimaryAsset final
{
public:
	class URTotemTablePrimaryAsset*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetTotemTablePrimaryAsset) == 0x000008, "Wrong alignment on RAssetManager_GetTotemTablePrimaryAsset");
static_assert(sizeof(RAssetManager_GetTotemTablePrimaryAsset) == 0x000008, "Wrong size on RAssetManager_GetTotemTablePrimaryAsset");
static_assert(offsetof(RAssetManager_GetTotemTablePrimaryAsset, ReturnValue) == 0x000000, "Member 'RAssetManager_GetTotemTablePrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetWeaponModPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetWeaponModPrimaryAssets final
{
public:
	TArray<class URWeaponModPrimaryAsset*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetWeaponModPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetWeaponModPrimaryAssets");
static_assert(sizeof(RAssetManager_GetWeaponModPrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetWeaponModPrimaryAssets");
static_assert(offsetof(RAssetManager_GetWeaponModPrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetWeaponModPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetWeaponMutatorPrimaryAssets
// 0x0018 (0x0018 - 0x0000)
struct RAssetManager_GetWeaponMutatorPrimaryAssets final
{
public:
	bool                                          bAllowDisabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URWeaponMutatorPrimaryAsset*>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetWeaponMutatorPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetWeaponMutatorPrimaryAssets");
static_assert(sizeof(RAssetManager_GetWeaponMutatorPrimaryAssets) == 0x000018, "Wrong size on RAssetManager_GetWeaponMutatorPrimaryAssets");
static_assert(offsetof(RAssetManager_GetWeaponMutatorPrimaryAssets, bAllowDisabled) == 0x000000, "Member 'RAssetManager_GetWeaponMutatorPrimaryAssets::bAllowDisabled' has a wrong offset!");
static_assert(offsetof(RAssetManager_GetWeaponMutatorPrimaryAssets, ReturnValue) == 0x000008, "Member 'RAssetManager_GetWeaponMutatorPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.GetWeaponPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_GetWeaponPrimaryAssets final
{
public:
	TArray<class URWeaponPrimaryAsset*>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_GetWeaponPrimaryAssets) == 0x000008, "Wrong alignment on RAssetManager_GetWeaponPrimaryAssets");
static_assert(sizeof(RAssetManager_GetWeaponPrimaryAssets) == 0x000010, "Wrong size on RAssetManager_GetWeaponPrimaryAssets");
static_assert(offsetof(RAssetManager_GetWeaponPrimaryAssets, ReturnValue) == 0x000000, "Member 'RAssetManager_GetWeaponPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.IsAssetLoaded
// 0x0028 (0x0028 - 0x0000)
struct RAssetManager_IsAssetLoaded final
{
public:
	struct FSoftObjectPath                        Path;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RAssetManager_IsAssetLoaded) == 0x000008, "Wrong alignment on RAssetManager_IsAssetLoaded");
static_assert(sizeof(RAssetManager_IsAssetLoaded) == 0x000028, "Wrong size on RAssetManager_IsAssetLoaded");
static_assert(offsetof(RAssetManager_IsAssetLoaded, Path) == 0x000000, "Member 'RAssetManager_IsAssetLoaded::Path' has a wrong offset!");
static_assert(offsetof(RAssetManager_IsAssetLoaded, ReturnValue) == 0x000020, "Member 'RAssetManager_IsAssetLoaded::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.LoadClassFromSoftClassPtr
// 0x0030 (0x0030 - 0x0000)
struct RAssetManager_LoadClassFromSoftClassPtr final
{
public:
	TSoftClassPtr<class UClass>                   SoftClassPtr;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_LoadClassFromSoftClassPtr) == 0x000008, "Wrong alignment on RAssetManager_LoadClassFromSoftClassPtr");
static_assert(sizeof(RAssetManager_LoadClassFromSoftClassPtr) == 0x000030, "Wrong size on RAssetManager_LoadClassFromSoftClassPtr");
static_assert(offsetof(RAssetManager_LoadClassFromSoftClassPtr, SoftClassPtr) == 0x000000, "Member 'RAssetManager_LoadClassFromSoftClassPtr::SoftClassPtr' has a wrong offset!");
static_assert(offsetof(RAssetManager_LoadClassFromSoftClassPtr, ReturnValue) == 0x000028, "Member 'RAssetManager_LoadClassFromSoftClassPtr::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.LoadObjectFromSoftObjectPtr
// 0x0030 (0x0030 - 0x0000)
struct RAssetManager_LoadObjectFromSoftObjectPtr final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObjectPtr;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_LoadObjectFromSoftObjectPtr) == 0x000008, "Wrong alignment on RAssetManager_LoadObjectFromSoftObjectPtr");
static_assert(sizeof(RAssetManager_LoadObjectFromSoftObjectPtr) == 0x000030, "Wrong size on RAssetManager_LoadObjectFromSoftObjectPtr");
static_assert(offsetof(RAssetManager_LoadObjectFromSoftObjectPtr, SoftObjectPtr) == 0x000000, "Member 'RAssetManager_LoadObjectFromSoftObjectPtr::SoftObjectPtr' has a wrong offset!");
static_assert(offsetof(RAssetManager_LoadObjectFromSoftObjectPtr, ReturnValue) == 0x000028, "Member 'RAssetManager_LoadObjectFromSoftObjectPtr::ReturnValue' has a wrong offset!");

// Function RGame.RAssetManager.RequestAsyncLoadAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_RequestAsyncLoadAssets final
{
public:
	TArray<struct FSoftObjectPath>                Paths;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_RequestAsyncLoadAssets) == 0x000008, "Wrong alignment on RAssetManager_RequestAsyncLoadAssets");
static_assert(sizeof(RAssetManager_RequestAsyncLoadAssets) == 0x000010, "Wrong size on RAssetManager_RequestAsyncLoadAssets");
static_assert(offsetof(RAssetManager_RequestAsyncLoadAssets, Paths) == 0x000000, "Member 'RAssetManager_RequestAsyncLoadAssets::Paths' has a wrong offset!");

// Function RGame.RAssetManager.RequestSyncLoadAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_RequestSyncLoadAssets final
{
public:
	TArray<struct FSoftObjectPath>                Paths;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_RequestSyncLoadAssets) == 0x000008, "Wrong alignment on RAssetManager_RequestSyncLoadAssets");
static_assert(sizeof(RAssetManager_RequestSyncLoadAssets) == 0x000010, "Wrong size on RAssetManager_RequestSyncLoadAssets");
static_assert(offsetof(RAssetManager_RequestSyncLoadAssets, Paths) == 0x000000, "Member 'RAssetManager_RequestSyncLoadAssets::Paths' has a wrong offset!");

// Function RGame.RAssetManager.UnloadAssets
// 0x0010 (0x0010 - 0x0000)
struct RAssetManager_UnloadAssets final
{
public:
	TArray<struct FSoftObjectPath>                Paths;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAssetManager_UnloadAssets) == 0x000008, "Wrong alignment on RAssetManager_UnloadAssets");
static_assert(sizeof(RAssetManager_UnloadAssets) == 0x000010, "Wrong size on RAssetManager_UnloadAssets");
static_assert(offsetof(RAssetManager_UnloadAssets, Paths) == 0x000000, "Member 'RAssetManager_UnloadAssets::Paths' has a wrong offset!");

// Function RGame.RAudioMixingSubsystem.GetDefaultSFXSubmix
// 0x0008 (0x0008 - 0x0000)
struct RAudioMixingSubsystem_GetDefaultSFXSubmix final
{
public:
	class USoundSubmix*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAudioMixingSubsystem_GetDefaultSFXSubmix) == 0x000008, "Wrong alignment on RAudioMixingSubsystem_GetDefaultSFXSubmix");
static_assert(sizeof(RAudioMixingSubsystem_GetDefaultSFXSubmix) == 0x000008, "Wrong size on RAudioMixingSubsystem_GetDefaultSFXSubmix");
static_assert(offsetof(RAudioMixingSubsystem_GetDefaultSFXSubmix, ReturnValue) == 0x000000, "Member 'RAudioMixingSubsystem_GetDefaultSFXSubmix::ReturnValue' has a wrong offset!");

// Function RGame.RAudioMixingSubsystem.GetNonLocalPlayerEnemyVolumeMultiplier
// 0x0008 (0x0008 - 0x0000)
struct RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier final
{
public:
	bool                                          bIsLocal;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier) == 0x000004, "Wrong alignment on RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier");
static_assert(sizeof(RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier) == 0x000008, "Wrong size on RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier");
static_assert(offsetof(RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier, bIsLocal) == 0x000000, "Member 'RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier::bIsLocal' has a wrong offset!");
static_assert(offsetof(RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier, ReturnValue) == 0x000004, "Member 'RAudioMixingSubsystem_GetNonLocalPlayerEnemyVolumeMultiplier::ReturnValue' has a wrong offset!");

// Function RGame.RAudioMixingSubsystem.GetNonLocalPlayerVolumeMultiplier
// 0x0008 (0x0008 - 0x0000)
struct RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier final
{
public:
	bool                                          bIsLocal;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier) == 0x000004, "Wrong alignment on RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier");
static_assert(sizeof(RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier) == 0x000008, "Wrong size on RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier");
static_assert(offsetof(RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier, bIsLocal) == 0x000000, "Member 'RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier::bIsLocal' has a wrong offset!");
static_assert(offsetof(RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier, ReturnValue) == 0x000004, "Member 'RAudioMixingSubsystem_GetNonLocalPlayerVolumeMultiplier::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_SpawnPlayerSound.SpawnPlayerSound
// 0x0078 (0x0078 - 0x0000)
struct RGTask_SpawnPlayerSound_SpawnPlayerSound final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_SpawnPlayerSound*               ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_SpawnPlayerSound_SpawnPlayerSound) == 0x000008, "Wrong alignment on RGTask_SpawnPlayerSound_SpawnPlayerSound");
static_assert(sizeof(RGTask_SpawnPlayerSound_SpawnPlayerSound) == 0x000078, "Wrong size on RGTask_SpawnPlayerSound_SpawnPlayerSound");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, OwningScript) == 0x000000, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, Sound) == 0x000008, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::Sound' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, AttachToComponent) == 0x000010, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::AttachToComponent' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, AttachPointName) == 0x000018, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::AttachPointName' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, Location) == 0x000020, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::Location' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, Rotation) == 0x000038, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::Rotation' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, VolumeMultiplier) == 0x000050, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, PitchMultiplier) == 0x000054, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, StartTime) == 0x000058, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::StartTime' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, AttenuationSettings) == 0x000060, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, ConcurrencySettings) == 0x000068, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnPlayerSound_SpawnPlayerSound, ReturnValue) == 0x000070, "Member 'RGTask_SpawnPlayerSound_SpawnPlayerSound::ReturnValue' has a wrong offset!");

// Function RGame.RAudioSettings.GetPlayer2DAttenuation
// 0x0008 (0x0008 - 0x0000)
struct RAudioSettings_GetPlayer2DAttenuation final
{
public:
	class USoundAttenuation*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAudioSettings_GetPlayer2DAttenuation) == 0x000008, "Wrong alignment on RAudioSettings_GetPlayer2DAttenuation");
static_assert(sizeof(RAudioSettings_GetPlayer2DAttenuation) == 0x000008, "Wrong size on RAudioSettings_GetPlayer2DAttenuation");
static_assert(offsetof(RAudioSettings_GetPlayer2DAttenuation, ReturnValue) == 0x000000, "Member 'RAudioSettings_GetPlayer2DAttenuation::ReturnValue' has a wrong offset!");

// Function RGame.RAudioSettings.GetWeapon2DAttenuation
// 0x0008 (0x0008 - 0x0000)
struct RAudioSettings_GetWeapon2DAttenuation final
{
public:
	class USoundAttenuation*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAudioSettings_GetWeapon2DAttenuation) == 0x000008, "Wrong alignment on RAudioSettings_GetWeapon2DAttenuation");
static_assert(sizeof(RAudioSettings_GetWeapon2DAttenuation) == 0x000008, "Wrong size on RAudioSettings_GetWeapon2DAttenuation");
static_assert(offsetof(RAudioSettings_GetWeapon2DAttenuation, ReturnValue) == 0x000000, "Member 'RAudioSettings_GetWeapon2DAttenuation::ReturnValue' has a wrong offset!");

// Function RGame.RAutomatedTestManager.GetTestManager
// 0x0010 (0x0010 - 0x0000)
struct RAutomatedTestManager_GetTestManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARAutomatedTestManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RAutomatedTestManager_GetTestManager) == 0x000008, "Wrong alignment on RAutomatedTestManager_GetTestManager");
static_assert(sizeof(RAutomatedTestManager_GetTestManager) == 0x000010, "Wrong size on RAutomatedTestManager_GetTestManager");
static_assert(offsetof(RAutomatedTestManager_GetTestManager, WorldContextObject) == 0x000000, "Member 'RAutomatedTestManager_GetTestManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RAutomatedTestManager_GetTestManager, ReturnValue) == 0x000008, "Member 'RAutomatedTestManager_GetTestManager::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnAbilityActivate
// 0x0004 (0x0004 - 0x0000)
struct RGCharacterScript_K2_OnAbilityActivate final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnAbilityActivate) == 0x000004, "Wrong alignment on RGCharacterScript_K2_OnAbilityActivate");
static_assert(sizeof(RGCharacterScript_K2_OnAbilityActivate) == 0x000004, "Wrong size on RGCharacterScript_K2_OnAbilityActivate");
static_assert(offsetof(RGCharacterScript_K2_OnAbilityActivate, AbilityIndex) == 0x000000, "Member 'RGCharacterScript_K2_OnAbilityActivate::AbilityIndex' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnAbilityFired
// 0x0008 (0x0008 - 0x0000)
struct RGCharacterScript_K2_OnAbilityFired final
{
public:
	class URGScript*                              AbilityScript;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnAbilityFired) == 0x000008, "Wrong alignment on RGCharacterScript_K2_OnAbilityFired");
static_assert(sizeof(RGCharacterScript_K2_OnAbilityFired) == 0x000008, "Wrong size on RGCharacterScript_K2_OnAbilityFired");
static_assert(offsetof(RGCharacterScript_K2_OnAbilityFired, AbilityScript) == 0x000000, "Member 'RGCharacterScript_K2_OnAbilityFired::AbilityScript' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnAbilityReleased
// 0x0004 (0x0004 - 0x0000)
struct RGCharacterScript_K2_OnAbilityReleased final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnAbilityReleased) == 0x000004, "Wrong alignment on RGCharacterScript_K2_OnAbilityReleased");
static_assert(sizeof(RGCharacterScript_K2_OnAbilityReleased) == 0x000004, "Wrong size on RGCharacterScript_K2_OnAbilityReleased");
static_assert(offsetof(RGCharacterScript_K2_OnAbilityReleased, AbilityIndex) == 0x000000, "Member 'RGCharacterScript_K2_OnAbilityReleased::AbilityIndex' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RGCharacterScript_K2_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnDamageTaken) == 0x000008, "Wrong alignment on RGCharacterScript_K2_OnDamageTaken");
static_assert(sizeof(RGCharacterScript_K2_OnDamageTaken) == 0x0000C8, "Wrong size on RGCharacterScript_K2_OnDamageTaken");
static_assert(offsetof(RGCharacterScript_K2_OnDamageTaken, Component) == 0x000000, "Member 'RGCharacterScript_K2_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_K2_OnDamageTaken, DamageData) == 0x000008, "Member 'RGCharacterScript_K2_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGCharacterScript_K2_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnEnemyKilled) == 0x000008, "Wrong alignment on RGCharacterScript_K2_OnEnemyKilled");
static_assert(sizeof(RGCharacterScript_K2_OnEnemyKilled) == 0x000008, "Wrong size on RGCharacterScript_K2_OnEnemyKilled");
static_assert(offsetof(RGCharacterScript_K2_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGCharacterScript_K2_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnPreDamageTaken
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterScript_K2_OnPreDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSourceMask;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_K2_OnPreDamageTaken) == 0x000008, "Wrong alignment on RGCharacterScript_K2_OnPreDamageTaken");
static_assert(sizeof(RGCharacterScript_K2_OnPreDamageTaken) == 0x000010, "Wrong size on RGCharacterScript_K2_OnPreDamageTaken");
static_assert(offsetof(RGCharacterScript_K2_OnPreDamageTaken, Component) == 0x000000, "Member 'RGCharacterScript_K2_OnPreDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_K2_OnPreDamageTaken, Damage) == 0x000008, "Member 'RGCharacterScript_K2_OnPreDamageTaken::Damage' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_K2_OnPreDamageTaken, DamageSourceMask) == 0x00000C, "Member 'RGCharacterScript_K2_OnPreDamageTaken::DamageSourceMask' has a wrong offset!");

// Function RGame.RGCharacterScript.K2_OnStatusEffectTicked
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterScript_K2_OnStatusEffectTicked final
{
public:
	class URGScript*                              StatusEffectScript;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterScript_K2_OnStatusEffectTicked) == 0x000008, "Wrong alignment on RGCharacterScript_K2_OnStatusEffectTicked");
static_assert(sizeof(RGCharacterScript_K2_OnStatusEffectTicked) == 0x000010, "Wrong size on RGCharacterScript_K2_OnStatusEffectTicked");
static_assert(offsetof(RGCharacterScript_K2_OnStatusEffectTicked, StatusEffectScript) == 0x000000, "Member 'RGCharacterScript_K2_OnStatusEffectTicked::StatusEffectScript' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_K2_OnStatusEffectTicked, DeltaTime) == 0x000008, "Member 'RGCharacterScript_K2_OnStatusEffectTicked::DeltaTime' has a wrong offset!");

// Function RGame.RGCharacterScript.OnAbilityActivate
// 0x0004 (0x0004 - 0x0000)
struct RGCharacterScript_OnAbilityActivate final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnAbilityActivate) == 0x000004, "Wrong alignment on RGCharacterScript_OnAbilityActivate");
static_assert(sizeof(RGCharacterScript_OnAbilityActivate) == 0x000004, "Wrong size on RGCharacterScript_OnAbilityActivate");
static_assert(offsetof(RGCharacterScript_OnAbilityActivate, AbilityIndex) == 0x000000, "Member 'RGCharacterScript_OnAbilityActivate::AbilityIndex' has a wrong offset!");

// Function RGame.RGCharacterScript.OnAbilityFired
// 0x0008 (0x0008 - 0x0000)
struct RGCharacterScript_OnAbilityFired final
{
public:
	class URGScript*                              AbilityScript;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnAbilityFired) == 0x000008, "Wrong alignment on RGCharacterScript_OnAbilityFired");
static_assert(sizeof(RGCharacterScript_OnAbilityFired) == 0x000008, "Wrong size on RGCharacterScript_OnAbilityFired");
static_assert(offsetof(RGCharacterScript_OnAbilityFired, AbilityScript) == 0x000000, "Member 'RGCharacterScript_OnAbilityFired::AbilityScript' has a wrong offset!");

// Function RGame.RGCharacterScript.OnAbilityReleased
// 0x0004 (0x0004 - 0x0000)
struct RGCharacterScript_OnAbilityReleased final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnAbilityReleased) == 0x000004, "Wrong alignment on RGCharacterScript_OnAbilityReleased");
static_assert(sizeof(RGCharacterScript_OnAbilityReleased) == 0x000004, "Wrong size on RGCharacterScript_OnAbilityReleased");
static_assert(offsetof(RGCharacterScript_OnAbilityReleased, AbilityIndex) == 0x000000, "Member 'RGCharacterScript_OnAbilityReleased::AbilityIndex' has a wrong offset!");

// Function RGame.RGCharacterScript.OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RGCharacterScript_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnDamageTaken) == 0x000008, "Wrong alignment on RGCharacterScript_OnDamageTaken");
static_assert(sizeof(RGCharacterScript_OnDamageTaken) == 0x0000C8, "Wrong size on RGCharacterScript_OnDamageTaken");
static_assert(offsetof(RGCharacterScript_OnDamageTaken, Component) == 0x000000, "Member 'RGCharacterScript_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_OnDamageTaken, DamageData) == 0x000008, "Member 'RGCharacterScript_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RGCharacterScript.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGCharacterScript_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnEnemyKilled) == 0x000008, "Wrong alignment on RGCharacterScript_OnEnemyKilled");
static_assert(sizeof(RGCharacterScript_OnEnemyKilled) == 0x000008, "Wrong size on RGCharacterScript_OnEnemyKilled");
static_assert(offsetof(RGCharacterScript_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGCharacterScript_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGCharacterScript.OnPreDamageTaken
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterScript_OnPreDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSourceMask;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnPreDamageTaken) == 0x000008, "Wrong alignment on RGCharacterScript_OnPreDamageTaken");
static_assert(sizeof(RGCharacterScript_OnPreDamageTaken) == 0x000010, "Wrong size on RGCharacterScript_OnPreDamageTaken");
static_assert(offsetof(RGCharacterScript_OnPreDamageTaken, Component) == 0x000000, "Member 'RGCharacterScript_OnPreDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_OnPreDamageTaken, Damage) == 0x000008, "Member 'RGCharacterScript_OnPreDamageTaken::Damage' has a wrong offset!");
static_assert(offsetof(RGCharacterScript_OnPreDamageTaken, DamageSourceMask) == 0x00000C, "Member 'RGCharacterScript_OnPreDamageTaken::DamageSourceMask' has a wrong offset!");

// Function RGame.RGCharacterScript.OnStatusEffectTicked
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterScript_OnStatusEffectTicked final
{
public:
	struct FRStatusEffectTickRecord               StatusEffectTickRecord;                            // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterScript_OnStatusEffectTicked) == 0x000008, "Wrong alignment on RGCharacterScript_OnStatusEffectTicked");
static_assert(sizeof(RGCharacterScript_OnStatusEffectTicked) == 0x000010, "Wrong size on RGCharacterScript_OnStatusEffectTicked");
static_assert(offsetof(RGCharacterScript_OnStatusEffectTicked, StatusEffectTickRecord) == 0x000000, "Member 'RGCharacterScript_OnStatusEffectTicked::StatusEffectTickRecord' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.GetMutatorDescription
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterMutatorScript_GetMutatorDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterMutatorScript_GetMutatorDescription) == 0x000008, "Wrong alignment on RGCharacterMutatorScript_GetMutatorDescription");
static_assert(sizeof(RGCharacterMutatorScript_GetMutatorDescription) == 0x000010, "Wrong size on RGCharacterMutatorScript_GetMutatorDescription");
static_assert(offsetof(RGCharacterMutatorScript_GetMutatorDescription, ReturnValue) == 0x000000, "Member 'RGCharacterMutatorScript_GetMutatorDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.GetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterMutatorScript_GetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterMutatorScript_GetMutatorRank) == 0x000008, "Wrong alignment on RGCharacterMutatorScript_GetMutatorRank");
static_assert(sizeof(RGCharacterMutatorScript_GetMutatorRank) == 0x000010, "Wrong size on RGCharacterMutatorScript_GetMutatorRank");
static_assert(offsetof(RGCharacterMutatorScript_GetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RGCharacterMutatorScript_GetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_GetMutatorRank, ReturnValue) == 0x000008, "Member 'RGCharacterMutatorScript_GetMutatorRank::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.RollAbilityProcChance
// 0x000C (0x000C - 0x0000)
struct RGCharacterMutatorScript_RollAbilityProcChance final
{
public:
	float                                         OutProcChance;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggeringMutatorRank;                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterMutatorScript_RollAbilityProcChance) == 0x000004, "Wrong alignment on RGCharacterMutatorScript_RollAbilityProcChance");
static_assert(sizeof(RGCharacterMutatorScript_RollAbilityProcChance) == 0x00000C, "Wrong size on RGCharacterMutatorScript_RollAbilityProcChance");
static_assert(offsetof(RGCharacterMutatorScript_RollAbilityProcChance, OutProcChance) == 0x000000, "Member 'RGCharacterMutatorScript_RollAbilityProcChance::OutProcChance' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_RollAbilityProcChance, TriggeringMutatorRank) == 0x000004, "Member 'RGCharacterMutatorScript_RollAbilityProcChance::TriggeringMutatorRank' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_RollAbilityProcChance, ReturnValue) == 0x000008, "Member 'RGCharacterMutatorScript_RollAbilityProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.RollChance
// 0x0008 (0x0008 - 0x0000)
struct RGCharacterMutatorScript_RollChance final
{
public:
	int32                                         Chance;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterMutatorScript_RollChance) == 0x000004, "Wrong alignment on RGCharacterMutatorScript_RollChance");
static_assert(sizeof(RGCharacterMutatorScript_RollChance) == 0x000008, "Wrong size on RGCharacterMutatorScript_RollChance");
static_assert(offsetof(RGCharacterMutatorScript_RollChance, Chance) == 0x000000, "Member 'RGCharacterMutatorScript_RollChance::Chance' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_RollChance, ReturnValue) == 0x000004, "Member 'RGCharacterMutatorScript_RollChance::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.RollProcChance
// 0x000C (0x000C - 0x0000)
struct RGCharacterMutatorScript_RollProcChance final
{
public:
	int32                                         Chance;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutProcChance;                                     // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterMutatorScript_RollProcChance) == 0x000004, "Wrong alignment on RGCharacterMutatorScript_RollProcChance");
static_assert(sizeof(RGCharacterMutatorScript_RollProcChance) == 0x00000C, "Wrong size on RGCharacterMutatorScript_RollProcChance");
static_assert(offsetof(RGCharacterMutatorScript_RollProcChance, Chance) == 0x000000, "Member 'RGCharacterMutatorScript_RollProcChance::Chance' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_RollProcChance, OutProcChance) == 0x000004, "Member 'RGCharacterMutatorScript_RollProcChance::OutProcChance' has a wrong offset!");
static_assert(offsetof(RGCharacterMutatorScript_RollProcChance, ReturnValue) == 0x000008, "Member 'RGCharacterMutatorScript_RollProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterMutatorScript.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterMutatorScript_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterMutatorScript_GetDescription) == 0x000008, "Wrong alignment on RGCharacterMutatorScript_GetDescription");
static_assert(sizeof(RGCharacterMutatorScript_GetDescription) == 0x000010, "Wrong size on RGCharacterMutatorScript_GetDescription");
static_assert(offsetof(RGCharacterMutatorScript_GetDescription, ReturnValue) == 0x000000, "Member 'RGCharacterMutatorScript_GetDescription::ReturnValue' has a wrong offset!");

// Function RGame.RChatLogEntryWidget.SetMessage
// 0x0020 (0x0020 - 0x0000)
struct RChatLogEntryWidget_SetMessage final
{
public:
	struct FRChatLogMessage                       IncomingMessage;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChatLogEntryWidget_SetMessage) == 0x000008, "Wrong alignment on RChatLogEntryWidget_SetMessage");
static_assert(sizeof(RChatLogEntryWidget_SetMessage) == 0x000020, "Wrong size on RChatLogEntryWidget_SetMessage");
static_assert(offsetof(RChatLogEntryWidget_SetMessage, IncomingMessage) == 0x000000, "Member 'RChatLogEntryWidget_SetMessage::IncomingMessage' has a wrong offset!");

// Function RGame.RGCharBehaviorMutatorScript.HasBehaviorMutator
// 0x0010 (0x0010 - 0x0000)
struct RGCharBehaviorMutatorScript_HasBehaviorMutator final
{
public:
	class URMutatorPrimaryAsset*                  BehaviorMutatorPA;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharBehaviorMutatorScript_HasBehaviorMutator) == 0x000008, "Wrong alignment on RGCharBehaviorMutatorScript_HasBehaviorMutator");
static_assert(sizeof(RGCharBehaviorMutatorScript_HasBehaviorMutator) == 0x000010, "Wrong size on RGCharBehaviorMutatorScript_HasBehaviorMutator");
static_assert(offsetof(RGCharBehaviorMutatorScript_HasBehaviorMutator, BehaviorMutatorPA) == 0x000000, "Member 'RGCharBehaviorMutatorScript_HasBehaviorMutator::BehaviorMutatorPA' has a wrong offset!");
static_assert(offsetof(RGCharBehaviorMutatorScript_HasBehaviorMutator, ReturnValue) == 0x000008, "Member 'RGCharBehaviorMutatorScript_HasBehaviorMutator::ReturnValue' has a wrong offset!");

// Function RGame.RGCharBehaviorMutatorScript.RunAbilityBehavior
// 0x0018 (0x0018 - 0x0000)
struct RGCharBehaviorMutatorScript_RunAbilityBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSourceMask;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthDamage;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OptionalAvatarActor;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharBehaviorMutatorScript_RunAbilityBehavior) == 0x000008, "Wrong alignment on RGCharBehaviorMutatorScript_RunAbilityBehavior");
static_assert(sizeof(RGCharBehaviorMutatorScript_RunAbilityBehavior) == 0x000018, "Wrong size on RGCharBehaviorMutatorScript_RunAbilityBehavior");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunAbilityBehavior, TriggeringActor) == 0x000000, "Member 'RGCharBehaviorMutatorScript_RunAbilityBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunAbilityBehavior, DamageSourceMask) == 0x000008, "Member 'RGCharBehaviorMutatorScript_RunAbilityBehavior::DamageSourceMask' has a wrong offset!");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunAbilityBehavior, HealthDamage) == 0x00000C, "Member 'RGCharBehaviorMutatorScript_RunAbilityBehavior::HealthDamage' has a wrong offset!");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunAbilityBehavior, OptionalAvatarActor) == 0x000010, "Member 'RGCharBehaviorMutatorScript_RunAbilityBehavior::OptionalAvatarActor' has a wrong offset!");

// Function RGame.RGCharBehaviorMutatorScript.RunPrimaryFireBehavior
// 0x0004 (0x0004 - 0x0000)
struct RGCharBehaviorMutatorScript_RunPrimaryFireBehavior final
{
public:
	float                                         HealthDamage;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharBehaviorMutatorScript_RunPrimaryFireBehavior) == 0x000004, "Wrong alignment on RGCharBehaviorMutatorScript_RunPrimaryFireBehavior");
static_assert(sizeof(RGCharBehaviorMutatorScript_RunPrimaryFireBehavior) == 0x000004, "Wrong size on RGCharBehaviorMutatorScript_RunPrimaryFireBehavior");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunPrimaryFireBehavior, HealthDamage) == 0x000000, "Member 'RGCharBehaviorMutatorScript_RunPrimaryFireBehavior::HealthDamage' has a wrong offset!");

// Function RGame.RGCharBehaviorMutatorScript.RunSecondaryFireBehavior
// 0x0010 (0x0010 - 0x0000)
struct RGCharBehaviorMutatorScript_RunSecondaryFireBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthDamage;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharBehaviorMutatorScript_RunSecondaryFireBehavior) == 0x000008, "Wrong alignment on RGCharBehaviorMutatorScript_RunSecondaryFireBehavior");
static_assert(sizeof(RGCharBehaviorMutatorScript_RunSecondaryFireBehavior) == 0x000010, "Wrong size on RGCharBehaviorMutatorScript_RunSecondaryFireBehavior");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunSecondaryFireBehavior, TriggeringActor) == 0x000000, "Member 'RGCharBehaviorMutatorScript_RunSecondaryFireBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RGCharBehaviorMutatorScript_RunSecondaryFireBehavior, HealthDamage) == 0x000008, "Member 'RGCharBehaviorMutatorScript_RunSecondaryFireBehavior::HealthDamage' has a wrong offset!");

// Function RGame.RBehaviorScriptBlood.NativeRunBehavior
// 0x0018 (0x0018 - 0x0000)
struct RBehaviorScriptBlood_NativeRunBehavior final
{
public:
	float                                         DrainDamage;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TriggeringActor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AvatarActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptBlood_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptBlood_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptBlood_NativeRunBehavior) == 0x000018, "Wrong size on RBehaviorScriptBlood_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptBlood_NativeRunBehavior, DrainDamage) == 0x000000, "Member 'RBehaviorScriptBlood_NativeRunBehavior::DrainDamage' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptBlood_NativeRunBehavior, TriggeringActor) == 0x000008, "Member 'RBehaviorScriptBlood_NativeRunBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptBlood_NativeRunBehavior, AvatarActor) == 0x000010, "Member 'RBehaviorScriptBlood_NativeRunBehavior::AvatarActor' has a wrong offset!");

// Function RGame.RBehaviorScriptDefender.NativeRunBehavior
// 0x0010 (0x0010 - 0x0000)
struct RBehaviorScriptDefender_NativeRunBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BarrierGain;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBehaviorScriptDefender_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptDefender_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptDefender_NativeRunBehavior) == 0x000010, "Wrong size on RBehaviorScriptDefender_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptDefender_NativeRunBehavior, TriggeringActor) == 0x000000, "Member 'RBehaviorScriptDefender_NativeRunBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptDefender_NativeRunBehavior, BarrierGain) == 0x000008, "Member 'RBehaviorScriptDefender_NativeRunBehavior::BarrierGain' has a wrong offset!");

// Function RGame.RBehaviorScriptDefender.NativeToggleShieldFX
// 0x0001 (0x0001 - 0x0000)
struct RBehaviorScriptDefender_NativeToggleShieldFX final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptDefender_NativeToggleShieldFX) == 0x000001, "Wrong alignment on RBehaviorScriptDefender_NativeToggleShieldFX");
static_assert(sizeof(RBehaviorScriptDefender_NativeToggleShieldFX) == 0x000001, "Wrong size on RBehaviorScriptDefender_NativeToggleShieldFX");
static_assert(offsetof(RBehaviorScriptDefender_NativeToggleShieldFX, bActive) == 0x000000, "Member 'RBehaviorScriptDefender_NativeToggleShieldFX::bActive' has a wrong offset!");

// Function RGame.RGTask_WaitLoop.WaitLoop
// 0x0020 (0x0020 - 0x0000)
struct RGTask_WaitLoop_WaitLoop final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetween;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishImmediatelyIfCountIsZero;                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_WaitLoop*                       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_WaitLoop_WaitLoop) == 0x000008, "Wrong alignment on RGTask_WaitLoop_WaitLoop");
static_assert(sizeof(RGTask_WaitLoop_WaitLoop) == 0x000020, "Wrong size on RGTask_WaitLoop_WaitLoop");
static_assert(offsetof(RGTask_WaitLoop_WaitLoop, OwningScript) == 0x000000, "Member 'RGTask_WaitLoop_WaitLoop::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_WaitLoop, TimeBetween) == 0x000008, "Member 'RGTask_WaitLoop_WaitLoop::TimeBetween' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_WaitLoop, Count) == 0x00000C, "Member 'RGTask_WaitLoop_WaitLoop::Count' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_WaitLoop, FinishImmediatelyIfCountIsZero) == 0x000010, "Member 'RGTask_WaitLoop_WaitLoop::FinishImmediatelyIfCountIsZero' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_WaitLoop, ReturnValue) == 0x000018, "Member 'RGTask_WaitLoop_WaitLoop::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_WaitLoop_Windburst.WaitLoop_Windburst
// 0x0040 (0x0040 - 0x0000)
struct RGTask_WaitLoop_Windburst_WaitLoop_Windburst final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetween;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARNPCPawnBase*                          TargetActor;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishImmediatelyIfCountIsZero;                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_WaitLoop_Windburst*             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst) == 0x000008, "Wrong alignment on RGTask_WaitLoop_Windburst_WaitLoop_Windburst");
static_assert(sizeof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst) == 0x000040, "Wrong size on RGTask_WaitLoop_Windburst_WaitLoop_Windburst");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, OwningScript) == 0x000000, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, TimeBetween) == 0x000008, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::TimeBetween' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, Count) == 0x00000C, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::Count' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, Location) == 0x000010, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::Location' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, TargetActor) == 0x000028, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::TargetActor' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, FinishImmediatelyIfCountIsZero) == 0x000030, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::FinishImmediatelyIfCountIsZero' has a wrong offset!");
static_assert(offsetof(RGTask_WaitLoop_Windburst_WaitLoop_Windburst, ReturnValue) == 0x000038, "Member 'RGTask_WaitLoop_Windburst_WaitLoop_Windburst::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptFortune.GetDamageBasedOnGold
// 0x0004 (0x0004 - 0x0000)
struct RBehaviorScriptFortune_GetDamageBasedOnGold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptFortune_GetDamageBasedOnGold) == 0x000004, "Wrong alignment on RBehaviorScriptFortune_GetDamageBasedOnGold");
static_assert(sizeof(RBehaviorScriptFortune_GetDamageBasedOnGold) == 0x000004, "Wrong size on RBehaviorScriptFortune_GetDamageBasedOnGold");
static_assert(offsetof(RBehaviorScriptFortune_GetDamageBasedOnGold, ReturnValue) == 0x000000, "Member 'RBehaviorScriptFortune_GetDamageBasedOnGold::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptFortune.GetFortunePassive3Multiplier
// 0x0004 (0x0004 - 0x0000)
struct RBehaviorScriptFortune_GetFortunePassive3Multiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptFortune_GetFortunePassive3Multiplier) == 0x000004, "Wrong alignment on RBehaviorScriptFortune_GetFortunePassive3Multiplier");
static_assert(sizeof(RBehaviorScriptFortune_GetFortunePassive3Multiplier) == 0x000004, "Wrong size on RBehaviorScriptFortune_GetFortunePassive3Multiplier");
static_assert(offsetof(RBehaviorScriptFortune_GetFortunePassive3Multiplier, ReturnValue) == 0x000000, "Member 'RBehaviorScriptFortune_GetFortunePassive3Multiplier::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptFortune.GetFortunePassive4Effect
// 0x0001 (0x0001 - 0x0000)
struct RBehaviorScriptFortune_GetFortunePassive4Effect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptFortune_GetFortunePassive4Effect) == 0x000001, "Wrong alignment on RBehaviorScriptFortune_GetFortunePassive4Effect");
static_assert(sizeof(RBehaviorScriptFortune_GetFortunePassive4Effect) == 0x000001, "Wrong size on RBehaviorScriptFortune_GetFortunePassive4Effect");
static_assert(offsetof(RBehaviorScriptFortune_GetFortunePassive4Effect, ReturnValue) == 0x000000, "Member 'RBehaviorScriptFortune_GetFortunePassive4Effect::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptFortune.NativeRunBehavior
// 0x0010 (0x0010 - 0x0000)
struct RBehaviorScriptFortune_NativeRunBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OriginActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptFortune_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptFortune_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptFortune_NativeRunBehavior) == 0x000010, "Wrong size on RBehaviorScriptFortune_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptFortune_NativeRunBehavior, TriggeringActor) == 0x000000, "Member 'RBehaviorScriptFortune_NativeRunBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptFortune_NativeRunBehavior, OriginActor) == 0x000008, "Member 'RBehaviorScriptFortune_NativeRunBehavior::OriginActor' has a wrong offset!");

// Function RGame.RBehaviorScriptFortune.UseSphereInsteadOfDirectHit
// 0x0001 (0x0001 - 0x0000)
struct RBehaviorScriptFortune_UseSphereInsteadOfDirectHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptFortune_UseSphereInsteadOfDirectHit) == 0x000001, "Wrong alignment on RBehaviorScriptFortune_UseSphereInsteadOfDirectHit");
static_assert(sizeof(RBehaviorScriptFortune_UseSphereInsteadOfDirectHit) == 0x000001, "Wrong size on RBehaviorScriptFortune_UseSphereInsteadOfDirectHit");
static_assert(offsetof(RBehaviorScriptFortune_UseSphereInsteadOfDirectHit, ReturnValue) == 0x000000, "Member 'RBehaviorScriptFortune_UseSphereInsteadOfDirectHit::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptFrost.NativeRunBehavior
// 0x0010 (0x0010 - 0x0000)
struct RBehaviorScriptFrost_NativeRunBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackIncrease;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBehaviorScriptFrost_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptFrost_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptFrost_NativeRunBehavior) == 0x000010, "Wrong size on RBehaviorScriptFrost_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptFrost_NativeRunBehavior, TriggeringActor) == 0x000000, "Member 'RBehaviorScriptFrost_NativeRunBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptFrost_NativeRunBehavior, StackIncrease) == 0x000008, "Member 'RBehaviorScriptFrost_NativeRunBehavior::StackIncrease' has a wrong offset!");

// Function RGame.RBehaviorScriptOcean.AddSpawnableProjectileClasses
// 0x0008 (0x0008 - 0x0000)
struct RBehaviorScriptOcean_AddSpawnableProjectileClasses final
{
public:
	class AActor*                                 SpawnedTentacleActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptOcean_AddSpawnableProjectileClasses) == 0x000008, "Wrong alignment on RBehaviorScriptOcean_AddSpawnableProjectileClasses");
static_assert(sizeof(RBehaviorScriptOcean_AddSpawnableProjectileClasses) == 0x000008, "Wrong size on RBehaviorScriptOcean_AddSpawnableProjectileClasses");
static_assert(offsetof(RBehaviorScriptOcean_AddSpawnableProjectileClasses, SpawnedTentacleActor) == 0x000000, "Member 'RBehaviorScriptOcean_AddSpawnableProjectileClasses::SpawnedTentacleActor' has a wrong offset!");

// Function RGame.RBehaviorScriptOcean.HasSpawnedNumMaxTentacles
// 0x0001 (0x0001 - 0x0000)
struct RBehaviorScriptOcean_HasSpawnedNumMaxTentacles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptOcean_HasSpawnedNumMaxTentacles) == 0x000001, "Wrong alignment on RBehaviorScriptOcean_HasSpawnedNumMaxTentacles");
static_assert(sizeof(RBehaviorScriptOcean_HasSpawnedNumMaxTentacles) == 0x000001, "Wrong size on RBehaviorScriptOcean_HasSpawnedNumMaxTentacles");
static_assert(offsetof(RBehaviorScriptOcean_HasSpawnedNumMaxTentacles, ReturnValue) == 0x000000, "Member 'RBehaviorScriptOcean_HasSpawnedNumMaxTentacles::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptOcean.NativeRunBehavior
// 0x0010 (0x0010 - 0x0000)
struct RBehaviorScriptOcean_NativeRunBehavior final
{
public:
	class AActor*                                 TriggeringActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerDamage;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBehaviorScriptOcean_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptOcean_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptOcean_NativeRunBehavior) == 0x000010, "Wrong size on RBehaviorScriptOcean_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptOcean_NativeRunBehavior, TriggeringActor) == 0x000000, "Member 'RBehaviorScriptOcean_NativeRunBehavior::TriggeringActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptOcean_NativeRunBehavior, TriggerDamage) == 0x000008, "Member 'RBehaviorScriptOcean_NativeRunBehavior::TriggerDamage' has a wrong offset!");

// Function RGame.RBehaviorScriptOcean.PollPolarOffsetLocation
// 0x0028 (0x0028 - 0x0000)
struct RBehaviorScriptOcean_PollPolarOffsetLocation final
{
public:
	float                                         CurrentAngleMin;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAngleMax;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentIteration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptOcean_PollPolarOffsetLocation) == 0x000008, "Wrong alignment on RBehaviorScriptOcean_PollPolarOffsetLocation");
static_assert(sizeof(RBehaviorScriptOcean_PollPolarOffsetLocation) == 0x000028, "Wrong size on RBehaviorScriptOcean_PollPolarOffsetLocation");
static_assert(offsetof(RBehaviorScriptOcean_PollPolarOffsetLocation, CurrentAngleMin) == 0x000000, "Member 'RBehaviorScriptOcean_PollPolarOffsetLocation::CurrentAngleMin' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptOcean_PollPolarOffsetLocation, CurrentAngleMax) == 0x000004, "Member 'RBehaviorScriptOcean_PollPolarOffsetLocation::CurrentAngleMax' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptOcean_PollPolarOffsetLocation, CurrentIteration) == 0x000008, "Member 'RBehaviorScriptOcean_PollPolarOffsetLocation::CurrentIteration' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptOcean_PollPolarOffsetLocation, ReturnValue) == 0x000010, "Member 'RBehaviorScriptOcean_PollPolarOffsetLocation::ReturnValue' has a wrong offset!");

// Function RGame.RBehaviorScriptOcean.SpawnTentacle
// 0x0020 (0x0020 - 0x0000)
struct RBehaviorScriptOcean_SpawnTentacle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerDamage;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBehaviorScriptOcean_SpawnTentacle) == 0x000008, "Wrong alignment on RBehaviorScriptOcean_SpawnTentacle");
static_assert(sizeof(RBehaviorScriptOcean_SpawnTentacle) == 0x000020, "Wrong size on RBehaviorScriptOcean_SpawnTentacle");
static_assert(offsetof(RBehaviorScriptOcean_SpawnTentacle, Location) == 0x000000, "Member 'RBehaviorScriptOcean_SpawnTentacle::Location' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptOcean_SpawnTentacle, TriggerDamage) == 0x000018, "Member 'RBehaviorScriptOcean_SpawnTentacle::TriggerDamage' has a wrong offset!");

// Function RGame.RBehaviorScriptSpirit.NativeActivateSpiritSpawning
// 0x0010 (0x0010 - 0x0000)
struct RBehaviorScriptSpirit_NativeActivateSpiritSpawning final
{
public:
	class AActor*                                 TriggerTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TriggerDamage;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBehaviorScriptSpirit_NativeActivateSpiritSpawning) == 0x000008, "Wrong alignment on RBehaviorScriptSpirit_NativeActivateSpiritSpawning");
static_assert(sizeof(RBehaviorScriptSpirit_NativeActivateSpiritSpawning) == 0x000010, "Wrong size on RBehaviorScriptSpirit_NativeActivateSpiritSpawning");
static_assert(offsetof(RBehaviorScriptSpirit_NativeActivateSpiritSpawning, TriggerTarget) == 0x000000, "Member 'RBehaviorScriptSpirit_NativeActivateSpiritSpawning::TriggerTarget' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptSpirit_NativeActivateSpiritSpawning, TriggerDamage) == 0x000008, "Member 'RBehaviorScriptSpirit_NativeActivateSpiritSpawning::TriggerDamage' has a wrong offset!");

// Function RGame.RBehaviorScriptSpirit.NativeAddGaugeExternal
// 0x0004 (0x0004 - 0x0000)
struct RBehaviorScriptSpirit_NativeAddGaugeExternal final
{
public:
	int32                                         ExtraGauge;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptSpirit_NativeAddGaugeExternal) == 0x000004, "Wrong alignment on RBehaviorScriptSpirit_NativeAddGaugeExternal");
static_assert(sizeof(RBehaviorScriptSpirit_NativeAddGaugeExternal) == 0x000004, "Wrong size on RBehaviorScriptSpirit_NativeAddGaugeExternal");
static_assert(offsetof(RBehaviorScriptSpirit_NativeAddGaugeExternal, ExtraGauge) == 0x000000, "Member 'RBehaviorScriptSpirit_NativeAddGaugeExternal::ExtraGauge' has a wrong offset!");

// Function RGame.RBehaviorScriptSpirit.NativeRunBehavior
// 0x0018 (0x0018 - 0x0000)
struct RBehaviorScriptSpirit_NativeRunBehavior final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrbDamage;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AvatarActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBehaviorScriptSpirit_NativeRunBehavior) == 0x000008, "Wrong alignment on RBehaviorScriptSpirit_NativeRunBehavior");
static_assert(sizeof(RBehaviorScriptSpirit_NativeRunBehavior) == 0x000018, "Wrong size on RBehaviorScriptSpirit_NativeRunBehavior");
static_assert(offsetof(RBehaviorScriptSpirit_NativeRunBehavior, TargetActor) == 0x000000, "Member 'RBehaviorScriptSpirit_NativeRunBehavior::TargetActor' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptSpirit_NativeRunBehavior, OrbDamage) == 0x000008, "Member 'RBehaviorScriptSpirit_NativeRunBehavior::OrbDamage' has a wrong offset!");
static_assert(offsetof(RBehaviorScriptSpirit_NativeRunBehavior, AvatarActor) == 0x000010, "Member 'RBehaviorScriptSpirit_NativeRunBehavior::AvatarActor' has a wrong offset!");

// Function RGame.RCommonActivatableWidget.GetExcludedActionWidgets
// 0x0010 (0x0010 - 0x0000)
struct RCommonActivatableWidget_GetExcludedActionWidgets final
{
public:
	TArray<class UCommonActionWidget*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonActivatableWidget_GetExcludedActionWidgets) == 0x000008, "Wrong alignment on RCommonActivatableWidget_GetExcludedActionWidgets");
static_assert(sizeof(RCommonActivatableWidget_GetExcludedActionWidgets) == 0x000010, "Wrong size on RCommonActivatableWidget_GetExcludedActionWidgets");
static_assert(offsetof(RCommonActivatableWidget_GetExcludedActionWidgets, ReturnValue) == 0x000000, "Member 'RCommonActivatableWidget_GetExcludedActionWidgets::ReturnValue' has a wrong offset!");

// Function RGame.RNPCPawnBase.GetMeleeExecutaionPercentageRange
// 0x0004 (0x0004 - 0x0000)
struct RNPCPawnBase_GetMeleeExecutaionPercentageRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_GetMeleeExecutaionPercentageRange) == 0x000004, "Wrong alignment on RNPCPawnBase_GetMeleeExecutaionPercentageRange");
static_assert(sizeof(RNPCPawnBase_GetMeleeExecutaionPercentageRange) == 0x000004, "Wrong size on RNPCPawnBase_GetMeleeExecutaionPercentageRange");
static_assert(offsetof(RNPCPawnBase_GetMeleeExecutaionPercentageRange, ReturnValue) == 0x000000, "Member 'RNPCPawnBase_GetMeleeExecutaionPercentageRange::ReturnValue' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnDamageDealt
// 0x00C8 (0x00C8 - 0x0000)
struct RNPCPawnBase_OnDamageDealt final
{
public:
	class ARPawnBase*                             Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnDamageDealt) == 0x000008, "Wrong alignment on RNPCPawnBase_OnDamageDealt");
static_assert(sizeof(RNPCPawnBase_OnDamageDealt) == 0x0000C8, "Wrong size on RNPCPawnBase_OnDamageDealt");
static_assert(offsetof(RNPCPawnBase_OnDamageDealt, Pawn) == 0x000000, "Member 'RNPCPawnBase_OnDamageDealt::Pawn' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnDamageDealt, DamageEventData) == 0x000008, "Member 'RNPCPawnBase_OnDamageDealt::DamageEventData' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RNPCPawnBase_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEvent;                                       // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnDamageTaken) == 0x000008, "Wrong alignment on RNPCPawnBase_OnDamageTaken");
static_assert(sizeof(RNPCPawnBase_OnDamageTaken) == 0x0000C8, "Wrong size on RNPCPawnBase_OnDamageTaken");
static_assert(offsetof(RNPCPawnBase_OnDamageTaken, Component) == 0x000000, "Member 'RNPCPawnBase_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnDamageTaken, DamageEvent) == 0x000008, "Member 'RNPCPawnBase_OnDamageTaken::DamageEvent' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnDeath
// 0x00C8 (0x00C8 - 0x0000)
struct RNPCPawnBase_OnDeath final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnDeath) == 0x000008, "Wrong alignment on RNPCPawnBase_OnDeath");
static_assert(sizeof(RNPCPawnBase_OnDeath) == 0x0000C8, "Wrong size on RNPCPawnBase_OnDeath");
static_assert(offsetof(RNPCPawnBase_OnDeath, Component) == 0x000000, "Member 'RNPCPawnBase_OnDeath::Component' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnDeath, DamageEventData) == 0x000008, "Member 'RNPCPawnBase_OnDeath::DamageEventData' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnFinishedRunningScriptFunction
// 0x0010 (0x0010 - 0x0000)
struct RNPCPawnBase_OnFinishedRunningScriptFunction final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Function;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnFinishedRunningScriptFunction) == 0x000004, "Wrong alignment on RNPCPawnBase_OnFinishedRunningScriptFunction");
static_assert(sizeof(RNPCPawnBase_OnFinishedRunningScriptFunction) == 0x000010, "Wrong size on RNPCPawnBase_OnFinishedRunningScriptFunction");
static_assert(offsetof(RNPCPawnBase_OnFinishedRunningScriptFunction, Category) == 0x000000, "Member 'RNPCPawnBase_OnFinishedRunningScriptFunction::Category' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnFinishedRunningScriptFunction, Function) == 0x000008, "Member 'RNPCPawnBase_OnFinishedRunningScriptFunction::Function' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RNPCPawnBase_OnPlayerLeftGame final
{
public:
	class APlayerState*                           LeavingPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RNPCPawnBase_OnPlayerLeftGame");
static_assert(sizeof(RNPCPawnBase_OnPlayerLeftGame) == 0x000008, "Wrong size on RNPCPawnBase_OnPlayerLeftGame");
static_assert(offsetof(RNPCPawnBase_OnPlayerLeftGame, LeavingPlayerState) == 0x000000, "Member 'RNPCPawnBase_OnPlayerLeftGame::LeavingPlayerState' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnPreDamageDealt
// 0x0018 (0x0018 - 0x0000)
struct RNPCPawnBase_OnPreDamageDealt final
{
public:
	class ARPawnBase*                             Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCritical;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageSourceMask;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnPreDamageDealt) == 0x000008, "Wrong alignment on RNPCPawnBase_OnPreDamageDealt");
static_assert(sizeof(RNPCPawnBase_OnPreDamageDealt) == 0x000018, "Wrong size on RNPCPawnBase_OnPreDamageDealt");
static_assert(offsetof(RNPCPawnBase_OnPreDamageDealt, Pawn) == 0x000000, "Member 'RNPCPawnBase_OnPreDamageDealt::Pawn' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnPreDamageDealt, DamagedActor) == 0x000008, "Member 'RNPCPawnBase_OnPreDamageDealt::DamagedActor' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnPreDamageDealt, bWasCritical) == 0x000010, "Member 'RNPCPawnBase_OnPreDamageDealt::bWasCritical' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnPreDamageDealt, DamageSourceMask) == 0x000014, "Member 'RNPCPawnBase_OnPreDamageDealt::DamageSourceMask' has a wrong offset!");

// Function RGame.RNPCPawnBase.OnPreDamageTaken
// 0x0010 (0x0010 - 0x0000)
struct RNPCPawnBase_OnPreDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSourceMask;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_OnPreDamageTaken) == 0x000008, "Wrong alignment on RNPCPawnBase_OnPreDamageTaken");
static_assert(sizeof(RNPCPawnBase_OnPreDamageTaken) == 0x000010, "Wrong size on RNPCPawnBase_OnPreDamageTaken");
static_assert(offsetof(RNPCPawnBase_OnPreDamageTaken, Component) == 0x000000, "Member 'RNPCPawnBase_OnPreDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnPreDamageTaken, Damage) == 0x000008, "Member 'RNPCPawnBase_OnPreDamageTaken::Damage' has a wrong offset!");
static_assert(offsetof(RNPCPawnBase_OnPreDamageTaken, DamageSourceMask) == 0x00000C, "Member 'RNPCPawnBase_OnPreDamageTaken::DamageSourceMask' has a wrong offset!");

// Function RGame.RNPCPawnBase.SetEvaluateThreatAfterAllActions
// 0x0001 (0x0001 - 0x0000)
struct RNPCPawnBase_SetEvaluateThreatAfterAllActions final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_SetEvaluateThreatAfterAllActions) == 0x000001, "Wrong alignment on RNPCPawnBase_SetEvaluateThreatAfterAllActions");
static_assert(sizeof(RNPCPawnBase_SetEvaluateThreatAfterAllActions) == 0x000001, "Wrong size on RNPCPawnBase_SetEvaluateThreatAfterAllActions");
static_assert(offsetof(RNPCPawnBase_SetEvaluateThreatAfterAllActions, bNewValue) == 0x000000, "Member 'RNPCPawnBase_SetEvaluateThreatAfterAllActions::bNewValue' has a wrong offset!");

// Function RGame.RNPCPawnBase.SetEvaluateThreatTargetsBetweenAttacks
// 0x0001 (0x0001 - 0x0000)
struct RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks) == 0x000001, "Wrong alignment on RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks");
static_assert(sizeof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks) == 0x000001, "Wrong size on RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks");
static_assert(offsetof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks, bNewValue) == 0x000000, "Member 'RNPCPawnBase_SetEvaluateThreatTargetsBetweenAttacks::bNewValue' has a wrong offset!");

// Function RGame.RNPCPawnBase.SetEvaluateThreatTargetsBetweenSpecials
// 0x0001 (0x0001 - 0x0000)
struct RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials) == 0x000001, "Wrong alignment on RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials");
static_assert(sizeof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials) == 0x000001, "Wrong size on RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials");
static_assert(offsetof(RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials, bNewValue) == 0x000000, "Member 'RNPCPawnBase_SetEvaluateThreatTargetsBetweenSpecials::bNewValue' has a wrong offset!");

// Function RGame.RNPCPawnBase.TryAddThreatTarget
// 0x0008 (0x0008 - 0x0000)
struct RNPCPawnBase_TryAddThreatTarget final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_TryAddThreatTarget) == 0x000008, "Wrong alignment on RNPCPawnBase_TryAddThreatTarget");
static_assert(sizeof(RNPCPawnBase_TryAddThreatTarget) == 0x000008, "Wrong size on RNPCPawnBase_TryAddThreatTarget");
static_assert(offsetof(RNPCPawnBase_TryAddThreatTarget, Player) == 0x000000, "Member 'RNPCPawnBase_TryAddThreatTarget::Player' has a wrong offset!");

// Function RGame.RNPCPawnBase.GetMaxHealthCoefficient
// 0x0004 (0x0004 - 0x0000)
struct RNPCPawnBase_GetMaxHealthCoefficient final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNPCPawnBase_GetMaxHealthCoefficient) == 0x000004, "Wrong alignment on RNPCPawnBase_GetMaxHealthCoefficient");
static_assert(sizeof(RNPCPawnBase_GetMaxHealthCoefficient) == 0x000004, "Wrong size on RNPCPawnBase_GetMaxHealthCoefficient");
static_assert(offsetof(RNPCPawnBase_GetMaxHealthCoefficient, ReturnValue) == 0x000000, "Member 'RNPCPawnBase_GetMaxHealthCoefficient::ReturnValue' has a wrong offset!");

// Function RGame.RGRocketScript.GetOwningRocket
// 0x0008 (0x0008 - 0x0000)
struct RGRocketScript_GetOwningRocket final
{
public:
	class ARRocket*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGRocketScript_GetOwningRocket) == 0x000008, "Wrong alignment on RGRocketScript_GetOwningRocket");
static_assert(sizeof(RGRocketScript_GetOwningRocket) == 0x000008, "Wrong size on RGRocketScript_GetOwningRocket");
static_assert(offsetof(RGRocketScript_GetOwningRocket, ReturnValue) == 0x000000, "Member 'RGRocketScript_GetOwningRocket::ReturnValue' has a wrong offset!");

// Function RGame.RBossPawnBase.OnCurrentTargetDowned
// 0x0008 (0x0008 - 0x0000)
struct RBossPawnBase_OnCurrentTargetDowned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawnBase_OnCurrentTargetDowned) == 0x000008, "Wrong alignment on RBossPawnBase_OnCurrentTargetDowned");
static_assert(sizeof(RBossPawnBase_OnCurrentTargetDowned) == 0x000008, "Wrong size on RBossPawnBase_OnCurrentTargetDowned");
static_assert(offsetof(RBossPawnBase_OnCurrentTargetDowned, Player) == 0x000000, "Member 'RBossPawnBase_OnCurrentTargetDowned::Player' has a wrong offset!");

// Function RGame.RBossPawnBase.OnCurrentTargetKilled
// 0x0008 (0x0008 - 0x0000)
struct RBossPawnBase_OnCurrentTargetKilled final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawnBase_OnCurrentTargetKilled) == 0x000008, "Wrong alignment on RBossPawnBase_OnCurrentTargetKilled");
static_assert(sizeof(RBossPawnBase_OnCurrentTargetKilled) == 0x000008, "Wrong size on RBossPawnBase_OnCurrentTargetKilled");
static_assert(offsetof(RBossPawnBase_OnCurrentTargetKilled, Player) == 0x000000, "Member 'RBossPawnBase_OnCurrentTargetKilled::Player' has a wrong offset!");

// Function RGame.RBossPawnBase.SetNewPlayerTarget_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RBossPawnBase_SetNewPlayerTarget_Multicast final
{
public:
	class ARPlayerPawn*                           NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRotationClear;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBossPawnBase_SetNewPlayerTarget_Multicast) == 0x000008, "Wrong alignment on RBossPawnBase_SetNewPlayerTarget_Multicast");
static_assert(sizeof(RBossPawnBase_SetNewPlayerTarget_Multicast) == 0x000010, "Wrong size on RBossPawnBase_SetNewPlayerTarget_Multicast");
static_assert(offsetof(RBossPawnBase_SetNewPlayerTarget_Multicast, NewTarget) == 0x000000, "Member 'RBossPawnBase_SetNewPlayerTarget_Multicast::NewTarget' has a wrong offset!");
static_assert(offsetof(RBossPawnBase_SetNewPlayerTarget_Multicast, bSkipRotationClear) == 0x000008, "Member 'RBossPawnBase_SetNewPlayerTarget_Multicast::bSkipRotationClear' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.GetRandomPlatforms
// 0x0018 (0x0018 - 0x0000)
struct RBossPawn_Golemancer_GetRandomPlatforms final
{
public:
	int32                                         MinimumFreePlatformsRequired;                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPlatformsToChoose;                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_GetRandomPlatforms) == 0x000008, "Wrong alignment on RBossPawn_Golemancer_GetRandomPlatforms");
static_assert(sizeof(RBossPawn_Golemancer_GetRandomPlatforms) == 0x000018, "Wrong size on RBossPawn_Golemancer_GetRandomPlatforms");
static_assert(offsetof(RBossPawn_Golemancer_GetRandomPlatforms, MinimumFreePlatformsRequired) == 0x000000, "Member 'RBossPawn_Golemancer_GetRandomPlatforms::MinimumFreePlatformsRequired' has a wrong offset!");
static_assert(offsetof(RBossPawn_Golemancer_GetRandomPlatforms, NumberOfPlatformsToChoose) == 0x000004, "Member 'RBossPawn_Golemancer_GetRandomPlatforms::NumberOfPlatformsToChoose' has a wrong offset!");
static_assert(offsetof(RBossPawn_Golemancer_GetRandomPlatforms, ReturnValue) == 0x000008, "Member 'RBossPawn_Golemancer_GetRandomPlatforms::ReturnValue' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.PlayCoreOverloadTimeline
// 0x000C (0x000C - 0x0000)
struct RBossPawn_Golemancer_PlayCoreOverloadTimeline final
{
public:
	float                                         From;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         To;                                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_PlayCoreOverloadTimeline) == 0x000004, "Wrong alignment on RBossPawn_Golemancer_PlayCoreOverloadTimeline");
static_assert(sizeof(RBossPawn_Golemancer_PlayCoreOverloadTimeline) == 0x00000C, "Wrong size on RBossPawn_Golemancer_PlayCoreOverloadTimeline");
static_assert(offsetof(RBossPawn_Golemancer_PlayCoreOverloadTimeline, From) == 0x000000, "Member 'RBossPawn_Golemancer_PlayCoreOverloadTimeline::From' has a wrong offset!");
static_assert(offsetof(RBossPawn_Golemancer_PlayCoreOverloadTimeline, To) == 0x000004, "Member 'RBossPawn_Golemancer_PlayCoreOverloadTimeline::To' has a wrong offset!");
static_assert(offsetof(RBossPawn_Golemancer_PlayCoreOverloadTimeline, Duration) == 0x000008, "Member 'RBossPawn_Golemancer_PlayCoreOverloadTimeline::Duration' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleBodyDamageEmissive
// 0x0004 (0x0004 - 0x0000)
struct RBossPawn_Golemancer_ToggleBodyDamageEmissive final
{
public:
	int32                                         EncounterPhase;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleBodyDamageEmissive) == 0x000004, "Wrong alignment on RBossPawn_Golemancer_ToggleBodyDamageEmissive");
static_assert(sizeof(RBossPawn_Golemancer_ToggleBodyDamageEmissive) == 0x000004, "Wrong size on RBossPawn_Golemancer_ToggleBodyDamageEmissive");
static_assert(offsetof(RBossPawn_Golemancer_ToggleBodyDamageEmissive, EncounterPhase) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleBodyDamageEmissive::EncounterPhase' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleHammerTrailVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBossPawn_Golemancer_ToggleHammerTrailVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleHammerTrailVisibility) == 0x000001, "Wrong alignment on RBossPawn_Golemancer_ToggleHammerTrailVisibility");
static_assert(sizeof(RBossPawn_Golemancer_ToggleHammerTrailVisibility) == 0x000001, "Wrong size on RBossPawn_Golemancer_ToggleHammerTrailVisibility");
static_assert(offsetof(RBossPawn_Golemancer_ToggleHammerTrailVisibility, bNewVisibility) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleHammerTrailVisibility::bNewVisibility' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleHandGlow
// 0x0002 (0x0002 - 0x0000)
struct RBossPawn_Golemancer_ToggleHandGlow final
{
public:
	bool                                          bIsRighthand;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleHandGlow) == 0x000001, "Wrong alignment on RBossPawn_Golemancer_ToggleHandGlow");
static_assert(sizeof(RBossPawn_Golemancer_ToggleHandGlow) == 0x000002, "Wrong size on RBossPawn_Golemancer_ToggleHandGlow");
static_assert(offsetof(RBossPawn_Golemancer_ToggleHandGlow, bIsRighthand) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleHandGlow::bIsRighthand' has a wrong offset!");
static_assert(offsetof(RBossPawn_Golemancer_ToggleHandGlow, bNewVisibility) == 0x000001, "Member 'RBossPawn_Golemancer_ToggleHandGlow::bNewVisibility' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleImmunityShieldVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBossPawn_Golemancer_ToggleImmunityShieldVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleImmunityShieldVisibility) == 0x000001, "Wrong alignment on RBossPawn_Golemancer_ToggleImmunityShieldVisibility");
static_assert(sizeof(RBossPawn_Golemancer_ToggleImmunityShieldVisibility) == 0x000001, "Wrong size on RBossPawn_Golemancer_ToggleImmunityShieldVisibility");
static_assert(offsetof(RBossPawn_Golemancer_ToggleImmunityShieldVisibility, bNewVisibility) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleImmunityShieldVisibility::bNewVisibility' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleSocketFXVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBossPawn_Golemancer_ToggleSocketFXVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleSocketFXVisibility) == 0x000001, "Wrong alignment on RBossPawn_Golemancer_ToggleSocketFXVisibility");
static_assert(sizeof(RBossPawn_Golemancer_ToggleSocketFXVisibility) == 0x000001, "Wrong size on RBossPawn_Golemancer_ToggleSocketFXVisibility");
static_assert(offsetof(RBossPawn_Golemancer_ToggleSocketFXVisibility, bNewVisibility) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleSocketFXVisibility::bNewVisibility' has a wrong offset!");

// Function RGame.RBossPawn_Golemancer.ToggleWhirlwindVisuals
// 0x0001 (0x0001 - 0x0000)
struct RBossPawn_Golemancer_ToggleWhirlwindVisuals final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Golemancer_ToggleWhirlwindVisuals) == 0x000001, "Wrong alignment on RBossPawn_Golemancer_ToggleWhirlwindVisuals");
static_assert(sizeof(RBossPawn_Golemancer_ToggleWhirlwindVisuals) == 0x000001, "Wrong size on RBossPawn_Golemancer_ToggleWhirlwindVisuals");
static_assert(offsetof(RBossPawn_Golemancer_ToggleWhirlwindVisuals, bNewVisibility) == 0x000000, "Member 'RBossPawn_Golemancer_ToggleWhirlwindVisuals::bNewVisibility' has a wrong offset!");

// Function RGame.RBTTask_MoveTo.Pathfinding_OnDynamicCollisionAlert
// 0x0018 (0x0018 - 0x0000)
struct RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert final
{
public:
	struct FRNavigationDynamicCollisionPayload    Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert) == 0x000008, "Wrong alignment on RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert");
static_assert(sizeof(RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert) == 0x000018, "Wrong size on RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert");
static_assert(offsetof(RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert, Data) == 0x000000, "Member 'RBTTask_MoveTo_Pathfinding_OnDynamicCollisionAlert::Data' has a wrong offset!");

// Function RGame.RBTTask_MoveTo.Pathfinding_OnFinish
// 0x0188 (0x0188 - 0x0000)
struct RBTTask_MoveTo_Pathfinding_OnFinish final
{
public:
	struct FRNavigationQueryData                  Data;                                              // 0x0000(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTTask_MoveTo_Pathfinding_OnFinish) == 0x000008, "Wrong alignment on RBTTask_MoveTo_Pathfinding_OnFinish");
static_assert(sizeof(RBTTask_MoveTo_Pathfinding_OnFinish) == 0x000188, "Wrong size on RBTTask_MoveTo_Pathfinding_OnFinish");
static_assert(offsetof(RBTTask_MoveTo_Pathfinding_OnFinish, Data) == 0x000000, "Member 'RBTTask_MoveTo_Pathfinding_OnFinish::Data' has a wrong offset!");

// Function RGame.RGameState.GetRGameState
// 0x0010 (0x0010 - 0x0000)
struct RGameState_GetRGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARGameState*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetRGameState) == 0x000008, "Wrong alignment on RGameState_GetRGameState");
static_assert(sizeof(RGameState_GetRGameState) == 0x000010, "Wrong size on RGameState_GetRGameState");
static_assert(offsetof(RGameState_GetRGameState, WorldContextObject) == 0x000000, "Member 'RGameState_GetRGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameState_GetRGameState, ReturnValue) == 0x000008, "Member 'RGameState_GetRGameState::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.AddGoldToPlayer
// 0x0010 (0x0010 - 0x0000)
struct RGameState_AddGoldToPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameState_AddGoldToPlayer) == 0x000008, "Wrong alignment on RGameState_AddGoldToPlayer");
static_assert(sizeof(RGameState_AddGoldToPlayer) == 0x000010, "Wrong size on RGameState_AddGoldToPlayer");
static_assert(offsetof(RGameState_AddGoldToPlayer, PlayerController) == 0x000000, "Member 'RGameState_AddGoldToPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameState_AddGoldToPlayer, Delta) == 0x000008, "Member 'RGameState_AddGoldToPlayer::Delta' has a wrong offset!");

// Function RGame.RGameState.AddPortalChoiceNodeId
// 0x0004 (0x0004 - 0x0000)
struct RGameState_AddPortalChoiceNodeId final
{
public:
	int32                                         NodeID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_AddPortalChoiceNodeId) == 0x000004, "Wrong alignment on RGameState_AddPortalChoiceNodeId");
static_assert(sizeof(RGameState_AddPortalChoiceNodeId) == 0x000004, "Wrong size on RGameState_AddPortalChoiceNodeId");
static_assert(offsetof(RGameState_AddPortalChoiceNodeId, NodeID) == 0x000000, "Member 'RGameState_AddPortalChoiceNodeId::NodeID' has a wrong offset!");

// Function RGame.RGameState.ApplyPlayerCosmetics
// 0x00E8 (0x00E8 - 0x0000)
struct RGameState_ApplyPlayerCosmetics final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerCosmeticOption                  CosmeticOptionData;                                // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 RWeaponCosmeticPath;                               // 0x00D8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_ApplyPlayerCosmetics) == 0x000008, "Wrong alignment on RGameState_ApplyPlayerCosmetics");
static_assert(sizeof(RGameState_ApplyPlayerCosmetics) == 0x0000E8, "Wrong size on RGameState_ApplyPlayerCosmetics");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics, RPlayerPawn) == 0x000000, "Member 'RGameState_ApplyPlayerCosmetics::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics, CosmeticOptionData) == 0x000008, "Member 'RGameState_ApplyPlayerCosmetics::CosmeticOptionData' has a wrong offset!");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics, RWeaponCosmeticPath) == 0x0000D8, "Member 'RGameState_ApplyPlayerCosmetics::RWeaponCosmeticPath' has a wrong offset!");

// Function RGame.RGameState.ApplyPlayerCosmetics_Multicast
// 0x00E8 (0x00E8 - 0x0000)
struct RGameState_ApplyPlayerCosmetics_Multicast final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerCosmeticOption                  CosmeticOptionData;                                // 0x0008(0x00D0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 RWeaponCosmeticPath;                               // 0x00D8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_ApplyPlayerCosmetics_Multicast) == 0x000008, "Wrong alignment on RGameState_ApplyPlayerCosmetics_Multicast");
static_assert(sizeof(RGameState_ApplyPlayerCosmetics_Multicast) == 0x0000E8, "Wrong size on RGameState_ApplyPlayerCosmetics_Multicast");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics_Multicast, RPlayerPawn) == 0x000000, "Member 'RGameState_ApplyPlayerCosmetics_Multicast::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics_Multicast, CosmeticOptionData) == 0x000008, "Member 'RGameState_ApplyPlayerCosmetics_Multicast::CosmeticOptionData' has a wrong offset!");
static_assert(offsetof(RGameState_ApplyPlayerCosmetics_Multicast, RWeaponCosmeticPath) == 0x0000D8, "Member 'RGameState_ApplyPlayerCosmetics_Multicast::RWeaponCosmeticPath' has a wrong offset!");

// Function RGame.RGameState.BroadcastOnKeyUsed_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RGameState_BroadcastOnKeyUsed_Multicast final
{
public:
	class AActor*                                 ActorUsedOn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_BroadcastOnKeyUsed_Multicast) == 0x000008, "Wrong alignment on RGameState_BroadcastOnKeyUsed_Multicast");
static_assert(sizeof(RGameState_BroadcastOnKeyUsed_Multicast) == 0x000008, "Wrong size on RGameState_BroadcastOnKeyUsed_Multicast");
static_assert(offsetof(RGameState_BroadcastOnKeyUsed_Multicast, ActorUsedOn) == 0x000000, "Member 'RGameState_BroadcastOnKeyUsed_Multicast::ActorUsedOn' has a wrong offset!");

// Function RGame.RGameState.BroadcastOnMidRunLoadingScreenPopped_Multicast
// 0x0004 (0x0004 - 0x0000)
struct RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast final
{
public:
	int32                                         CurrentNodeId;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast) == 0x000004, "Wrong alignment on RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast");
static_assert(sizeof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast) == 0x000004, "Wrong size on RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast");
static_assert(offsetof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast, CurrentNodeId) == 0x000000, "Member 'RGameState_BroadcastOnMidRunLoadingScreenPopped_Multicast::CurrentNodeId' has a wrong offset!");

// Function RGame.RGameState.BroadcastOnMidRunLoadingScreenPopped_Server
// 0x0004 (0x0004 - 0x0000)
struct RGameState_BroadcastOnMidRunLoadingScreenPopped_Server final
{
public:
	int32                                         CurrentNodeId;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Server) == 0x000004, "Wrong alignment on RGameState_BroadcastOnMidRunLoadingScreenPopped_Server");
static_assert(sizeof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Server) == 0x000004, "Wrong size on RGameState_BroadcastOnMidRunLoadingScreenPopped_Server");
static_assert(offsetof(RGameState_BroadcastOnMidRunLoadingScreenPopped_Server, CurrentNodeId) == 0x000000, "Member 'RGameState_BroadcastOnMidRunLoadingScreenPopped_Server::CurrentNodeId' has a wrong offset!");

// Function RGame.RGameState.Debug_SetRoomDifficulty
// 0x0004 (0x0004 - 0x0000)
struct RGameState_Debug_SetRoomDifficulty final
{
public:
	int32                                         SetLevelsCompleted;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_Debug_SetRoomDifficulty) == 0x000004, "Wrong alignment on RGameState_Debug_SetRoomDifficulty");
static_assert(sizeof(RGameState_Debug_SetRoomDifficulty) == 0x000004, "Wrong size on RGameState_Debug_SetRoomDifficulty");
static_assert(offsetof(RGameState_Debug_SetRoomDifficulty, SetLevelsCompleted) == 0x000000, "Member 'RGameState_Debug_SetRoomDifficulty::SetLevelsCompleted' has a wrong offset!");

// Function RGame.RGameState.EnableBossHealAltarModified
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableBossHealAltarModified final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableBossHealAltarModified) == 0x000001, "Wrong alignment on RGameState_EnableBossHealAltarModified");
static_assert(sizeof(RGameState_EnableBossHealAltarModified) == 0x000001, "Wrong size on RGameState_EnableBossHealAltarModified");
static_assert(offsetof(RGameState_EnableBossHealAltarModified, Enabled) == 0x000000, "Member 'RGameState_EnableBossHealAltarModified::Enabled' has a wrong offset!");

// Function RGame.RGameState.EnableBossModifiedMoveKit
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableBossModifiedMoveKit final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableBossModifiedMoveKit) == 0x000001, "Wrong alignment on RGameState_EnableBossModifiedMoveKit");
static_assert(sizeof(RGameState_EnableBossModifiedMoveKit) == 0x000001, "Wrong size on RGameState_EnableBossModifiedMoveKit");
static_assert(offsetof(RGameState_EnableBossModifiedMoveKit, Enabled) == 0x000000, "Member 'RGameState_EnableBossModifiedMoveKit::Enabled' has a wrong offset!");

// Function RGame.RGameState.EnableEnemyMeleeKillOnly
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableEnemyMeleeKillOnly final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableEnemyMeleeKillOnly) == 0x000001, "Wrong alignment on RGameState_EnableEnemyMeleeKillOnly");
static_assert(sizeof(RGameState_EnableEnemyMeleeKillOnly) == 0x000001, "Wrong size on RGameState_EnableEnemyMeleeKillOnly");
static_assert(offsetof(RGameState_EnableEnemyMeleeKillOnly, Enabled) == 0x000000, "Member 'RGameState_EnableEnemyMeleeKillOnly::Enabled' has a wrong offset!");

// Function RGame.RGameState.EnableGoldGainForPlayer
// 0x0010 (0x0010 - 0x0000)
struct RGameState_EnableGoldGainForPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewEnabled;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameState_EnableGoldGainForPlayer) == 0x000008, "Wrong alignment on RGameState_EnableGoldGainForPlayer");
static_assert(sizeof(RGameState_EnableGoldGainForPlayer) == 0x000010, "Wrong size on RGameState_EnableGoldGainForPlayer");
static_assert(offsetof(RGameState_EnableGoldGainForPlayer, PlayerController) == 0x000000, "Member 'RGameState_EnableGoldGainForPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameState_EnableGoldGainForPlayer, bNewEnabled) == 0x000008, "Member 'RGameState_EnableGoldGainForPlayer::bNewEnabled' has a wrong offset!");

// Function RGame.RGameState.EnableHealAltarSyringesModified
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableHealAltarSyringesModified final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableHealAltarSyringesModified) == 0x000001, "Wrong alignment on RGameState_EnableHealAltarSyringesModified");
static_assert(sizeof(RGameState_EnableHealAltarSyringesModified) == 0x000001, "Wrong size on RGameState_EnableHealAltarSyringesModified");
static_assert(offsetof(RGameState_EnableHealAltarSyringesModified, Enabled) == 0x000000, "Member 'RGameState_EnableHealAltarSyringesModified::Enabled' has a wrong offset!");

// Function RGame.RGameState.EnableKillAllElites
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableKillAllElites final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableKillAllElites) == 0x000001, "Wrong alignment on RGameState_EnableKillAllElites");
static_assert(sizeof(RGameState_EnableKillAllElites) == 0x000001, "Wrong size on RGameState_EnableKillAllElites");
static_assert(offsetof(RGameState_EnableKillAllElites, Enabled) == 0x000000, "Member 'RGameState_EnableKillAllElites::Enabled' has a wrong offset!");

// Function RGame.RGameState.EnableLastEnemyModified
// 0x0001 (0x0001 - 0x0000)
struct RGameState_EnableLastEnemyModified final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_EnableLastEnemyModified) == 0x000001, "Wrong alignment on RGameState_EnableLastEnemyModified");
static_assert(sizeof(RGameState_EnableLastEnemyModified) == 0x000001, "Wrong size on RGameState_EnableLastEnemyModified");
static_assert(offsetof(RGameState_EnableLastEnemyModified, Enabled) == 0x000000, "Member 'RGameState_EnableLastEnemyModified::Enabled' has a wrong offset!");

// Function RGame.RGameState.GetDifficultySettingFactor
// 0x0004 (0x0004 - 0x0000)
struct RGameState_GetDifficultySettingFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetDifficultySettingFactor) == 0x000004, "Wrong alignment on RGameState_GetDifficultySettingFactor");
static_assert(sizeof(RGameState_GetDifficultySettingFactor) == 0x000004, "Wrong size on RGameState_GetDifficultySettingFactor");
static_assert(offsetof(RGameState_GetDifficultySettingFactor, ReturnValue) == 0x000000, "Member 'RGameState_GetDifficultySettingFactor::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetDifficultyTreeAssignedPoints
// 0x000C (0x000C - 0x0000)
struct RGameState_GetDifficultyTreeAssignedPoints final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetDifficultyTreeAssignedPoints) == 0x000004, "Wrong alignment on RGameState_GetDifficultyTreeAssignedPoints");
static_assert(sizeof(RGameState_GetDifficultyTreeAssignedPoints) == 0x00000C, "Wrong size on RGameState_GetDifficultyTreeAssignedPoints");
static_assert(offsetof(RGameState_GetDifficultyTreeAssignedPoints, Key) == 0x000000, "Member 'RGameState_GetDifficultyTreeAssignedPoints::Key' has a wrong offset!");
static_assert(offsetof(RGameState_GetDifficultyTreeAssignedPoints, ReturnValue) == 0x000008, "Member 'RGameState_GetDifficultyTreeAssignedPoints::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetGlobalScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RGameState_GetGlobalScriptComponent final
{
public:
	class URGScriptComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetGlobalScriptComponent) == 0x000008, "Wrong alignment on RGameState_GetGlobalScriptComponent");
static_assert(sizeof(RGameState_GetGlobalScriptComponent) == 0x000008, "Wrong size on RGameState_GetGlobalScriptComponent");
static_assert(offsetof(RGameState_GetGlobalScriptComponent, ReturnValue) == 0x000000, "Member 'RGameState_GetGlobalScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetHealthPerNodeAtValue
// 0x0008 (0x0008 - 0x0000)
struct RGameState_GetHealthPerNodeAtValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetHealthPerNodeAtValue) == 0x000004, "Wrong alignment on RGameState_GetHealthPerNodeAtValue");
static_assert(sizeof(RGameState_GetHealthPerNodeAtValue) == 0x000008, "Wrong size on RGameState_GetHealthPerNodeAtValue");
static_assert(offsetof(RGameState_GetHealthPerNodeAtValue, Value) == 0x000000, "Member 'RGameState_GetHealthPerNodeAtValue::Value' has a wrong offset!");
static_assert(offsetof(RGameState_GetHealthPerNodeAtValue, ReturnValue) == 0x000004, "Member 'RGameState_GetHealthPerNodeAtValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetHealthPerPlayerAtValue
// 0x0008 (0x0008 - 0x0000)
struct RGameState_GetHealthPerPlayerAtValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetHealthPerPlayerAtValue) == 0x000004, "Wrong alignment on RGameState_GetHealthPerPlayerAtValue");
static_assert(sizeof(RGameState_GetHealthPerPlayerAtValue) == 0x000008, "Wrong size on RGameState_GetHealthPerPlayerAtValue");
static_assert(offsetof(RGameState_GetHealthPerPlayerAtValue, Value) == 0x000000, "Member 'RGameState_GetHealthPerPlayerAtValue::Value' has a wrong offset!");
static_assert(offsetof(RGameState_GetHealthPerPlayerAtValue, ReturnValue) == 0x000004, "Member 'RGameState_GetHealthPerPlayerAtValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetHueShift
// 0x0030 (0x0030 - 0x0000)
struct RGameState_GetHueShift final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetHueShift) == 0x000010, "Wrong alignment on RGameState_GetHueShift");
static_assert(sizeof(RGameState_GetHueShift) == 0x000030, "Wrong size on RGameState_GetHueShift");
static_assert(offsetof(RGameState_GetHueShift, PlayerState) == 0x000000, "Member 'RGameState_GetHueShift::PlayerState' has a wrong offset!");
static_assert(offsetof(RGameState_GetHueShift, ReturnValue) == 0x000010, "Member 'RGameState_GetHueShift::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetNumDifficultyTreeAssignedPoints
// 0x0004 (0x0004 - 0x0000)
struct RGameState_GetNumDifficultyTreeAssignedPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetNumDifficultyTreeAssignedPoints) == 0x000004, "Wrong alignment on RGameState_GetNumDifficultyTreeAssignedPoints");
static_assert(sizeof(RGameState_GetNumDifficultyTreeAssignedPoints) == 0x000004, "Wrong size on RGameState_GetNumDifficultyTreeAssignedPoints");
static_assert(offsetof(RGameState_GetNumDifficultyTreeAssignedPoints, ReturnValue) == 0x000000, "Member 'RGameState_GetNumDifficultyTreeAssignedPoints::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetNumDisconnectedPlayers
// 0x0004 (0x0004 - 0x0000)
struct RGameState_GetNumDisconnectedPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetNumDisconnectedPlayers) == 0x000004, "Wrong alignment on RGameState_GetNumDisconnectedPlayers");
static_assert(sizeof(RGameState_GetNumDisconnectedPlayers) == 0x000004, "Wrong size on RGameState_GetNumDisconnectedPlayers");
static_assert(offsetof(RGameState_GetNumDisconnectedPlayers, ReturnValue) == 0x000000, "Member 'RGameState_GetNumDisconnectedPlayers::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetPlayerGold
// 0x0010 (0x0010 - 0x0000)
struct RGameState_GetPlayerGold final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameState_GetPlayerGold) == 0x000008, "Wrong alignment on RGameState_GetPlayerGold");
static_assert(sizeof(RGameState_GetPlayerGold) == 0x000010, "Wrong size on RGameState_GetPlayerGold");
static_assert(offsetof(RGameState_GetPlayerGold, PlayerController) == 0x000000, "Member 'RGameState_GetPlayerGold::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameState_GetPlayerGold, ReturnValue) == 0x000008, "Member 'RGameState_GetPlayerGold::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetPlayerPawns
// 0x0010 (0x0010 - 0x0000)
struct RGameState_GetPlayerPawns final
{
public:
	TArray<class ARPlayerPawn*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetPlayerPawns) == 0x000008, "Wrong alignment on RGameState_GetPlayerPawns");
static_assert(sizeof(RGameState_GetPlayerPawns) == 0x000010, "Wrong size on RGameState_GetPlayerPawns");
static_assert(offsetof(RGameState_GetPlayerPawns, ReturnValue) == 0x000000, "Member 'RGameState_GetPlayerPawns::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetRoomDifficulty
// 0x0004 (0x0004 - 0x0000)
struct RGameState_GetRoomDifficulty final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetRoomDifficulty) == 0x000004, "Wrong alignment on RGameState_GetRoomDifficulty");
static_assert(sizeof(RGameState_GetRoomDifficulty) == 0x000004, "Wrong size on RGameState_GetRoomDifficulty");
static_assert(offsetof(RGameState_GetRoomDifficulty, ReturnValue) == 0x000000, "Member 'RGameState_GetRoomDifficulty::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.GetRunStats
// 0x000C (0x000C - 0x0000)
struct RGameState_GetRunStats final
{
public:
	struct FRRunStats                             ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_GetRunStats) == 0x000004, "Wrong alignment on RGameState_GetRunStats");
static_assert(sizeof(RGameState_GetRunStats) == 0x00000C, "Wrong size on RGameState_GetRunStats");
static_assert(offsetof(RGameState_GetRunStats, ReturnValue) == 0x000000, "Member 'RGameState_GetRunStats::ReturnValue' has a wrong offset!");

// Function RGame.RGameState.OnFinishRun_Multicast
// 0x0001 (0x0001 - 0x0000)
struct RGameState_OnFinishRun_Multicast final
{
public:
	bool                                          RunFailed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_OnFinishRun_Multicast) == 0x000001, "Wrong alignment on RGameState_OnFinishRun_Multicast");
static_assert(sizeof(RGameState_OnFinishRun_Multicast) == 0x000001, "Wrong size on RGameState_OnFinishRun_Multicast");
static_assert(offsetof(RGameState_OnFinishRun_Multicast, RunFailed) == 0x000000, "Member 'RGameState_OnFinishRun_Multicast::RunFailed' has a wrong offset!");

// Function RGame.RGameState.OnSessionUserInviteAcceptedEOS
// 0x0128 (0x0128 - 0x0000)
struct RGameState_OnSessionUserInviteAcceptedEOS final
{
public:
	struct FBlueprintSessionResult                Session;                                           // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bWasSuccesful;                                     // 0x0120(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameState_OnSessionUserInviteAcceptedEOS) == 0x000008, "Wrong alignment on RGameState_OnSessionUserInviteAcceptedEOS");
static_assert(sizeof(RGameState_OnSessionUserInviteAcceptedEOS) == 0x000128, "Wrong size on RGameState_OnSessionUserInviteAcceptedEOS");
static_assert(offsetof(RGameState_OnSessionUserInviteAcceptedEOS, Session) == 0x000000, "Member 'RGameState_OnSessionUserInviteAcceptedEOS::Session' has a wrong offset!");
static_assert(offsetof(RGameState_OnSessionUserInviteAcceptedEOS, bWasSuccesful) == 0x000120, "Member 'RGameState_OnSessionUserInviteAcceptedEOS::bWasSuccesful' has a wrong offset!");

// Function RGame.RGameState.OnSessionUserInviteAcceptedSteam
// 0x0010 (0x0010 - 0x0000)
struct RGameState_OnSessionUserInviteAcceptedSteam final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_OnSessionUserInviteAcceptedSteam) == 0x000008, "Wrong alignment on RGameState_OnSessionUserInviteAcceptedSteam");
static_assert(sizeof(RGameState_OnSessionUserInviteAcceptedSteam) == 0x000010, "Wrong size on RGameState_OnSessionUserInviteAcceptedSteam");
static_assert(offsetof(RGameState_OnSessionUserInviteAcceptedSteam, SessionId) == 0x000000, "Member 'RGameState_OnSessionUserInviteAcceptedSteam::SessionId' has a wrong offset!");

// Function RGame.RGameState.PlayerFinishMidRunLoading
// 0x0008 (0x0008 - 0x0000)
struct RGameState_PlayerFinishMidRunLoading final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_PlayerFinishMidRunLoading) == 0x000008, "Wrong alignment on RGameState_PlayerFinishMidRunLoading");
static_assert(sizeof(RGameState_PlayerFinishMidRunLoading) == 0x000008, "Wrong size on RGameState_PlayerFinishMidRunLoading");
static_assert(offsetof(RGameState_PlayerFinishMidRunLoading, PlayerState) == 0x000000, "Member 'RGameState_PlayerFinishMidRunLoading::PlayerState' has a wrong offset!");

// Function RGame.RGameState.PlayerJoined_Multicast
// 0x0018 (0x0018 - 0x0000)
struct RGameState_PlayerJoined_Multicast final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_PlayerJoined_Multicast) == 0x000008, "Wrong alignment on RGameState_PlayerJoined_Multicast");
static_assert(sizeof(RGameState_PlayerJoined_Multicast) == 0x000018, "Wrong size on RGameState_PlayerJoined_Multicast");
static_assert(offsetof(RGameState_PlayerJoined_Multicast, PlayerState) == 0x000000, "Member 'RGameState_PlayerJoined_Multicast::PlayerState' has a wrong offset!");
static_assert(offsetof(RGameState_PlayerJoined_Multicast, Message) == 0x000008, "Member 'RGameState_PlayerJoined_Multicast::Message' has a wrong offset!");

// Function RGame.RGameState.PlayerLeft_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RGameState_PlayerLeft_Multicast final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_PlayerLeft_Multicast) == 0x000008, "Wrong alignment on RGameState_PlayerLeft_Multicast");
static_assert(sizeof(RGameState_PlayerLeft_Multicast) == 0x000008, "Wrong size on RGameState_PlayerLeft_Multicast");
static_assert(offsetof(RGameState_PlayerLeft_Multicast, PlayerState) == 0x000000, "Member 'RGameState_PlayerLeft_Multicast::PlayerState' has a wrong offset!");

// Function RGame.RGameState.ResetPlayerRunStats
// 0x0008 (0x0008 - 0x0000)
struct RGameState_ResetPlayerRunStats final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_ResetPlayerRunStats) == 0x000008, "Wrong alignment on RGameState_ResetPlayerRunStats");
static_assert(sizeof(RGameState_ResetPlayerRunStats) == 0x000008, "Wrong size on RGameState_ResetPlayerRunStats");
static_assert(offsetof(RGameState_ResetPlayerRunStats, RPlayerPawn) == 0x000000, "Member 'RGameState_ResetPlayerRunStats::RPlayerPawn' has a wrong offset!");

// Function RGame.RGameState.SendChatMessage
// 0x0020 (0x0020 - 0x0000)
struct RGameState_SendChatMessage final
{
public:
	struct FRChatLogMessage                       NewMessage;                                        // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_SendChatMessage) == 0x000008, "Wrong alignment on RGameState_SendChatMessage");
static_assert(sizeof(RGameState_SendChatMessage) == 0x000020, "Wrong size on RGameState_SendChatMessage");
static_assert(offsetof(RGameState_SendChatMessage, NewMessage) == 0x000000, "Member 'RGameState_SendChatMessage::NewMessage' has a wrong offset!");

// Function RGame.RGameState.SetDifficultyTreeAssignedPoints
// 0x0010 (0x0010 - 0x0000)
struct RGameState_SetDifficultyTreeAssignedPoints final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SaveToSaveGame;                                    // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameState_SetDifficultyTreeAssignedPoints) == 0x000004, "Wrong alignment on RGameState_SetDifficultyTreeAssignedPoints");
static_assert(sizeof(RGameState_SetDifficultyTreeAssignedPoints) == 0x000010, "Wrong size on RGameState_SetDifficultyTreeAssignedPoints");
static_assert(offsetof(RGameState_SetDifficultyTreeAssignedPoints, Key) == 0x000000, "Member 'RGameState_SetDifficultyTreeAssignedPoints::Key' has a wrong offset!");
static_assert(offsetof(RGameState_SetDifficultyTreeAssignedPoints, Points) == 0x000008, "Member 'RGameState_SetDifficultyTreeAssignedPoints::Points' has a wrong offset!");
static_assert(offsetof(RGameState_SetDifficultyTreeAssignedPoints, SaveToSaveGame) == 0x00000C, "Member 'RGameState_SetDifficultyTreeAssignedPoints::SaveToSaveGame' has a wrong offset!");

// Function RGame.RGameState.SetIsInRun
// 0x0001 (0x0001 - 0x0000)
struct RGameState_SetIsInRun final
{
public:
	bool                                          IsInRun;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_SetIsInRun) == 0x000001, "Wrong alignment on RGameState_SetIsInRun");
static_assert(sizeof(RGameState_SetIsInRun) == 0x000001, "Wrong size on RGameState_SetIsInRun");
static_assert(offsetof(RGameState_SetIsInRun, IsInRun) == 0x000000, "Member 'RGameState_SetIsInRun::IsInRun' has a wrong offset!");

// Function RGame.RGameState.UpdatePlayerClothes
// 0x0030 (0x0030 - 0x0000)
struct RGameState_UpdatePlayerClothes final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            NewHeadMesh;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Color;                                             // 0x0010(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_UpdatePlayerClothes) == 0x000010, "Wrong alignment on RGameState_UpdatePlayerClothes");
static_assert(sizeof(RGameState_UpdatePlayerClothes) == 0x000030, "Wrong size on RGameState_UpdatePlayerClothes");
static_assert(offsetof(RGameState_UpdatePlayerClothes, RPlayerPawn) == 0x000000, "Member 'RGameState_UpdatePlayerClothes::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameState_UpdatePlayerClothes, NewHeadMesh) == 0x000008, "Member 'RGameState_UpdatePlayerClothes::NewHeadMesh' has a wrong offset!");
static_assert(offsetof(RGameState_UpdatePlayerClothes, Color) == 0x000010, "Member 'RGameState_UpdatePlayerClothes::Color' has a wrong offset!");

// Function RGame.RGameState.UpdatePlayerCosmetics
// 0x00D8 (0x00D8 - 0x0000)
struct RGameState_UpdatePlayerCosmetics final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerCosmeticOption                  CosmeticOptionData;                                // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameState_UpdatePlayerCosmetics) == 0x000008, "Wrong alignment on RGameState_UpdatePlayerCosmetics");
static_assert(sizeof(RGameState_UpdatePlayerCosmetics) == 0x0000D8, "Wrong size on RGameState_UpdatePlayerCosmetics");
static_assert(offsetof(RGameState_UpdatePlayerCosmetics, RPlayerPawn) == 0x000000, "Member 'RGameState_UpdatePlayerCosmetics::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameState_UpdatePlayerCosmetics, CosmeticOptionData) == 0x000008, "Member 'RGameState_UpdatePlayerCosmetics::CosmeticOptionData' has a wrong offset!");

// Function RGame.RBossPawn_Unglu.GetClosestChargeBlastLocation
// 0x0008 (0x0008 - 0x0000)
struct RBossPawn_Unglu_GetClosestChargeBlastLocation final
{
public:
	class ARAIMovementLocation*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Unglu_GetClosestChargeBlastLocation) == 0x000008, "Wrong alignment on RBossPawn_Unglu_GetClosestChargeBlastLocation");
static_assert(sizeof(RBossPawn_Unglu_GetClosestChargeBlastLocation) == 0x000008, "Wrong size on RBossPawn_Unglu_GetClosestChargeBlastLocation");
static_assert(offsetof(RBossPawn_Unglu_GetClosestChargeBlastLocation, ReturnValue) == 0x000000, "Member 'RBossPawn_Unglu_GetClosestChargeBlastLocation::ReturnValue' has a wrong offset!");

// Function RGame.RBossPawn_Unglu.GetClosestStationaryBeamLocation
// 0x0008 (0x0008 - 0x0000)
struct RBossPawn_Unglu_GetClosestStationaryBeamLocation final
{
public:
	class ARAIMovementLocation*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Unglu_GetClosestStationaryBeamLocation) == 0x000008, "Wrong alignment on RBossPawn_Unglu_GetClosestStationaryBeamLocation");
static_assert(sizeof(RBossPawn_Unglu_GetClosestStationaryBeamLocation) == 0x000008, "Wrong size on RBossPawn_Unglu_GetClosestStationaryBeamLocation");
static_assert(offsetof(RBossPawn_Unglu_GetClosestStationaryBeamLocation, ReturnValue) == 0x000000, "Member 'RBossPawn_Unglu_GetClosestStationaryBeamLocation::ReturnValue' has a wrong offset!");

// Function RGame.RBossPawn_Unglu.GetRandomStationaryBeamCloneLocation
// 0x0008 (0x0008 - 0x0000)
struct RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation final
{
public:
	class ARAIMovementLocation*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation) == 0x000008, "Wrong alignment on RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation");
static_assert(sizeof(RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation) == 0x000008, "Wrong size on RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation");
static_assert(offsetof(RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation, ReturnValue) == 0x000000, "Member 'RBossPawn_Unglu_GetRandomStationaryBeamCloneLocation::ReturnValue' has a wrong offset!");

// Function RGame.RBoxVisualizerComponent.SetBoxCenter
// 0x0018 (0x0018 - 0x0000)
struct RBoxVisualizerComponent_SetBoxCenter final
{
public:
	struct FVector                                NewCenter;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBoxVisualizerComponent_SetBoxCenter) == 0x000008, "Wrong alignment on RBoxVisualizerComponent_SetBoxCenter");
static_assert(sizeof(RBoxVisualizerComponent_SetBoxCenter) == 0x000018, "Wrong size on RBoxVisualizerComponent_SetBoxCenter");
static_assert(offsetof(RBoxVisualizerComponent_SetBoxCenter, NewCenter) == 0x000000, "Member 'RBoxVisualizerComponent_SetBoxCenter::NewCenter' has a wrong offset!");

// Function RGame.RBoxVisualizerComponent.SetBoxExtents
// 0x0038 (0x0038 - 0x0000)
struct RBoxVisualizerComponent_SetBoxExtents final
{
public:
	struct FBox                                   NewExtents;                                        // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBoxVisualizerComponent_SetBoxExtents) == 0x000008, "Wrong alignment on RBoxVisualizerComponent_SetBoxExtents");
static_assert(sizeof(RBoxVisualizerComponent_SetBoxExtents) == 0x000038, "Wrong size on RBoxVisualizerComponent_SetBoxExtents");
static_assert(offsetof(RBoxVisualizerComponent_SetBoxExtents, NewExtents) == 0x000000, "Member 'RBoxVisualizerComponent_SetBoxExtents::NewExtents' has a wrong offset!");

// Function RGame.RBoxVisualizerComponent.GetBox
// 0x0038 (0x0038 - 0x0000)
struct RBoxVisualizerComponent_GetBox final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBoxVisualizerComponent_GetBox) == 0x000008, "Wrong alignment on RBoxVisualizerComponent_GetBox");
static_assert(sizeof(RBoxVisualizerComponent_GetBox) == 0x000038, "Wrong size on RBoxVisualizerComponent_GetBox");
static_assert(offsetof(RBoxVisualizerComponent_GetBox, ReturnValue) == 0x000000, "Member 'RBoxVisualizerComponent_GetBox::ReturnValue' has a wrong offset!");

// Function RGame.RBoxVisualizerComponent.GetBoxCenter
// 0x0018 (0x0018 - 0x0000)
struct RBoxVisualizerComponent_GetBoxCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBoxVisualizerComponent_GetBoxCenter) == 0x000008, "Wrong alignment on RBoxVisualizerComponent_GetBoxCenter");
static_assert(sizeof(RBoxVisualizerComponent_GetBoxCenter) == 0x000018, "Wrong size on RBoxVisualizerComponent_GetBoxCenter");
static_assert(offsetof(RBoxVisualizerComponent_GetBoxCenter, ReturnValue) == 0x000000, "Member 'RBoxVisualizerComponent_GetBoxCenter::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_CanFire.CanFire
// 0x0010 (0x0010 - 0x0000)
struct RGTask_CanFire_CanFire final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_CanFire*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_CanFire_CanFire) == 0x000008, "Wrong alignment on RGTask_CanFire_CanFire");
static_assert(sizeof(RGTask_CanFire_CanFire) == 0x000010, "Wrong size on RGTask_CanFire_CanFire");
static_assert(offsetof(RGTask_CanFire_CanFire, OwningScript) == 0x000000, "Member 'RGTask_CanFire_CanFire::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_CanFire_CanFire, ReturnValue) == 0x000008, "Member 'RGTask_CanFire_CanFire::ReturnValue' has a wrong offset!");

// Function RGame.RBreakableActor.DestroyMesh
// 0x00C8 (0x00C8 - 0x0000)
struct RBreakableActor_DestroyMesh final
{
public:
	class URHealthComponent*                      AffectedHealthComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBreakableActor_DestroyMesh) == 0x000008, "Wrong alignment on RBreakableActor_DestroyMesh");
static_assert(sizeof(RBreakableActor_DestroyMesh) == 0x0000C8, "Wrong size on RBreakableActor_DestroyMesh");
static_assert(offsetof(RBreakableActor_DestroyMesh, AffectedHealthComponent) == 0x000000, "Member 'RBreakableActor_DestroyMesh::AffectedHealthComponent' has a wrong offset!");
static_assert(offsetof(RBreakableActor_DestroyMesh, DamageEventData) == 0x000008, "Member 'RBreakableActor_DestroyMesh::DamageEventData' has a wrong offset!");

// Function RGame.RBreakableActor.OnComponentHit
// 0x0130 (0x0130 - 0x0000)
struct RBreakableActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBreakableActor_OnComponentHit) == 0x000008, "Wrong alignment on RBreakableActor_OnComponentHit");
static_assert(sizeof(RBreakableActor_OnComponentHit) == 0x000130, "Wrong size on RBreakableActor_OnComponentHit");
static_assert(offsetof(RBreakableActor_OnComponentHit, HitComponent) == 0x000000, "Member 'RBreakableActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RBreakableActor_OnComponentHit, OtherActor) == 0x000008, "Member 'RBreakableActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RBreakableActor_OnComponentHit, OtherComponent) == 0x000010, "Member 'RBreakableActor_OnComponentHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(RBreakableActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'RBreakableActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RBreakableActor_OnComponentHit, Hit) == 0x000030, "Member 'RBreakableActor_OnComponentHit::Hit' has a wrong offset!");

// Function RGame.RBreakableActor.OnFragmentSleep
// 0x0010 (0x0010 - 0x0000)
struct RBreakableActor_OnFragmentSleep final
{
public:
	class UPrimitiveComponent*                    InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBreakableActor_OnFragmentSleep) == 0x000008, "Wrong alignment on RBreakableActor_OnFragmentSleep");
static_assert(sizeof(RBreakableActor_OnFragmentSleep) == 0x000010, "Wrong size on RBreakableActor_OnFragmentSleep");
static_assert(offsetof(RBreakableActor_OnFragmentSleep, InComp) == 0x000000, "Member 'RBreakableActor_OnFragmentSleep::InComp' has a wrong offset!");
static_assert(offsetof(RBreakableActor_OnFragmentSleep, InBoneName) == 0x000008, "Member 'RBreakableActor_OnFragmentSleep::InBoneName' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeManager
// 0x0010 (0x0010 - 0x0000)
struct RChallengeManager_GetChallengeManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARChallengeManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeManager) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeManager");
static_assert(sizeof(RChallengeManager_GetChallengeManager) == 0x000010, "Wrong size on RChallengeManager_GetChallengeManager");
static_assert(offsetof(RChallengeManager_GetChallengeManager, WorldContextObject) == 0x000000, "Member 'RChallengeManager_GetChallengeManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeManager, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeManager::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.ParseChallengeDescription
// 0x0020 (0x0020 - 0x0000)
struct RChallengeManager_ParseChallengeDescription final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeId;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_ParseChallengeDescription) == 0x000008, "Wrong alignment on RChallengeManager_ParseChallengeDescription");
static_assert(sizeof(RChallengeManager_ParseChallengeDescription) == 0x000020, "Wrong size on RChallengeManager_ParseChallengeDescription");
static_assert(offsetof(RChallengeManager_ParseChallengeDescription, WorldContextObject) == 0x000000, "Member 'RChallengeManager_ParseChallengeDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ParseChallengeDescription, ChallengeId) == 0x000008, "Member 'RChallengeManager_ParseChallengeDescription::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ParseChallengeDescription, ReturnValue) == 0x000010, "Member 'RChallengeManager_ParseChallengeDescription::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.ChallengeExists
// 0x000C (0x000C - 0x0000)
struct RChallengeManager_ChallengeExists final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RChallengeManager_ChallengeExists) == 0x000004, "Wrong alignment on RChallengeManager_ChallengeExists");
static_assert(sizeof(RChallengeManager_ChallengeExists) == 0x00000C, "Wrong size on RChallengeManager_ChallengeExists");
static_assert(offsetof(RChallengeManager_ChallengeExists, ChallengeId) == 0x000000, "Member 'RChallengeManager_ChallengeExists::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ChallengeExists, ReturnValue) == 0x000008, "Member 'RChallengeManager_ChallengeExists::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.CreateChallengeGridItem
// 0x0180 (0x0180 - 0x0000)
struct RChallengeManager_CreateChallengeGridItem final
{
public:
	struct FRChallenge                            Challenge;                                         // 0x0000(0x0178)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class URChallengeGridItem*                    ReturnValue;                                       // 0x0178(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_CreateChallengeGridItem) == 0x000008, "Wrong alignment on RChallengeManager_CreateChallengeGridItem");
static_assert(sizeof(RChallengeManager_CreateChallengeGridItem) == 0x000180, "Wrong size on RChallengeManager_CreateChallengeGridItem");
static_assert(offsetof(RChallengeManager_CreateChallengeGridItem, Challenge) == 0x000000, "Member 'RChallengeManager_CreateChallengeGridItem::Challenge' has a wrong offset!");
static_assert(offsetof(RChallengeManager_CreateChallengeGridItem, ReturnValue) == 0x000178, "Member 'RChallengeManager_CreateChallengeGridItem::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetAllChallenges
// 0x0010 (0x0010 - 0x0000)
struct RChallengeManager_GetAllChallenges final
{
public:
	TArray<struct FRChallenge>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetAllChallenges) == 0x000008, "Wrong alignment on RChallengeManager_GetAllChallenges");
static_assert(sizeof(RChallengeManager_GetAllChallenges) == 0x000010, "Wrong size on RChallengeManager_GetAllChallenges");
static_assert(offsetof(RChallengeManager_GetAllChallenges, ReturnValue) == 0x000000, "Member 'RChallengeManager_GetAllChallenges::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeByChallengeScript
// 0x0180 (0x0180 - 0x0000)
struct RChallengeManager_GetChallengeByChallengeScript final
{
public:
	const class URChallengeScript*                ChallengeScript;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRChallenge                            ReturnValue;                                       // 0x0008(0x0178)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeByChallengeScript) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeByChallengeScript");
static_assert(sizeof(RChallengeManager_GetChallengeByChallengeScript) == 0x000180, "Wrong size on RChallengeManager_GetChallengeByChallengeScript");
static_assert(offsetof(RChallengeManager_GetChallengeByChallengeScript, ChallengeScript) == 0x000000, "Member 'RChallengeManager_GetChallengeByChallengeScript::ChallengeScript' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeByChallengeScript, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeByChallengeScript::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeCompletionCount
// 0x000C (0x000C - 0x0000)
struct RChallengeManager_GetChallengeCompletionCount final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeCompletionCount) == 0x000004, "Wrong alignment on RChallengeManager_GetChallengeCompletionCount");
static_assert(sizeof(RChallengeManager_GetChallengeCompletionCount) == 0x00000C, "Wrong size on RChallengeManager_GetChallengeCompletionCount");
static_assert(offsetof(RChallengeManager_GetChallengeCompletionCount, ChallengeId) == 0x000000, "Member 'RChallengeManager_GetChallengeCompletionCount::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeCompletionCount, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeCompletionCount::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeGridItems
// 0x0018 (0x0018 - 0x0000)
struct RChallengeManager_GetChallengeGridItems final
{
public:
	bool                                          bExcludeCompleted;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CompletionRatioThreshold;                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URChallengeGridItem*>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeGridItems) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeGridItems");
static_assert(sizeof(RChallengeManager_GetChallengeGridItems) == 0x000018, "Wrong size on RChallengeManager_GetChallengeGridItems");
static_assert(offsetof(RChallengeManager_GetChallengeGridItems, bExcludeCompleted) == 0x000000, "Member 'RChallengeManager_GetChallengeGridItems::bExcludeCompleted' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeGridItems, CompletionRatioThreshold) == 0x000004, "Member 'RChallengeManager_GetChallengeGridItems::CompletionRatioThreshold' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeGridItems, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeGridItems::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeRewardAssets
// 0x0018 (0x0018 - 0x0000)
struct RChallengeManager_GetChallengeRewardAssets final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URPrimaryDataAsset*                     OutReward;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSoulFragmentsReward;                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RChallengeManager_GetChallengeRewardAssets) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeRewardAssets");
static_assert(sizeof(RChallengeManager_GetChallengeRewardAssets) == 0x000018, "Wrong size on RChallengeManager_GetChallengeRewardAssets");
static_assert(offsetof(RChallengeManager_GetChallengeRewardAssets, ChallengeId) == 0x000000, "Member 'RChallengeManager_GetChallengeRewardAssets::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeRewardAssets, OutReward) == 0x000008, "Member 'RChallengeManager_GetChallengeRewardAssets::OutReward' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeRewardAssets, OutSoulFragmentsReward) == 0x000010, "Member 'RChallengeManager_GetChallengeRewardAssets::OutSoulFragmentsReward' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeRewardAssets, ReturnValue) == 0x000014, "Member 'RChallengeManager_GetChallengeRewardAssets::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeWithMutatorRewardCompletionCount
// 0x0010 (0x0010 - 0x0000)
struct RChallengeManager_GetChallengeWithMutatorRewardCompletionCount final
{
public:
	class URMutatorPrimaryAsset*                  MutatorPrimaryAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCompletionCount;                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCompletionCount;                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeWithMutatorRewardCompletionCount) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeWithMutatorRewardCompletionCount");
static_assert(sizeof(RChallengeManager_GetChallengeWithMutatorRewardCompletionCount) == 0x000010, "Wrong size on RChallengeManager_GetChallengeWithMutatorRewardCompletionCount");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardCompletionCount, MutatorPrimaryAsset) == 0x000000, "Member 'RChallengeManager_GetChallengeWithMutatorRewardCompletionCount::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardCompletionCount, CurrentCompletionCount) == 0x000008, "Member 'RChallengeManager_GetChallengeWithMutatorRewardCompletionCount::CurrentCompletionCount' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardCompletionCount, MaxCompletionCount) == 0x00000C, "Member 'RChallengeManager_GetChallengeWithMutatorRewardCompletionCount::MaxCompletionCount' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeWithMutatorRewardDescription
// 0x0018 (0x0018 - 0x0000)
struct RChallengeManager_GetChallengeWithMutatorRewardDescription final
{
public:
	class URMutatorPrimaryAsset*                  MutatorPrimaryAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeWithMutatorRewardDescription) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeWithMutatorRewardDescription");
static_assert(sizeof(RChallengeManager_GetChallengeWithMutatorRewardDescription) == 0x000018, "Wrong size on RChallengeManager_GetChallengeWithMutatorRewardDescription");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardDescription, MutatorPrimaryAsset) == 0x000000, "Member 'RChallengeManager_GetChallengeWithMutatorRewardDescription::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardDescription, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeWithMutatorRewardDescription::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeWithMutatorRewardName
// 0x0018 (0x0018 - 0x0000)
struct RChallengeManager_GetChallengeWithMutatorRewardName final
{
public:
	class URMutatorPrimaryAsset*                  MutatorPrimaryAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeWithMutatorRewardName) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeWithMutatorRewardName");
static_assert(sizeof(RChallengeManager_GetChallengeWithMutatorRewardName) == 0x000018, "Wrong size on RChallengeManager_GetChallengeWithMutatorRewardName");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardName, MutatorPrimaryAsset) == 0x000000, "Member 'RChallengeManager_GetChallengeWithMutatorRewardName::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeWithMutatorRewardName, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeWithMutatorRewardName::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.IsChallengeCompleted
// 0x000C (0x000C - 0x0000)
struct RChallengeManager_IsChallengeCompleted final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RChallengeManager_IsChallengeCompleted) == 0x000004, "Wrong alignment on RChallengeManager_IsChallengeCompleted");
static_assert(sizeof(RChallengeManager_IsChallengeCompleted) == 0x00000C, "Wrong size on RChallengeManager_IsChallengeCompleted");
static_assert(offsetof(RChallengeManager_IsChallengeCompleted, ChallengeId) == 0x000000, "Member 'RChallengeManager_IsChallengeCompleted::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_IsChallengeCompleted, ReturnValue) == 0x000008, "Member 'RChallengeManager_IsChallengeCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.IsChallengeWithMutatorRewardCompleted
// 0x0010 (0x0010 - 0x0000)
struct RChallengeManager_IsChallengeWithMutatorRewardCompleted final
{
public:
	class URMutatorPrimaryAsset*                  MutatorPrimaryAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RChallengeManager_IsChallengeWithMutatorRewardCompleted) == 0x000008, "Wrong alignment on RChallengeManager_IsChallengeWithMutatorRewardCompleted");
static_assert(sizeof(RChallengeManager_IsChallengeWithMutatorRewardCompleted) == 0x000010, "Wrong size on RChallengeManager_IsChallengeWithMutatorRewardCompleted");
static_assert(offsetof(RChallengeManager_IsChallengeWithMutatorRewardCompleted, MutatorPrimaryAsset) == 0x000000, "Member 'RChallengeManager_IsChallengeWithMutatorRewardCompleted::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RChallengeManager_IsChallengeWithMutatorRewardCompleted, ReturnValue) == 0x000008, "Member 'RChallengeManager_IsChallengeWithMutatorRewardCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.OnChallengeCompleted
// 0x0008 (0x0008 - 0x0000)
struct RChallengeManager_OnChallengeCompleted final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_OnChallengeCompleted) == 0x000004, "Wrong alignment on RChallengeManager_OnChallengeCompleted");
static_assert(sizeof(RChallengeManager_OnChallengeCompleted) == 0x000008, "Wrong size on RChallengeManager_OnChallengeCompleted");
static_assert(offsetof(RChallengeManager_OnChallengeCompleted, ChallengeId) == 0x000000, "Member 'RChallengeManager_OnChallengeCompleted::ChallengeId' has a wrong offset!");

// Function RGame.RChallengeManager.ProgressChallenge
// 0x0014 (0x0014 - 0x0000)
struct RChallengeManager_ProgressChallenge final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceFullCompletion;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProgressAmount;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipLobbyCheck;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDeathCheck;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RChallengeManager_ProgressChallenge) == 0x000004, "Wrong alignment on RChallengeManager_ProgressChallenge");
static_assert(sizeof(RChallengeManager_ProgressChallenge) == 0x000014, "Wrong size on RChallengeManager_ProgressChallenge");
static_assert(offsetof(RChallengeManager_ProgressChallenge, ChallengeId) == 0x000000, "Member 'RChallengeManager_ProgressChallenge::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ProgressChallenge, ForceFullCompletion) == 0x000008, "Member 'RChallengeManager_ProgressChallenge::ForceFullCompletion' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ProgressChallenge, ProgressAmount) == 0x00000C, "Member 'RChallengeManager_ProgressChallenge::ProgressAmount' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ProgressChallenge, bSkipLobbyCheck) == 0x000010, "Member 'RChallengeManager_ProgressChallenge::bSkipLobbyCheck' has a wrong offset!");
static_assert(offsetof(RChallengeManager_ProgressChallenge, bSkipDeathCheck) == 0x000011, "Member 'RChallengeManager_ProgressChallenge::bSkipDeathCheck' has a wrong offset!");

// Function RGame.RChallengeManager.RegisterPlayer
// 0x0008 (0x0008 - 0x0000)
struct RChallengeManager_RegisterPlayer final
{
public:
	class ARPlayerController*                     InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_RegisterPlayer) == 0x000008, "Wrong alignment on RChallengeManager_RegisterPlayer");
static_assert(sizeof(RChallengeManager_RegisterPlayer) == 0x000008, "Wrong size on RChallengeManager_RegisterPlayer");
static_assert(offsetof(RChallengeManager_RegisterPlayer, InPlayerController) == 0x000000, "Member 'RChallengeManager_RegisterPlayer::InPlayerController' has a wrong offset!");

// Function RGame.RChallengeManager.ResetChallenge
// 0x0008 (0x0008 - 0x0000)
struct RChallengeManager_ResetChallenge final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_ResetChallenge) == 0x000004, "Wrong alignment on RChallengeManager_ResetChallenge");
static_assert(sizeof(RChallengeManager_ResetChallenge) == 0x000008, "Wrong size on RChallengeManager_ResetChallenge");
static_assert(offsetof(RChallengeManager_ResetChallenge, ChallengeId) == 0x000000, "Member 'RChallengeManager_ResetChallenge::ChallengeId' has a wrong offset!");

// Function RGame.RChallengeManager.SetChallengeCompletionCount
// 0x000C (0x000C - 0x0000)
struct RChallengeManager_SetChallengeCompletionCount final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletionCount;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_SetChallengeCompletionCount) == 0x000004, "Wrong alignment on RChallengeManager_SetChallengeCompletionCount");
static_assert(sizeof(RChallengeManager_SetChallengeCompletionCount) == 0x00000C, "Wrong size on RChallengeManager_SetChallengeCompletionCount");
static_assert(offsetof(RChallengeManager_SetChallengeCompletionCount, ChallengeId) == 0x000000, "Member 'RChallengeManager_SetChallengeCompletionCount::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_SetChallengeCompletionCount, CompletionCount) == 0x000008, "Member 'RChallengeManager_SetChallengeCompletionCount::CompletionCount' has a wrong offset!");

// Function RGame.RChallengeManager.FindChallengeById
// 0x0188 (0x0188 - 0x0000)
struct RChallengeManager_FindChallengeById final
{
public:
	class FString                                 ChallengeId;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRChallenge                            ReturnValue;                                       // 0x0010(0x0178)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_FindChallengeById) == 0x000008, "Wrong alignment on RChallengeManager_FindChallengeById");
static_assert(sizeof(RChallengeManager_FindChallengeById) == 0x000188, "Wrong size on RChallengeManager_FindChallengeById");
static_assert(offsetof(RChallengeManager_FindChallengeById, ChallengeId) == 0x000000, "Member 'RChallengeManager_FindChallengeById::ChallengeId' has a wrong offset!");
static_assert(offsetof(RChallengeManager_FindChallengeById, ReturnValue) == 0x000010, "Member 'RChallengeManager_FindChallengeById::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeByRewardAsset
// 0x0180 (0x0180 - 0x0000)
struct RChallengeManager_GetChallengeByRewardAsset final
{
public:
	const class URPrimaryDataAsset*               RPrimaryDataAsset;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRChallenge                            ReturnValue;                                       // 0x0008(0x0178)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeByRewardAsset) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeByRewardAsset");
static_assert(sizeof(RChallengeManager_GetChallengeByRewardAsset) == 0x000180, "Wrong size on RChallengeManager_GetChallengeByRewardAsset");
static_assert(offsetof(RChallengeManager_GetChallengeByRewardAsset, RPrimaryDataAsset) == 0x000000, "Member 'RChallengeManager_GetChallengeByRewardAsset::RPrimaryDataAsset' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeByRewardAsset, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeByRewardAsset::ReturnValue' has a wrong offset!");

// Function RGame.RChallengeManager.GetChallengeByTag
// 0x0180 (0x0180 - 0x0000)
struct RChallengeManager_GetChallengeByTag final
{
public:
	struct FGameplayTag                           ChallengeTag;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRChallenge                            ReturnValue;                                       // 0x0008(0x0178)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChallengeManager_GetChallengeByTag) == 0x000008, "Wrong alignment on RChallengeManager_GetChallengeByTag");
static_assert(sizeof(RChallengeManager_GetChallengeByTag) == 0x000180, "Wrong size on RChallengeManager_GetChallengeByTag");
static_assert(offsetof(RChallengeManager_GetChallengeByTag, ChallengeTag) == 0x000000, "Member 'RChallengeManager_GetChallengeByTag::ChallengeTag' has a wrong offset!");
static_assert(offsetof(RChallengeManager_GetChallengeByTag, ReturnValue) == 0x000008, "Member 'RChallengeManager_GetChallengeByTag::ReturnValue' has a wrong offset!");

// Function RGame.RBreakablesManager.GetBreakablesManager
// 0x0010 (0x0010 - 0x0000)
struct RBreakablesManager_GetBreakablesManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBreakablesManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBreakablesManager_GetBreakablesManager) == 0x000008, "Wrong alignment on RBreakablesManager_GetBreakablesManager");
static_assert(sizeof(RBreakablesManager_GetBreakablesManager) == 0x000010, "Wrong size on RBreakablesManager_GetBreakablesManager");
static_assert(offsetof(RBreakablesManager_GetBreakablesManager, WorldContextObject) == 0x000000, "Member 'RBreakablesManager_GetBreakablesManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBreakablesManager_GetBreakablesManager, ReturnValue) == 0x000008, "Member 'RBreakablesManager_GetBreakablesManager::ReturnValue' has a wrong offset!");

// Function RGame.RBreakablesManager.GetActorsInPool
// 0x0004 (0x0004 - 0x0000)
struct RBreakablesManager_GetActorsInPool final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBreakablesManager_GetActorsInPool) == 0x000004, "Wrong alignment on RBreakablesManager_GetActorsInPool");
static_assert(sizeof(RBreakablesManager_GetActorsInPool) == 0x000004, "Wrong size on RBreakablesManager_GetActorsInPool");
static_assert(offsetof(RBreakablesManager_GetActorsInPool, ReturnValue) == 0x000000, "Member 'RBreakablesManager_GetActorsInPool::ReturnValue' has a wrong offset!");

// Function RGame.RDecalManger.GetDecalManager
// 0x0010 (0x0010 - 0x0000)
struct RDecalManger_GetDecalManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARDecalManger*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDecalManger_GetDecalManager) == 0x000008, "Wrong alignment on RDecalManger_GetDecalManager");
static_assert(sizeof(RDecalManger_GetDecalManager) == 0x000010, "Wrong size on RDecalManger_GetDecalManager");
static_assert(offsetof(RDecalManger_GetDecalManager, WorldContextObject) == 0x000000, "Member 'RDecalManger_GetDecalManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RDecalManger_GetDecalManager, ReturnValue) == 0x000008, "Member 'RDecalManger_GetDecalManager::ReturnValue' has a wrong offset!");

// Function RGame.RDecalManger.RegisterDecal
// 0x0008 (0x0008 - 0x0000)
struct RDecalManger_RegisterDecal final
{
public:
	class UDecalComponent*                        NewDecal;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDecalManger_RegisterDecal) == 0x000008, "Wrong alignment on RDecalManger_RegisterDecal");
static_assert(sizeof(RDecalManger_RegisterDecal) == 0x000008, "Wrong size on RDecalManger_RegisterDecal");
static_assert(offsetof(RDecalManger_RegisterDecal, NewDecal) == 0x000000, "Member 'RDecalManger_RegisterDecal::NewDecal' has a wrong offset!");

// Function RGame.RDecalManger.RegisterNiagaraDecal
// 0x0038 (0x0038 - 0x0000)
struct RDecalManger_RegisterNiagaraDecal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDecalManger_RegisterNiagaraDecal) == 0x000008, "Wrong alignment on RDecalManger_RegisterNiagaraDecal");
static_assert(sizeof(RDecalManger_RegisterNiagaraDecal) == 0x000038, "Wrong size on RDecalManger_RegisterNiagaraDecal");
static_assert(offsetof(RDecalManger_RegisterNiagaraDecal, WorldContextObject) == 0x000000, "Member 'RDecalManger_RegisterNiagaraDecal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RDecalManger_RegisterNiagaraDecal, Location) == 0x000008, "Member 'RDecalManger_RegisterNiagaraDecal::Location' has a wrong offset!");
static_assert(offsetof(RDecalManger_RegisterNiagaraDecal, Forward) == 0x000020, "Member 'RDecalManger_RegisterNiagaraDecal::Forward' has a wrong offset!");

// Function RGame.RChatLog.AddChatLogEntryToLocalPlayer
// 0x0028 (0x0028 - 0x0000)
struct RChatLog_AddChatLogEntryToLocalPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRChatLogMessage                       Message;                                           // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChatLog_AddChatLogEntryToLocalPlayer) == 0x000008, "Wrong alignment on RChatLog_AddChatLogEntryToLocalPlayer");
static_assert(sizeof(RChatLog_AddChatLogEntryToLocalPlayer) == 0x000028, "Wrong size on RChatLog_AddChatLogEntryToLocalPlayer");
static_assert(offsetof(RChatLog_AddChatLogEntryToLocalPlayer, PlayerController) == 0x000000, "Member 'RChatLog_AddChatLogEntryToLocalPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(RChatLog_AddChatLogEntryToLocalPlayer, Message) == 0x000008, "Member 'RChatLog_AddChatLogEntryToLocalPlayer::Message' has a wrong offset!");

// Function RGame.RChatLog.AddChatLogEntry
// 0x0020 (0x0020 - 0x0000)
struct RChatLog_AddChatLogEntry final
{
public:
	struct FRChatLogMessage                       IncomingMessage;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RChatLog_AddChatLogEntry) == 0x000008, "Wrong alignment on RChatLog_AddChatLogEntry");
static_assert(sizeof(RChatLog_AddChatLogEntry) == 0x000020, "Wrong size on RChatLog_AddChatLogEntry");
static_assert(offsetof(RChatLog_AddChatLogEntry, IncomingMessage) == 0x000000, "Member 'RChatLog_AddChatLogEntry::IncomingMessage' has a wrong offset!");

// Function RGame.ROceanGodTentacle.AddSpawnableProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct ROceanGodTentacle_AddSpawnableProjectileClass final
{
public:
	class UClass*                                 NewProjectileClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROceanGodTentacle_AddSpawnableProjectileClass) == 0x000008, "Wrong alignment on ROceanGodTentacle_AddSpawnableProjectileClass");
static_assert(sizeof(ROceanGodTentacle_AddSpawnableProjectileClass) == 0x000008, "Wrong size on ROceanGodTentacle_AddSpawnableProjectileClass");
static_assert(offsetof(ROceanGodTentacle_AddSpawnableProjectileClass, NewProjectileClass) == 0x000000, "Member 'ROceanGodTentacle_AddSpawnableProjectileClass::NewProjectileClass' has a wrong offset!");

// Function RGame.RGCharacterStatCharmScript.GetStatCharmDescription
// 0x0010 (0x0010 - 0x0000)
struct RGCharacterStatCharmScript_GetStatCharmDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharacterStatCharmScript_GetStatCharmDescription) == 0x000008, "Wrong alignment on RGCharacterStatCharmScript_GetStatCharmDescription");
static_assert(sizeof(RGCharacterStatCharmScript_GetStatCharmDescription) == 0x000010, "Wrong size on RGCharacterStatCharmScript_GetStatCharmDescription");
static_assert(offsetof(RGCharacterStatCharmScript_GetStatCharmDescription, ReturnValue) == 0x000000, "Member 'RGCharacterStatCharmScript_GetStatCharmDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGCharacterStatCharmScript.SwapStatCharm
// 0x0090 (0x0090 - 0x0000)
struct RGCharacterStatCharmScript_SwapStatCharm final
{
public:
	class ARPickupableItem*                       OldStatCharmActorRef;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardRarity                                 NewRarity;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatCharmStat>                 NewMutatorStats;                                   // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterStatCharmScript_SwapStatCharm) == 0x000010, "Wrong alignment on RGCharacterStatCharmScript_SwapStatCharm");
static_assert(sizeof(RGCharacterStatCharmScript_SwapStatCharm) == 0x000090, "Wrong size on RGCharacterStatCharmScript_SwapStatCharm");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm, OldStatCharmActorRef) == 0x000000, "Member 'RGCharacterStatCharmScript_SwapStatCharm::OldStatCharmActorRef' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm, SpawnTransform) == 0x000010, "Member 'RGCharacterStatCharmScript_SwapStatCharm::SpawnTransform' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm, NewRarity) == 0x000070, "Member 'RGCharacterStatCharmScript_SwapStatCharm::NewRarity' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm, NewMutatorStats) == 0x000078, "Member 'RGCharacterStatCharmScript_SwapStatCharm::NewMutatorStats' has a wrong offset!");

// Function RGame.RGCharacterStatCharmScript.SwapStatCharm_Multicast
// 0x0090 (0x0090 - 0x0000)
struct RGCharacterStatCharmScript_SwapStatCharm_Multicast final
{
public:
	class ARPickupableItem*                       OldStatCharmActorRef;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardRarity                                 NewRarity;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatCharmStat>                 NewMutatorStats;                                   // 0x0078(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGCharacterStatCharmScript_SwapStatCharm_Multicast) == 0x000010, "Wrong alignment on RGCharacterStatCharmScript_SwapStatCharm_Multicast");
static_assert(sizeof(RGCharacterStatCharmScript_SwapStatCharm_Multicast) == 0x000090, "Wrong size on RGCharacterStatCharmScript_SwapStatCharm_Multicast");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm_Multicast, OldStatCharmActorRef) == 0x000000, "Member 'RGCharacterStatCharmScript_SwapStatCharm_Multicast::OldStatCharmActorRef' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm_Multicast, SpawnTransform) == 0x000010, "Member 'RGCharacterStatCharmScript_SwapStatCharm_Multicast::SpawnTransform' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm_Multicast, NewRarity) == 0x000070, "Member 'RGCharacterStatCharmScript_SwapStatCharm_Multicast::NewRarity' has a wrong offset!");
static_assert(offsetof(RGCharacterStatCharmScript_SwapStatCharm_Multicast, NewMutatorStats) == 0x000078, "Member 'RGCharacterStatCharmScript_SwapStatCharm_Multicast::NewMutatorStats' has a wrong offset!");

// Function RGame.RGTask_SpawnExplosion.SpawnExplosion
// 0x0060 (0x0060 - 0x0000)
struct RGTask_SpawnExplosion_SpawnExplosion final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunHitSequenceOnExplode;                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplosionTracesForObstacles;                      // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalOverride;                               // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARProjectileBase*                       OptionalProjectile;                                // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakspotOverride;                                 // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFullServerAuth;                              // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_SpawnExplosion*                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_SpawnExplosion_SpawnExplosion) == 0x000008, "Wrong alignment on RGTask_SpawnExplosion_SpawnExplosion");
static_assert(sizeof(RGTask_SpawnExplosion_SpawnExplosion) == 0x000060, "Wrong size on RGTask_SpawnExplosion_SpawnExplosion");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, OwningScript) == 0x000000, "Member 'RGTask_SpawnExplosion_SpawnExplosion::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, Origin) == 0x000008, "Member 'RGTask_SpawnExplosion_SpawnExplosion::Origin' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, Radius) == 0x000020, "Member 'RGTask_SpawnExplosion_SpawnExplosion::Radius' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, IgnoreActors) == 0x000028, "Member 'RGTask_SpawnExplosion_SpawnExplosion::IgnoreActors' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, BaseDamage) == 0x000038, "Member 'RGTask_SpawnExplosion_SpawnExplosion::BaseDamage' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, DamageSources) == 0x00003C, "Member 'RGTask_SpawnExplosion_SpawnExplosion::DamageSources' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, bRunHitSequenceOnExplode) == 0x000040, "Member 'RGTask_SpawnExplosion_SpawnExplosion::bRunHitSequenceOnExplode' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, bExplosionTracesForObstacles) == 0x000041, "Member 'RGTask_SpawnExplosion_SpawnExplosion::bExplosionTracesForObstacles' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, bIsCriticalOverride) == 0x000042, "Member 'RGTask_SpawnExplosion_SpawnExplosion::bIsCriticalOverride' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, OptionalProjectile) == 0x000048, "Member 'RGTask_SpawnExplosion_SpawnExplosion::OptionalProjectile' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, bWeakspotOverride) == 0x000050, "Member 'RGTask_SpawnExplosion_SpawnExplosion::bWeakspotOverride' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, bForceFullServerAuth) == 0x000051, "Member 'RGTask_SpawnExplosion_SpawnExplosion::bForceFullServerAuth' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnExplosion_SpawnExplosion, ReturnValue) == 0x000058, "Member 'RGTask_SpawnExplosion_SpawnExplosion::ReturnValue' has a wrong offset!");

// Function RGame.RCinematicPlayer.OnActorEnterArea
// 0x0008 (0x0008 - 0x0000)
struct RCinematicPlayer_OnActorEnterArea final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCinematicPlayer_OnActorEnterArea) == 0x000008, "Wrong alignment on RCinematicPlayer_OnActorEnterArea");
static_assert(sizeof(RCinematicPlayer_OnActorEnterArea) == 0x000008, "Wrong size on RCinematicPlayer_OnActorEnterArea");
static_assert(offsetof(RCinematicPlayer_OnActorEnterArea, OtherActor) == 0x000000, "Member 'RCinematicPlayer_OnActorEnterArea::OtherActor' has a wrong offset!");

// Function RGame.RCinematicPlayer.OnRep_bIsConsumed
// 0x0001 (0x0001 - 0x0000)
struct RCinematicPlayer_OnRep_bIsConsumed final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCinematicPlayer_OnRep_bIsConsumed) == 0x000001, "Wrong alignment on RCinematicPlayer_OnRep_bIsConsumed");
static_assert(sizeof(RCinematicPlayer_OnRep_bIsConsumed) == 0x000001, "Wrong size on RCinematicPlayer_OnRep_bIsConsumed");
static_assert(offsetof(RCinematicPlayer_OnRep_bIsConsumed, NewValue) == 0x000000, "Member 'RCinematicPlayer_OnRep_bIsConsumed::NewValue' has a wrong offset!");

// Function RGame.RCinematicPlayer.PlayCinematic_Multicast
// 0x0004 (0x0004 - 0x0000)
struct RCinematicPlayer_PlayCinematic_Multicast final
{
public:
	bool                                          bBlockPlayer;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideHud;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidePlayerWeapon;                                 // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideEntirePlayer;                                 // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCinematicPlayer_PlayCinematic_Multicast) == 0x000001, "Wrong alignment on RCinematicPlayer_PlayCinematic_Multicast");
static_assert(sizeof(RCinematicPlayer_PlayCinematic_Multicast) == 0x000004, "Wrong size on RCinematicPlayer_PlayCinematic_Multicast");
static_assert(offsetof(RCinematicPlayer_PlayCinematic_Multicast, bBlockPlayer) == 0x000000, "Member 'RCinematicPlayer_PlayCinematic_Multicast::bBlockPlayer' has a wrong offset!");
static_assert(offsetof(RCinematicPlayer_PlayCinematic_Multicast, bHideHud) == 0x000001, "Member 'RCinematicPlayer_PlayCinematic_Multicast::bHideHud' has a wrong offset!");
static_assert(offsetof(RCinematicPlayer_PlayCinematic_Multicast, bHidePlayerWeapon) == 0x000002, "Member 'RCinematicPlayer_PlayCinematic_Multicast::bHidePlayerWeapon' has a wrong offset!");
static_assert(offsetof(RCinematicPlayer_PlayCinematic_Multicast, bHideEntirePlayer) == 0x000003, "Member 'RCinematicPlayer_PlayCinematic_Multicast::bHideEntirePlayer' has a wrong offset!");

// Function RGame.RClientPredictionTestPawn.ServerDash
// 0x0008 (0x0008 - 0x0000)
struct RClientPredictionTestPawn_ServerDash final
{
public:
	uint32                                        EventId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Power;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RClientPredictionTestPawn_ServerDash) == 0x000004, "Wrong alignment on RClientPredictionTestPawn_ServerDash");
static_assert(sizeof(RClientPredictionTestPawn_ServerDash) == 0x000008, "Wrong size on RClientPredictionTestPawn_ServerDash");
static_assert(offsetof(RClientPredictionTestPawn_ServerDash, EventId) == 0x000000, "Member 'RClientPredictionTestPawn_ServerDash::EventId' has a wrong offset!");
static_assert(offsetof(RClientPredictionTestPawn_ServerDash, Power) == 0x000004, "Member 'RClientPredictionTestPawn_ServerDash::Power' has a wrong offset!");

// Function RGame.RClientPredictionTestPawn.ServerSetInput
// 0x0068 (0x0068 - 0x0000)
struct RClientPredictionTestPawn_ServerSetInput final
{
public:
	struct FRTestPawnMovementInput                NewInput;                                          // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RClientPredictionTestPawn_ServerSetInput) == 0x000008, "Wrong alignment on RClientPredictionTestPawn_ServerSetInput");
static_assert(sizeof(RClientPredictionTestPawn_ServerSetInput) == 0x000068, "Wrong size on RClientPredictionTestPawn_ServerSetInput");
static_assert(offsetof(RClientPredictionTestPawn_ServerSetInput, NewInput) == 0x000000, "Member 'RClientPredictionTestPawn_ServerSetInput::NewInput' has a wrong offset!");

// Function RGame.RCombatEventManager.GetCombatEventManager
// 0x0010 (0x0010 - 0x0000)
struct RCombatEventManager_GetCombatEventManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARCombatEventManager*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCombatEventManager_GetCombatEventManager) == 0x000008, "Wrong alignment on RCombatEventManager_GetCombatEventManager");
static_assert(sizeof(RCombatEventManager_GetCombatEventManager) == 0x000010, "Wrong size on RCombatEventManager_GetCombatEventManager");
static_assert(offsetof(RCombatEventManager_GetCombatEventManager, WorldContextObject) == 0x000000, "Member 'RCombatEventManager_GetCombatEventManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCombatEventManager_GetCombatEventManager, ReturnValue) == 0x000008, "Member 'RCombatEventManager_GetCombatEventManager::ReturnValue' has a wrong offset!");

// Function RGame.RCombatEventManager.IsDamageClientPredictionActiveForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer) == 0x000008, "Wrong alignment on RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer");
static_assert(sizeof(RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer) == 0x000010, "Wrong size on RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer");
static_assert(offsetof(RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer, WorldContextObject) == 0x000000, "Member 'RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer, ReturnValue) == 0x000008, "Member 'RCombatEventManager_IsDamageClientPredictionActiveForLocalPlayer::ReturnValue' has a wrong offset!");

// Function RGame.RCombatEventManager.IsDamageClientPredictionActiveForPlayer
// 0x0010 (0x0010 - 0x0000)
struct RCombatEventManager_IsDamageClientPredictionActiveForPlayer final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RCombatEventManager_IsDamageClientPredictionActiveForPlayer) == 0x000008, "Wrong alignment on RCombatEventManager_IsDamageClientPredictionActiveForPlayer");
static_assert(sizeof(RCombatEventManager_IsDamageClientPredictionActiveForPlayer) == 0x000010, "Wrong size on RCombatEventManager_IsDamageClientPredictionActiveForPlayer");
static_assert(offsetof(RCombatEventManager_IsDamageClientPredictionActiveForPlayer, PlayerController) == 0x000000, "Member 'RCombatEventManager_IsDamageClientPredictionActiveForPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(RCombatEventManager_IsDamageClientPredictionActiveForPlayer, ReturnValue) == 0x000008, "Member 'RCombatEventManager_IsDamageClientPredictionActiveForPlayer::ReturnValue' has a wrong offset!");

// Function RGame.RCombatEventManager.ProcessCombatEvents_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RCombatEventManager_ProcessCombatEvents_Multicast final
{
public:
	TArray<struct FCombatEventReplication>        Events;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCombatEventManager_ProcessCombatEvents_Multicast) == 0x000008, "Wrong alignment on RCombatEventManager_ProcessCombatEvents_Multicast");
static_assert(sizeof(RCombatEventManager_ProcessCombatEvents_Multicast) == 0x000010, "Wrong size on RCombatEventManager_ProcessCombatEvents_Multicast");
static_assert(offsetof(RCombatEventManager_ProcessCombatEvents_Multicast, Events) == 0x000000, "Member 'RCombatEventManager_ProcessCombatEvents_Multicast::Events' has a wrong offset!");

// Function RGame.RCommonHUDWidget.GetWidgetStack
// 0x0008 (0x0008 - 0x0000)
struct RCommonHUDWidget_GetWidgetStack final
{
public:
	class UCommonActivatableWidgetStack*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonHUDWidget_GetWidgetStack) == 0x000008, "Wrong alignment on RCommonHUDWidget_GetWidgetStack");
static_assert(sizeof(RCommonHUDWidget_GetWidgetStack) == 0x000008, "Wrong size on RCommonHUDWidget_GetWidgetStack");
static_assert(offsetof(RCommonHUDWidget_GetWidgetStack, ReturnValue) == 0x000000, "Member 'RCommonHUDWidget_GetWidgetStack::ReturnValue' has a wrong offset!");

// Function RGame.RCommonHUDWidget.IsWidgetStackEmpty
// 0x0002 (0x0002 - 0x0000)
struct RCommonHUDWidget_IsWidgetStackEmpty final
{
public:
	bool                                          bExcludeNonInputWidgets;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonHUDWidget_IsWidgetStackEmpty) == 0x000001, "Wrong alignment on RCommonHUDWidget_IsWidgetStackEmpty");
static_assert(sizeof(RCommonHUDWidget_IsWidgetStackEmpty) == 0x000002, "Wrong size on RCommonHUDWidget_IsWidgetStackEmpty");
static_assert(offsetof(RCommonHUDWidget_IsWidgetStackEmpty, bExcludeNonInputWidgets) == 0x000000, "Member 'RCommonHUDWidget_IsWidgetStackEmpty::bExcludeNonInputWidgets' has a wrong offset!");
static_assert(offsetof(RCommonHUDWidget_IsWidgetStackEmpty, ReturnValue) == 0x000001, "Member 'RCommonHUDWidget_IsWidgetStackEmpty::ReturnValue' has a wrong offset!");

// Function RGame.RCommonRoomObjectiveWidget.OnRoomObjectiveCompleted
// 0x0008 (0x0008 - 0x0000)
struct RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted) == 0x000008, "Wrong alignment on RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted");
static_assert(sizeof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted) == 0x000008, "Wrong size on RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted, EnemySpawnAreaSegment) == 0x000000, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveCompleted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RCommonRoomObjectiveWidget.OnRoomObjectiveCompletedEvent
// 0x0008 (0x0008 - 0x0000)
struct RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent) == 0x000008, "Wrong alignment on RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent");
static_assert(sizeof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent) == 0x000008, "Wrong size on RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent, EnemySpawnAreaSegment) == 0x000000, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveCompletedEvent::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RCommonRoomObjectiveWidget.OnRoomObjectiveSpawnAreaSegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted) == 0x000008, "Wrong alignment on RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted");
static_assert(sizeof(RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted) == 0x000008, "Wrong size on RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted, Segment) == 0x000000, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveSpawnAreaSegmentCompleted::Segment' has a wrong offset!");

// Function RGame.RCommonRoomObjectiveWidget.OnRoomObjectiveUpdated
// 0x0010 (0x0010 - 0x0000)
struct RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountCompleted;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountRequired;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated) == 0x000008, "Wrong alignment on RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated");
static_assert(sizeof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated) == 0x000010, "Wrong size on RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated, EnemySpawnAreaSegment) == 0x000000, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated::EnemySpawnAreaSegment' has a wrong offset!");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated, AmountCompleted) == 0x000008, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated::AmountCompleted' has a wrong offset!");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated, AmountRequired) == 0x00000C, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdated::AmountRequired' has a wrong offset!");

// Function RGame.RCommonRoomObjectiveWidget.OnRoomObjectiveUpdatedEvent
// 0x0010 (0x0010 - 0x0000)
struct RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountCompleted;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountRequired;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent) == 0x000008, "Wrong alignment on RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent");
static_assert(sizeof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent) == 0x000010, "Wrong size on RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent, EnemySpawnAreaSegment) == 0x000000, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent::EnemySpawnAreaSegment' has a wrong offset!");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent, AmountCompleted) == 0x000008, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent::AmountCompleted' has a wrong offset!");
static_assert(offsetof(RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent, AmountRequired) == 0x00000C, "Member 'RCommonRoomObjectiveWidget_OnRoomObjectiveUpdatedEvent::AmountRequired' has a wrong offset!");

// Function RGame.RCrosshair.AddSubCrosshair
// 0x0018 (0x0018 - 0x0000)
struct RCrosshair_AddSubCrosshair final
{
public:
	class APlayerController*                      WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URSubCrosshair>             SubCrosshairClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSubCrosshair*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RCrosshair_AddSubCrosshair) == 0x000008, "Wrong alignment on RCrosshair_AddSubCrosshair");
static_assert(sizeof(RCrosshair_AddSubCrosshair) == 0x000018, "Wrong size on RCrosshair_AddSubCrosshair");
static_assert(offsetof(RCrosshair_AddSubCrosshair, WorldContextObject) == 0x000000, "Member 'RCrosshair_AddSubCrosshair::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RCrosshair_AddSubCrosshair, SubCrosshairClass) == 0x000008, "Member 'RCrosshair_AddSubCrosshair::SubCrosshairClass' has a wrong offset!");
static_assert(offsetof(RCrosshair_AddSubCrosshair, ReturnValue) == 0x000010, "Member 'RCrosshair_AddSubCrosshair::ReturnValue' has a wrong offset!");

// Function RGame.RDangerZoneManager.GetDangerZoneManager
// 0x0010 (0x0010 - 0x0000)
struct RDangerZoneManager_GetDangerZoneManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARDangerZoneManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDangerZoneManager_GetDangerZoneManager) == 0x000008, "Wrong alignment on RDangerZoneManager_GetDangerZoneManager");
static_assert(sizeof(RDangerZoneManager_GetDangerZoneManager) == 0x000010, "Wrong size on RDangerZoneManager_GetDangerZoneManager");
static_assert(offsetof(RDangerZoneManager_GetDangerZoneManager, WorldContextObject) == 0x000000, "Member 'RDangerZoneManager_GetDangerZoneManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_GetDangerZoneManager, ReturnValue) == 0x000008, "Member 'RDangerZoneManager_GetDangerZoneManager::ReturnValue' has a wrong offset!");

// Function RGame.RDangerZoneManager.RegisterDangerousActor
// 0x0018 (0x0018 - 0x0000)
struct RDangerZoneManager_RegisterDangerousActor final
{
public:
	class AActor*                                 DangerousActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseDangerRadius;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalDanger;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RDangerZoneManager_RegisterDangerousActor) == 0x000008, "Wrong alignment on RDangerZoneManager_RegisterDangerousActor");
static_assert(sizeof(RDangerZoneManager_RegisterDangerousActor) == 0x000018, "Wrong size on RDangerZoneManager_RegisterDangerousActor");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousActor, DangerousActor) == 0x000000, "Member 'RDangerZoneManager_RegisterDangerousActor::DangerousActor' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousActor, Radius) == 0x000008, "Member 'RDangerZoneManager_RegisterDangerousActor::Radius' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousActor, CloseDangerRadius) == 0x00000C, "Member 'RDangerZoneManager_RegisterDangerousActor::CloseDangerRadius' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousActor, bCriticalDanger) == 0x000010, "Member 'RDangerZoneManager_RegisterDangerousActor::bCriticalDanger' has a wrong offset!");

// Function RGame.RDangerZoneManager.RegisterDangerousLocation
// 0x0028 (0x0028 - 0x0000)
struct RDangerZoneManager_RegisterDangerousLocation final
{
public:
	struct FVector                                DangerousLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseDangerRadius;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalDanger;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RDangerZoneManager_RegisterDangerousLocation) == 0x000008, "Wrong alignment on RDangerZoneManager_RegisterDangerousLocation");
static_assert(sizeof(RDangerZoneManager_RegisterDangerousLocation) == 0x000028, "Wrong size on RDangerZoneManager_RegisterDangerousLocation");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousLocation, DangerousLocation) == 0x000000, "Member 'RDangerZoneManager_RegisterDangerousLocation::DangerousLocation' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousLocation, Radius) == 0x000018, "Member 'RDangerZoneManager_RegisterDangerousLocation::Radius' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousLocation, CloseDangerRadius) == 0x00001C, "Member 'RDangerZoneManager_RegisterDangerousLocation::CloseDangerRadius' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_RegisterDangerousLocation, bCriticalDanger) == 0x000020, "Member 'RDangerZoneManager_RegisterDangerousLocation::bCriticalDanger' has a wrong offset!");

// Function RGame.RDangerZoneManager.SetCriticalDangerActor
// 0x0010 (0x0010 - 0x0000)
struct RDangerZoneManager_SetCriticalDangerActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalDanger;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RDangerZoneManager_SetCriticalDangerActor) == 0x000008, "Wrong alignment on RDangerZoneManager_SetCriticalDangerActor");
static_assert(sizeof(RDangerZoneManager_SetCriticalDangerActor) == 0x000010, "Wrong size on RDangerZoneManager_SetCriticalDangerActor");
static_assert(offsetof(RDangerZoneManager_SetCriticalDangerActor, Actor) == 0x000000, "Member 'RDangerZoneManager_SetCriticalDangerActor::Actor' has a wrong offset!");
static_assert(offsetof(RDangerZoneManager_SetCriticalDangerActor, bCriticalDanger) == 0x000008, "Member 'RDangerZoneManager_SetCriticalDangerActor::bCriticalDanger' has a wrong offset!");

// Function RGame.RDangerZoneManager.UnRegisterDangerousActor
// 0x0008 (0x0008 - 0x0000)
struct RDangerZoneManager_UnRegisterDangerousActor final
{
public:
	class AActor*                                 ActorToUnRegister;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDangerZoneManager_UnRegisterDangerousActor) == 0x000008, "Wrong alignment on RDangerZoneManager_UnRegisterDangerousActor");
static_assert(sizeof(RDangerZoneManager_UnRegisterDangerousActor) == 0x000008, "Wrong size on RDangerZoneManager_UnRegisterDangerousActor");
static_assert(offsetof(RDangerZoneManager_UnRegisterDangerousActor, ActorToUnRegister) == 0x000000, "Member 'RDangerZoneManager_UnRegisterDangerousActor::ActorToUnRegister' has a wrong offset!");

// Function RGame.RDangerZoneManager.UnRegisterDangerousLocation
// 0x0018 (0x0018 - 0x0000)
struct RDangerZoneManager_UnRegisterDangerousLocation final
{
public:
	struct FVector                                DangerousLocation;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDangerZoneManager_UnRegisterDangerousLocation) == 0x000008, "Wrong alignment on RDangerZoneManager_UnRegisterDangerousLocation");
static_assert(sizeof(RDangerZoneManager_UnRegisterDangerousLocation) == 0x000018, "Wrong size on RDangerZoneManager_UnRegisterDangerousLocation");
static_assert(offsetof(RDangerZoneManager_UnRegisterDangerousLocation, DangerousLocation) == 0x000000, "Member 'RDangerZoneManager_UnRegisterDangerousLocation::DangerousLocation' has a wrong offset!");

// Function RGame.RDebugFunctionLibrary.BlueprintDrawDebugBoxTraceMulti
// 0x00A8 (0x00A8 - 0x0000)
struct RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfSize;                                          // 0x0038(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x0050(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHit;                                              // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0070(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceColor;                                        // 0x0080(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0090(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti) == 0x000008, "Wrong alignment on RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti");
static_assert(sizeof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti) == 0x0000A8, "Wrong size on RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, WorldContextObject) == 0x000000, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, Start) == 0x000008, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::Start' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, End) == 0x000020, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::End' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, HalfSize) == 0x000038, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::HalfSize' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, Orientation) == 0x000050, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::Orientation' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, DrawDebugType) == 0x000068, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::DrawDebugType' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, bHit) == 0x000069, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::bHit' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, OutHits) == 0x000070, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::OutHits' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, TraceColor) == 0x000080, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::TraceColor' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, TraceHitColor) == 0x000090, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::TraceHitColor' has a wrong offset!");
static_assert(offsetof(RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti, DrawTime) == 0x0000A0, "Member 'RDebugFunctionLibrary_BlueprintDrawDebugBoxTraceMulti::DrawTime' has a wrong offset!");

// Function RGame.RDebugFunctionLibrary.LogGScriptsForAllPlayers
// 0x0008 (0x0008 - 0x0000)
struct RDebugFunctionLibrary_LogGScriptsForAllPlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDebugFunctionLibrary_LogGScriptsForAllPlayers) == 0x000008, "Wrong alignment on RDebugFunctionLibrary_LogGScriptsForAllPlayers");
static_assert(sizeof(RDebugFunctionLibrary_LogGScriptsForAllPlayers) == 0x000008, "Wrong size on RDebugFunctionLibrary_LogGScriptsForAllPlayers");
static_assert(offsetof(RDebugFunctionLibrary_LogGScriptsForAllPlayers, WorldContextObject) == 0x000000, "Member 'RDebugFunctionLibrary_LogGScriptsForAllPlayers::WorldContextObject' has a wrong offset!");

// Function RGame.RDebugFunctionLibrary.LogMovementSpeedModifierCoefficientsForAllPlayers
// 0x0008 (0x0008 - 0x0000)
struct RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers) == 0x000008, "Wrong alignment on RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers");
static_assert(sizeof(RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers) == 0x000008, "Wrong size on RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers");
static_assert(offsetof(RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers, WorldContextObject) == 0x000000, "Member 'RDebugFunctionLibrary_LogMovementSpeedModifierCoefficientsForAllPlayers::WorldContextObject' has a wrong offset!");

// Function RGame.RDifficultyPrimaryAsset.GetNumTiers
// 0x0004 (0x0004 - 0x0000)
struct RDifficultyPrimaryAsset_GetNumTiers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDifficultyPrimaryAsset_GetNumTiers) == 0x000004, "Wrong alignment on RDifficultyPrimaryAsset_GetNumTiers");
static_assert(sizeof(RDifficultyPrimaryAsset_GetNumTiers) == 0x000004, "Wrong size on RDifficultyPrimaryAsset_GetNumTiers");
static_assert(offsetof(RDifficultyPrimaryAsset_GetNumTiers, ReturnValue) == 0x000000, "Member 'RDifficultyPrimaryAsset_GetNumTiers::ReturnValue' has a wrong offset!");

// Function RGame.RDifficultyPrimaryAsset.ParseDescription
// 0x0018 (0x0018 - 0x0000)
struct RDifficultyPrimaryAsset_ParseDescription final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDifficultyPrimaryAsset_ParseDescription) == 0x000008, "Wrong alignment on RDifficultyPrimaryAsset_ParseDescription");
static_assert(sizeof(RDifficultyPrimaryAsset_ParseDescription) == 0x000018, "Wrong size on RDifficultyPrimaryAsset_ParseDescription");
static_assert(offsetof(RDifficultyPrimaryAsset_ParseDescription, Tier) == 0x000000, "Member 'RDifficultyPrimaryAsset_ParseDescription::Tier' has a wrong offset!");
static_assert(offsetof(RDifficultyPrimaryAsset_ParseDescription, ReturnValue) == 0x000008, "Member 'RDifficultyPrimaryAsset_ParseDescription::ReturnValue' has a wrong offset!");

// Function RGame.RDifficultyPrimaryAsset.ParseExtraDescription
// 0x0018 (0x0018 - 0x0000)
struct RDifficultyPrimaryAsset_ParseExtraDescription final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDifficultyPrimaryAsset_ParseExtraDescription) == 0x000008, "Wrong alignment on RDifficultyPrimaryAsset_ParseExtraDescription");
static_assert(sizeof(RDifficultyPrimaryAsset_ParseExtraDescription) == 0x000018, "Wrong size on RDifficultyPrimaryAsset_ParseExtraDescription");
static_assert(offsetof(RDifficultyPrimaryAsset_ParseExtraDescription, Tier) == 0x000000, "Member 'RDifficultyPrimaryAsset_ParseExtraDescription::Tier' has a wrong offset!");
static_assert(offsetof(RDifficultyPrimaryAsset_ParseExtraDescription, ReturnValue) == 0x000008, "Member 'RDifficultyPrimaryAsset_ParseExtraDescription::ReturnValue' has a wrong offset!");

// Function RGame.RDoor.GetBlueprintVariables
// 0x0010 (0x0010 - 0x0000)
struct RDoor_GetBlueprintVariables final
{
public:
	struct FRDoorBlueprintVariables               Result;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDoor_GetBlueprintVariables) == 0x000008, "Wrong alignment on RDoor_GetBlueprintVariables");
static_assert(sizeof(RDoor_GetBlueprintVariables) == 0x000010, "Wrong size on RDoor_GetBlueprintVariables");
static_assert(offsetof(RDoor_GetBlueprintVariables, Result) == 0x000000, "Member 'RDoor_GetBlueprintVariables::Result' has a wrong offset!");

// Function RGame.RDrawDebugBoxComponent.GetBoxCenter
// 0x0018 (0x0018 - 0x0000)
struct RDrawDebugBoxComponent_GetBoxCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDrawDebugBoxComponent_GetBoxCenter) == 0x000008, "Wrong alignment on RDrawDebugBoxComponent_GetBoxCenter");
static_assert(sizeof(RDrawDebugBoxComponent_GetBoxCenter) == 0x000018, "Wrong size on RDrawDebugBoxComponent_GetBoxCenter");
static_assert(offsetof(RDrawDebugBoxComponent_GetBoxCenter, ReturnValue) == 0x000000, "Member 'RDrawDebugBoxComponent_GetBoxCenter::ReturnValue' has a wrong offset!");

// Function RGame.RDrawDebugBoxComponent.GetBoxExtents
// 0x0018 (0x0018 - 0x0000)
struct RDrawDebugBoxComponent_GetBoxExtents final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDrawDebugBoxComponent_GetBoxExtents) == 0x000008, "Wrong alignment on RDrawDebugBoxComponent_GetBoxExtents");
static_assert(sizeof(RDrawDebugBoxComponent_GetBoxExtents) == 0x000018, "Wrong size on RDrawDebugBoxComponent_GetBoxExtents");
static_assert(offsetof(RDrawDebugBoxComponent_GetBoxExtents, ReturnValue) == 0x000000, "Member 'RDrawDebugBoxComponent_GetBoxExtents::ReturnValue' has a wrong offset!");

// Function RGame.RDummy.GetCapsuleComponent
// 0x0008 (0x0008 - 0x0000)
struct RDummy_GetCapsuleComponent final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDummy_GetCapsuleComponent) == 0x000008, "Wrong alignment on RDummy_GetCapsuleComponent");
static_assert(sizeof(RDummy_GetCapsuleComponent) == 0x000008, "Wrong size on RDummy_GetCapsuleComponent");
static_assert(offsetof(RDummy_GetCapsuleComponent, ReturnValue) == 0x000000, "Member 'RDummy_GetCapsuleComponent::ReturnValue' has a wrong offset!");

// Function RGame.RDummy.GetHealthComponent
// 0x0008 (0x0008 - 0x0000)
struct RDummy_GetHealthComponent final
{
public:
	class URHealthComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDummy_GetHealthComponent) == 0x000008, "Wrong alignment on RDummy_GetHealthComponent");
static_assert(sizeof(RDummy_GetHealthComponent) == 0x000008, "Wrong size on RDummy_GetHealthComponent");
static_assert(offsetof(RDummy_GetHealthComponent, ReturnValue) == 0x000000, "Member 'RDummy_GetHealthComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGameMode.InitPingBeacon
// 0x0001 (0x0001 - 0x0000)
struct RGameMode_InitPingBeacon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameMode_InitPingBeacon) == 0x000001, "Wrong alignment on RGameMode_InitPingBeacon");
static_assert(sizeof(RGameMode_InitPingBeacon) == 0x000001, "Wrong size on RGameMode_InitPingBeacon");
static_assert(offsetof(RGameMode_InitPingBeacon, ReturnValue) == 0x000000, "Member 'RGameMode_InitPingBeacon::ReturnValue' has a wrong offset!");

// Function RGame.RGameGameMode.ReevaluateDifficultyCoefficient
// 0x0004 (0x0004 - 0x0000)
struct RGameGameMode_ReevaluateDifficultyCoefficient final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameGameMode_ReevaluateDifficultyCoefficient) == 0x000004, "Wrong alignment on RGameGameMode_ReevaluateDifficultyCoefficient");
static_assert(sizeof(RGameGameMode_ReevaluateDifficultyCoefficient) == 0x000004, "Wrong size on RGameGameMode_ReevaluateDifficultyCoefficient");
static_assert(offsetof(RGameGameMode_ReevaluateDifficultyCoefficient, ReturnValue) == 0x000000, "Member 'RGameGameMode_ReevaluateDifficultyCoefficient::ReturnValue' has a wrong offset!");

// Function RGame.RGameGameMode.GetAliveControllersArray
// 0x0010 (0x0010 - 0x0000)
struct RGameGameMode_GetAliveControllersArray final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameGameMode_GetAliveControllersArray) == 0x000008, "Wrong alignment on RGameGameMode_GetAliveControllersArray");
static_assert(sizeof(RGameGameMode_GetAliveControllersArray) == 0x000010, "Wrong size on RGameGameMode_GetAliveControllersArray");
static_assert(offsetof(RGameGameMode_GetAliveControllersArray, ReturnValue) == 0x000000, "Member 'RGameGameMode_GetAliveControllersArray::ReturnValue' has a wrong offset!");

// Function RGame.RGameGameMode.GetDeadControllersArray
// 0x0010 (0x0010 - 0x0000)
struct RGameGameMode_GetDeadControllersArray final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameGameMode_GetDeadControllersArray) == 0x000008, "Wrong alignment on RGameGameMode_GetDeadControllersArray");
static_assert(sizeof(RGameGameMode_GetDeadControllersArray) == 0x000010, "Wrong size on RGameGameMode_GetDeadControllersArray");
static_assert(offsetof(RGameGameMode_GetDeadControllersArray, ReturnValue) == 0x000000, "Member 'RGameGameMode_GetDeadControllersArray::ReturnValue' has a wrong offset!");

// Function RGame.RGameGameMode.GetDownedControllersArray
// 0x0010 (0x0010 - 0x0000)
struct RGameGameMode_GetDownedControllersArray final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameGameMode_GetDownedControllersArray) == 0x000008, "Wrong alignment on RGameGameMode_GetDownedControllersArray");
static_assert(sizeof(RGameGameMode_GetDownedControllersArray) == 0x000010, "Wrong size on RGameGameMode_GetDownedControllersArray");
static_assert(offsetof(RGameGameMode_GetDownedControllersArray, ReturnValue) == 0x000000, "Member 'RGameGameMode_GetDownedControllersArray::ReturnValue' has a wrong offset!");

// Function RGame.RDungeonGameMode.GetRDungeonGameMode
// 0x0010 (0x0010 - 0x0000)
struct RDungeonGameMode_GetRDungeonGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARDungeonGameMode*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_GetRDungeonGameMode) == 0x000008, "Wrong alignment on RDungeonGameMode_GetRDungeonGameMode");
static_assert(sizeof(RDungeonGameMode_GetRDungeonGameMode) == 0x000010, "Wrong size on RDungeonGameMode_GetRDungeonGameMode");
static_assert(offsetof(RDungeonGameMode_GetRDungeonGameMode, WorldContextObject) == 0x000000, "Member 'RDungeonGameMode_GetRDungeonGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RDungeonGameMode_GetRDungeonGameMode, ReturnValue) == 0x000008, "Member 'RDungeonGameMode_GetRDungeonGameMode::ReturnValue' has a wrong offset!");

// Function RGame.RDungeonGameMode.OnSegmentCompleted_Internal
// 0x0008 (0x0008 - 0x0000)
struct RDungeonGameMode_OnSegmentCompleted_Internal final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_OnSegmentCompleted_Internal) == 0x000008, "Wrong alignment on RDungeonGameMode_OnSegmentCompleted_Internal");
static_assert(sizeof(RDungeonGameMode_OnSegmentCompleted_Internal) == 0x000008, "Wrong size on RDungeonGameMode_OnSegmentCompleted_Internal");
static_assert(offsetof(RDungeonGameMode_OnSegmentCompleted_Internal, EnemySpawnAreaSegment) == 0x000000, "Member 'RDungeonGameMode_OnSegmentCompleted_Internal::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RDungeonGameMode.StartWaitingForPlayers
// 0x0008 (0x0008 - 0x0000)
struct RDungeonGameMode_StartWaitingForPlayers final
{
public:
	class ARGamePlayerController*                 GamePlayerController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_StartWaitingForPlayers) == 0x000008, "Wrong alignment on RDungeonGameMode_StartWaitingForPlayers");
static_assert(sizeof(RDungeonGameMode_StartWaitingForPlayers) == 0x000008, "Wrong size on RDungeonGameMode_StartWaitingForPlayers");
static_assert(offsetof(RDungeonGameMode_StartWaitingForPlayers, GamePlayerController) == 0x000000, "Member 'RDungeonGameMode_StartWaitingForPlayers::GamePlayerController' has a wrong offset!");

// Function RGame.RDungeonGameMode.StopWaitingForPlayer
// 0x0008 (0x0008 - 0x0000)
struct RDungeonGameMode_StopWaitingForPlayer final
{
public:
	class ARGamePlayerController*                 GamePlayerController;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_StopWaitingForPlayer) == 0x000008, "Wrong alignment on RDungeonGameMode_StopWaitingForPlayer");
static_assert(sizeof(RDungeonGameMode_StopWaitingForPlayer) == 0x000008, "Wrong size on RDungeonGameMode_StopWaitingForPlayer");
static_assert(offsetof(RDungeonGameMode_StopWaitingForPlayer, GamePlayerController) == 0x000000, "Member 'RDungeonGameMode_StopWaitingForPlayer::GamePlayerController' has a wrong offset!");

// Function RGame.RDungeonGameMode.TravelToLevel
// 0x0038 (0x0038 - 0x0000)
struct RDungeonGameMode_TravelToLevel final
{
public:
	TArray<class FName>                           LevelId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   LightingLevelId;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ConnectorLevels;                                   // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bBlockingLoading;                                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TargetPlayerStartTag;                              // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RDungeonGameMode_TravelToLevel) == 0x000008, "Wrong alignment on RDungeonGameMode_TravelToLevel");
static_assert(sizeof(RDungeonGameMode_TravelToLevel) == 0x000038, "Wrong size on RDungeonGameMode_TravelToLevel");
static_assert(offsetof(RDungeonGameMode_TravelToLevel, LevelId) == 0x000000, "Member 'RDungeonGameMode_TravelToLevel::LevelId' has a wrong offset!");
static_assert(offsetof(RDungeonGameMode_TravelToLevel, LightingLevelId) == 0x000010, "Member 'RDungeonGameMode_TravelToLevel::LightingLevelId' has a wrong offset!");
static_assert(offsetof(RDungeonGameMode_TravelToLevel, ConnectorLevels) == 0x000018, "Member 'RDungeonGameMode_TravelToLevel::ConnectorLevels' has a wrong offset!");
static_assert(offsetof(RDungeonGameMode_TravelToLevel, bBlockingLoading) == 0x000028, "Member 'RDungeonGameMode_TravelToLevel::bBlockingLoading' has a wrong offset!");
static_assert(offsetof(RDungeonGameMode_TravelToLevel, TargetPlayerStartTag) == 0x00002C, "Member 'RDungeonGameMode_TravelToLevel::TargetPlayerStartTag' has a wrong offset!");

// Function RGame.RDungeonGameMode.TravelToLobby
// 0x0008 (0x0008 - 0x0000)
struct RDungeonGameMode_TravelToLobby final
{
public:
	class FName                                   TargetPlayerStartTag;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_TravelToLobby) == 0x000004, "Wrong alignment on RDungeonGameMode_TravelToLobby");
static_assert(sizeof(RDungeonGameMode_TravelToLobby) == 0x000008, "Wrong size on RDungeonGameMode_TravelToLobby");
static_assert(offsetof(RDungeonGameMode_TravelToLobby, TargetPlayerStartTag) == 0x000000, "Member 'RDungeonGameMode_TravelToLobby::TargetPlayerStartTag' has a wrong offset!");

// Function RGame.RDungeonGameMode.VoteToProceedShortcut
// 0x0008 (0x0008 - 0x0000)
struct RDungeonGameMode_VoteToProceedShortcut final
{
public:
	class ARGamePlayerController*                 VotingPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RDungeonGameMode_VoteToProceedShortcut) == 0x000008, "Wrong alignment on RDungeonGameMode_VoteToProceedShortcut");
static_assert(sizeof(RDungeonGameMode_VoteToProceedShortcut) == 0x000008, "Wrong size on RDungeonGameMode_VoteToProceedShortcut");
static_assert(offsetof(RDungeonGameMode_VoteToProceedShortcut, VotingPlayer) == 0x000000, "Member 'RDungeonGameMode_VoteToProceedShortcut::VotingPlayer' has a wrong offset!");

// Function RGame.REffectsManager.DestroyOrReleaseNiagaraSystem
// 0x0008 (0x0008 - 0x0000)
struct REffectsManager_DestroyOrReleaseNiagaraSystem final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_DestroyOrReleaseNiagaraSystem) == 0x000008, "Wrong alignment on REffectsManager_DestroyOrReleaseNiagaraSystem");
static_assert(sizeof(REffectsManager_DestroyOrReleaseNiagaraSystem) == 0x000008, "Wrong size on REffectsManager_DestroyOrReleaseNiagaraSystem");
static_assert(offsetof(REffectsManager_DestroyOrReleaseNiagaraSystem, NiagaraComponent) == 0x000000, "Member 'REffectsManager_DestroyOrReleaseNiagaraSystem::NiagaraComponent' has a wrong offset!");

// Function RGame.REffectsManager.GetIsNiagaraPoolingEnabled
// 0x0001 (0x0001 - 0x0000)
struct REffectsManager_GetIsNiagaraPoolingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_GetIsNiagaraPoolingEnabled) == 0x000001, "Wrong alignment on REffectsManager_GetIsNiagaraPoolingEnabled");
static_assert(sizeof(REffectsManager_GetIsNiagaraPoolingEnabled) == 0x000001, "Wrong size on REffectsManager_GetIsNiagaraPoolingEnabled");
static_assert(offsetof(REffectsManager_GetIsNiagaraPoolingEnabled, ReturnValue) == 0x000000, "Member 'REffectsManager_GetIsNiagaraPoolingEnabled::ReturnValue' has a wrong offset!");

// Function RGame.REffectsManager.GetShouldAutoPoolNiagara
// 0x0001 (0x0001 - 0x0000)
struct REffectsManager_GetShouldAutoPoolNiagara final
{
public:
	ENCPoolMethod                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_GetShouldAutoPoolNiagara) == 0x000001, "Wrong alignment on REffectsManager_GetShouldAutoPoolNiagara");
static_assert(sizeof(REffectsManager_GetShouldAutoPoolNiagara) == 0x000001, "Wrong size on REffectsManager_GetShouldAutoPoolNiagara");
static_assert(offsetof(REffectsManager_GetShouldAutoPoolNiagara, ReturnValue) == 0x000000, "Member 'REffectsManager_GetShouldAutoPoolNiagara::ReturnValue' has a wrong offset!");

// Function RGame.REffectsManager.GetShouldManualReleaseNiagara
// 0x0001 (0x0001 - 0x0000)
struct REffectsManager_GetShouldManualReleaseNiagara final
{
public:
	ENCPoolMethod                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_GetShouldManualReleaseNiagara) == 0x000001, "Wrong alignment on REffectsManager_GetShouldManualReleaseNiagara");
static_assert(sizeof(REffectsManager_GetShouldManualReleaseNiagara) == 0x000001, "Wrong size on REffectsManager_GetShouldManualReleaseNiagara");
static_assert(offsetof(REffectsManager_GetShouldManualReleaseNiagara, ReturnValue) == 0x000000, "Member 'REffectsManager_GetShouldManualReleaseNiagara::ReturnValue' has a wrong offset!");

// Function RGame.REffectsManager.PlayReplicatedNiagara
// 0x0070 (0x0070 - 0x0000)
struct REffectsManager_PlayReplicatedNiagara final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         SystemTemplate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNiagaraFloatParam>             FloatParams;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REffectsManager_PlayReplicatedNiagara) == 0x000008, "Wrong alignment on REffectsManager_PlayReplicatedNiagara");
static_assert(sizeof(REffectsManager_PlayReplicatedNiagara) == 0x000070, "Wrong size on REffectsManager_PlayReplicatedNiagara");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, WorldContextObject) == 0x000000, "Member 'REffectsManager_PlayReplicatedNiagara::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, SystemTemplate) == 0x000008, "Member 'REffectsManager_PlayReplicatedNiagara::SystemTemplate' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, FloatParams) == 0x000010, "Member 'REffectsManager_PlayReplicatedNiagara::FloatParams' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, Location) == 0x000020, "Member 'REffectsManager_PlayReplicatedNiagara::Location' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, Rotation) == 0x000038, "Member 'REffectsManager_PlayReplicatedNiagara::Rotation' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, Scale) == 0x000050, "Member 'REffectsManager_PlayReplicatedNiagara::Scale' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagara, bPreCullCheck) == 0x000068, "Member 'REffectsManager_PlayReplicatedNiagara::bPreCullCheck' has a wrong offset!");

// Function RGame.REffectsManager.PlayReplicatedNiagaraAtActorLocation
// 0x0078 (0x0078 - 0x0000)
struct REffectsManager_PlayReplicatedNiagaraAtActorLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         SystemTemplate;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNiagaraFloatParam>             FloatParams;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_PlayReplicatedNiagaraAtActorLocation) == 0x000008, "Wrong alignment on REffectsManager_PlayReplicatedNiagaraAtActorLocation");
static_assert(sizeof(REffectsManager_PlayReplicatedNiagaraAtActorLocation) == 0x000078, "Wrong size on REffectsManager_PlayReplicatedNiagaraAtActorLocation");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, WorldContextObject) == 0x000000, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, SystemTemplate) == 0x000008, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::SystemTemplate' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, FloatParams) == 0x000010, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::FloatParams' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, Actor) == 0x000020, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::Actor' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, Rotation) == 0x000028, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::Rotation' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, Scale) == 0x000040, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::Scale' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, bPreCullCheck) == 0x000058, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedNiagaraAtActorLocation, LocationOffset) == 0x000060, "Member 'REffectsManager_PlayReplicatedNiagaraAtActorLocation::LocationOffset' has a wrong offset!");

// Function RGame.REffectsManager.PlayReplicatedSound2D
// 0x0038 (0x0038 - 0x0000)
struct REffectsManager_PlayReplicatedSound2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>                AudioParams;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_PlayReplicatedSound2D) == 0x000008, "Wrong alignment on REffectsManager_PlayReplicatedSound2D");
static_assert(sizeof(REffectsManager_PlayReplicatedSound2D) == 0x000038, "Wrong size on REffectsManager_PlayReplicatedSound2D");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, WorldContextObject) == 0x000000, "Member 'REffectsManager_PlayReplicatedSound2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, Sound) == 0x000008, "Member 'REffectsManager_PlayReplicatedSound2D::Sound' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, AudioParams) == 0x000010, "Member 'REffectsManager_PlayReplicatedSound2D::AudioParams' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, VolumeMultiplier) == 0x000020, "Member 'REffectsManager_PlayReplicatedSound2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, PitchMultiplier) == 0x000024, "Member 'REffectsManager_PlayReplicatedSound2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, StartTime) == 0x000028, "Member 'REffectsManager_PlayReplicatedSound2D::StartTime' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSound2D, ConcurrencySettings) == 0x000030, "Member 'REffectsManager_PlayReplicatedSound2D::ConcurrencySettings' has a wrong offset!");

// Function RGame.REffectsManager.PlayReplicatedSoundAtActorLocation
// 0x0060 (0x0060 - 0x0000)
struct REffectsManager_PlayReplicatedSoundAtActorLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>                AudioParams;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_PlayReplicatedSoundAtActorLocation) == 0x000008, "Wrong alignment on REffectsManager_PlayReplicatedSoundAtActorLocation");
static_assert(sizeof(REffectsManager_PlayReplicatedSoundAtActorLocation) == 0x000060, "Wrong size on REffectsManager_PlayReplicatedSoundAtActorLocation");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, WorldContextObject) == 0x000000, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, Sound) == 0x000008, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::Sound' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, Actor) == 0x000010, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::Actor' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, AudioParams) == 0x000018, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::AudioParams' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, VolumeMultiplier) == 0x000028, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, PitchMultiplier) == 0x00002C, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, StartTime) == 0x000030, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::StartTime' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, AttenuationSettings) == 0x000038, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, ConcurrencySettings) == 0x000040, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtActorLocation, LocationOffset) == 0x000048, "Member 'REffectsManager_PlayReplicatedSoundAtActorLocation::LocationOffset' has a wrong offset!");

// Function RGame.REffectsManager.PlayReplicatedSoundAtLocation
// 0x0058 (0x0058 - 0x0000)
struct REffectsManager_PlayReplicatedSoundAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioParameter>                AudioParams;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_PlayReplicatedSoundAtLocation) == 0x000008, "Wrong alignment on REffectsManager_PlayReplicatedSoundAtLocation");
static_assert(sizeof(REffectsManager_PlayReplicatedSoundAtLocation) == 0x000058, "Wrong size on REffectsManager_PlayReplicatedSoundAtLocation");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, WorldContextObject) == 0x000000, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, Sound) == 0x000008, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, Location) == 0x000010, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::Location' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, AudioParams) == 0x000028, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::AudioParams' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, VolumeMultiplier) == 0x000038, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, PitchMultiplier) == 0x00003C, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, StartTime) == 0x000040, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, AttenuationSettings) == 0x000048, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayReplicatedSoundAtLocation, ConcurrencySettings) == 0x000050, "Member 'REffectsManager_PlayReplicatedSoundAtLocation::ConcurrencySettings' has a wrong offset!");

// Function RGame.REffectsManager.TrackNiagaraComponent
// 0x0010 (0x0010 - 0x0000)
struct REffectsManager_TrackNiagaraComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_TrackNiagaraComponent) == 0x000008, "Wrong alignment on REffectsManager_TrackNiagaraComponent");
static_assert(sizeof(REffectsManager_TrackNiagaraComponent) == 0x000010, "Wrong size on REffectsManager_TrackNiagaraComponent");
static_assert(offsetof(REffectsManager_TrackNiagaraComponent, WorldContextObject) == 0x000000, "Member 'REffectsManager_TrackNiagaraComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REffectsManager_TrackNiagaraComponent, NiagaraComponent) == 0x000008, "Member 'REffectsManager_TrackNiagaraComponent::NiagaraComponent' has a wrong offset!");

// Function RGame.REffectsManager.PlayBatchedEffects_Multicast
// 0x0030 (0x0030 - 0x0000)
struct REffectsManager_PlayBatchedEffects_Multicast final
{
public:
	TArray<struct FNiagaraSpawnRequest>           Niagara;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSoundSpawnRequest>             Sounds;                                            // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSound2DSpawnRequest>           Sounds2D;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REffectsManager_PlayBatchedEffects_Multicast) == 0x000008, "Wrong alignment on REffectsManager_PlayBatchedEffects_Multicast");
static_assert(sizeof(REffectsManager_PlayBatchedEffects_Multicast) == 0x000030, "Wrong size on REffectsManager_PlayBatchedEffects_Multicast");
static_assert(offsetof(REffectsManager_PlayBatchedEffects_Multicast, Niagara) == 0x000000, "Member 'REffectsManager_PlayBatchedEffects_Multicast::Niagara' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayBatchedEffects_Multicast, Sounds) == 0x000010, "Member 'REffectsManager_PlayBatchedEffects_Multicast::Sounds' has a wrong offset!");
static_assert(offsetof(REffectsManager_PlayBatchedEffects_Multicast, Sounds2D) == 0x000020, "Member 'REffectsManager_PlayBatchedEffects_Multicast::Sounds2D' has a wrong offset!");

// Function RGame.REnemyPawnBase.AddAndActivateMutator
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_AddAndActivateMutator final
{
public:
	TSubclassOf<class URGEnemyMutatorScript>      NewMutator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_AddAndActivateMutator) == 0x000008, "Wrong alignment on REnemyPawnBase_AddAndActivateMutator");
static_assert(sizeof(REnemyPawnBase_AddAndActivateMutator) == 0x000008, "Wrong size on REnemyPawnBase_AddAndActivateMutator");
static_assert(offsetof(REnemyPawnBase_AddAndActivateMutator, NewMutator) == 0x000000, "Member 'REnemyPawnBase_AddAndActivateMutator::NewMutator' has a wrong offset!");

// Function RGame.REnemyPawnBase.AddMutator
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_AddMutator final
{
public:
	TSubclassOf<class URGEnemyMutatorScript>      NewMutator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_AddMutator) == 0x000008, "Wrong alignment on REnemyPawnBase_AddMutator");
static_assert(sizeof(REnemyPawnBase_AddMutator) == 0x000008, "Wrong size on REnemyPawnBase_AddMutator");
static_assert(offsetof(REnemyPawnBase_AddMutator, NewMutator) == 0x000000, "Member 'REnemyPawnBase_AddMutator::NewMutator' has a wrong offset!");

// Function RGame.REnemyPawnBase.CheckValidMontageSection
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_CheckValidMontageSection final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_CheckValidMontageSection) == 0x000008, "Wrong alignment on REnemyPawnBase_CheckValidMontageSection");
static_assert(sizeof(REnemyPawnBase_CheckValidMontageSection) == 0x000018, "Wrong size on REnemyPawnBase_CheckValidMontageSection");
static_assert(offsetof(REnemyPawnBase_CheckValidMontageSection, Montage) == 0x000000, "Member 'REnemyPawnBase_CheckValidMontageSection::Montage' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_CheckValidMontageSection, Section) == 0x000008, "Member 'REnemyPawnBase_CheckValidMontageSection::Section' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_CheckValidMontageSection, ReturnValue) == 0x000010, "Member 'REnemyPawnBase_CheckValidMontageSection::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.EnterCombat
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_EnterCombat final
{
public:
	class AController*                            Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_EnterCombat) == 0x000008, "Wrong alignment on REnemyPawnBase_EnterCombat");
static_assert(sizeof(REnemyPawnBase_EnterCombat) == 0x000008, "Wrong size on REnemyPawnBase_EnterCombat");
static_assert(offsetof(REnemyPawnBase_EnterCombat, Target) == 0x000000, "Member 'REnemyPawnBase_EnterCombat::Target' has a wrong offset!");

// Function RGame.REnemyPawnBase.EnterSearchingState
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_EnterSearchingState final
{
public:
	class APlayerController*                      PreDeterminedTarget;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_EnterSearchingState) == 0x000008, "Wrong alignment on REnemyPawnBase_EnterSearchingState");
static_assert(sizeof(REnemyPawnBase_EnterSearchingState) == 0x000008, "Wrong size on REnemyPawnBase_EnterSearchingState");
static_assert(offsetof(REnemyPawnBase_EnterSearchingState, PreDeterminedTarget) == 0x000000, "Member 'REnemyPawnBase_EnterSearchingState::PreDeterminedTarget' has a wrong offset!");

// Function RGame.REnemyPawnBase.FireProjectileAtTarget
// 0x00A8 (0x00A8 - 0x0000)
struct REnemyPawnBase_FireProjectileAtTarget final
{
public:
	TSubclassOf<class ARProjectileBase>           ProjectileClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireFromLocation;                                  // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotatorOffset;                                     // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileLifeSpan;                                // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutTargetLocation;                                 // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutTargetRotation;                                 // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 CustomTarget;                                      // 0x0070(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomTargetLocation;                              // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRandomSpread;                                  // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePrediction;                                    // 0x0091(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARProjectileBase*>               ReturnValue;                                       // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_FireProjectileAtTarget) == 0x000008, "Wrong alignment on REnemyPawnBase_FireProjectileAtTarget");
static_assert(sizeof(REnemyPawnBase_FireProjectileAtTarget) == 0x0000A8, "Wrong size on REnemyPawnBase_FireProjectileAtTarget");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, ProjectileClass) == 0x000000, "Member 'REnemyPawnBase_FireProjectileAtTarget::ProjectileClass' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, FireFromLocation) == 0x000008, "Member 'REnemyPawnBase_FireProjectileAtTarget::FireFromLocation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, RotatorOffset) == 0x000020, "Member 'REnemyPawnBase_FireProjectileAtTarget::RotatorOffset' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, Damage) == 0x000038, "Member 'REnemyPawnBase_FireProjectileAtTarget::Damage' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, ProjectileLifeSpan) == 0x00003C, "Member 'REnemyPawnBase_FireProjectileAtTarget::ProjectileLifeSpan' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, OutTargetLocation) == 0x000040, "Member 'REnemyPawnBase_FireProjectileAtTarget::OutTargetLocation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, OutTargetRotation) == 0x000058, "Member 'REnemyPawnBase_FireProjectileAtTarget::OutTargetRotation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, CustomTarget) == 0x000070, "Member 'REnemyPawnBase_FireProjectileAtTarget::CustomTarget' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, CustomTargetLocation) == 0x000078, "Member 'REnemyPawnBase_FireProjectileAtTarget::CustomTargetLocation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, bUseRandomSpread) == 0x000090, "Member 'REnemyPawnBase_FireProjectileAtTarget::bUseRandomSpread' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, bUsePrediction) == 0x000091, "Member 'REnemyPawnBase_FireProjectileAtTarget::bUsePrediction' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_FireProjectileAtTarget, ReturnValue) == 0x000098, "Member 'REnemyPawnBase_FireProjectileAtTarget::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetAISettings
// 0x0068 (0x0068 - 0x0000)
struct REnemyPawnBase_GetAISettings final
{
public:
	struct FRAISettings                           ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetAISettings) == 0x000008, "Wrong alignment on REnemyPawnBase_GetAISettings");
static_assert(sizeof(REnemyPawnBase_GetAISettings) == 0x000068, "Wrong size on REnemyPawnBase_GetAISettings");
static_assert(offsetof(REnemyPawnBase_GetAISettings, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetAISettings::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetAIState
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetAIState final
{
public:
	EAIState                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetAIState) == 0x000001, "Wrong alignment on REnemyPawnBase_GetAIState");
static_assert(sizeof(REnemyPawnBase_GetAIState) == 0x000001, "Wrong size on REnemyPawnBase_GetAIState");
static_assert(offsetof(REnemyPawnBase_GetAIState, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetAIState::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetAttackSpeedModifier
// 0x0128 (0x0128 - 0x0000)
struct REnemyPawnBase_GetAttackSpeedModifier final
{
public:
	struct FRMutableFloat                         ReturnValue;                                       // 0x0000(0x0128)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetAttackSpeedModifier) == 0x000008, "Wrong alignment on REnemyPawnBase_GetAttackSpeedModifier");
static_assert(sizeof(REnemyPawnBase_GetAttackSpeedModifier) == 0x000128, "Wrong size on REnemyPawnBase_GetAttackSpeedModifier");
static_assert(offsetof(REnemyPawnBase_GetAttackSpeedModifier, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetAttackSpeedModifier::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetCachedLineOfSightBone
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_GetCachedLineOfSightBone final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetCachedLineOfSightBone) == 0x000004, "Wrong alignment on REnemyPawnBase_GetCachedLineOfSightBone");
static_assert(sizeof(REnemyPawnBase_GetCachedLineOfSightBone) == 0x000008, "Wrong size on REnemyPawnBase_GetCachedLineOfSightBone");
static_assert(offsetof(REnemyPawnBase_GetCachedLineOfSightBone, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetCachedLineOfSightBone::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetCurrentCombatTarget
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_GetCurrentCombatTarget final
{
public:
	class ARPawnBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetCurrentCombatTarget) == 0x000008, "Wrong alignment on REnemyPawnBase_GetCurrentCombatTarget");
static_assert(sizeof(REnemyPawnBase_GetCurrentCombatTarget) == 0x000008, "Wrong size on REnemyPawnBase_GetCurrentCombatTarget");
static_assert(offsetof(REnemyPawnBase_GetCurrentCombatTarget, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetCurrentCombatTarget::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetDefaultCharacterMontage
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_GetDefaultCharacterMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetDefaultCharacterMontage) == 0x000008, "Wrong alignment on REnemyPawnBase_GetDefaultCharacterMontage");
static_assert(sizeof(REnemyPawnBase_GetDefaultCharacterMontage) == 0x000008, "Wrong size on REnemyPawnBase_GetDefaultCharacterMontage");
static_assert(offsetof(REnemyPawnBase_GetDefaultCharacterMontage, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetDefaultCharacterMontage::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsCurrentlyCCd
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsCurrentlyCCd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsCurrentlyCCd) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsCurrentlyCCd");
static_assert(sizeof(REnemyPawnBase_GetIsCurrentlyCCd) == 0x000001, "Wrong size on REnemyPawnBase_GetIsCurrentlyCCd");
static_assert(offsetof(REnemyPawnBase_GetIsCurrentlyCCd, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsCurrentlyCCd::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsCurrentlyFrozen
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsCurrentlyFrozen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsCurrentlyFrozen) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsCurrentlyFrozen");
static_assert(sizeof(REnemyPawnBase_GetIsCurrentlyFrozen) == 0x000001, "Wrong size on REnemyPawnBase_GetIsCurrentlyFrozen");
static_assert(offsetof(REnemyPawnBase_GetIsCurrentlyFrozen, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsCurrentlyFrozen::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsElite
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsElite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsElite) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsElite");
static_assert(sizeof(REnemyPawnBase_GetIsElite) == 0x000001, "Wrong size on REnemyPawnBase_GetIsElite");
static_assert(offsetof(REnemyPawnBase_GetIsElite, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsElite::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsFlying
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsFlying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsFlying) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsFlying");
static_assert(sizeof(REnemyPawnBase_GetIsFlying) == 0x000001, "Wrong size on REnemyPawnBase_GetIsFlying");
static_assert(offsetof(REnemyPawnBase_GetIsFlying, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsFlying::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsFriendly
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsFriendly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsFriendly) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsFriendly");
static_assert(sizeof(REnemyPawnBase_GetIsFriendly) == 0x000001, "Wrong size on REnemyPawnBase_GetIsFriendly");
static_assert(offsetof(REnemyPawnBase_GetIsFriendly, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsFriendly::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetIsGhost
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_GetIsGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetIsGhost) == 0x000001, "Wrong alignment on REnemyPawnBase_GetIsGhost");
static_assert(sizeof(REnemyPawnBase_GetIsGhost) == 0x000001, "Wrong size on REnemyPawnBase_GetIsGhost");
static_assert(offsetof(REnemyPawnBase_GetIsGhost, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetIsGhost::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetMutators
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_GetMutators final
{
public:
	TArray<TSubclassOf<class URGEnemyMutatorScript>> ReturnValue;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetMutators) == 0x000008, "Wrong alignment on REnemyPawnBase_GetMutators");
static_assert(sizeof(REnemyPawnBase_GetMutators) == 0x000010, "Wrong size on REnemyPawnBase_GetMutators");
static_assert(offsetof(REnemyPawnBase_GetMutators, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetMutators::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetRandomUsableAttack
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_GetRandomUsableAttack final
{
public:
	bool                                          bSkipLimitations;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGEnemyAttackScript*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetRandomUsableAttack) == 0x000008, "Wrong alignment on REnemyPawnBase_GetRandomUsableAttack");
static_assert(sizeof(REnemyPawnBase_GetRandomUsableAttack) == 0x000010, "Wrong size on REnemyPawnBase_GetRandomUsableAttack");
static_assert(offsetof(REnemyPawnBase_GetRandomUsableAttack, bSkipLimitations) == 0x000000, "Member 'REnemyPawnBase_GetRandomUsableAttack::bSkipLimitations' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_GetRandomUsableAttack, ReturnValue) == 0x000008, "Member 'REnemyPawnBase_GetRandomUsableAttack::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.GetRangedTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_GetRangedTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_GetRangedTargetLocation) == 0x000008, "Wrong alignment on REnemyPawnBase_GetRangedTargetLocation");
static_assert(sizeof(REnemyPawnBase_GetRangedTargetLocation) == 0x000018, "Wrong size on REnemyPawnBase_GetRangedTargetLocation");
static_assert(offsetof(REnemyPawnBase_GetRangedTargetLocation, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_GetRangedTargetLocation::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.HasLoS
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_HasLoS final
{
public:
	bool                                          bDebugDraw;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CustomTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_HasLoS) == 0x000008, "Wrong alignment on REnemyPawnBase_HasLoS");
static_assert(sizeof(REnemyPawnBase_HasLoS) == 0x000018, "Wrong size on REnemyPawnBase_HasLoS");
static_assert(offsetof(REnemyPawnBase_HasLoS, bDebugDraw) == 0x000000, "Member 'REnemyPawnBase_HasLoS::bDebugDraw' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_HasLoS, CustomTarget) == 0x000008, "Member 'REnemyPawnBase_HasLoS::CustomTarget' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_HasLoS, ReturnValue) == 0x000010, "Member 'REnemyPawnBase_HasLoS::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.HasUsableAttack
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_HasUsableAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_HasUsableAttack) == 0x000001, "Wrong alignment on REnemyPawnBase_HasUsableAttack");
static_assert(sizeof(REnemyPawnBase_HasUsableAttack) == 0x000001, "Wrong size on REnemyPawnBase_HasUsableAttack");
static_assert(offsetof(REnemyPawnBase_HasUsableAttack, ReturnValue) == 0x000000, "Member 'REnemyPawnBase_HasUsableAttack::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.IsBelowExecutionHealthThreshold
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_IsBelowExecutionHealthThreshold final
{
public:
	float                                         ThresholdModifier;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_IsBelowExecutionHealthThreshold) == 0x000004, "Wrong alignment on REnemyPawnBase_IsBelowExecutionHealthThreshold");
static_assert(sizeof(REnemyPawnBase_IsBelowExecutionHealthThreshold) == 0x000008, "Wrong size on REnemyPawnBase_IsBelowExecutionHealthThreshold");
static_assert(offsetof(REnemyPawnBase_IsBelowExecutionHealthThreshold, ThresholdModifier) == 0x000000, "Member 'REnemyPawnBase_IsBelowExecutionHealthThreshold::ThresholdModifier' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_IsBelowExecutionHealthThreshold, ReturnValue) == 0x000004, "Member 'REnemyPawnBase_IsBelowExecutionHealthThreshold::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.OnCurrentEnemyTargetKilled
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_OnCurrentEnemyTargetKilled final
{
public:
	class AREnemyPawnBase*                        Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_OnCurrentEnemyTargetKilled) == 0x000008, "Wrong alignment on REnemyPawnBase_OnCurrentEnemyTargetKilled");
static_assert(sizeof(REnemyPawnBase_OnCurrentEnemyTargetKilled) == 0x000008, "Wrong size on REnemyPawnBase_OnCurrentEnemyTargetKilled");
static_assert(offsetof(REnemyPawnBase_OnCurrentEnemyTargetKilled, Enemy) == 0x000000, "Member 'REnemyPawnBase_OnCurrentEnemyTargetKilled::Enemy' has a wrong offset!");

// Function RGame.REnemyPawnBase.OnCurrentPlayerTargetKilled
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_OnCurrentPlayerTargetKilled final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_OnCurrentPlayerTargetKilled) == 0x000008, "Wrong alignment on REnemyPawnBase_OnCurrentPlayerTargetKilled");
static_assert(sizeof(REnemyPawnBase_OnCurrentPlayerTargetKilled) == 0x000008, "Wrong size on REnemyPawnBase_OnCurrentPlayerTargetKilled");
static_assert(offsetof(REnemyPawnBase_OnCurrentPlayerTargetKilled, Player) == 0x000000, "Member 'REnemyPawnBase_OnCurrentPlayerTargetKilled::Player' has a wrong offset!");

// Function RGame.REnemyPawnBase.OnCurrentTargetDowned
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_OnCurrentTargetDowned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_OnCurrentTargetDowned) == 0x000008, "Wrong alignment on REnemyPawnBase_OnCurrentTargetDowned");
static_assert(sizeof(REnemyPawnBase_OnCurrentTargetDowned) == 0x000008, "Wrong size on REnemyPawnBase_OnCurrentTargetDowned");
static_assert(offsetof(REnemyPawnBase_OnCurrentTargetDowned, Player) == 0x000000, "Member 'REnemyPawnBase_OnCurrentTargetDowned::Player' has a wrong offset!");

// Function RGame.REnemyPawnBase.OverrideAISettings
// 0x0068 (0x0068 - 0x0000)
struct REnemyPawnBase_OverrideAISettings final
{
public:
	struct FRAISettings                           NewAISettings;                                     // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_OverrideAISettings) == 0x000008, "Wrong alignment on REnemyPawnBase_OverrideAISettings");
static_assert(sizeof(REnemyPawnBase_OverrideAISettings) == 0x000068, "Wrong size on REnemyPawnBase_OverrideAISettings");
static_assert(offsetof(REnemyPawnBase_OverrideAISettings, NewAISettings) == 0x000000, "Member 'REnemyPawnBase_OverrideAISettings::NewAISettings' has a wrong offset!");

// Function RGame.REnemyPawnBase.PerformAreaAttack
// 0x0048 (0x0048 - 0x0000)
struct REnemyPawnBase_PerformAreaAttack final
{
public:
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRadius;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_PerformAreaAttack) == 0x000008, "Wrong alignment on REnemyPawnBase_PerformAreaAttack");
static_assert(sizeof(REnemyPawnBase_PerformAreaAttack) == 0x000048, "Wrong size on REnemyPawnBase_PerformAreaAttack");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, IgnoredActors) == 0x000000, "Member 'REnemyPawnBase_PerformAreaAttack::IgnoredActors' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, TargetLocation) == 0x000010, "Member 'REnemyPawnBase_PerformAreaAttack::TargetLocation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, Damage) == 0x000028, "Member 'REnemyPawnBase_PerformAreaAttack::Damage' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, AttackRadius) == 0x00002C, "Member 'REnemyPawnBase_PerformAreaAttack::AttackRadius' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, DamageSources) == 0x000030, "Member 'REnemyPawnBase_PerformAreaAttack::DamageSources' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformAreaAttack, ReturnValue) == 0x000038, "Member 'REnemyPawnBase_PerformAreaAttack::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.PerformConeAttack
// 0x0060 (0x0060 - 0x0000)
struct REnemyPawnBase_PerformConeAttack final
{
public:
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDirection;                                   // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRadius;                                      // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackHalfAngle;                                   // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_PerformConeAttack) == 0x000008, "Wrong alignment on REnemyPawnBase_PerformConeAttack");
static_assert(sizeof(REnemyPawnBase_PerformConeAttack) == 0x000060, "Wrong size on REnemyPawnBase_PerformConeAttack");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, IgnoredActors) == 0x000000, "Member 'REnemyPawnBase_PerformConeAttack::IgnoredActors' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, TargetLocation) == 0x000010, "Member 'REnemyPawnBase_PerformConeAttack::TargetLocation' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, TargetDirection) == 0x000028, "Member 'REnemyPawnBase_PerformConeAttack::TargetDirection' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, Damage) == 0x000040, "Member 'REnemyPawnBase_PerformConeAttack::Damage' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, AttackRadius) == 0x000044, "Member 'REnemyPawnBase_PerformConeAttack::AttackRadius' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, AttackHalfAngle) == 0x000048, "Member 'REnemyPawnBase_PerformConeAttack::AttackHalfAngle' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, DamageSources) == 0x00004C, "Member 'REnemyPawnBase_PerformConeAttack::DamageSources' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PerformConeAttack, ReturnValue) == 0x000050, "Member 'REnemyPawnBase_PerformConeAttack::ReturnValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.PerformDodge_Multicast
// 0x0004 (0x0004 - 0x0000)
struct REnemyPawnBase_PerformDodge_Multicast final
{
public:
	float                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_PerformDodge_Multicast) == 0x000004, "Wrong alignment on REnemyPawnBase_PerformDodge_Multicast");
static_assert(sizeof(REnemyPawnBase_PerformDodge_Multicast) == 0x000004, "Wrong size on REnemyPawnBase_PerformDodge_Multicast");
static_assert(offsetof(REnemyPawnBase_PerformDodge_Multicast, Direction) == 0x000000, "Member 'REnemyPawnBase_PerformDodge_Multicast::Direction' has a wrong offset!");

// Function RGame.REnemyPawnBase.PlayMontage_Multicast
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_PlayMontage_Multicast final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Section;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_PlayMontage_Multicast) == 0x000008, "Wrong alignment on REnemyPawnBase_PlayMontage_Multicast");
static_assert(sizeof(REnemyPawnBase_PlayMontage_Multicast) == 0x000010, "Wrong size on REnemyPawnBase_PlayMontage_Multicast");
static_assert(offsetof(REnemyPawnBase_PlayMontage_Multicast, Montage) == 0x000000, "Member 'REnemyPawnBase_PlayMontage_Multicast::Montage' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_PlayMontage_Multicast, Section) == 0x000008, "Member 'REnemyPawnBase_PlayMontage_Multicast::Section' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAIFrozen
// 0x0004 (0x0004 - 0x0000)
struct REnemyPawnBase_SetAIFrozen final
{
public:
	float                                         freezeDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetAIFrozen) == 0x000004, "Wrong alignment on REnemyPawnBase_SetAIFrozen");
static_assert(sizeof(REnemyPawnBase_SetAIFrozen) == 0x000004, "Wrong size on REnemyPawnBase_SetAIFrozen");
static_assert(offsetof(REnemyPawnBase_SetAIFrozen, freezeDuration) == 0x000000, "Member 'REnemyPawnBase_SetAIFrozen::freezeDuration' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAIRooted
// 0x0004 (0x0004 - 0x0000)
struct REnemyPawnBase_SetAIRooted final
{
public:
	float                                         rootDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetAIRooted) == 0x000004, "Wrong alignment on REnemyPawnBase_SetAIRooted");
static_assert(sizeof(REnemyPawnBase_SetAIRooted) == 0x000004, "Wrong size on REnemyPawnBase_SetAIRooted");
static_assert(offsetof(REnemyPawnBase_SetAIRooted, rootDuration) == 0x000000, "Member 'REnemyPawnBase_SetAIRooted::rootDuration' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAISilenced
// 0x0004 (0x0004 - 0x0000)
struct REnemyPawnBase_SetAISilenced final
{
public:
	float                                         silenceDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetAISilenced) == 0x000004, "Wrong alignment on REnemyPawnBase_SetAISilenced");
static_assert(sizeof(REnemyPawnBase_SetAISilenced) == 0x000004, "Wrong size on REnemyPawnBase_SetAISilenced");
static_assert(offsetof(REnemyPawnBase_SetAISilenced, silenceDuration) == 0x000000, "Member 'REnemyPawnBase_SetAISilenced::silenceDuration' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAIState
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetAIState final
{
public:
	EAIState                                      NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetAIState) == 0x000001, "Wrong alignment on REnemyPawnBase_SetAIState");
static_assert(sizeof(REnemyPawnBase_SetAIState) == 0x000001, "Wrong size on REnemyPawnBase_SetAIState");
static_assert(offsetof(REnemyPawnBase_SetAIState, NewState) == 0x000000, "Member 'REnemyPawnBase_SetAIState::NewState' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAIStunned
// 0x000C (0x000C - 0x0000)
struct REnemyPawnBase_SetAIStunned final
{
public:
	float                                         stunDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         actualStunDuration;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShorterDurationOverrides;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreStunImmunity;                               // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_SetAIStunned) == 0x000004, "Wrong alignment on REnemyPawnBase_SetAIStunned");
static_assert(sizeof(REnemyPawnBase_SetAIStunned) == 0x00000C, "Wrong size on REnemyPawnBase_SetAIStunned");
static_assert(offsetof(REnemyPawnBase_SetAIStunned, stunDuration) == 0x000000, "Member 'REnemyPawnBase_SetAIStunned::stunDuration' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_SetAIStunned, actualStunDuration) == 0x000004, "Member 'REnemyPawnBase_SetAIStunned::actualStunDuration' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_SetAIStunned, bShorterDurationOverrides) == 0x000008, "Member 'REnemyPawnBase_SetAIStunned::bShorterDurationOverrides' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_SetAIStunned, bIgnoreStunImmunity) == 0x000009, "Member 'REnemyPawnBase_SetAIStunned::bIgnoreStunImmunity' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetAllAttacksBlocked
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetAllAttacksBlocked final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetAllAttacksBlocked) == 0x000001, "Wrong alignment on REnemyPawnBase_SetAllAttacksBlocked");
static_assert(sizeof(REnemyPawnBase_SetAllAttacksBlocked) == 0x000001, "Wrong size on REnemyPawnBase_SetAllAttacksBlocked");
static_assert(offsetof(REnemyPawnBase_SetAllAttacksBlocked, bNewValue) == 0x000000, "Member 'REnemyPawnBase_SetAllAttacksBlocked::bNewValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetCachedLineOfSightBonee
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_SetCachedLineOfSightBonee final
{
public:
	class FName                                   NewCachedLineOfSightBone;                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetCachedLineOfSightBonee) == 0x000004, "Wrong alignment on REnemyPawnBase_SetCachedLineOfSightBonee");
static_assert(sizeof(REnemyPawnBase_SetCachedLineOfSightBonee) == 0x000008, "Wrong size on REnemyPawnBase_SetCachedLineOfSightBonee");
static_assert(offsetof(REnemyPawnBase_SetCachedLineOfSightBonee, NewCachedLineOfSightBone) == 0x000000, "Member 'REnemyPawnBase_SetCachedLineOfSightBonee::NewCachedLineOfSightBone' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetCCImmune
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetCCImmune final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetCCImmune) == 0x000001, "Wrong alignment on REnemyPawnBase_SetCCImmune");
static_assert(sizeof(REnemyPawnBase_SetCCImmune) == 0x000001, "Wrong size on REnemyPawnBase_SetCCImmune");
static_assert(offsetof(REnemyPawnBase_SetCCImmune, bNewValue) == 0x000000, "Member 'REnemyPawnBase_SetCCImmune::bNewValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetCurrentCombatTarget
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_SetCurrentCombatTarget final
{
public:
	class APawn*                                  NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetCurrentCombatTarget) == 0x000008, "Wrong alignment on REnemyPawnBase_SetCurrentCombatTarget");
static_assert(sizeof(REnemyPawnBase_SetCurrentCombatTarget) == 0x000008, "Wrong size on REnemyPawnBase_SetCurrentCombatTarget");
static_assert(offsetof(REnemyPawnBase_SetCurrentCombatTarget, NewTarget) == 0x000000, "Member 'REnemyPawnBase_SetCurrentCombatTarget::NewTarget' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetCurrentCombatTargetLocked
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetCurrentCombatTargetLocked final
{
public:
	bool                                          bNewLock;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetCurrentCombatTargetLocked) == 0x000001, "Wrong alignment on REnemyPawnBase_SetCurrentCombatTargetLocked");
static_assert(sizeof(REnemyPawnBase_SetCurrentCombatTargetLocked) == 0x000001, "Wrong size on REnemyPawnBase_SetCurrentCombatTargetLocked");
static_assert(offsetof(REnemyPawnBase_SetCurrentCombatTargetLocked, bNewLock) == 0x000000, "Member 'REnemyPawnBase_SetCurrentCombatTargetLocked::bNewLock' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetForcedSpawnMovementLocation
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_SetForcedSpawnMovementLocation final
{
public:
	struct FVector                                ForcedSpawnMovementLocation;                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetForcedSpawnMovementLocation) == 0x000008, "Wrong alignment on REnemyPawnBase_SetForcedSpawnMovementLocation");
static_assert(sizeof(REnemyPawnBase_SetForcedSpawnMovementLocation) == 0x000018, "Wrong size on REnemyPawnBase_SetForcedSpawnMovementLocation");
static_assert(offsetof(REnemyPawnBase_SetForcedSpawnMovementLocation, ForcedSpawnMovementLocation) == 0x000000, "Member 'REnemyPawnBase_SetForcedSpawnMovementLocation::ForcedSpawnMovementLocation' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetIsElite
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetIsElite final
{
public:
	bool                                          bNewIsElite;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetIsElite) == 0x000001, "Wrong alignment on REnemyPawnBase_SetIsElite");
static_assert(sizeof(REnemyPawnBase_SetIsElite) == 0x000001, "Wrong size on REnemyPawnBase_SetIsElite");
static_assert(offsetof(REnemyPawnBase_SetIsElite, bNewIsElite) == 0x000000, "Member 'REnemyPawnBase_SetIsElite::bNewIsElite' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetIsFriendly
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_SetIsFriendly final
{
public:
	bool                                          bNewFriendlyStatus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FriendlyEnemyDamageMultiplier;                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetIsFriendly) == 0x000004, "Wrong alignment on REnemyPawnBase_SetIsFriendly");
static_assert(sizeof(REnemyPawnBase_SetIsFriendly) == 0x000008, "Wrong size on REnemyPawnBase_SetIsFriendly");
static_assert(offsetof(REnemyPawnBase_SetIsFriendly, bNewFriendlyStatus) == 0x000000, "Member 'REnemyPawnBase_SetIsFriendly::bNewFriendlyStatus' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_SetIsFriendly, FriendlyEnemyDamageMultiplier) == 0x000004, "Member 'REnemyPawnBase_SetIsFriendly::FriendlyEnemyDamageMultiplier' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetIsGhost
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetIsGhost final
{
public:
	bool                                          bNewGhostStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetIsGhost) == 0x000001, "Wrong alignment on REnemyPawnBase_SetIsGhost");
static_assert(sizeof(REnemyPawnBase_SetIsGhost) == 0x000001, "Wrong size on REnemyPawnBase_SetIsGhost");
static_assert(offsetof(REnemyPawnBase_SetIsGhost, bNewGhostStatus) == 0x000000, "Member 'REnemyPawnBase_SetIsGhost::bNewGhostStatus' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetMaxSpeed_Multicast
// 0x0004 (0x0004 - 0x0000)
struct REnemyPawnBase_SetMaxSpeed_Multicast final
{
public:
	float                                         NewMaxSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetMaxSpeed_Multicast) == 0x000004, "Wrong alignment on REnemyPawnBase_SetMaxSpeed_Multicast");
static_assert(sizeof(REnemyPawnBase_SetMaxSpeed_Multicast) == 0x000004, "Wrong size on REnemyPawnBase_SetMaxSpeed_Multicast");
static_assert(offsetof(REnemyPawnBase_SetMaxSpeed_Multicast, NewMaxSpeed) == 0x000000, "Member 'REnemyPawnBase_SetMaxSpeed_Multicast::NewMaxSpeed' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetMutators
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_SetMutators final
{
public:
	TArray<TSubclassOf<class URGEnemyMutatorScript>> NewMutators;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetMutators) == 0x000008, "Wrong alignment on REnemyPawnBase_SetMutators");
static_assert(sizeof(REnemyPawnBase_SetMutators) == 0x000010, "Wrong size on REnemyPawnBase_SetMutators");
static_assert(offsetof(REnemyPawnBase_SetMutators, NewMutators) == 0x000000, "Member 'REnemyPawnBase_SetMutators::NewMutators' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetOnLandedAnimationBlocked
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetOnLandedAnimationBlocked final
{
public:
	bool                                          bNewBlock;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetOnLandedAnimationBlocked) == 0x000001, "Wrong alignment on REnemyPawnBase_SetOnLandedAnimationBlocked");
static_assert(sizeof(REnemyPawnBase_SetOnLandedAnimationBlocked) == 0x000001, "Wrong size on REnemyPawnBase_SetOnLandedAnimationBlocked");
static_assert(offsetof(REnemyPawnBase_SetOnLandedAnimationBlocked, bNewBlock) == 0x000000, "Member 'REnemyPawnBase_SetOnLandedAnimationBlocked::bNewBlock' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetRuntimePhysicsAsset
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_SetRuntimePhysicsAsset final
{
public:
	class UPhysicsAsset*                          NewPhysicsAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceReInit;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_SetRuntimePhysicsAsset) == 0x000008, "Wrong alignment on REnemyPawnBase_SetRuntimePhysicsAsset");
static_assert(sizeof(REnemyPawnBase_SetRuntimePhysicsAsset) == 0x000010, "Wrong size on REnemyPawnBase_SetRuntimePhysicsAsset");
static_assert(offsetof(REnemyPawnBase_SetRuntimePhysicsAsset, NewPhysicsAsset) == 0x000000, "Member 'REnemyPawnBase_SetRuntimePhysicsAsset::NewPhysicsAsset' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_SetRuntimePhysicsAsset, bForceReInit) == 0x000008, "Member 'REnemyPawnBase_SetRuntimePhysicsAsset::bForceReInit' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetSpawnedByAI
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetSpawnedByAI final
{
public:
	bool                                          bNewSpawnedByOtherAI;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetSpawnedByAI) == 0x000001, "Wrong alignment on REnemyPawnBase_SetSpawnedByAI");
static_assert(sizeof(REnemyPawnBase_SetSpawnedByAI) == 0x000001, "Wrong size on REnemyPawnBase_SetSpawnedByAI");
static_assert(offsetof(REnemyPawnBase_SetSpawnedByAI, bNewSpawnedByOtherAI) == 0x000000, "Member 'REnemyPawnBase_SetSpawnedByAI::bNewSpawnedByOtherAI' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetStunImmune
// 0x0001 (0x0001 - 0x0000)
struct REnemyPawnBase_SetStunImmune final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetStunImmune) == 0x000001, "Wrong alignment on REnemyPawnBase_SetStunImmune");
static_assert(sizeof(REnemyPawnBase_SetStunImmune) == 0x000001, "Wrong size on REnemyPawnBase_SetStunImmune");
static_assert(offsetof(REnemyPawnBase_SetStunImmune, bNewValue) == 0x000000, "Member 'REnemyPawnBase_SetStunImmune::bNewValue' has a wrong offset!");

// Function RGame.REnemyPawnBase.SetupLocationChecker
// 0x0008 (0x0008 - 0x0000)
struct REnemyPawnBase_SetupLocationChecker final
{
public:
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_SetupLocationChecker) == 0x000008, "Wrong alignment on REnemyPawnBase_SetupLocationChecker");
static_assert(sizeof(REnemyPawnBase_SetupLocationChecker) == 0x000008, "Wrong size on REnemyPawnBase_SetupLocationChecker");
static_assert(offsetof(REnemyPawnBase_SetupLocationChecker, Segment) == 0x000000, "Member 'REnemyPawnBase_SetupLocationChecker::Segment' has a wrong offset!");

// Function RGame.REnemyPawnBase.StartJump_Multicast
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_StartJump_Multicast final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_StartJump_Multicast) == 0x000008, "Wrong alignment on REnemyPawnBase_StartJump_Multicast");
static_assert(sizeof(REnemyPawnBase_StartJump_Multicast) == 0x000018, "Wrong size on REnemyPawnBase_StartJump_Multicast");
static_assert(offsetof(REnemyPawnBase_StartJump_Multicast, TargetLocation) == 0x000000, "Member 'REnemyPawnBase_StartJump_Multicast::TargetLocation' has a wrong offset!");

// Function RGame.REnemyPawnBase.StartLerp_Multicast
// 0x0018 (0x0018 - 0x0000)
struct REnemyPawnBase_StartLerp_Multicast final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyPawnBase_StartLerp_Multicast) == 0x000008, "Wrong alignment on REnemyPawnBase_StartLerp_Multicast");
static_assert(sizeof(REnemyPawnBase_StartLerp_Multicast) == 0x000018, "Wrong size on REnemyPawnBase_StartLerp_Multicast");
static_assert(offsetof(REnemyPawnBase_StartLerp_Multicast, TargetLocation) == 0x000000, "Member 'REnemyPawnBase_StartLerp_Multicast::TargetLocation' has a wrong offset!");

// Function RGame.REnemyPawnBase.ValidateResourceCondition
// 0x0010 (0x0010 - 0x0000)
struct REnemyPawnBase_ValidateResourceCondition final
{
public:
	class URGEnemyAttackScript*                   Script;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyPawnBase_ValidateResourceCondition) == 0x000008, "Wrong alignment on REnemyPawnBase_ValidateResourceCondition");
static_assert(sizeof(REnemyPawnBase_ValidateResourceCondition) == 0x000010, "Wrong size on REnemyPawnBase_ValidateResourceCondition");
static_assert(offsetof(REnemyPawnBase_ValidateResourceCondition, Script) == 0x000000, "Member 'REnemyPawnBase_ValidateResourceCondition::Script' has a wrong offset!");
static_assert(offsetof(REnemyPawnBase_ValidateResourceCondition, ReturnValue) == 0x000008, "Member 'REnemyPawnBase_ValidateResourceCondition::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.HitSequence
// 0x0120 (0x0120 - 0x0000)
struct RProjectileBase_HitSequence final
{
public:
	class URGScriptComponent*                     ROwningScriptComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0108(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARProjectileBase*                       OptionalProjectile;                                // 0x0110(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriticalOverride;                                 // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallHitEvents;                                    // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreClientAuthFlow;                             // 0x011A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageClientPrediction;                           // 0x011B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakspotOverride;                                 // 0x011C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RProjectileBase_HitSequence) == 0x000008, "Wrong alignment on RProjectileBase_HitSequence");
static_assert(sizeof(RProjectileBase_HitSequence) == 0x000120, "Wrong size on RProjectileBase_HitSequence");
static_assert(offsetof(RProjectileBase_HitSequence, ROwningScriptComponent) == 0x000000, "Member 'RProjectileBase_HitSequence::ROwningScriptComponent' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, Hit) == 0x000008, "Member 'RProjectileBase_HitSequence::Hit' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, Damage) == 0x000108, "Member 'RProjectileBase_HitSequence::Damage' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, DamageSources) == 0x00010C, "Member 'RProjectileBase_HitSequence::DamageSources' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, OptionalProjectile) == 0x000110, "Member 'RProjectileBase_HitSequence::OptionalProjectile' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, bCriticalOverride) == 0x000118, "Member 'RProjectileBase_HitSequence::bCriticalOverride' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, bCallHitEvents) == 0x000119, "Member 'RProjectileBase_HitSequence::bCallHitEvents' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, bIgnoreClientAuthFlow) == 0x00011A, "Member 'RProjectileBase_HitSequence::bIgnoreClientAuthFlow' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, bDamageClientPrediction) == 0x00011B, "Member 'RProjectileBase_HitSequence::bDamageClientPrediction' has a wrong offset!");
static_assert(offsetof(RProjectileBase_HitSequence, bWeakspotOverride) == 0x00011C, "Member 'RProjectileBase_HitSequence::bWeakspotOverride' has a wrong offset!");

// Function RGame.RProjectileBase.CacheHitResult
// 0x0100 (0x0100 - 0x0000)
struct RProjectileBase_CacheHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_CacheHitResult) == 0x000008, "Wrong alignment on RProjectileBase_CacheHitResult");
static_assert(sizeof(RProjectileBase_CacheHitResult) == 0x000100, "Wrong size on RProjectileBase_CacheHitResult");
static_assert(offsetof(RProjectileBase_CacheHitResult, Hit) == 0x000000, "Member 'RProjectileBase_CacheHitResult::Hit' has a wrong offset!");

// Function RGame.RProjectileBase.CacheHitResults
// 0x0010 (0x0010 - 0x0000)
struct RProjectileBase_CacheHitResults final
{
public:
	TArray<struct FHitResult>                     Hits;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_CacheHitResults) == 0x000008, "Wrong alignment on RProjectileBase_CacheHitResults");
static_assert(sizeof(RProjectileBase_CacheHitResults) == 0x000010, "Wrong size on RProjectileBase_CacheHitResults");
static_assert(offsetof(RProjectileBase_CacheHitResults, Hits) == 0x000000, "Member 'RProjectileBase_CacheHitResults::Hits' has a wrong offset!");

// Function RGame.RProjectileBase.IgnoreCollisionWithActor
// 0x0010 (0x0010 - 0x0000)
struct RProjectileBase_IgnoreCollisionWithActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockTwoWay;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RProjectileBase_IgnoreCollisionWithActor) == 0x000008, "Wrong alignment on RProjectileBase_IgnoreCollisionWithActor");
static_assert(sizeof(RProjectileBase_IgnoreCollisionWithActor) == 0x000010, "Wrong size on RProjectileBase_IgnoreCollisionWithActor");
static_assert(offsetof(RProjectileBase_IgnoreCollisionWithActor, Actor) == 0x000000, "Member 'RProjectileBase_IgnoreCollisionWithActor::Actor' has a wrong offset!");
static_assert(offsetof(RProjectileBase_IgnoreCollisionWithActor, bBlockTwoWay) == 0x000008, "Member 'RProjectileBase_IgnoreCollisionWithActor::bBlockTwoWay' has a wrong offset!");

// Function RGame.RProjectileBase.OnComponentBeginOverlap
// 0x0120 (0x0120 - 0x0000)
struct RProjectileBase_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RProjectileBase_OnComponentBeginOverlap");
static_assert(sizeof(RProjectileBase_OnComponentBeginOverlap) == 0x000120, "Wrong size on RProjectileBase_OnComponentBeginOverlap");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RProjectileBase_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RProjectileBase_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RProjectileBase_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RProjectileBase_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RProjectileBase_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RProjectileBase_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function RGame.RProjectileBase.OnComponentHit
// 0x0130 (0x0130 - 0x0000)
struct RProjectileBase_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_OnComponentHit) == 0x000008, "Wrong alignment on RProjectileBase_OnComponentHit");
static_assert(sizeof(RProjectileBase_OnComponentHit) == 0x000130, "Wrong size on RProjectileBase_OnComponentHit");
static_assert(offsetof(RProjectileBase_OnComponentHit, HitComponent) == 0x000000, "Member 'RProjectileBase_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentHit, OtherActor) == 0x000008, "Member 'RProjectileBase_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentHit, OtherComp) == 0x000010, "Member 'RProjectileBase_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentHit, NormalImpulse) == 0x000018, "Member 'RProjectileBase_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RProjectileBase_OnComponentHit, Hit) == 0x000030, "Member 'RProjectileBase_OnComponentHit::Hit' has a wrong offset!");

// Function RGame.RProjectileBase.ResetIgnoreCollisionWithActor
// 0x0010 (0x0010 - 0x0000)
struct RProjectileBase_ResetIgnoreCollisionWithActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTwoWay;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RProjectileBase_ResetIgnoreCollisionWithActor) == 0x000008, "Wrong alignment on RProjectileBase_ResetIgnoreCollisionWithActor");
static_assert(sizeof(RProjectileBase_ResetIgnoreCollisionWithActor) == 0x000010, "Wrong size on RProjectileBase_ResetIgnoreCollisionWithActor");
static_assert(offsetof(RProjectileBase_ResetIgnoreCollisionWithActor, Actor) == 0x000000, "Member 'RProjectileBase_ResetIgnoreCollisionWithActor::Actor' has a wrong offset!");
static_assert(offsetof(RProjectileBase_ResetIgnoreCollisionWithActor, bResetTwoWay) == 0x000008, "Member 'RProjectileBase_ResetIgnoreCollisionWithActor::bResetTwoWay' has a wrong offset!");

// Function RGame.RProjectileBase.SetAvatarActor
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_SetAvatarActor final
{
public:
	class AActor*                                 NewAvatarActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetAvatarActor) == 0x000008, "Wrong alignment on RProjectileBase_SetAvatarActor");
static_assert(sizeof(RProjectileBase_SetAvatarActor) == 0x000008, "Wrong size on RProjectileBase_SetAvatarActor");
static_assert(offsetof(RProjectileBase_SetAvatarActor, NewAvatarActor) == 0x000000, "Member 'RProjectileBase_SetAvatarActor::NewAvatarActor' has a wrong offset!");

// Function RGame.RProjectileBase.SetBaseCriticalMultiplier
// 0x0004 (0x0004 - 0x0000)
struct RProjectileBase_SetBaseCriticalMultiplier final
{
public:
	float                                         newBaseCriticalMultiplier;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetBaseCriticalMultiplier) == 0x000004, "Wrong alignment on RProjectileBase_SetBaseCriticalMultiplier");
static_assert(sizeof(RProjectileBase_SetBaseCriticalMultiplier) == 0x000004, "Wrong size on RProjectileBase_SetBaseCriticalMultiplier");
static_assert(offsetof(RProjectileBase_SetBaseCriticalMultiplier, newBaseCriticalMultiplier) == 0x000000, "Member 'RProjectileBase_SetBaseCriticalMultiplier::newBaseCriticalMultiplier' has a wrong offset!");

// Function RGame.RProjectileBase.SetBaseDamage
// 0x0004 (0x0004 - 0x0000)
struct RProjectileBase_SetBaseDamage final
{
public:
	float                                         newBaseDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetBaseDamage) == 0x000004, "Wrong alignment on RProjectileBase_SetBaseDamage");
static_assert(sizeof(RProjectileBase_SetBaseDamage) == 0x000004, "Wrong size on RProjectileBase_SetBaseDamage");
static_assert(offsetof(RProjectileBase_SetBaseDamage, newBaseDamage) == 0x000000, "Member 'RProjectileBase_SetBaseDamage::newBaseDamage' has a wrong offset!");

// Function RGame.RProjectileBase.SetBaseEffectiveRange
// 0x0004 (0x0004 - 0x0000)
struct RProjectileBase_SetBaseEffectiveRange final
{
public:
	float                                         newBaseEffectiveRange;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetBaseEffectiveRange) == 0x000004, "Wrong alignment on RProjectileBase_SetBaseEffectiveRange");
static_assert(sizeof(RProjectileBase_SetBaseEffectiveRange) == 0x000004, "Wrong size on RProjectileBase_SetBaseEffectiveRange");
static_assert(offsetof(RProjectileBase_SetBaseEffectiveRange, newBaseEffectiveRange) == 0x000000, "Member 'RProjectileBase_SetBaseEffectiveRange::newBaseEffectiveRange' has a wrong offset!");

// Function RGame.RProjectileBase.SetProjectileSpawnerType
// 0x0001 (0x0001 - 0x0000)
struct RProjectileBase_SetProjectileSpawnerType final
{
public:
	EProjectileSpawnerType                        NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetProjectileSpawnerType) == 0x000001, "Wrong alignment on RProjectileBase_SetProjectileSpawnerType");
static_assert(sizeof(RProjectileBase_SetProjectileSpawnerType) == 0x000001, "Wrong size on RProjectileBase_SetProjectileSpawnerType");
static_assert(offsetof(RProjectileBase_SetProjectileSpawnerType, NewType) == 0x000000, "Member 'RProjectileBase_SetProjectileSpawnerType::NewType' has a wrong offset!");

// Function RGame.RProjectileBase.SetVisualStartLocation
// 0x0018 (0x0018 - 0x0000)
struct RProjectileBase_SetVisualStartLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_SetVisualStartLocation) == 0x000008, "Wrong alignment on RProjectileBase_SetVisualStartLocation");
static_assert(sizeof(RProjectileBase_SetVisualStartLocation) == 0x000018, "Wrong size on RProjectileBase_SetVisualStartLocation");
static_assert(offsetof(RProjectileBase_SetVisualStartLocation, WorldLocation) == 0x000000, "Member 'RProjectileBase_SetVisualStartLocation::WorldLocation' has a wrong offset!");

// Function RGame.RProjectileBase.GetAvatarActor
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetAvatarActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetAvatarActor) == 0x000008, "Wrong alignment on RProjectileBase_GetAvatarActor");
static_assert(sizeof(RProjectileBase_GetAvatarActor) == 0x000008, "Wrong size on RProjectileBase_GetAvatarActor");
static_assert(offsetof(RProjectileBase_GetAvatarActor, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetAvatarActor::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetCachedHitResult
// 0x0100 (0x0100 - 0x0000)
struct RProjectileBase_GetCachedHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetCachedHitResult) == 0x000008, "Wrong alignment on RProjectileBase_GetCachedHitResult");
static_assert(sizeof(RProjectileBase_GetCachedHitResult) == 0x000100, "Wrong size on RProjectileBase_GetCachedHitResult");
static_assert(offsetof(RProjectileBase_GetCachedHitResult, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetCachedHitResult::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetOnHitDamage
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetOnHitDamage final
{
public:
	bool                                          bWasCritical;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetOnHitDamage) == 0x000004, "Wrong alignment on RProjectileBase_GetOnHitDamage");
static_assert(sizeof(RProjectileBase_GetOnHitDamage) == 0x000008, "Wrong size on RProjectileBase_GetOnHitDamage");
static_assert(offsetof(RProjectileBase_GetOnHitDamage, bWasCritical) == 0x000000, "Member 'RProjectileBase_GetOnHitDamage::bWasCritical' has a wrong offset!");
static_assert(offsetof(RProjectileBase_GetOnHitDamage, ReturnValue) == 0x000004, "Member 'RProjectileBase_GetOnHitDamage::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetOnHitDamageWithMultipliers
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetOnHitDamageWithMultipliers final
{
public:
	bool                                          bWasCritical;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetOnHitDamageWithMultipliers) == 0x000004, "Wrong alignment on RProjectileBase_GetOnHitDamageWithMultipliers");
static_assert(sizeof(RProjectileBase_GetOnHitDamageWithMultipliers) == 0x000008, "Wrong size on RProjectileBase_GetOnHitDamageWithMultipliers");
static_assert(offsetof(RProjectileBase_GetOnHitDamageWithMultipliers, bWasCritical) == 0x000000, "Member 'RProjectileBase_GetOnHitDamageWithMultipliers::bWasCritical' has a wrong offset!");
static_assert(offsetof(RProjectileBase_GetOnHitDamageWithMultipliers, ReturnValue) == 0x000004, "Member 'RProjectileBase_GetOnHitDamageWithMultipliers::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetOwningGScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetOwningGScriptComponent final
{
public:
	class URGScriptComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetOwningGScriptComponent) == 0x000008, "Wrong alignment on RProjectileBase_GetOwningGScriptComponent");
static_assert(sizeof(RProjectileBase_GetOwningGScriptComponent) == 0x000008, "Wrong size on RProjectileBase_GetOwningGScriptComponent");
static_assert(offsetof(RProjectileBase_GetOwningGScriptComponent, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetOwningGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetOwningPawn final
{
public:
	class ARPawnBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetOwningPawn) == 0x000008, "Wrong alignment on RProjectileBase_GetOwningPawn");
static_assert(sizeof(RProjectileBase_GetOwningPawn) == 0x000008, "Wrong size on RProjectileBase_GetOwningPawn");
static_assert(offsetof(RProjectileBase_GetOwningPawn, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetProjectileName
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetProjectileName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetProjectileName) == 0x000004, "Wrong alignment on RProjectileBase_GetProjectileName");
static_assert(sizeof(RProjectileBase_GetProjectileName) == 0x000008, "Wrong size on RProjectileBase_GetProjectileName");
static_assert(offsetof(RProjectileBase_GetProjectileName, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetProjectileName::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetProjectileScript
// 0x0008 (0x0008 - 0x0000)
struct RProjectileBase_GetProjectileScript final
{
public:
	class URProjectileBaseScript*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetProjectileScript) == 0x000008, "Wrong alignment on RProjectileBase_GetProjectileScript");
static_assert(sizeof(RProjectileBase_GetProjectileScript) == 0x000008, "Wrong size on RProjectileBase_GetProjectileScript");
static_assert(offsetof(RProjectileBase_GetProjectileScript, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetProjectileScript::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileBase.GetProjectileSpawnerType
// 0x0001 (0x0001 - 0x0000)
struct RProjectileBase_GetProjectileSpawnerType final
{
public:
	EProjectileSpawnerType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileBase_GetProjectileSpawnerType) == 0x000001, "Wrong alignment on RProjectileBase_GetProjectileSpawnerType");
static_assert(sizeof(RProjectileBase_GetProjectileSpawnerType) == 0x000001, "Wrong size on RProjectileBase_GetProjectileSpawnerType");
static_assert(offsetof(RProjectileBase_GetProjectileSpawnerType, ReturnValue) == 0x000000, "Member 'RProjectileBase_GetProjectileSpawnerType::ReturnValue' has a wrong offset!");

// Function RGame.RProjectile.PredictProjectileMovementCurve
// 0x0070 (0x0070 - 0x0000)
struct RProjectile_PredictProjectileMovementCurve final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARProjectile>               InProjectileClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProjectileSimulationResult>    outResults;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                outImpactLocation;                                 // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartRotation;                                     // 0x0050(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         iterationTime;                                     // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectile_PredictProjectileMovementCurve) == 0x000008, "Wrong alignment on RProjectile_PredictProjectileMovementCurve");
static_assert(sizeof(RProjectile_PredictProjectileMovementCurve) == 0x000070, "Wrong size on RProjectile_PredictProjectileMovementCurve");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, WorldContextObject) == 0x000000, "Member 'RProjectile_PredictProjectileMovementCurve::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, InProjectileClass) == 0x000008, "Member 'RProjectile_PredictProjectileMovementCurve::InProjectileClass' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, outResults) == 0x000010, "Member 'RProjectile_PredictProjectileMovementCurve::outResults' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, outImpactLocation) == 0x000020, "Member 'RProjectile_PredictProjectileMovementCurve::outImpactLocation' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, StartLocation) == 0x000038, "Member 'RProjectile_PredictProjectileMovementCurve::StartLocation' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, StartRotation) == 0x000050, "Member 'RProjectile_PredictProjectileMovementCurve::StartRotation' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, iterationTime) == 0x000068, "Member 'RProjectile_PredictProjectileMovementCurve::iterationTime' has a wrong offset!");
static_assert(offsetof(RProjectile_PredictProjectileMovementCurve, MaxIterations) == 0x00006C, "Member 'RProjectile_PredictProjectileMovementCurve::MaxIterations' has a wrong offset!");

// Function RGame.REnemyResourceManager.GetEnemyResourceManager
// 0x0010 (0x0010 - 0x0000)
struct REnemyResourceManager_GetEnemyResourceManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AREnemyResourceManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_GetEnemyResourceManager) == 0x000008, "Wrong alignment on REnemyResourceManager_GetEnemyResourceManager");
static_assert(sizeof(REnemyResourceManager_GetEnemyResourceManager) == 0x000010, "Wrong size on REnemyResourceManager_GetEnemyResourceManager");
static_assert(offsetof(REnemyResourceManager_GetEnemyResourceManager, WorldContextObject) == 0x000000, "Member 'REnemyResourceManager_GetEnemyResourceManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_GetEnemyResourceManager, ReturnValue) == 0x000008, "Member 'REnemyResourceManager_GetEnemyResourceManager::ReturnValue' has a wrong offset!");

// Function RGame.REnemyResourceManager.AttackGroupHasEnoughResources
// 0x0010 (0x0010 - 0x0000)
struct REnemyResourceManager_AttackGroupHasEnoughResources final
{
public:
	struct FGameplayTag                           AttackGroupTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cost;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyResourceManager_AttackGroupHasEnoughResources) == 0x000004, "Wrong alignment on REnemyResourceManager_AttackGroupHasEnoughResources");
static_assert(sizeof(REnemyResourceManager_AttackGroupHasEnoughResources) == 0x000010, "Wrong size on REnemyResourceManager_AttackGroupHasEnoughResources");
static_assert(offsetof(REnemyResourceManager_AttackGroupHasEnoughResources, AttackGroupTag) == 0x000000, "Member 'REnemyResourceManager_AttackGroupHasEnoughResources::AttackGroupTag' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_AttackGroupHasEnoughResources, Cost) == 0x000008, "Member 'REnemyResourceManager_AttackGroupHasEnoughResources::Cost' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_AttackGroupHasEnoughResources, ReturnValue) == 0x00000C, "Member 'REnemyResourceManager_AttackGroupHasEnoughResources::ReturnValue' has a wrong offset!");

// Function RGame.REnemyResourceManager.GetClosestPylonActorToLocation
// 0x0030 (0x0030 - 0x0000)
struct REnemyResourceManager_GetClosestPylonActorToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPylonActor                            ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_GetClosestPylonActorToLocation) == 0x000008, "Wrong alignment on REnemyResourceManager_GetClosestPylonActorToLocation");
static_assert(sizeof(REnemyResourceManager_GetClosestPylonActorToLocation) == 0x000030, "Wrong size on REnemyResourceManager_GetClosestPylonActorToLocation");
static_assert(offsetof(REnemyResourceManager_GetClosestPylonActorToLocation, Location) == 0x000000, "Member 'REnemyResourceManager_GetClosestPylonActorToLocation::Location' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_GetClosestPylonActorToLocation, MaxDistance) == 0x000018, "Member 'REnemyResourceManager_GetClosestPylonActorToLocation::MaxDistance' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_GetClosestPylonActorToLocation, ReturnValue) == 0x000020, "Member 'REnemyResourceManager_GetClosestPylonActorToLocation::ReturnValue' has a wrong offset!");

// Function RGame.REnemyResourceManager.GetExecutableEnemies
// 0x0010 (0x0010 - 0x0000)
struct REnemyResourceManager_GetExecutableEnemies final
{
public:
	TArray<class ARNPCPawnBase*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_GetExecutableEnemies) == 0x000008, "Wrong alignment on REnemyResourceManager_GetExecutableEnemies");
static_assert(sizeof(REnemyResourceManager_GetExecutableEnemies) == 0x000010, "Wrong size on REnemyResourceManager_GetExecutableEnemies");
static_assert(offsetof(REnemyResourceManager_GetExecutableEnemies, ReturnValue) == 0x000000, "Member 'REnemyResourceManager_GetExecutableEnemies::ReturnValue' has a wrong offset!");

// Function RGame.REnemyResourceManager.RegisterExecutableEnemy
// 0x0008 (0x0008 - 0x0000)
struct REnemyResourceManager_RegisterExecutableEnemy final
{
public:
	class ARNPCPawnBase*                          Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_RegisterExecutableEnemy) == 0x000008, "Wrong alignment on REnemyResourceManager_RegisterExecutableEnemy");
static_assert(sizeof(REnemyResourceManager_RegisterExecutableEnemy) == 0x000008, "Wrong size on REnemyResourceManager_RegisterExecutableEnemy");
static_assert(offsetof(REnemyResourceManager_RegisterExecutableEnemy, Enemy) == 0x000000, "Member 'REnemyResourceManager_RegisterExecutableEnemy::Enemy' has a wrong offset!");

// Function RGame.REnemyResourceManager.RegisterPylonActor
// 0x0010 (0x0010 - 0x0000)
struct REnemyResourceManager_RegisterPylonActor final
{
public:
	class AActor*                                 PylonActorToRegister;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemyResourceManager_RegisterPylonActor) == 0x000008, "Wrong alignment on REnemyResourceManager_RegisterPylonActor");
static_assert(sizeof(REnemyResourceManager_RegisterPylonActor) == 0x000010, "Wrong size on REnemyResourceManager_RegisterPylonActor");
static_assert(offsetof(REnemyResourceManager_RegisterPylonActor, PylonActorToRegister) == 0x000000, "Member 'REnemyResourceManager_RegisterPylonActor::PylonActorToRegister' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_RegisterPylonActor, Radius) == 0x000008, "Member 'REnemyResourceManager_RegisterPylonActor::Radius' has a wrong offset!");

// Function RGame.REnemyResourceManager.UnregisterExecutableEnemy
// 0x0008 (0x0008 - 0x0000)
struct REnemyResourceManager_UnregisterExecutableEnemy final
{
public:
	class ARNPCPawnBase*                          Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_UnregisterExecutableEnemy) == 0x000008, "Wrong alignment on REnemyResourceManager_UnregisterExecutableEnemy");
static_assert(sizeof(REnemyResourceManager_UnregisterExecutableEnemy) == 0x000008, "Wrong size on REnemyResourceManager_UnregisterExecutableEnemy");
static_assert(offsetof(REnemyResourceManager_UnregisterExecutableEnemy, Enemy) == 0x000000, "Member 'REnemyResourceManager_UnregisterExecutableEnemy::Enemy' has a wrong offset!");

// Function RGame.REnemyResourceManager.UnregisterPylonActor
// 0x0008 (0x0008 - 0x0000)
struct REnemyResourceManager_UnregisterPylonActor final
{
public:
	class AActor*                                 PylonActorToUnRegister;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_UnregisterPylonActor) == 0x000008, "Wrong alignment on REnemyResourceManager_UnregisterPylonActor");
static_assert(sizeof(REnemyResourceManager_UnregisterPylonActor) == 0x000008, "Wrong size on REnemyResourceManager_UnregisterPylonActor");
static_assert(offsetof(REnemyResourceManager_UnregisterPylonActor, PylonActorToUnRegister) == 0x000000, "Member 'REnemyResourceManager_UnregisterPylonActor::PylonActorToUnRegister' has a wrong offset!");

// Function RGame.REnemyResourceManager.UseAttackGroupResources
// 0x000C (0x000C - 0x0000)
struct REnemyResourceManager_UseAttackGroupResources final
{
public:
	struct FGameplayTag                           AttackGroupTag;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cost;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemyResourceManager_UseAttackGroupResources) == 0x000004, "Wrong alignment on REnemyResourceManager_UseAttackGroupResources");
static_assert(sizeof(REnemyResourceManager_UseAttackGroupResources) == 0x00000C, "Wrong size on REnemyResourceManager_UseAttackGroupResources");
static_assert(offsetof(REnemyResourceManager_UseAttackGroupResources, AttackGroupTag) == 0x000000, "Member 'REnemyResourceManager_UseAttackGroupResources::AttackGroupTag' has a wrong offset!");
static_assert(offsetof(REnemyResourceManager_UseAttackGroupResources, Cost) == 0x000008, "Member 'REnemyResourceManager_UseAttackGroupResources::Cost' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.GetAllEnemiesDefeated
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnAreaSegment_GetAllEnemiesDefeated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_GetAllEnemiesDefeated) == 0x000001, "Wrong alignment on REnemySpawnAreaSegment_GetAllEnemiesDefeated");
static_assert(sizeof(REnemySpawnAreaSegment_GetAllEnemiesDefeated) == 0x000001, "Wrong size on REnemySpawnAreaSegment_GetAllEnemiesDefeated");
static_assert(offsetof(REnemySpawnAreaSegment_GetAllEnemiesDefeated, ReturnValue) == 0x000000, "Member 'REnemySpawnAreaSegment_GetAllEnemiesDefeated::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.GetEnemies
// 0x0010 (0x0010 - 0x0000)
struct REnemySpawnAreaSegment_GetEnemies final
{
public:
	TArray<class ARNPCPawnBase*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_GetEnemies) == 0x000008, "Wrong alignment on REnemySpawnAreaSegment_GetEnemies");
static_assert(sizeof(REnemySpawnAreaSegment_GetEnemies) == 0x000010, "Wrong size on REnemySpawnAreaSegment_GetEnemies");
static_assert(offsetof(REnemySpawnAreaSegment_GetEnemies, ReturnValue) == 0x000000, "Member 'REnemySpawnAreaSegment_GetEnemies::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.GetPlayersInArea
// 0x0010 (0x0010 - 0x0000)
struct REnemySpawnAreaSegment_GetPlayersInArea final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_GetPlayersInArea) == 0x000008, "Wrong alignment on REnemySpawnAreaSegment_GetPlayersInArea");
static_assert(sizeof(REnemySpawnAreaSegment_GetPlayersInArea) == 0x000010, "Wrong size on REnemySpawnAreaSegment_GetPlayersInArea");
static_assert(offsetof(REnemySpawnAreaSegment_GetPlayersInArea, ReturnValue) == 0x000000, "Member 'REnemySpawnAreaSegment_GetPlayersInArea::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.HasSegmentObjectiveEnded
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnAreaSegment_HasSegmentObjectiveEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_HasSegmentObjectiveEnded) == 0x000001, "Wrong alignment on REnemySpawnAreaSegment_HasSegmentObjectiveEnded");
static_assert(sizeof(REnemySpawnAreaSegment_HasSegmentObjectiveEnded) == 0x000001, "Wrong size on REnemySpawnAreaSegment_HasSegmentObjectiveEnded");
static_assert(offsetof(REnemySpawnAreaSegment_HasSegmentObjectiveEnded, ReturnValue) == 0x000000, "Member 'REnemySpawnAreaSegment_HasSegmentObjectiveEnded::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.OnActorEnterArea
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnAreaSegment_OnActorEnterArea final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_OnActorEnterArea) == 0x000008, "Wrong alignment on REnemySpawnAreaSegment_OnActorEnterArea");
static_assert(sizeof(REnemySpawnAreaSegment_OnActorEnterArea) == 0x000008, "Wrong size on REnemySpawnAreaSegment_OnActorEnterArea");
static_assert(offsetof(REnemySpawnAreaSegment_OnActorEnterArea, OtherActor) == 0x000000, "Member 'REnemySpawnAreaSegment_OnActorEnterArea::OtherActor' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.OnFinishRun
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnAreaSegment_OnFinishRun final
{
public:
	bool                                          RunFailed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_OnFinishRun) == 0x000001, "Wrong alignment on REnemySpawnAreaSegment_OnFinishRun");
static_assert(sizeof(REnemySpawnAreaSegment_OnFinishRun) == 0x000001, "Wrong size on REnemySpawnAreaSegment_OnFinishRun");
static_assert(offsetof(REnemySpawnAreaSegment_OnFinishRun, RunFailed) == 0x000000, "Member 'REnemySpawnAreaSegment_OnFinishRun::RunFailed' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.SpawnRoomObjectiveEnemyWave
// 0x0004 (0x0004 - 0x0000)
struct REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave final
{
public:
	int32                                         WaveSizeOverride;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave) == 0x000004, "Wrong alignment on REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave");
static_assert(sizeof(REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave) == 0x000004, "Wrong size on REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave");
static_assert(offsetof(REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave, WaveSizeOverride) == 0x000000, "Member 'REnemySpawnAreaSegment_SpawnRoomObjectiveEnemyWave::WaveSizeOverride' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.StartSegment
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnAreaSegment_StartSegment final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_StartSegment) == 0x000008, "Wrong alignment on REnemySpawnAreaSegment_StartSegment");
static_assert(sizeof(REnemySpawnAreaSegment_StartSegment) == 0x000008, "Wrong size on REnemySpawnAreaSegment_StartSegment");
static_assert(offsetof(REnemySpawnAreaSegment_StartSegment, OtherActor) == 0x000000, "Member 'REnemySpawnAreaSegment_StartSegment::OtherActor' has a wrong offset!");

// Function RGame.REnemySpawnAreaSegment.GetRoomObjectiveType
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnAreaSegment_GetRoomObjectiveType final
{
public:
	ERoomObjectiveType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnAreaSegment_GetRoomObjectiveType) == 0x000001, "Wrong alignment on REnemySpawnAreaSegment_GetRoomObjectiveType");
static_assert(sizeof(REnemySpawnAreaSegment_GetRoomObjectiveType) == 0x000001, "Wrong size on REnemySpawnAreaSegment_GetRoomObjectiveType");
static_assert(offsetof(REnemySpawnAreaSegment_GetRoomObjectiveType, ReturnValue) == 0x000000, "Member 'REnemySpawnAreaSegment_GetRoomObjectiveType::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.AddToGloballySpawnedTargets
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_AddToGloballySpawnedTargets final
{
public:
	class AActor*                                 ActorToAdd;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_AddToGloballySpawnedTargets) == 0x000008, "Wrong alignment on REnemySpawnManager_AddToGloballySpawnedTargets");
static_assert(sizeof(REnemySpawnManager_AddToGloballySpawnedTargets) == 0x000008, "Wrong size on REnemySpawnManager_AddToGloballySpawnedTargets");
static_assert(offsetof(REnemySpawnManager_AddToGloballySpawnedTargets, ActorToAdd) == 0x000000, "Member 'REnemySpawnManager_AddToGloballySpawnedTargets::ActorToAdd' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetSpawnManager
// 0x0010 (0x0010 - 0x0000)
struct REnemySpawnManager_GetSpawnManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AREnemySpawnManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetSpawnManager) == 0x000008, "Wrong alignment on REnemySpawnManager_GetSpawnManager");
static_assert(sizeof(REnemySpawnManager_GetSpawnManager) == 0x000010, "Wrong size on REnemySpawnManager_GetSpawnManager");
static_assert(offsetof(REnemySpawnManager_GetSpawnManager, WorldContextObject) == 0x000000, "Member 'REnemySpawnManager_GetSpawnManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetSpawnManager, ReturnValue) == 0x000008, "Member 'REnemySpawnManager_GetSpawnManager::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.RemoveFromGloballySpawnedTargets
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_RemoveFromGloballySpawnedTargets final
{
public:
	class AActor*                                 ActorToRemove;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_RemoveFromGloballySpawnedTargets) == 0x000008, "Wrong alignment on REnemySpawnManager_RemoveFromGloballySpawnedTargets");
static_assert(sizeof(REnemySpawnManager_RemoveFromGloballySpawnedTargets) == 0x000008, "Wrong size on REnemySpawnManager_RemoveFromGloballySpawnedTargets");
static_assert(offsetof(REnemySpawnManager_RemoveFromGloballySpawnedTargets, ActorToRemove) == 0x000000, "Member 'REnemySpawnManager_RemoveFromGloballySpawnedTargets::ActorToRemove' has a wrong offset!");

// Function RGame.REnemySpawnManager.AllSegmentsInCurrentNodeCompleted
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnManager_AllSegmentsInCurrentNodeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_AllSegmentsInCurrentNodeCompleted) == 0x000001, "Wrong alignment on REnemySpawnManager_AllSegmentsInCurrentNodeCompleted");
static_assert(sizeof(REnemySpawnManager_AllSegmentsInCurrentNodeCompleted) == 0x000001, "Wrong size on REnemySpawnManager_AllSegmentsInCurrentNodeCompleted");
static_assert(offsetof(REnemySpawnManager_AllSegmentsInCurrentNodeCompleted, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_AllSegmentsInCurrentNodeCompleted::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.AllSegmentsInCurrentRoomCompleted
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnManager_AllSegmentsInCurrentRoomCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_AllSegmentsInCurrentRoomCompleted) == 0x000001, "Wrong alignment on REnemySpawnManager_AllSegmentsInCurrentRoomCompleted");
static_assert(sizeof(REnemySpawnManager_AllSegmentsInCurrentRoomCompleted) == 0x000001, "Wrong size on REnemySpawnManager_AllSegmentsInCurrentRoomCompleted");
static_assert(offsetof(REnemySpawnManager_AllSegmentsInCurrentRoomCompleted, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_AllSegmentsInCurrentRoomCompleted::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.AnySegmentInCurrentNodeCompleted
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnManager_AnySegmentInCurrentNodeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_AnySegmentInCurrentNodeCompleted) == 0x000001, "Wrong alignment on REnemySpawnManager_AnySegmentInCurrentNodeCompleted");
static_assert(sizeof(REnemySpawnManager_AnySegmentInCurrentNodeCompleted) == 0x000001, "Wrong size on REnemySpawnManager_AnySegmentInCurrentNodeCompleted");
static_assert(offsetof(REnemySpawnManager_AnySegmentInCurrentNodeCompleted, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_AnySegmentInCurrentNodeCompleted::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.BroadcastOnEnemyKilled_Multicast
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_BroadcastOnEnemyKilled_Multicast final
{
public:
	class ARNPCPawnBase*                          EnemyPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_BroadcastOnEnemyKilled_Multicast) == 0x000008, "Wrong alignment on REnemySpawnManager_BroadcastOnEnemyKilled_Multicast");
static_assert(sizeof(REnemySpawnManager_BroadcastOnEnemyKilled_Multicast) == 0x000008, "Wrong size on REnemySpawnManager_BroadcastOnEnemyKilled_Multicast");
static_assert(offsetof(REnemySpawnManager_BroadcastOnEnemyKilled_Multicast, EnemyPawn) == 0x000000, "Member 'REnemySpawnManager_BroadcastOnEnemyKilled_Multicast::EnemyPawn' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetCurrentAliveEnemies
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_GetCurrentAliveEnemies final
{
public:
	bool                                          bIncludePostRegisteredEnemies;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetCurrentAliveEnemies) == 0x000004, "Wrong alignment on REnemySpawnManager_GetCurrentAliveEnemies");
static_assert(sizeof(REnemySpawnManager_GetCurrentAliveEnemies) == 0x000008, "Wrong size on REnemySpawnManager_GetCurrentAliveEnemies");
static_assert(offsetof(REnemySpawnManager_GetCurrentAliveEnemies, bIncludePostRegisteredEnemies) == 0x000000, "Member 'REnemySpawnManager_GetCurrentAliveEnemies::bIncludePostRegisteredEnemies' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetCurrentAliveEnemies, ReturnValue) == 0x000004, "Member 'REnemySpawnManager_GetCurrentAliveEnemies::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetCurrentSpawnAreaSegment
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_GetCurrentSpawnAreaSegment final
{
public:
	class AREnemySpawnAreaSegment*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetCurrentSpawnAreaSegment) == 0x000008, "Wrong alignment on REnemySpawnManager_GetCurrentSpawnAreaSegment");
static_assert(sizeof(REnemySpawnManager_GetCurrentSpawnAreaSegment) == 0x000008, "Wrong size on REnemySpawnManager_GetCurrentSpawnAreaSegment");
static_assert(offsetof(REnemySpawnManager_GetCurrentSpawnAreaSegment, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_GetCurrentSpawnAreaSegment::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetCurrentSpawnAreaSegments
// 0x0010 (0x0010 - 0x0000)
struct REnemySpawnManager_GetCurrentSpawnAreaSegments final
{
public:
	TArray<class AREnemySpawnAreaSegment*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetCurrentSpawnAreaSegments) == 0x000008, "Wrong alignment on REnemySpawnManager_GetCurrentSpawnAreaSegments");
static_assert(sizeof(REnemySpawnManager_GetCurrentSpawnAreaSegments) == 0x000010, "Wrong size on REnemySpawnManager_GetCurrentSpawnAreaSegments");
static_assert(offsetof(REnemySpawnManager_GetCurrentSpawnAreaSegments, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_GetCurrentSpawnAreaSegments::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetEnemyMutatorSetByEnemyMutatorClass
// 0x0060 (0x0060 - 0x0000)
struct REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass final
{
public:
	TSubclassOf<class URGEnemyMutatorScript>      EnemyMutatorClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FREnemyMutatorSet                      ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass) == 0x000008, "Wrong alignment on REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass");
static_assert(sizeof(REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass) == 0x000060, "Wrong size on REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass");
static_assert(offsetof(REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass, EnemyMutatorClass) == 0x000000, "Member 'REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass::EnemyMutatorClass' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass, ReturnValue) == 0x000008, "Member 'REnemySpawnManager_GetEnemyMutatorSetByEnemyMutatorClass::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetRandomEnemyMutatorSets
// 0x0018 (0x0018 - 0x0000)
struct REnemySpawnManager_GetRandomEnemyMutatorSets final
{
public:
	int32                                         NumMutatorSets;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FREnemyMutatorSet>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetRandomEnemyMutatorSets) == 0x000008, "Wrong alignment on REnemySpawnManager_GetRandomEnemyMutatorSets");
static_assert(sizeof(REnemySpawnManager_GetRandomEnemyMutatorSets) == 0x000018, "Wrong size on REnemySpawnManager_GetRandomEnemyMutatorSets");
static_assert(offsetof(REnemySpawnManager_GetRandomEnemyMutatorSets, NumMutatorSets) == 0x000000, "Member 'REnemySpawnManager_GetRandomEnemyMutatorSets::NumMutatorSets' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomEnemyMutatorSets, ReturnValue) == 0x000008, "Member 'REnemySpawnManager_GetRandomEnemyMutatorSets::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetRandomUsableMutatorSetsForEnemy
// 0x0020 (0x0020 - 0x0000)
struct REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy final
{
public:
	class AREnemyPawnBase*                        Enemy;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMutatorSets;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FREnemyMutatorSet>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy) == 0x000008, "Wrong alignment on REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy");
static_assert(sizeof(REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy) == 0x000020, "Wrong size on REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy");
static_assert(offsetof(REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy, Enemy) == 0x000000, "Member 'REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy, NumMutatorSets) == 0x000008, "Member 'REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy::NumMutatorSets' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy, ReturnValue) == 0x000010, "Member 'REnemySpawnManager_GetRandomUsableMutatorSetsForEnemy::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetRandomValidLocationInBoundingSpawnArea
// 0x0040 (0x0040 - 0x0000)
struct REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea final
{
public:
	class AREnemySpawnArea*                       SpawnArea;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          SpawnAreaBox;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAttempts;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FullRetryAttempts;                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AREnemyPawnBase>            EnemyToSpawn;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFailsafeCenterSpawn;                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea) == 0x000008, "Wrong alignment on REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea");
static_assert(sizeof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea) == 0x000040, "Wrong size on REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, SpawnArea) == 0x000000, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::SpawnArea' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, SpawnAreaBox) == 0x000008, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::SpawnAreaBox' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, CurrentAttempts) == 0x000010, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::CurrentAttempts' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, FullRetryAttempts) == 0x000014, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::FullRetryAttempts' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, EnemyToSpawn) == 0x000018, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::EnemyToSpawn' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, bAllowFailsafeCenterSpawn) == 0x000020, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::bAllowFailsafeCenterSpawn' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea, ReturnValue) == 0x000028, "Member 'REnemySpawnManager_GetRandomValidLocationInBoundingSpawnArea::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetRemainingEnemies
// 0x0004 (0x0004 - 0x0000)
struct REnemySpawnManager_GetRemainingEnemies final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetRemainingEnemies) == 0x000004, "Wrong alignment on REnemySpawnManager_GetRemainingEnemies");
static_assert(sizeof(REnemySpawnManager_GetRemainingEnemies) == 0x000004, "Wrong size on REnemySpawnManager_GetRemainingEnemies");
static_assert(offsetof(REnemySpawnManager_GetRemainingEnemies, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_GetRemainingEnemies::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.GetRemainingEnemiesToSpawn
// 0x0004 (0x0004 - 0x0000)
struct REnemySpawnManager_GetRemainingEnemiesToSpawn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_GetRemainingEnemiesToSpawn) == 0x000004, "Wrong alignment on REnemySpawnManager_GetRemainingEnemiesToSpawn");
static_assert(sizeof(REnemySpawnManager_GetRemainingEnemiesToSpawn) == 0x000004, "Wrong size on REnemySpawnManager_GetRemainingEnemiesToSpawn");
static_assert(offsetof(REnemySpawnManager_GetRemainingEnemiesToSpawn, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_GetRemainingEnemiesToSpawn::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.HandleSpawnFailure
// 0x0018 (0x0018 - 0x0000)
struct REnemySpawnManager_HandleSpawnFailure final
{
public:
	TArray<class AREnemySpawnAreaSegment*>        CurrentSegments;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsElite;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemySpawnManager_HandleSpawnFailure) == 0x000008, "Wrong alignment on REnemySpawnManager_HandleSpawnFailure");
static_assert(sizeof(REnemySpawnManager_HandleSpawnFailure) == 0x000018, "Wrong size on REnemySpawnManager_HandleSpawnFailure");
static_assert(offsetof(REnemySpawnManager_HandleSpawnFailure, CurrentSegments) == 0x000000, "Member 'REnemySpawnManager_HandleSpawnFailure::CurrentSegments' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_HandleSpawnFailure, bIsElite) == 0x000010, "Member 'REnemySpawnManager_HandleSpawnFailure::bIsElite' has a wrong offset!");

// Function RGame.REnemySpawnManager.IsAnyEncounterActive
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnManager_IsAnyEncounterActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_IsAnyEncounterActive) == 0x000001, "Wrong alignment on REnemySpawnManager_IsAnyEncounterActive");
static_assert(sizeof(REnemySpawnManager_IsAnyEncounterActive) == 0x000001, "Wrong size on REnemySpawnManager_IsAnyEncounterActive");
static_assert(offsetof(REnemySpawnManager_IsAnyEncounterActive, ReturnValue) == 0x000000, "Member 'REnemySpawnManager_IsAnyEncounterActive::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.IsEnemyMutatorSetUsableForEnemy
// 0x0068 (0x0068 - 0x0000)
struct REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy final
{
public:
	struct FREnemyMutatorSet                      EnemyMutatorSet;                                   // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AREnemyPawnBase*                        Enemy;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy) == 0x000008, "Wrong alignment on REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy");
static_assert(sizeof(REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy) == 0x000068, "Wrong size on REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy");
static_assert(offsetof(REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy, EnemyMutatorSet) == 0x000000, "Member 'REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy::EnemyMutatorSet' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy, Enemy) == 0x000058, "Member 'REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy, ReturnValue) == 0x000060, "Member 'REnemySpawnManager_IsEnemyMutatorSetUsableForEnemy::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.OnEnemySpawnEffects_Multicast
// 0x0080 (0x0080 - 0x0000)
struct REnemySpawnManager_OnEnemySpawnEffects_Multicast final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 EnemyClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDuration;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_OnEnemySpawnEffects_Multicast) == 0x000010, "Wrong alignment on REnemySpawnManager_OnEnemySpawnEffects_Multicast");
static_assert(sizeof(REnemySpawnManager_OnEnemySpawnEffects_Multicast) == 0x000080, "Wrong size on REnemySpawnManager_OnEnemySpawnEffects_Multicast");
static_assert(offsetof(REnemySpawnManager_OnEnemySpawnEffects_Multicast, WorldContextObject) == 0x000000, "Member 'REnemySpawnManager_OnEnemySpawnEffects_Multicast::WorldContextObject' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_OnEnemySpawnEffects_Multicast, EnemyClass) == 0x000008, "Member 'REnemySpawnManager_OnEnemySpawnEffects_Multicast::EnemyClass' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_OnEnemySpawnEffects_Multicast, SpawnDuration) == 0x000010, "Member 'REnemySpawnManager_OnEnemySpawnEffects_Multicast::SpawnDuration' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_OnEnemySpawnEffects_Multicast, SpawnTransform) == 0x000020, "Member 'REnemySpawnManager_OnEnemySpawnEffects_Multicast::SpawnTransform' has a wrong offset!");

// Function RGame.REnemySpawnManager.OnFinishRun
// 0x0001 (0x0001 - 0x0000)
struct REnemySpawnManager_OnFinishRun final
{
public:
	bool                                          RunFailed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_OnFinishRun) == 0x000001, "Wrong alignment on REnemySpawnManager_OnFinishRun");
static_assert(sizeof(REnemySpawnManager_OnFinishRun) == 0x000001, "Wrong size on REnemySpawnManager_OnFinishRun");
static_assert(offsetof(REnemySpawnManager_OnFinishRun, RunFailed) == 0x000000, "Member 'REnemySpawnManager_OnFinishRun::RunFailed' has a wrong offset!");

// Function RGame.REnemySpawnManager.ReceiveOnEnemySpawnPrimed
// 0x0070 (0x0070 - 0x0000)
struct REnemySpawnManager_ReceiveOnEnemySpawnPrimed final
{
public:
	class UClass*                                 EnemyClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDuration;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_ReceiveOnEnemySpawnPrimed) == 0x000010, "Wrong alignment on REnemySpawnManager_ReceiveOnEnemySpawnPrimed");
static_assert(sizeof(REnemySpawnManager_ReceiveOnEnemySpawnPrimed) == 0x000070, "Wrong size on REnemySpawnManager_ReceiveOnEnemySpawnPrimed");
static_assert(offsetof(REnemySpawnManager_ReceiveOnEnemySpawnPrimed, EnemyClass) == 0x000000, "Member 'REnemySpawnManager_ReceiveOnEnemySpawnPrimed::EnemyClass' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_ReceiveOnEnemySpawnPrimed, SpawnDuration) == 0x000008, "Member 'REnemySpawnManager_ReceiveOnEnemySpawnPrimed::SpawnDuration' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_ReceiveOnEnemySpawnPrimed, SpawnTransform) == 0x000010, "Member 'REnemySpawnManager_ReceiveOnEnemySpawnPrimed::SpawnTransform' has a wrong offset!");

// Function RGame.REnemySpawnManager.RegisterSpawnedEnemy
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_RegisterSpawnedEnemy final
{
public:
	class ARNPCPawnBase*                          EnemyPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_RegisterSpawnedEnemy) == 0x000008, "Wrong alignment on REnemySpawnManager_RegisterSpawnedEnemy");
static_assert(sizeof(REnemySpawnManager_RegisterSpawnedEnemy) == 0x000008, "Wrong size on REnemySpawnManager_RegisterSpawnedEnemy");
static_assert(offsetof(REnemySpawnManager_RegisterSpawnedEnemy, EnemyPawn) == 0x000000, "Member 'REnemySpawnManager_RegisterSpawnedEnemy::EnemyPawn' has a wrong offset!");

// Function RGame.REnemySpawnManager.SegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_SegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_SegmentCompleted) == 0x000008, "Wrong alignment on REnemySpawnManager_SegmentCompleted");
static_assert(sizeof(REnemySpawnManager_SegmentCompleted) == 0x000008, "Wrong size on REnemySpawnManager_SegmentCompleted");
static_assert(offsetof(REnemySpawnManager_SegmentCompleted, EnemySpawnAreaSegment) == 0x000000, "Member 'REnemySpawnManager_SegmentCompleted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.REnemySpawnManager.SegmentStarted
// 0x0008 (0x0008 - 0x0000)
struct REnemySpawnManager_SegmentStarted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_SegmentStarted) == 0x000008, "Wrong alignment on REnemySpawnManager_SegmentStarted");
static_assert(sizeof(REnemySpawnManager_SegmentStarted) == 0x000008, "Wrong size on REnemySpawnManager_SegmentStarted");
static_assert(offsetof(REnemySpawnManager_SegmentStarted, EnemySpawnAreaSegment) == 0x000000, "Member 'REnemySpawnManager_SegmentStarted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.REnemySpawnManager.StartSpawningEnemyWithEffects
// 0x0030 (0x0030 - 0x0000)
struct REnemySpawnManager_StartSpawningEnemyWithEffects final
{
public:
	class FName                                   EnemySpawnTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AREnemySpawnArea*                       SpawnArea;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ARNPCPawnBase>>   SpawnedEnemiesList;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bIsElite;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RetryAttempts;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFailsafeCenterSpawn;                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemySpawnManager_StartSpawningEnemyWithEffects) == 0x000008, "Wrong alignment on REnemySpawnManager_StartSpawningEnemyWithEffects");
static_assert(sizeof(REnemySpawnManager_StartSpawningEnemyWithEffects) == 0x000030, "Wrong size on REnemySpawnManager_StartSpawningEnemyWithEffects");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, EnemySpawnTag) == 0x000000, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::EnemySpawnTag' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, SpawnArea) == 0x000008, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::SpawnArea' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, SpawnedEnemiesList) == 0x000010, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::SpawnedEnemiesList' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, bIsElite) == 0x000020, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::bIsElite' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, RetryAttempts) == 0x000024, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::RetryAttempts' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, bAllowFailsafeCenterSpawn) == 0x000028, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::bAllowFailsafeCenterSpawn' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_StartSpawningEnemyWithEffects, ReturnValue) == 0x000029, "Member 'REnemySpawnManager_StartSpawningEnemyWithEffects::ReturnValue' has a wrong offset!");

// Function RGame.REnemySpawnManager.TryForceSpawningEnemy
// 0x0018 (0x0018 - 0x0000)
struct REnemySpawnManager_TryForceSpawningEnemy final
{
public:
	class FName                                   EnemySpawnTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AREnemySpawnArea*                       SpawnArea;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AREnemySpawnAreaSegment*                SpawnAreaSegment;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(REnemySpawnManager_TryForceSpawningEnemy) == 0x000008, "Wrong alignment on REnemySpawnManager_TryForceSpawningEnemy");
static_assert(sizeof(REnemySpawnManager_TryForceSpawningEnemy) == 0x000018, "Wrong size on REnemySpawnManager_TryForceSpawningEnemy");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemy, EnemySpawnTag) == 0x000000, "Member 'REnemySpawnManager_TryForceSpawningEnemy::EnemySpawnTag' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemy, SpawnArea) == 0x000008, "Member 'REnemySpawnManager_TryForceSpawningEnemy::SpawnArea' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemy, SpawnAreaSegment) == 0x000010, "Member 'REnemySpawnManager_TryForceSpawningEnemy::SpawnAreaSegment' has a wrong offset!");

// Function RGame.REnemySpawnManager.TryForceSpawningEnemyCurrentSegment
// 0x0028 (0x0028 - 0x0000)
struct REnemySpawnManager_TryForceSpawningEnemyCurrentSegment final
{
public:
	class FName                                   EnemySpawnTag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceForSpawn;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(REnemySpawnManager_TryForceSpawningEnemyCurrentSegment) == 0x000008, "Wrong alignment on REnemySpawnManager_TryForceSpawningEnemyCurrentSegment");
static_assert(sizeof(REnemySpawnManager_TryForceSpawningEnemyCurrentSegment) == 0x000028, "Wrong size on REnemySpawnManager_TryForceSpawningEnemyCurrentSegment");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemyCurrentSegment, EnemySpawnTag) == 0x000000, "Member 'REnemySpawnManager_TryForceSpawningEnemyCurrentSegment::EnemySpawnTag' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemyCurrentSegment, Location) == 0x000008, "Member 'REnemySpawnManager_TryForceSpawningEnemyCurrentSegment::Location' has a wrong offset!");
static_assert(offsetof(REnemySpawnManager_TryForceSpawningEnemyCurrentSegment, MaxDistanceForSpawn) == 0x000020, "Member 'REnemySpawnManager_TryForceSpawningEnemyCurrentSegment::MaxDistanceForSpawn' has a wrong offset!");

// Function RGame.RFieldSystemActor.K2_OnApplyTransientfields
// 0x0020 (0x0020 - 0x0000)
struct RFieldSystemActor_K2_OnApplyTransientfields final
{
public:
	struct FVector                                FieldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldRadius;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RFieldSystemActor_K2_OnApplyTransientfields) == 0x000008, "Wrong alignment on RFieldSystemActor_K2_OnApplyTransientfields");
static_assert(sizeof(RFieldSystemActor_K2_OnApplyTransientfields) == 0x000020, "Wrong size on RFieldSystemActor_K2_OnApplyTransientfields");
static_assert(offsetof(RFieldSystemActor_K2_OnApplyTransientfields, FieldLocation) == 0x000000, "Member 'RFieldSystemActor_K2_OnApplyTransientfields::FieldLocation' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_K2_OnApplyTransientfields, FieldRadius) == 0x000018, "Member 'RFieldSystemActor_K2_OnApplyTransientfields::FieldRadius' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFields_Multicast
// 0x0020 (0x0020 - 0x0000)
struct RFieldSystemActor_TriggerTransientFields_Multicast final
{
public:
	struct FVector                                FieldLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldRadius;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFields_Multicast) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFields_Multicast");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFields_Multicast) == 0x000020, "Wrong size on RFieldSystemActor_TriggerTransientFields_Multicast");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFields_Multicast, FieldLocation) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFields_Multicast::FieldLocation' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFields_Multicast, FieldRadius) == 0x000018, "Member 'RFieldSystemActor_TriggerTransientFields_Multicast::FieldRadius' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsActorHitDelegateWrapper
// 0x0128 (0x0128 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper) == 0x000128, "Wrong size on RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper, SelfActor) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper::SelfActor' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper, OtherActor) == 0x000008, "Member 'RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper::OtherActor' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper, NormalImpulse) == 0x000010, "Member 'RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper, Hit) == 0x000028, "Member 'RFieldSystemActor_TriggerTransientFieldsActorHitDelegateWrapper::Hit' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsEnemyAreaAttackDelegateWrapper
// 0x0038 (0x0038 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper final
{
public:
	TArray<class AActor*>                         HitActors;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AREnemyPawnBase*                        Enemy;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRadius;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper) == 0x000038, "Wrong size on RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper, HitActors) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper::HitActors' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper, Enemy) == 0x000010, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper::Enemy' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper, Location) == 0x000018, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper::Location' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper, AttackRadius) == 0x000030, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyAreaAttackDelegateWrapper::AttackRadius' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsEnemyProjectileDelegateWrapper
// 0x0018 (0x0018 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper final
{
public:
	class AREnemyPawnBase*                        EnemyPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARProjectileBase*                       ProjectileActor;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper) == 0x000018, "Wrong size on RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper, EnemyPawn) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper::EnemyPawn' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper, HitActor) == 0x000008, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper::HitActor' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper, ProjectileActor) == 0x000010, "Member 'RFieldSystemActor_TriggerTransientFieldsEnemyProjectileDelegateWrapper::ProjectileActor' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsPlayerAreaAttackDelegateWrapper
// 0x0018 (0x0018 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper) == 0x000018, "Wrong size on RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper, Player) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper::Player' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper, Hits) == 0x000008, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerAreaAttackDelegateWrapper::Hits' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper
// 0x0018 (0x0018 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     Hits;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper) == 0x000018, "Wrong size on RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper, Player) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper::Player' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper, Hits) == 0x000008, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerLesserAreaAttackDelegateWrapper::Hits' has a wrong offset!");

// Function RGame.RFieldSystemActor.TriggerTransientFieldsPlayerProjectileDelegateWrapper
// 0x0018 (0x0018 - 0x0000)
struct RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper final
{
public:
	class ARPlayerPawn*                           PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARProjectileBase*                       ProjectileActor;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper) == 0x000008, "Wrong alignment on RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper");
static_assert(sizeof(RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper) == 0x000018, "Wrong size on RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper, PlayerPawn) == 0x000000, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper::PlayerPawn' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper, HitActor) == 0x000008, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper::HitActor' has a wrong offset!");
static_assert(offsetof(RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper, ProjectileActor) == 0x000010, "Member 'RFieldSystemActor_TriggerTransientFieldsPlayerProjectileDelegateWrapper::ProjectileActor' has a wrong offset!");

// Function RGame.RFloatingTextManager.GetFloatingTextManager
// 0x0010 (0x0010 - 0x0000)
struct RFloatingTextManager_GetFloatingTextManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARFloatingTextManager*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFloatingTextManager_GetFloatingTextManager) == 0x000008, "Wrong alignment on RFloatingTextManager_GetFloatingTextManager");
static_assert(sizeof(RFloatingTextManager_GetFloatingTextManager) == 0x000010, "Wrong size on RFloatingTextManager_GetFloatingTextManager");
static_assert(offsetof(RFloatingTextManager_GetFloatingTextManager, WorldContextObject) == 0x000000, "Member 'RFloatingTextManager_GetFloatingTextManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RFloatingTextManager_GetFloatingTextManager, ReturnValue) == 0x000008, "Member 'RFloatingTextManager_GetFloatingTextManager::ReturnValue' has a wrong offset!");

// Function RGame.RFloatingTextManager.RemoveFloatingTextByType
// 0x0008 (0x0008 - 0x0000)
struct RFloatingTextManager_RemoveFloatingTextByType final
{
public:
	class URFloatingTextWidget*                   FloatingText;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFloatingTextManager_RemoveFloatingTextByType) == 0x000008, "Wrong alignment on RFloatingTextManager_RemoveFloatingTextByType");
static_assert(sizeof(RFloatingTextManager_RemoveFloatingTextByType) == 0x000008, "Wrong size on RFloatingTextManager_RemoveFloatingTextByType");
static_assert(offsetof(RFloatingTextManager_RemoveFloatingTextByType, FloatingText) == 0x000000, "Member 'RFloatingTextManager_RemoveFloatingTextByType::FloatingText' has a wrong offset!");

// Function RGame.RFloatingTextWidget.PushFloatingTextAtLocation
// 0x0048 (0x0048 - 0x0000)
struct RFloatingTextWidget_PushFloatingTextAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ERFloatingTextType                            Type;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URFloatingTextWidget*                   ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFloatingTextWidget_PushFloatingTextAtLocation) == 0x000008, "Wrong alignment on RFloatingTextWidget_PushFloatingTextAtLocation");
static_assert(sizeof(RFloatingTextWidget_PushFloatingTextAtLocation) == 0x000048, "Wrong size on RFloatingTextWidget_PushFloatingTextAtLocation");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, WorldContextObject) == 0x000000, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, Location) == 0x000008, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::Location' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, Text) == 0x000020, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::Text' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, Type) == 0x000030, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::Type' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, TargetActor) == 0x000038, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::TargetActor' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_PushFloatingTextAtLocation, ReturnValue) == 0x000040, "Member 'RFloatingTextWidget_PushFloatingTextAtLocation::ReturnValue' has a wrong offset!");

// Function RGame.RFloatingTextWidget.QueueFloatingText
// 0x0038 (0x0038 - 0x0000)
struct RFloatingTextWidget_QueueFloatingText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ERFloatingTextType                            Type;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDelay;                                        // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RFloatingTextWidget_QueueFloatingText) == 0x000008, "Wrong alignment on RFloatingTextWidget_QueueFloatingText");
static_assert(sizeof(RFloatingTextWidget_QueueFloatingText) == 0x000038, "Wrong size on RFloatingTextWidget_QueueFloatingText");
static_assert(offsetof(RFloatingTextWidget_QueueFloatingText, WorldContextObject) == 0x000000, "Member 'RFloatingTextWidget_QueueFloatingText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_QueueFloatingText, Location) == 0x000008, "Member 'RFloatingTextWidget_QueueFloatingText::Location' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_QueueFloatingText, Text) == 0x000020, "Member 'RFloatingTextWidget_QueueFloatingText::Text' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_QueueFloatingText, Type) == 0x000030, "Member 'RFloatingTextWidget_QueueFloatingText::Type' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_QueueFloatingText, bSkipDelay) == 0x000031, "Member 'RFloatingTextWidget_QueueFloatingText::bSkipDelay' has a wrong offset!");

// Function RGame.RFloatingTextWidget.RefreshText
// 0x0028 (0x0028 - 0x0000)
struct RFloatingTextWidget_RefreshText final
{
public:
	class FText                                   NewText;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                NewWorldPosition;                                  // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFloatingTextWidget_RefreshText) == 0x000008, "Wrong alignment on RFloatingTextWidget_RefreshText");
static_assert(sizeof(RFloatingTextWidget_RefreshText) == 0x000028, "Wrong size on RFloatingTextWidget_RefreshText");
static_assert(offsetof(RFloatingTextWidget_RefreshText, NewText) == 0x000000, "Member 'RFloatingTextWidget_RefreshText::NewText' has a wrong offset!");
static_assert(offsetof(RFloatingTextWidget_RefreshText, NewWorldPosition) == 0x000010, "Member 'RFloatingTextWidget_RefreshText::NewWorldPosition' has a wrong offset!");

// Function RGame.RFloatingTextWidget.SetAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct RFloatingTextWidget_SetAnimationDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RFloatingTextWidget_SetAnimationDuration) == 0x000004, "Wrong alignment on RFloatingTextWidget_SetAnimationDuration");
static_assert(sizeof(RFloatingTextWidget_SetAnimationDuration) == 0x000004, "Wrong size on RFloatingTextWidget_SetAnimationDuration");
static_assert(offsetof(RFloatingTextWidget_SetAnimationDuration, Duration) == 0x000000, "Member 'RFloatingTextWidget_SetAnimationDuration::Duration' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.AddAbilityBlocker
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_AddAbilityBlocker final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_AddAbilityBlocker) == 0x000004, "Wrong alignment on RGAbilityCharacterMutatorScript_AddAbilityBlocker");
static_assert(sizeof(RGAbilityCharacterMutatorScript_AddAbilityBlocker) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_AddAbilityBlocker");
static_assert(offsetof(RGAbilityCharacterMutatorScript_AddAbilityBlocker, Key) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_AddAbilityBlocker::Key' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BPCanFireAbility
// 0x0001 (0x0001 - 0x0000)
struct RGAbilityCharacterMutatorScript_BPCanFireAbility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BPCanFireAbility) == 0x000001, "Wrong alignment on RGAbilityCharacterMutatorScript_BPCanFireAbility");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BPCanFireAbility) == 0x000001, "Wrong size on RGAbilityCharacterMutatorScript_BPCanFireAbility");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BPCanFireAbility, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BPCanFireAbility::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BroadcastOnCooldownFinished
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished final
{
public:
	class URGAbilityCharacterMutatorScript*       RGAbilityCharacterMutatorScript;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished, RGAbilityCharacterMutatorScript) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished::RGAbilityCharacterMutatorScript' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BroadcastOnCooldownFinished_Server
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server final
{
public:
	class URGAbilityCharacterMutatorScript*       RGAbilityCharacterMutatorScript;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server, RGAbilityCharacterMutatorScript) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnCooldownFinished_Server::RGAbilityCharacterMutatorScript' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BroadcastOnStacksUpdated
// 0x0010 (0x0010 - 0x0000)
struct RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated final
{
public:
	class URGAbilityCharacterMutatorScript*       RGAbilityCharacterMutatorScript;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumStacksRemaining;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated) == 0x000010, "Wrong size on RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated, RGAbilityCharacterMutatorScript) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated::RGAbilityCharacterMutatorScript' has a wrong offset!");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated, NumStacksRemaining) == 0x000008, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStacksUpdated::NumStacksRemaining' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BroadcastOnStackUpdated_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast final
{
public:
	class URGAbilityCharacterMutatorScript*       RGAbilityCharacterMutatorScript;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumStacksRemaining;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast) == 0x000010, "Wrong size on RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast, RGAbilityCharacterMutatorScript) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast::RGAbilityCharacterMutatorScript' has a wrong offset!");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast, NumStacksRemaining) == 0x000008, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Multicast::NumStacksRemaining' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.BroadcastOnStackUpdated_Server
// 0x0010 (0x0010 - 0x0000)
struct RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server final
{
public:
	class URGAbilityCharacterMutatorScript*       RGAbilityCharacterMutatorScript;                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumStacksRemaining;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server");
static_assert(sizeof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server) == 0x000010, "Wrong size on RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server, RGAbilityCharacterMutatorScript) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server::RGAbilityCharacterMutatorScript' has a wrong offset!");
static_assert(offsetof(RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server, NumStacksRemaining) == 0x000008, "Member 'RGAbilityCharacterMutatorScript_BroadcastOnStackUpdated_Server::NumStacksRemaining' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.CanFireAbility
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_CanFireAbility final
{
public:
	int32                                         InputAbilityIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGAbilityCharacterMutatorScript_CanFireAbility) == 0x000004, "Wrong alignment on RGAbilityCharacterMutatorScript_CanFireAbility");
static_assert(sizeof(RGAbilityCharacterMutatorScript_CanFireAbility) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_CanFireAbility");
static_assert(offsetof(RGAbilityCharacterMutatorScript_CanFireAbility, InputAbilityIndex) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_CanFireAbility::InputAbilityIndex' has a wrong offset!");
static_assert(offsetof(RGAbilityCharacterMutatorScript_CanFireAbility, ReturnValue) == 0x000004, "Member 'RGAbilityCharacterMutatorScript_CanFireAbility::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.GetChargePercentage
// 0x0004 (0x0004 - 0x0000)
struct RGAbilityCharacterMutatorScript_GetChargePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_GetChargePercentage) == 0x000004, "Wrong alignment on RGAbilityCharacterMutatorScript_GetChargePercentage");
static_assert(sizeof(RGAbilityCharacterMutatorScript_GetChargePercentage) == 0x000004, "Wrong size on RGAbilityCharacterMutatorScript_GetChargePercentage");
static_assert(offsetof(RGAbilityCharacterMutatorScript_GetChargePercentage, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_GetChargePercentage::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.IsAbilityEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGAbilityCharacterMutatorScript_IsAbilityEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_IsAbilityEnabled) == 0x000001, "Wrong alignment on RGAbilityCharacterMutatorScript_IsAbilityEnabled");
static_assert(sizeof(RGAbilityCharacterMutatorScript_IsAbilityEnabled) == 0x000001, "Wrong size on RGAbilityCharacterMutatorScript_IsAbilityEnabled");
static_assert(offsetof(RGAbilityCharacterMutatorScript_IsAbilityEnabled, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_IsAbilityEnabled::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.IsInputCooldownReady
// 0x0001 (0x0001 - 0x0000)
struct RGAbilityCharacterMutatorScript_IsInputCooldownReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_IsInputCooldownReady) == 0x000001, "Wrong alignment on RGAbilityCharacterMutatorScript_IsInputCooldownReady");
static_assert(sizeof(RGAbilityCharacterMutatorScript_IsInputCooldownReady) == 0x000001, "Wrong size on RGAbilityCharacterMutatorScript_IsInputCooldownReady");
static_assert(offsetof(RGAbilityCharacterMutatorScript_IsInputCooldownReady, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_IsInputCooldownReady::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.IsInSweetSpotInterval
// 0x0001 (0x0001 - 0x0000)
struct RGAbilityCharacterMutatorScript_IsInSweetSpotInterval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_IsInSweetSpotInterval) == 0x000001, "Wrong alignment on RGAbilityCharacterMutatorScript_IsInSweetSpotInterval");
static_assert(sizeof(RGAbilityCharacterMutatorScript_IsInSweetSpotInterval) == 0x000001, "Wrong size on RGAbilityCharacterMutatorScript_IsInSweetSpotInterval");
static_assert(offsetof(RGAbilityCharacterMutatorScript_IsInSweetSpotInterval, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_IsInSweetSpotInterval::ReturnValue' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.RemoveAbilityBlocker
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_RemoveAbilityBlocker final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_RemoveAbilityBlocker) == 0x000004, "Wrong alignment on RGAbilityCharacterMutatorScript_RemoveAbilityBlocker");
static_assert(sizeof(RGAbilityCharacterMutatorScript_RemoveAbilityBlocker) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_RemoveAbilityBlocker");
static_assert(offsetof(RGAbilityCharacterMutatorScript_RemoveAbilityBlocker, Key) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_RemoveAbilityBlocker::Key' has a wrong offset!");

// Function RGame.RGAbilityCharacterMutatorScript.GetWeaponScript
// 0x0008 (0x0008 - 0x0000)
struct RGAbilityCharacterMutatorScript_GetWeaponScript final
{
public:
	class URGWeaponScript*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAbilityCharacterMutatorScript_GetWeaponScript) == 0x000008, "Wrong alignment on RGAbilityCharacterMutatorScript_GetWeaponScript");
static_assert(sizeof(RGAbilityCharacterMutatorScript_GetWeaponScript) == 0x000008, "Wrong size on RGAbilityCharacterMutatorScript_GetWeaponScript");
static_assert(offsetof(RGAbilityCharacterMutatorScript_GetWeaponScript, ReturnValue) == 0x000000, "Member 'RGAbilityCharacterMutatorScript_GetWeaponScript::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ActorHasAnyStatusEffectFromInstigator
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator");
static_assert(sizeof(RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator) == 0x000018, "Wrong size on RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator");
static_assert(offsetof(RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator, Actor) == 0x000000, "Member 'RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator, InstigatorScriptComponent) == 0x000008, "Member 'RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_ActorHasAnyStatusEffectFromInstigator::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ActorHasStatusEffect
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_ActorHasStatusEffect final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StatusEffectClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_ActorHasStatusEffect) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ActorHasStatusEffect");
static_assert(sizeof(RGameFunctionLibrary_ActorHasStatusEffect) == 0x000038, "Wrong size on RGameFunctionLibrary_ActorHasStatusEffect");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffect, Actor) == 0x000000, "Member 'RGameFunctionLibrary_ActorHasStatusEffect::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffect, StatusEffectClass) == 0x000008, "Member 'RGameFunctionLibrary_ActorHasStatusEffect::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffect, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_ActorHasStatusEffect::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ActorHasStatusEffectFromInstigator
// 0x0040 (0x0040 - 0x0000)
struct RGameFunctionLibrary_ActorHasStatusEffectFromInstigator final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StatusEffectClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ActorHasStatusEffectFromInstigator");
static_assert(sizeof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator) == 0x000040, "Wrong size on RGameFunctionLibrary_ActorHasStatusEffectFromInstigator");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator, Actor) == 0x000000, "Member 'RGameFunctionLibrary_ActorHasStatusEffectFromInstigator::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator, StatusEffectClass) == 0x000008, "Member 'RGameFunctionLibrary_ActorHasStatusEffectFromInstigator::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator, InstigatorScriptComponent) == 0x000030, "Member 'RGameFunctionLibrary_ActorHasStatusEffectFromInstigator::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ActorHasStatusEffectFromInstigator, ReturnValue) == 0x000038, "Member 'RGameFunctionLibrary_ActorHasStatusEffectFromInstigator::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddHighlightToTextWithKeywords
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_AddHighlightToTextWithKeywords final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HighlightStyle;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_AddHighlightToTextWithKeywords) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddHighlightToTextWithKeywords");
static_assert(sizeof(RGameFunctionLibrary_AddHighlightToTextWithKeywords) == 0x000030, "Wrong size on RGameFunctionLibrary_AddHighlightToTextWithKeywords");
static_assert(offsetof(RGameFunctionLibrary_AddHighlightToTextWithKeywords, Text) == 0x000000, "Member 'RGameFunctionLibrary_AddHighlightToTextWithKeywords::Text' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddHighlightToTextWithKeywords, HighlightStyle) == 0x000010, "Member 'RGameFunctionLibrary_AddHighlightToTextWithKeywords::HighlightStyle' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddHighlightToTextWithKeywords, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_AddHighlightToTextWithKeywords::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableFloatCoefficient
// 0x0138 (0x0138 - 0x0000)
struct RGameFunctionLibrary_AddMutableFloatCoefficient final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableFloatCoefficient) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableFloatCoefficient");
static_assert(sizeof(RGameFunctionLibrary_AddMutableFloatCoefficient) == 0x000138, "Wrong size on RGameFunctionLibrary_AddMutableFloatCoefficient");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatCoefficient, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableFloatCoefficient::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatCoefficient, Key) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableFloatCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatCoefficient, Val) == 0x000130, "Member 'RGameFunctionLibrary_AddMutableFloatCoefficient::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableFloatPostAdditive
// 0x0138 (0x0138 - 0x0000)
struct RGameFunctionLibrary_AddMutableFloatPostAdditive final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableFloatPostAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableFloatPostAdditive");
static_assert(sizeof(RGameFunctionLibrary_AddMutableFloatPostAdditive) == 0x000138, "Wrong size on RGameFunctionLibrary_AddMutableFloatPostAdditive");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPostAdditive, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableFloatPostAdditive::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPostAdditive, Key) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableFloatPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPostAdditive, Val) == 0x000130, "Member 'RGameFunctionLibrary_AddMutableFloatPostAdditive::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableFloatPreAdditive
// 0x0138 (0x0138 - 0x0000)
struct RGameFunctionLibrary_AddMutableFloatPreAdditive final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableFloatPreAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableFloatPreAdditive");
static_assert(sizeof(RGameFunctionLibrary_AddMutableFloatPreAdditive) == 0x000138, "Wrong size on RGameFunctionLibrary_AddMutableFloatPreAdditive");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPreAdditive, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableFloatPreAdditive::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPreAdditive, Key) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableFloatPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableFloatPreAdditive, Val) == 0x000130, "Member 'RGameFunctionLibrary_AddMutableFloatPreAdditive::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableIntegerCoefficient
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_AddMutableIntegerCoefficient final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableIntegerCoefficient) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableIntegerCoefficient");
static_assert(sizeof(RGameFunctionLibrary_AddMutableIntegerCoefficient) == 0x000130, "Wrong size on RGameFunctionLibrary_AddMutableIntegerCoefficient");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerCoefficient, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableIntegerCoefficient::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerCoefficient, Key) == 0x000120, "Member 'RGameFunctionLibrary_AddMutableIntegerCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerCoefficient, Val) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableIntegerCoefficient::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableIntegerPostAdditive
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_AddMutableIntegerPostAdditive final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val;                                               // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableIntegerPostAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableIntegerPostAdditive");
static_assert(sizeof(RGameFunctionLibrary_AddMutableIntegerPostAdditive) == 0x000130, "Wrong size on RGameFunctionLibrary_AddMutableIntegerPostAdditive");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPostAdditive, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableIntegerPostAdditive::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPostAdditive, Key) == 0x000120, "Member 'RGameFunctionLibrary_AddMutableIntegerPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPostAdditive, Val) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableIntegerPostAdditive::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AddMutableIntegerPreAdditive
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_AddMutableIntegerPreAdditive final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Val;                                               // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AddMutableIntegerPreAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AddMutableIntegerPreAdditive");
static_assert(sizeof(RGameFunctionLibrary_AddMutableIntegerPreAdditive) == 0x000130, "Wrong size on RGameFunctionLibrary_AddMutableIntegerPreAdditive");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPreAdditive, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_AddMutableIntegerPreAdditive::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPreAdditive, Key) == 0x000120, "Member 'RGameFunctionLibrary_AddMutableIntegerPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AddMutableIntegerPreAdditive, Val) == 0x000128, "Member 'RGameFunctionLibrary_AddMutableIntegerPreAdditive::Val' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AnalyzeFocusEvent
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_AnalyzeFocusEvent final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AnalyzeFocusEvent) == 0x000004, "Wrong alignment on RGameFunctionLibrary_AnalyzeFocusEvent");
static_assert(sizeof(RGameFunctionLibrary_AnalyzeFocusEvent) == 0x00000C, "Wrong size on RGameFunctionLibrary_AnalyzeFocusEvent");
static_assert(offsetof(RGameFunctionLibrary_AnalyzeFocusEvent, FocusEvent) == 0x000000, "Member 'RGameFunctionLibrary_AnalyzeFocusEvent::FocusEvent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AnalyzeFocusEvent, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_AnalyzeFocusEvent::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AnalyzeGeometry
// 0x0048 (0x0048 - 0x0000)
struct RGameFunctionLibrary_AnalyzeGeometry final
{
public:
	struct FGeometry                              Geometry;                                          // 0x0000(0x0038)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_AnalyzeGeometry) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AnalyzeGeometry");
static_assert(sizeof(RGameFunctionLibrary_AnalyzeGeometry) == 0x000048, "Wrong size on RGameFunctionLibrary_AnalyzeGeometry");
static_assert(offsetof(RGameFunctionLibrary_AnalyzeGeometry, Geometry) == 0x000000, "Member 'RGameFunctionLibrary_AnalyzeGeometry::Geometry' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AnalyzeGeometry, ReturnValue) == 0x000038, "Member 'RGameFunctionLibrary_AnalyzeGeometry::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ApplyLightningEffectDamage
// 0x0090 (0x0090 - 0x0000)
struct RGameFunctionLibrary_ApplyLightningEffectDamage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LightingBouncesLeft;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OriginActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         LightningNiagaraSystem;                            // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             LightningHitSound;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     AffectedActorClasses;                              // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningDamage;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloffPerBounce;                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BounceDelay;                                       // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0060(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRLightningDamageCombatEventData       LightningDamageCombatEventData;                    // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDamageClientPrediction;                           // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ApplyLightningEffectDamage) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ApplyLightningEffectDamage");
static_assert(sizeof(RGameFunctionLibrary_ApplyLightningEffectDamage) == 0x000090, "Wrong size on RGameFunctionLibrary_ApplyLightningEffectDamage");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, LightingBouncesLeft) == 0x000008, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::LightingBouncesLeft' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, OriginActor) == 0x000010, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::OriginActor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, DamageCauser) == 0x000018, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, InstigatedByController) == 0x000020, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::InstigatedByController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, IgnoreActors) == 0x000028, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, LightningNiagaraSystem) == 0x000038, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::LightningNiagaraSystem' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, LightningHitSound) == 0x000040, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::LightningHitSound' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, AffectedActorClasses) == 0x000048, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::AffectedActorClasses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, LightningDamage) == 0x000050, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::LightningDamage' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, DamageRadius) == 0x000054, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::DamageRadius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, DamageFalloffPerBounce) == 0x000058, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::DamageFalloffPerBounce' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, BounceDelay) == 0x00005C, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::BounceDelay' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, InstigatorScriptComponent) == 0x000060, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, LightningDamageCombatEventData) == 0x000068, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::LightningDamageCombatEventData' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, bDamageClientPrediction) == 0x000080, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::bDamageClientPrediction' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyLightningEffectDamage, ReturnValue) == 0x000088, "Member 'RGameFunctionLibrary_ApplyLightningEffectDamage::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ApplyRadialDamage
// 0x0078 (0x0078 - 0x0000)
struct RGameFunctionLibrary_ApplyRadialDamage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     AffectedActorClasses;                              // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRadius;                                      // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceForObstacles;                                // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageSources;                                     // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageClientPrediction;                           // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AvatarActor;                                       // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ApplyRadialDamage) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ApplyRadialDamage");
static_assert(sizeof(RGameFunctionLibrary_ApplyRadialDamage) == 0x000078, "Wrong size on RGameFunctionLibrary_ApplyRadialDamage");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_ApplyRadialDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, Origin) == 0x000008, "Member 'RGameFunctionLibrary_ApplyRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, DamageCauser) == 0x000020, "Member 'RGameFunctionLibrary_ApplyRadialDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, InstigatedByController) == 0x000028, "Member 'RGameFunctionLibrary_ApplyRadialDamage::InstigatedByController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, IgnoreActors) == 0x000030, "Member 'RGameFunctionLibrary_ApplyRadialDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, AffectedActorClasses) == 0x000040, "Member 'RGameFunctionLibrary_ApplyRadialDamage::AffectedActorClasses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, BaseDamage) == 0x000048, "Member 'RGameFunctionLibrary_ApplyRadialDamage::BaseDamage' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, DamageRadius) == 0x00004C, "Member 'RGameFunctionLibrary_ApplyRadialDamage::DamageRadius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, bTraceForObstacles) == 0x000050, "Member 'RGameFunctionLibrary_ApplyRadialDamage::bTraceForObstacles' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, DamageSources) == 0x000054, "Member 'RGameFunctionLibrary_ApplyRadialDamage::DamageSources' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, bDamageClientPrediction) == 0x000058, "Member 'RGameFunctionLibrary_ApplyRadialDamage::bDamageClientPrediction' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, AvatarActor) == 0x000060, "Member 'RGameFunctionLibrary_ApplyRadialDamage::AvatarActor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ApplyRadialDamage, ReturnValue) == 0x000068, "Member 'RGameFunctionLibrary_ApplyRadialDamage::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.AreObjectsInSameRoom
// 0x0050 (0x0050 - 0x0000)
struct RGameFunctionLibrary_AreObjectsInSameRoom final
{
public:
	const class AActor*                           FirstObject;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           SecondObject;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   LevelGenerationSettingsBox;                        // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_AreObjectsInSameRoom) == 0x000008, "Wrong alignment on RGameFunctionLibrary_AreObjectsInSameRoom");
static_assert(sizeof(RGameFunctionLibrary_AreObjectsInSameRoom) == 0x000050, "Wrong size on RGameFunctionLibrary_AreObjectsInSameRoom");
static_assert(offsetof(RGameFunctionLibrary_AreObjectsInSameRoom, FirstObject) == 0x000000, "Member 'RGameFunctionLibrary_AreObjectsInSameRoom::FirstObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AreObjectsInSameRoom, SecondObject) == 0x000008, "Member 'RGameFunctionLibrary_AreObjectsInSameRoom::SecondObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AreObjectsInSameRoom, LevelGenerationSettingsBox) == 0x000010, "Member 'RGameFunctionLibrary_AreObjectsInSameRoom::LevelGenerationSettingsBox' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_AreObjectsInSameRoom, ReturnValue) == 0x000048, "Member 'RGameFunctionLibrary_AreObjectsInSameRoom::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.Array_Random_Cached
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_Array_Random_Cached final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OutItem;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutIndex;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_Array_Random_Cached) == 0x000008, "Wrong alignment on RGameFunctionLibrary_Array_Random_Cached");
static_assert(sizeof(RGameFunctionLibrary_Array_Random_Cached) == 0x000018, "Wrong size on RGameFunctionLibrary_Array_Random_Cached");
static_assert(offsetof(RGameFunctionLibrary_Array_Random_Cached, TargetArray) == 0x000000, "Member 'RGameFunctionLibrary_Array_Random_Cached::TargetArray' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_Array_Random_Cached, OutItem) == 0x000010, "Member 'RGameFunctionLibrary_Array_Random_Cached::OutItem' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_Array_Random_Cached, OutIndex) == 0x000014, "Member 'RGameFunctionLibrary_Array_Random_Cached::OutIndex' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.CheckDamageSource
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_CheckDamageSource final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSource                                 DamageSource;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_CheckDamageSource) == 0x000004, "Wrong alignment on RGameFunctionLibrary_CheckDamageSource");
static_assert(sizeof(RGameFunctionLibrary_CheckDamageSource) == 0x000008, "Wrong size on RGameFunctionLibrary_CheckDamageSource");
static_assert(offsetof(RGameFunctionLibrary_CheckDamageSource, BitMask) == 0x000000, "Member 'RGameFunctionLibrary_CheckDamageSource::BitMask' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CheckDamageSource, DamageSource) == 0x000004, "Member 'RGameFunctionLibrary_CheckDamageSource::DamageSource' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CheckDamageSource, ReturnValue) == 0x000005, "Member 'RGameFunctionLibrary_CheckDamageSource::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.CombineRotatorWithEuler
// 0x0048 (0x0048 - 0x0000)
struct RGameFunctionLibrary_CombineRotatorWithEuler final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Euler;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_CombineRotatorWithEuler) == 0x000008, "Wrong alignment on RGameFunctionLibrary_CombineRotatorWithEuler");
static_assert(sizeof(RGameFunctionLibrary_CombineRotatorWithEuler) == 0x000048, "Wrong size on RGameFunctionLibrary_CombineRotatorWithEuler");
static_assert(offsetof(RGameFunctionLibrary_CombineRotatorWithEuler, Rotator) == 0x000000, "Member 'RGameFunctionLibrary_CombineRotatorWithEuler::Rotator' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CombineRotatorWithEuler, Euler) == 0x000018, "Member 'RGameFunctionLibrary_CombineRotatorWithEuler::Euler' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CombineRotatorWithEuler, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_CombineRotatorWithEuler::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ConvertFNameToFloat
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_ConvertFNameToFloat final
{
public:
	class FName                                   Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ConvertFNameToFloat) == 0x000004, "Wrong alignment on RGameFunctionLibrary_ConvertFNameToFloat");
static_assert(sizeof(RGameFunctionLibrary_ConvertFNameToFloat) == 0x00000C, "Wrong size on RGameFunctionLibrary_ConvertFNameToFloat");
static_assert(offsetof(RGameFunctionLibrary_ConvertFNameToFloat, Target) == 0x000000, "Member 'RGameFunctionLibrary_ConvertFNameToFloat::Target' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ConvertFNameToFloat, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_ConvertFNameToFloat::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.CreateBlueprintAsset
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_CreateBlueprintAsset final
{
public:
	class UClass*                                 Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PackagePath;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_CreateBlueprintAsset) == 0x000008, "Wrong alignment on RGameFunctionLibrary_CreateBlueprintAsset");
static_assert(sizeof(RGameFunctionLibrary_CreateBlueprintAsset) == 0x000030, "Wrong size on RGameFunctionLibrary_CreateBlueprintAsset");
static_assert(offsetof(RGameFunctionLibrary_CreateBlueprintAsset, Parent) == 0x000000, "Member 'RGameFunctionLibrary_CreateBlueprintAsset::Parent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CreateBlueprintAsset, Name_0) == 0x000008, "Member 'RGameFunctionLibrary_CreateBlueprintAsset::Name_0' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CreateBlueprintAsset, PackagePath) == 0x000018, "Member 'RGameFunctionLibrary_CreateBlueprintAsset::PackagePath' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_CreateBlueprintAsset, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_CreateBlueprintAsset::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.DamageSourceMaskHasFlag
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_DamageSourceMaskHasFlag final
{
public:
	int32                                         Mask;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlagsToCheck;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_DamageSourceMaskHasFlag) == 0x000004, "Wrong alignment on RGameFunctionLibrary_DamageSourceMaskHasFlag");
static_assert(sizeof(RGameFunctionLibrary_DamageSourceMaskHasFlag) == 0x00000C, "Wrong size on RGameFunctionLibrary_DamageSourceMaskHasFlag");
static_assert(offsetof(RGameFunctionLibrary_DamageSourceMaskHasFlag, Mask) == 0x000000, "Member 'RGameFunctionLibrary_DamageSourceMaskHasFlag::Mask' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_DamageSourceMaskHasFlag, FlagsToCheck) == 0x000004, "Member 'RGameFunctionLibrary_DamageSourceMaskHasFlag::FlagsToCheck' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_DamageSourceMaskHasFlag, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_DamageSourceMaskHasFlag::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.DumpMutableFloatToLog
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_DumpMutableFloatToLog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRMutableFloat                         MutableFloat;                                      // 0x0008(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_DumpMutableFloatToLog) == 0x000008, "Wrong alignment on RGameFunctionLibrary_DumpMutableFloatToLog");
static_assert(sizeof(RGameFunctionLibrary_DumpMutableFloatToLog) == 0x000130, "Wrong size on RGameFunctionLibrary_DumpMutableFloatToLog");
static_assert(offsetof(RGameFunctionLibrary_DumpMutableFloatToLog, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_DumpMutableFloatToLog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_DumpMutableFloatToLog, MutableFloat) == 0x000008, "Member 'RGameFunctionLibrary_DumpMutableFloatToLog::MutableFloat' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.FadeInWithoutRestart
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_FadeInWithoutRestart final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioFaderCurve                              FadeCurve;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_FadeInWithoutRestart) == 0x000008, "Wrong alignment on RGameFunctionLibrary_FadeInWithoutRestart");
static_assert(sizeof(RGameFunctionLibrary_FadeInWithoutRestart) == 0x000018, "Wrong size on RGameFunctionLibrary_FadeInWithoutRestart");
static_assert(offsetof(RGameFunctionLibrary_FadeInWithoutRestart, AudioComponent) == 0x000000, "Member 'RGameFunctionLibrary_FadeInWithoutRestart::AudioComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_FadeInWithoutRestart, FadeInDuration) == 0x000008, "Member 'RGameFunctionLibrary_FadeInWithoutRestart::FadeInDuration' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_FadeInWithoutRestart, FadeVolumeLevel) == 0x00000C, "Member 'RGameFunctionLibrary_FadeInWithoutRestart::FadeVolumeLevel' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_FadeInWithoutRestart, FadeCurve) == 0x000010, "Member 'RGameFunctionLibrary_FadeInWithoutRestart::FadeCurve' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.FilterForAliveAndVulnerableActorsFromActors
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors final
{
public:
	TArray<class AActor*>                         ActorsToFilter;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors) == 0x000008, "Wrong alignment on RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors");
static_assert(sizeof(RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors) == 0x000010, "Wrong size on RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors");
static_assert(offsetof(RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors, ActorsToFilter) == 0x000000, "Member 'RGameFunctionLibrary_FilterForAliveAndVulnerableActorsFromActors::ActorsToFilter' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.FindDefaultComponentByClass
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_FindDefaultComponentByClass final
{
public:
	TSubclassOf<class AActor>                     InActorClass;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            InComponentClass;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_FindDefaultComponentByClass) == 0x000008, "Wrong alignment on RGameFunctionLibrary_FindDefaultComponentByClass");
static_assert(sizeof(RGameFunctionLibrary_FindDefaultComponentByClass) == 0x000018, "Wrong size on RGameFunctionLibrary_FindDefaultComponentByClass");
static_assert(offsetof(RGameFunctionLibrary_FindDefaultComponentByClass, InActorClass) == 0x000000, "Member 'RGameFunctionLibrary_FindDefaultComponentByClass::InActorClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_FindDefaultComponentByClass, InComponentClass) == 0x000008, "Member 'RGameFunctionLibrary_FindDefaultComponentByClass::InComponentClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_FindDefaultComponentByClass, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_FindDefaultComponentByClass::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GamepadLostFocusByMouseEvent
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GamepadLostFocusByMouseEvent final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFocusEvent                            FocusEvent;                                        // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GamepadLostFocusByMouseEvent) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GamepadLostFocusByMouseEvent");
static_assert(sizeof(RGameFunctionLibrary_GamepadLostFocusByMouseEvent) == 0x000018, "Wrong size on RGameFunctionLibrary_GamepadLostFocusByMouseEvent");
static_assert(offsetof(RGameFunctionLibrary_GamepadLostFocusByMouseEvent, PlayerController) == 0x000000, "Member 'RGameFunctionLibrary_GamepadLostFocusByMouseEvent::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GamepadLostFocusByMouseEvent, FocusEvent) == 0x000008, "Member 'RGameFunctionLibrary_GamepadLostFocusByMouseEvent::FocusEvent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GamepadLostFocusByMouseEvent, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GamepadLostFocusByMouseEvent::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActivatableAbilityKeybindName
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetActivatableAbilityKeybindName final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetActivatableAbilityKeybindName) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActivatableAbilityKeybindName");
static_assert(sizeof(RGameFunctionLibrary_GetActivatableAbilityKeybindName) == 0x000018, "Wrong size on RGameFunctionLibrary_GetActivatableAbilityKeybindName");
static_assert(offsetof(RGameFunctionLibrary_GetActivatableAbilityKeybindName, AbilityIndex) == 0x000000, "Member 'RGameFunctionLibrary_GetActivatableAbilityKeybindName::AbilityIndex' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActivatableAbilityKeybindName, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetActivatableAbilityKeybindName::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActorGameplayTags
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_GetActorGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetActorGameplayTags) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActorGameplayTags");
static_assert(sizeof(RGameFunctionLibrary_GetActorGameplayTags) == 0x000028, "Wrong size on RGameFunctionLibrary_GetActorGameplayTags");
static_assert(offsetof(RGameFunctionLibrary_GetActorGameplayTags, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetActorGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorGameplayTags, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetActorGameplayTags::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActorsOfClassInsideRadius
// 0x0040 (0x0040 - 0x0000)
struct RGameFunctionLibrary_GetActorsOfClassInsideRadius final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetActorsOfClassInsideRadius) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActorsOfClassInsideRadius");
static_assert(sizeof(RGameFunctionLibrary_GetActorsOfClassInsideRadius) == 0x000040, "Wrong size on RGameFunctionLibrary_GetActorsOfClassInsideRadius");
static_assert(offsetof(RGameFunctionLibrary_GetActorsOfClassInsideRadius, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetActorsOfClassInsideRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorsOfClassInsideRadius, ActorClass) == 0x000008, "Member 'RGameFunctionLibrary_GetActorsOfClassInsideRadius::ActorClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorsOfClassInsideRadius, Location) == 0x000010, "Member 'RGameFunctionLibrary_GetActorsOfClassInsideRadius::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorsOfClassInsideRadius, Radius) == 0x000028, "Member 'RGameFunctionLibrary_GetActorsOfClassInsideRadius::Radius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorsOfClassInsideRadius, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_GetActorsOfClassInsideRadius::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActorStatusEffect
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_GetActorStatusEffect final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StatusEffectClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URStatusEffectGScript*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetActorStatusEffect) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActorStatusEffect");
static_assert(sizeof(RGameFunctionLibrary_GetActorStatusEffect) == 0x000038, "Wrong size on RGameFunctionLibrary_GetActorStatusEffect");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffect, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetActorStatusEffect::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffect, StatusEffectClass) == 0x000008, "Member 'RGameFunctionLibrary_GetActorStatusEffect::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffect, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_GetActorStatusEffect::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActorStatusEffectAmount
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_GetActorStatusEffectAmount final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StatusEffectClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetActorStatusEffectAmount) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActorStatusEffectAmount");
static_assert(sizeof(RGameFunctionLibrary_GetActorStatusEffectAmount) == 0x000038, "Wrong size on RGameFunctionLibrary_GetActorStatusEffectAmount");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectAmount, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetActorStatusEffectAmount::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectAmount, StatusEffectClass) == 0x000008, "Member 'RGameFunctionLibrary_GetActorStatusEffectAmount::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectAmount, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_GetActorStatusEffectAmount::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetActorStatusEffectFromInstigator
// 0x0040 (0x0040 - 0x0000)
struct RGameFunctionLibrary_GetActorStatusEffectFromInstigator final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   StatusEffectClass;                                 // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URStatusEffectGScript*                  ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetActorStatusEffectFromInstigator");
static_assert(sizeof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator) == 0x000040, "Wrong size on RGameFunctionLibrary_GetActorStatusEffectFromInstigator");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetActorStatusEffectFromInstigator::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator, StatusEffectClass) == 0x000008, "Member 'RGameFunctionLibrary_GetActorStatusEffectFromInstigator::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator, InstigatorScriptComponent) == 0x000030, "Member 'RGameFunctionLibrary_GetActorStatusEffectFromInstigator::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetActorStatusEffectFromInstigator, ReturnValue) == 0x000038, "Member 'RGameFunctionLibrary_GetActorStatusEffectFromInstigator::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAliveActorsFromActors
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetAliveActorsFromActors final
{
public:
	TArray<class AActor*>                         ActorsToFilter;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAliveActorsFromActors) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAliveActorsFromActors");
static_assert(sizeof(RGameFunctionLibrary_GetAliveActorsFromActors) == 0x000020, "Wrong size on RGameFunctionLibrary_GetAliveActorsFromActors");
static_assert(offsetof(RGameFunctionLibrary_GetAliveActorsFromActors, ActorsToFilter) == 0x000000, "Member 'RGameFunctionLibrary_GetAliveActorsFromActors::ActorsToFilter' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAliveActorsFromActors, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetAliveActorsFromActors::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAliveAndVulnerableActorsFromActors
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors final
{
public:
	TArray<class AActor*>                         ActorsToFilter;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors");
static_assert(sizeof(RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors) == 0x000020, "Wrong size on RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors");
static_assert(offsetof(RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors, ActorsToFilter) == 0x000000, "Member 'RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors::ActorsToFilter' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetAliveAndVulnerableActorsFromActors::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllAliveEnemyPawnsInLevel
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARNPCPawnBase*>                  IgnoredEnemies;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeBosses;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDummys;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGlobalTargets;                             // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGeometryCollections;                       // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel");
static_assert(sizeof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel) == 0x000030, "Wrong size on RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, IgnoredEnemies) == 0x000008, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::IgnoredEnemies' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, bExcludeBosses) == 0x000018, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::bExcludeBosses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, bIncludeDummys) == 0x000019, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::bIncludeDummys' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, bIncludeGlobalTargets) == 0x00001A, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::bIncludeGlobalTargets' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, bIncludeGeometryCollections) == 0x00001B, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::bIncludeGeometryCollections' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevel::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation
// 0x0050 (0x0050 - 0x0000)
struct RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDescendingSort;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARNPCPawnBase*>                  IgnoredEnemies;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeBosses;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDummys;                                    // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGlobalTargets;                             // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGeometryCollections;                       // 0x003B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation");
static_assert(sizeof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation) == 0x000050, "Wrong size on RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, Location) == 0x000008, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, bDescendingSort) == 0x000020, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::bDescendingSort' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, IgnoredEnemies) == 0x000028, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::IgnoredEnemies' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, bExcludeBosses) == 0x000038, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::bExcludeBosses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, bIncludeDummys) == 0x000039, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::bIncludeDummys' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, bIncludeGlobalTargets) == 0x00003A, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::bIncludeGlobalTargets' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, bIncludeGeometryCollections) == 0x00003B, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::bIncludeGeometryCollections' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation, ReturnValue) == 0x000040, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInLevelSortedByDistanceFromLocation::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllAliveEnemyPawnsInRadius
// 0x0048 (0x0048 - 0x0000)
struct RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARNPCPawnBase*>                  IgnoredEnemies;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeBosses;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDummys;                                    // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGlobalTargets;                             // 0x0036(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGeometryCollections;                       // 0x0037(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius");
static_assert(sizeof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius) == 0x000048, "Wrong size on RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, IgnoredEnemies) == 0x000008, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::IgnoredEnemies' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, Location) == 0x000018, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, Radius) == 0x000030, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, bExcludeBosses) == 0x000034, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::bExcludeBosses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, bIncludeDummys) == 0x000035, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::bIncludeDummys' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, bIncludeGlobalTargets) == 0x000036, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::bIncludeGlobalTargets' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, bIncludeGeometryCollections) == 0x000037, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::bIncludeGeometryCollections' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius, ReturnValue) == 0x000038, "Member 'RGameFunctionLibrary_GetAllAliveEnemyPawnsInRadius::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllHitsInRadius
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_GetAllHitsInRadius final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OriginActor;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     AffectedActorClass;                                // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceForObstacles;                                // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllHitsInRadius) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllHitsInRadius");
static_assert(sizeof(RGameFunctionLibrary_GetAllHitsInRadius) == 0x000058, "Wrong size on RGameFunctionLibrary_GetAllHitsInRadius");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, Origin) == 0x000008, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::Origin' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, OriginActor) == 0x000020, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::OriginActor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, IgnoreActors) == 0x000028, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::IgnoreActors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, AffectedActorClass) == 0x000038, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::AffectedActorClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, Radius) == 0x000040, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, bTraceForObstacles) == 0x000044, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::bTraceForObstacles' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllHitsInRadius, ReturnValue) == 0x000048, "Member 'RGameFunctionLibrary_GetAllHitsInRadius::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllKeywords
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetAllKeywords final
{
public:
	bool                                          bAllowVariants;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllKeywords) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllKeywords");
static_assert(sizeof(RGameFunctionLibrary_GetAllKeywords) == 0x000018, "Wrong size on RGameFunctionLibrary_GetAllKeywords");
static_assert(offsetof(RGameFunctionLibrary_GetAllKeywords, bAllowVariants) == 0x000000, "Member 'RGameFunctionLibrary_GetAllKeywords::bAllowVariants' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllKeywords, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetAllKeywords::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllPawnsInRadius
// 0x0050 (0x0050 - 0x0000)
struct RGameFunctionLibrary_GetAllPawnsInRadius final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           OriginActor;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceForObstacles;                                // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARPawnBase*>                     ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllPawnsInRadius) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllPawnsInRadius");
static_assert(sizeof(RGameFunctionLibrary_GetAllPawnsInRadius) == 0x000050, "Wrong size on RGameFunctionLibrary_GetAllPawnsInRadius");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, Origin) == 0x000008, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::Origin' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, OriginActor) == 0x000020, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::OriginActor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, IgnoreActors) == 0x000028, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::IgnoreActors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, Radius) == 0x000038, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::Radius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, bTraceForObstacles) == 0x00003C, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::bTraceForObstacles' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPawnsInRadius, ReturnValue) == 0x000040, "Member 'RGameFunctionLibrary_GetAllPawnsInRadius::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetAllPlayerPawnsInLevel
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetAllPlayerPawnsInLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARPlayerPawn*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetAllPlayerPawnsInLevel) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetAllPlayerPawnsInLevel");
static_assert(sizeof(RGameFunctionLibrary_GetAllPlayerPawnsInLevel) == 0x000018, "Wrong size on RGameFunctionLibrary_GetAllPlayerPawnsInLevel");
static_assert(offsetof(RGameFunctionLibrary_GetAllPlayerPawnsInLevel, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetAllPlayerPawnsInLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetAllPlayerPawnsInLevel, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetAllPlayerPawnsInLevel::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetChanceBasedOnGold
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetChanceBasedOnGold final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldEquivalentToMaxChance;                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetChanceBasedOnGold) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetChanceBasedOnGold");
static_assert(sizeof(RGameFunctionLibrary_GetChanceBasedOnGold) == 0x000010, "Wrong size on RGameFunctionLibrary_GetChanceBasedOnGold");
static_assert(offsetof(RGameFunctionLibrary_GetChanceBasedOnGold, Controller) == 0x000000, "Member 'RGameFunctionLibrary_GetChanceBasedOnGold::Controller' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetChanceBasedOnGold, GoldEquivalentToMaxChance) == 0x000008, "Member 'RGameFunctionLibrary_GetChanceBasedOnGold::GoldEquivalentToMaxChance' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetChanceBasedOnGold, ReturnValue) == 0x00000C, "Member 'RGameFunctionLibrary_GetChanceBasedOnGold::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetChargeValueFromPlayers
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetChargeValueFromPlayers final
{
public:
	TArray<class AActor*>                         PlayerActors;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetChargeValueFromPlayers) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetChargeValueFromPlayers");
static_assert(sizeof(RGameFunctionLibrary_GetChargeValueFromPlayers) == 0x000018, "Wrong size on RGameFunctionLibrary_GetChargeValueFromPlayers");
static_assert(offsetof(RGameFunctionLibrary_GetChargeValueFromPlayers, PlayerActors) == 0x000000, "Member 'RGameFunctionLibrary_GetChargeValueFromPlayers::PlayerActors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetChargeValueFromPlayers, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetChargeValueFromPlayers::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetClosestActorToLocation
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_GetClosestActorToLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         Actors;                                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetClosestActorToLocation) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetClosestActorToLocation");
static_assert(sizeof(RGameFunctionLibrary_GetClosestActorToLocation) == 0x000038, "Wrong size on RGameFunctionLibrary_GetClosestActorToLocation");
static_assert(offsetof(RGameFunctionLibrary_GetClosestActorToLocation, Location) == 0x000000, "Member 'RGameFunctionLibrary_GetClosestActorToLocation::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestActorToLocation, Actors) == 0x000018, "Member 'RGameFunctionLibrary_GetClosestActorToLocation::Actors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestActorToLocation, OutDistance) == 0x000028, "Member 'RGameFunctionLibrary_GetClosestActorToLocation::OutDistance' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestActorToLocation, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_GetClosestActorToLocation::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetClosestPointOnSkeletalMeshToWorldLocation
// 0x0048 (0x0048 - 0x0000)
struct RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBone;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireVisibleSkelMesh;                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnActorBoundsIfNoSkelMesh;                    // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation");
static_assert(sizeof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation) == 0x000048, "Wrong size on RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, Target) == 0x000000, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::Target' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, Location) == 0x000008, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, HitBone) == 0x000020, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::HitBone' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, bRequireVisibleSkelMesh) == 0x000028, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::bRequireVisibleSkelMesh' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, bReturnActorBoundsIfNoSkelMesh) == 0x000029, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::bReturnActorBoundsIfNoSkelMesh' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation, ReturnValue) == 0x000030, "Member 'RGameFunctionLibrary_GetClosestPointOnSkeletalMeshToWorldLocation::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetCoefficientsValueByKey
// 0x0138 (0x0138 - 0x0000)
struct RGameFunctionLibrary_GetCoefficientsValueByKey final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0130(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetCoefficientsValueByKey) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetCoefficientsValueByKey");
static_assert(sizeof(RGameFunctionLibrary_GetCoefficientsValueByKey) == 0x000138, "Wrong size on RGameFunctionLibrary_GetCoefficientsValueByKey");
static_assert(offsetof(RGameFunctionLibrary_GetCoefficientsValueByKey, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_GetCoefficientsValueByKey::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCoefficientsValueByKey, Key) == 0x000128, "Member 'RGameFunctionLibrary_GetCoefficientsValueByKey::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCoefficientsValueByKey, ReturnValue) == 0x000130, "Member 'RGameFunctionLibrary_GetCoefficientsValueByKey::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetCommonInputKeyBrush
// 0x00D0 (0x00D0 - 0x0000)
struct RGameFunctionLibrary_GetCommonInputKeyBrush final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0020(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetCommonInputKeyBrush) == 0x000010, "Wrong alignment on RGameFunctionLibrary_GetCommonInputKeyBrush");
static_assert(sizeof(RGameFunctionLibrary_GetCommonInputKeyBrush) == 0x0000D0, "Wrong size on RGameFunctionLibrary_GetCommonInputKeyBrush");
static_assert(offsetof(RGameFunctionLibrary_GetCommonInputKeyBrush, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetCommonInputKeyBrush::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCommonInputKeyBrush, Key) == 0x000008, "Member 'RGameFunctionLibrary_GetCommonInputKeyBrush::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCommonInputKeyBrush, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_GetCommonInputKeyBrush::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetCurrentLookAtTargetForPlayerController
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARGamePlayerController*                 PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0020(0x0100)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TraceRadiusSize;                                   // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController");
static_assert(sizeof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController) == 0x000128, "Wrong size on RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, PlayerController) == 0x000008, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, ObjectTypes) == 0x000010, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::ObjectTypes' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, OutHit) == 0x000020, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::OutHit' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, TraceRadiusSize) == 0x000120, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::TraceRadiusSize' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController, TraceLength) == 0x000124, "Member 'RGameFunctionLibrary_GetCurrentLookAtTargetForPlayerController::TraceLength' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetDashedLinePoints
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_GetDashedLinePoints final
{
public:
	struct FVector2D                              PointA;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointB;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashLength;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetDashedLinePoints) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetDashedLinePoints");
static_assert(sizeof(RGameFunctionLibrary_GetDashedLinePoints) == 0x000038, "Wrong size on RGameFunctionLibrary_GetDashedLinePoints");
static_assert(offsetof(RGameFunctionLibrary_GetDashedLinePoints, PointA) == 0x000000, "Member 'RGameFunctionLibrary_GetDashedLinePoints::PointA' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDashedLinePoints, PointB) == 0x000010, "Member 'RGameFunctionLibrary_GetDashedLinePoints::PointB' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDashedLinePoints, DashLength) == 0x000020, "Member 'RGameFunctionLibrary_GetDashedLinePoints::DashLength' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDashedLinePoints, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_GetDashedLinePoints::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetDifficultyValueByArrayIndex
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetDifficultyValueByArrayIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URDifficultyPrimaryAsset*               RDifficultyPrimaryAsset;                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tier;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetDifficultyValueByArrayIndex");
static_assert(sizeof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex) == 0x000020, "Wrong size on RGameFunctionLibrary_GetDifficultyValueByArrayIndex");
static_assert(offsetof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetDifficultyValueByArrayIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex, RDifficultyPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_GetDifficultyValueByArrayIndex::RDifficultyPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex, Tier) == 0x000010, "Member 'RGameFunctionLibrary_GetDifficultyValueByArrayIndex::Tier' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex, ArrayIndex) == 0x000014, "Member 'RGameFunctionLibrary_GetDifficultyValueByArrayIndex::ArrayIndex' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetDifficultyValueByArrayIndex, ReturnValue) == 0x000018, "Member 'RGameFunctionLibrary_GetDifficultyValueByArrayIndex::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetDirectDamageBitmask
// 0x0004 (0x0004 - 0x0000)
struct RGameFunctionLibrary_GetDirectDamageBitmask final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetDirectDamageBitmask) == 0x000004, "Wrong alignment on RGameFunctionLibrary_GetDirectDamageBitmask");
static_assert(sizeof(RGameFunctionLibrary_GetDirectDamageBitmask) == 0x000004, "Wrong size on RGameFunctionLibrary_GetDirectDamageBitmask");
static_assert(offsetof(RGameFunctionLibrary_GetDirectDamageBitmask, ReturnValue) == 0x000000, "Member 'RGameFunctionLibrary_GetDirectDamageBitmask::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetEmoteDataTableRowByTag
// 0x0120 (0x0120 - 0x0000)
struct RGameFunctionLibrary_GetEmoteDataTableRowByTag final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEmoteDataTableRow                     ReturnValue;                                       // 0x0010(0x0110)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetEmoteDataTableRowByTag) == 0x000010, "Wrong alignment on RGameFunctionLibrary_GetEmoteDataTableRowByTag");
static_assert(sizeof(RGameFunctionLibrary_GetEmoteDataTableRowByTag) == 0x000120, "Wrong size on RGameFunctionLibrary_GetEmoteDataTableRowByTag");
static_assert(offsetof(RGameFunctionLibrary_GetEmoteDataTableRowByTag, Table) == 0x000000, "Member 'RGameFunctionLibrary_GetEmoteDataTableRowByTag::Table' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetEmoteDataTableRowByTag, Tag) == 0x000008, "Member 'RGameFunctionLibrary_GetEmoteDataTableRowByTag::Tag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetEmoteDataTableRowByTag, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetEmoteDataTableRowByTag::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetEnemyInfoById
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_GetEnemyInfoById final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnemyId;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FREnemyTableRow                        ReturnValue;                                       // 0x0010(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetEnemyInfoById) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetEnemyInfoById");
static_assert(sizeof(RGameFunctionLibrary_GetEnemyInfoById) == 0x000058, "Wrong size on RGameFunctionLibrary_GetEnemyInfoById");
static_assert(offsetof(RGameFunctionLibrary_GetEnemyInfoById, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetEnemyInfoById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetEnemyInfoById, EnemyId) == 0x000008, "Member 'RGameFunctionLibrary_GetEnemyInfoById::EnemyId' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetEnemyInfoById, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetEnemyInfoById::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFirstLocalGamePlayerController
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetFirstLocalGamePlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARGamePlayerController*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetFirstLocalGamePlayerController) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetFirstLocalGamePlayerController");
static_assert(sizeof(RGameFunctionLibrary_GetFirstLocalGamePlayerController) == 0x000010, "Wrong size on RGameFunctionLibrary_GetFirstLocalGamePlayerController");
static_assert(offsetof(RGameFunctionLibrary_GetFirstLocalGamePlayerController, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetFirstLocalGamePlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFirstLocalGamePlayerController, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetFirstLocalGamePlayerController::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFloatingTextTypeFromDamageBitMask
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask final
{
public:
	int32                                         Mask;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERFloatingTextType                            ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask) == 0x000004, "Wrong alignment on RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask");
static_assert(sizeof(RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask) == 0x000008, "Wrong size on RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask");
static_assert(offsetof(RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask, Mask) == 0x000000, "Member 'RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask::Mask' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask, ReturnValue) == 0x000004, "Member 'RGameFunctionLibrary_GetFloatingTextTypeFromDamageBitMask::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFName
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetFName final
{
public:
	const class UObject*                          Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetFName) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetFName");
static_assert(sizeof(RGameFunctionLibrary_GetFName) == 0x000010, "Wrong size on RGameFunctionLibrary_GetFName");
static_assert(offsetof(RGameFunctionLibrary_GetFName, Target) == 0x000000, "Member 'RGameFunctionLibrary_GetFName::Target' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFName, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetFName::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFocusCause
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetFocusCause final
{
public:
	struct FFocusEvent                            FocusEvent;                                        // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetFocusCause) == 0x000004, "Wrong alignment on RGameFunctionLibrary_GetFocusCause");
static_assert(sizeof(RGameFunctionLibrary_GetFocusCause) == 0x000010, "Wrong size on RGameFunctionLibrary_GetFocusCause");
static_assert(offsetof(RGameFunctionLibrary_GetFocusCause, FocusEvent) == 0x000000, "Member 'RGameFunctionLibrary_GetFocusCause::FocusEvent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFocusCause, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetFocusCause::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFromSoftObjectPtr
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_GetFromSoftObjectPtr final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObjectPtr;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetFromSoftObjectPtr) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetFromSoftObjectPtr");
static_assert(sizeof(RGameFunctionLibrary_GetFromSoftObjectPtr) == 0x000030, "Wrong size on RGameFunctionLibrary_GetFromSoftObjectPtr");
static_assert(offsetof(RGameFunctionLibrary_GetFromSoftObjectPtr, SoftObjectPtr) == 0x000000, "Member 'RGameFunctionLibrary_GetFromSoftObjectPtr::SoftObjectPtr' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFromSoftObjectPtr, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_GetFromSoftObjectPtr::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetFXFromSurfaceTable
// 0x0068 (0x0068 - 0x0000)
struct RGameFunctionLibrary_GetFXFromSurfaceTable final
{
public:
	const class UDataTable*                       SurfaceFXTable;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RowFound;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSurfaceTypeFX                         ReturnValue;                                       // 0x0010(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetFXFromSurfaceTable) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetFXFromSurfaceTable");
static_assert(sizeof(RGameFunctionLibrary_GetFXFromSurfaceTable) == 0x000068, "Wrong size on RGameFunctionLibrary_GetFXFromSurfaceTable");
static_assert(offsetof(RGameFunctionLibrary_GetFXFromSurfaceTable, SurfaceFXTable) == 0x000000, "Member 'RGameFunctionLibrary_GetFXFromSurfaceTable::SurfaceFXTable' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFXFromSurfaceTable, SurfaceType) == 0x000008, "Member 'RGameFunctionLibrary_GetFXFromSurfaceTable::SurfaceType' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFXFromSurfaceTable, RowFound) == 0x000009, "Member 'RGameFunctionLibrary_GetFXFromSurfaceTable::RowFound' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetFXFromSurfaceTable, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetFXFromSurfaceTable::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetGlobalScriptComponent
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetGlobalScriptComponent final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetGlobalScriptComponent) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetGlobalScriptComponent");
static_assert(sizeof(RGameFunctionLibrary_GetGlobalScriptComponent) == 0x000010, "Wrong size on RGameFunctionLibrary_GetGlobalScriptComponent");
static_assert(offsetof(RGameFunctionLibrary_GetGlobalScriptComponent, WorldContext) == 0x000000, "Member 'RGameFunctionLibrary_GetGlobalScriptComponent::WorldContext' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetGlobalScriptComponent, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetGlobalScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetGScriptCategoryFromActor
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetGScriptCategoryFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetGScriptCategoryFromActor) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetGScriptCategoryFromActor");
static_assert(sizeof(RGameFunctionLibrary_GetGScriptCategoryFromActor) == 0x000010, "Wrong size on RGameFunctionLibrary_GetGScriptCategoryFromActor");
static_assert(offsetof(RGameFunctionLibrary_GetGScriptCategoryFromActor, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetGScriptCategoryFromActor::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetGScriptCategoryFromActor, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetGScriptCategoryFromActor::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetGScriptComponentFromActor
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetGScriptComponentFromActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetGScriptComponentFromActor) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetGScriptComponentFromActor");
static_assert(sizeof(RGameFunctionLibrary_GetGScriptComponentFromActor) == 0x000010, "Wrong size on RGameFunctionLibrary_GetGScriptComponentFromActor");
static_assert(offsetof(RGameFunctionLibrary_GetGScriptComponentFromActor, Actor) == 0x000000, "Member 'RGameFunctionLibrary_GetGScriptComponentFromActor::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetGScriptComponentFromActor, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetGScriptComponentFromActor::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetKeyboardLayoutInfo
// 0x00D8 (0x00D8 - 0x0000)
struct RGameFunctionLibrary_GetKeyboardLayoutInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRKeyboardLayoutRow                    ReturnValue;                                       // 0x0008(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetKeyboardLayoutInfo) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetKeyboardLayoutInfo");
static_assert(sizeof(RGameFunctionLibrary_GetKeyboardLayoutInfo) == 0x0000D8, "Wrong size on RGameFunctionLibrary_GetKeyboardLayoutInfo");
static_assert(offsetof(RGameFunctionLibrary_GetKeyboardLayoutInfo, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetKeyboardLayoutInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetKeyboardLayoutInfo, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetKeyboardLayoutInfo::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetKeywordInfo
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetKeywordInfo final
{
public:
	class FString                                 Keyword;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetKeywordInfo) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetKeywordInfo");
static_assert(sizeof(RGameFunctionLibrary_GetKeywordInfo) == 0x000020, "Wrong size on RGameFunctionLibrary_GetKeywordInfo");
static_assert(offsetof(RGameFunctionLibrary_GetKeywordInfo, Keyword) == 0x000000, "Member 'RGameFunctionLibrary_GetKeywordInfo::Keyword' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetKeywordInfo, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetKeywordInfo::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetKeywordsInfoText
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_GetKeywordsInfoText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowKeywordVariants;                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetKeywordsInfoText) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetKeywordsInfoText");
static_assert(sizeof(RGameFunctionLibrary_GetKeywordsInfoText) == 0x000028, "Wrong size on RGameFunctionLibrary_GetKeywordsInfoText");
static_assert(offsetof(RGameFunctionLibrary_GetKeywordsInfoText, InText) == 0x000000, "Member 'RGameFunctionLibrary_GetKeywordsInfoText::InText' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetKeywordsInfoText, bAllowKeywordVariants) == 0x000010, "Member 'RGameFunctionLibrary_GetKeywordsInfoText::bAllowKeywordVariants' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetKeywordsInfoText, ReturnValue) == 0x000018, "Member 'RGameFunctionLibrary_GetKeywordsInfoText::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetLightSettingsDataTableRowByTag
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_GetLightSettingsDataTableRowByTag final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightSettingsRow                      ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetLightSettingsDataTableRowByTag) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetLightSettingsDataTableRowByTag");
static_assert(sizeof(RGameFunctionLibrary_GetLightSettingsDataTableRowByTag) == 0x000030, "Wrong size on RGameFunctionLibrary_GetLightSettingsDataTableRowByTag");
static_assert(offsetof(RGameFunctionLibrary_GetLightSettingsDataTableRowByTag, Table) == 0x000000, "Member 'RGameFunctionLibrary_GetLightSettingsDataTableRowByTag::Table' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetLightSettingsDataTableRowByTag, Tag) == 0x000008, "Member 'RGameFunctionLibrary_GetLightSettingsDataTableRowByTag::Tag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetLightSettingsDataTableRowByTag, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetLightSettingsDataTableRowByTag::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutableFloatBaseValue
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_GetMutableFloatBaseValue final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutableFloatBaseValue) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutableFloatBaseValue");
static_assert(sizeof(RGameFunctionLibrary_GetMutableFloatBaseValue) == 0x000130, "Wrong size on RGameFunctionLibrary_GetMutableFloatBaseValue");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatBaseValue, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_GetMutableFloatBaseValue::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatBaseValue, ReturnValue) == 0x000128, "Member 'RGameFunctionLibrary_GetMutableFloatBaseValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutableFloatCurrentValue
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_GetMutableFloatCurrentValue final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutableFloatCurrentValue) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutableFloatCurrentValue");
static_assert(sizeof(RGameFunctionLibrary_GetMutableFloatCurrentValue) == 0x000130, "Wrong size on RGameFunctionLibrary_GetMutableFloatCurrentValue");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatCurrentValue, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_GetMutableFloatCurrentValue::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatCurrentValue, ReturnValue) == 0x000128, "Member 'RGameFunctionLibrary_GetMutableFloatCurrentValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutableFloatValue
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_GetMutableFloatValue final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutableFloatValue) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutableFloatValue");
static_assert(sizeof(RGameFunctionLibrary_GetMutableFloatValue) == 0x000130, "Wrong size on RGameFunctionLibrary_GetMutableFloatValue");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatValue, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_GetMutableFloatValue::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutableFloatValue, OutValue) == 0x000128, "Member 'RGameFunctionLibrary_GetMutableFloatValue::OutValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutableIntegerBaseValue
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_GetMutableIntegerBaseValue final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutableIntegerBaseValue) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutableIntegerBaseValue");
static_assert(sizeof(RGameFunctionLibrary_GetMutableIntegerBaseValue) == 0x000128, "Wrong size on RGameFunctionLibrary_GetMutableIntegerBaseValue");
static_assert(offsetof(RGameFunctionLibrary_GetMutableIntegerBaseValue, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_GetMutableIntegerBaseValue::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutableIntegerBaseValue, ReturnValue) == 0x000120, "Member 'RGameFunctionLibrary_GetMutableIntegerBaseValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutableIntegerCurrentValue
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_GetMutableIntegerCurrentValue final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0120(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutableIntegerCurrentValue) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutableIntegerCurrentValue");
static_assert(sizeof(RGameFunctionLibrary_GetMutableIntegerCurrentValue) == 0x000128, "Wrong size on RGameFunctionLibrary_GetMutableIntegerCurrentValue");
static_assert(offsetof(RGameFunctionLibrary_GetMutableIntegerCurrentValue, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_GetMutableIntegerCurrentValue::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutableIntegerCurrentValue, ReturnValue) == 0x000120, "Member 'RGameFunctionLibrary_GetMutableIntegerCurrentValue::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutatorValueByArrayIndex
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetMutatorValueByArrayIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetMutatorValueByArrayIndex) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutatorValueByArrayIndex");
static_assert(sizeof(RGameFunctionLibrary_GetMutatorValueByArrayIndex) == 0x000020, "Wrong size on RGameFunctionLibrary_GetMutatorValueByArrayIndex");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByArrayIndex, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetMutatorValueByArrayIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByArrayIndex, RMutatorPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_GetMutatorValueByArrayIndex::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByArrayIndex, Rank) == 0x000010, "Member 'RGameFunctionLibrary_GetMutatorValueByArrayIndex::Rank' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByArrayIndex, ArrayIndex) == 0x000014, "Member 'RGameFunctionLibrary_GetMutatorValueByArrayIndex::ArrayIndex' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByArrayIndex, ReturnValue) == 0x000018, "Member 'RGameFunctionLibrary_GetMutatorValueByArrayIndex::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutatorValueByVariableName
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_GetMutatorValueByVariableName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URMutatorPrimaryAsset*            RMutatorPrimaryAsset;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetMutatorValueByVariableName) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutatorValueByVariableName");
static_assert(sizeof(RGameFunctionLibrary_GetMutatorValueByVariableName) == 0x000028, "Wrong size on RGameFunctionLibrary_GetMutatorValueByVariableName");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByVariableName, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetMutatorValueByVariableName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByVariableName, RMutatorPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_GetMutatorValueByVariableName::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByVariableName, VariableName) == 0x000010, "Member 'RGameFunctionLibrary_GetMutatorValueByVariableName::VariableName' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByVariableName, Rank) == 0x000020, "Member 'RGameFunctionLibrary_GetMutatorValueByVariableName::Rank' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueByVariableName, ReturnValue) == 0x000024, "Member 'RGameFunctionLibrary_GetMutatorValueByVariableName::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutatorValueFromActorInfoInstigatorScriptComponent
// 0x0040 (0x0040 - 0x0000)
struct RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent final
{
public:
	struct FGScriptActorInfo                      GScriptActorInfo;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorDescriptionVariableArrayIndex;              // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent");
static_assert(sizeof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent) == 0x000040, "Wrong size on RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent, GScriptActorInfo) == 0x000000, "Member 'RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent::GScriptActorInfo' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent, RMutatorPrimaryAsset) == 0x000030, "Member 'RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent, MutatorDescriptionVariableArrayIndex) == 0x000038, "Member 'RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent::MutatorDescriptionVariableArrayIndex' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent, ReturnValue) == 0x00003C, "Member 'RGameFunctionLibrary_GetMutatorValueFromActorInfoInstigatorScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutatorVariables
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetMutatorVariables final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorDescriptionVariables>   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetMutatorVariables) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutatorVariables");
static_assert(sizeof(RGameFunctionLibrary_GetMutatorVariables) == 0x000020, "Wrong size on RGameFunctionLibrary_GetMutatorVariables");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariables, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetMutatorVariables::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariables, RMutatorPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_GetMutatorVariables::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariables, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetMutatorVariables::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetMutatorVariablesByVariableName
// 0x0068 (0x0068 - 0x0000)
struct RGameFunctionLibrary_GetMutatorVariablesByVariableName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutatorDescriptionVariables           ReturnValue;                                       // 0x0020(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetMutatorVariablesByVariableName) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetMutatorVariablesByVariableName");
static_assert(sizeof(RGameFunctionLibrary_GetMutatorVariablesByVariableName) == 0x000068, "Wrong size on RGameFunctionLibrary_GetMutatorVariablesByVariableName");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariablesByVariableName, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetMutatorVariablesByVariableName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariablesByVariableName, RMutatorPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_GetMutatorVariablesByVariableName::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariablesByVariableName, VariableName) == 0x000010, "Member 'RGameFunctionLibrary_GetMutatorVariablesByVariableName::VariableName' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetMutatorVariablesByVariableName, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_GetMutatorVariablesByVariableName::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetNameWithHighestValueFromMap
// 0x0068 (0x0068 - 0x0000)
struct RGameFunctionLibrary_GetNameWithHighestValueFromMap final
{
public:
	TMap<class FName, int32>                      Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	int32                                         DefaultHighestValue;                               // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultName;                                       // 0x0054(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x005C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetNameWithHighestValueFromMap) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetNameWithHighestValueFromMap");
static_assert(sizeof(RGameFunctionLibrary_GetNameWithHighestValueFromMap) == 0x000068, "Wrong size on RGameFunctionLibrary_GetNameWithHighestValueFromMap");
static_assert(offsetof(RGameFunctionLibrary_GetNameWithHighestValueFromMap, Map) == 0x000000, "Member 'RGameFunctionLibrary_GetNameWithHighestValueFromMap::Map' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNameWithHighestValueFromMap, DefaultHighestValue) == 0x000050, "Member 'RGameFunctionLibrary_GetNameWithHighestValueFromMap::DefaultHighestValue' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNameWithHighestValueFromMap, DefaultName) == 0x000054, "Member 'RGameFunctionLibrary_GetNameWithHighestValueFromMap::DefaultName' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNameWithHighestValueFromMap, ReturnValue) == 0x00005C, "Member 'RGameFunctionLibrary_GetNameWithHighestValueFromMap::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetNormalizedRandom
// 0x0004 (0x0004 - 0x0000)
struct RGameFunctionLibrary_GetNormalizedRandom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetNormalizedRandom) == 0x000004, "Wrong alignment on RGameFunctionLibrary_GetNormalizedRandom");
static_assert(sizeof(RGameFunctionLibrary_GetNormalizedRandom) == 0x000004, "Wrong size on RGameFunctionLibrary_GetNormalizedRandom");
static_assert(offsetof(RGameFunctionLibrary_GetNormalizedRandom, ReturnValue) == 0x000000, "Member 'RGameFunctionLibrary_GetNormalizedRandom::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetNumCompletedOverworldNodesInCurrentArea
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea");
static_assert(sizeof(RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea) == 0x000010, "Wrong size on RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea");
static_assert(offsetof(RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetNumCompletedOverworldNodesInCurrentArea::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetNumEquippedMutatorsInGodCategory
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory final
{
public:
	class URGScriptComponent*                     RGScriptComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GodCategoryTag;                                    // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory");
static_assert(sizeof(RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory) == 0x000018, "Wrong size on RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory");
static_assert(offsetof(RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory, RGScriptComponent) == 0x000000, "Member 'RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory::RGScriptComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory, GodCategoryTag) == 0x000008, "Member 'RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory::GodCategoryTag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetNumEquippedMutatorsInGodCategory::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetObjectFromClassReference
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetObjectFromClassReference final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetObjectFromClassReference) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetObjectFromClassReference");
static_assert(sizeof(RGameFunctionLibrary_GetObjectFromClassReference) == 0x000010, "Wrong size on RGameFunctionLibrary_GetObjectFromClassReference");
static_assert(offsetof(RGameFunctionLibrary_GetObjectFromClassReference, Class_0) == 0x000000, "Member 'RGameFunctionLibrary_GetObjectFromClassReference::Class_0' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetObjectFromClassReference, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetObjectFromClassReference::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetPlayerAbilityProcChance
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetPlayerAbilityProcChance final
{
public:
	class APawn*                                  PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetPlayerAbilityProcChance) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetPlayerAbilityProcChance");
static_assert(sizeof(RGameFunctionLibrary_GetPlayerAbilityProcChance) == 0x000010, "Wrong size on RGameFunctionLibrary_GetPlayerAbilityProcChance");
static_assert(offsetof(RGameFunctionLibrary_GetPlayerAbilityProcChance, PlayerPawn) == 0x000000, "Member 'RGameFunctionLibrary_GetPlayerAbilityProcChance::PlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPlayerAbilityProcChance, Rank) == 0x000008, "Member 'RGameFunctionLibrary_GetPlayerAbilityProcChance::Rank' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPlayerAbilityProcChance, ReturnValue) == 0x00000C, "Member 'RGameFunctionLibrary_GetPlayerAbilityProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetPlayerEquippedMutatorsSorted
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted");
static_assert(sizeof(RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted) == 0x000018, "Wrong size on RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted");
static_assert(offsetof(RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted, RPlayerPawn) == 0x000000, "Member 'RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetPlayerEquippedMutatorsSorted::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetPostAdditivesValueByKey
// 0x0138 (0x0138 - 0x0000)
struct RGameFunctionLibrary_GetPostAdditivesValueByKey final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0130(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetPostAdditivesValueByKey) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetPostAdditivesValueByKey");
static_assert(sizeof(RGameFunctionLibrary_GetPostAdditivesValueByKey) == 0x000138, "Wrong size on RGameFunctionLibrary_GetPostAdditivesValueByKey");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKey, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKey::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKey, Key) == 0x000128, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKey::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKey, ReturnValue) == 0x000130, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKey::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetPostAdditivesValueByKeyInteger
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0128(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger");
static_assert(sizeof(RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger) == 0x000130, "Wrong size on RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger, Key) == 0x000120, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger::Key' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger, ReturnValue) == 0x000128, "Member 'RGameFunctionLibrary_GetPostAdditivesValueByKeyInteger::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetProjectVersion) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetProjectVersion");
static_assert(sizeof(RGameFunctionLibrary_GetProjectVersion) == 0x000010, "Wrong size on RGameFunctionLibrary_GetProjectVersion");
static_assert(offsetof(RGameFunctionLibrary_GetProjectVersion, ReturnValue) == 0x000000, "Member 'RGameFunctionLibrary_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRandomAliveEnemyPawnInLevel
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARNPCPawnBase*>                  IgnoredEnemies;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExcludeBosses;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDummys;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGlobalTargets;                             // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeGeometryCollections;                       // 0x001B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel");
static_assert(sizeof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel) == 0x000028, "Wrong size on RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, IgnoredEnemies) == 0x000008, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::IgnoredEnemies' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, bExcludeBosses) == 0x000018, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::bExcludeBosses' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, bIncludeDummys) == 0x000019, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::bIncludeDummys' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, bIncludeGlobalTargets) == 0x00001A, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::bIncludeGlobalTargets' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, bIncludeGeometryCollections) == 0x00001B, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::bIncludeGeometryCollections' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_GetRandomAliveEnemyPawnInLevel::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRandomAlivePlayerController
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetRandomAlivePlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetRandomAlivePlayerController) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetRandomAlivePlayerController");
static_assert(sizeof(RGameFunctionLibrary_GetRandomAlivePlayerController) == 0x000010, "Wrong size on RGameFunctionLibrary_GetRandomAlivePlayerController");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAlivePlayerController, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetRandomAlivePlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomAlivePlayerController, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetRandomAlivePlayerController::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRandomIntWithWeight
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_GetRandomIntWithWeight final
{
public:
	TMap<int32, float>                            IntegersAndWeightMap;                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_GetRandomIntWithWeight) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetRandomIntWithWeight");
static_assert(sizeof(RGameFunctionLibrary_GetRandomIntWithWeight) == 0x000058, "Wrong size on RGameFunctionLibrary_GetRandomIntWithWeight");
static_assert(offsetof(RGameFunctionLibrary_GetRandomIntWithWeight, IntegersAndWeightMap) == 0x000000, "Member 'RGameFunctionLibrary_GetRandomIntWithWeight::IntegersAndWeightMap' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomIntWithWeight, ReturnValue) == 0x000050, "Member 'RGameFunctionLibrary_GetRandomIntWithWeight::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRandomPlayerController
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_GetRandomPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetRandomPlayerController) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetRandomPlayerController");
static_assert(sizeof(RGameFunctionLibrary_GetRandomPlayerController) == 0x000010, "Wrong size on RGameFunctionLibrary_GetRandomPlayerController");
static_assert(offsetof(RGameFunctionLibrary_GetRandomPlayerController, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetRandomPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomPlayerController, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetRandomPlayerController::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRandomUpgradeableMutatorOptions
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions final
{
public:
	TArray<struct FRLootSelectionOption>          PrevLootOptions;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOptions;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRLootSelectionOption>          ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions");
static_assert(sizeof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions) == 0x000030, "Wrong size on RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions");
static_assert(offsetof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions, PrevLootOptions) == 0x000000, "Member 'RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions::PrevLootOptions' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions, PlayerController) == 0x000010, "Member 'RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions, NumOptions) == 0x000018, "Member 'RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions::NumOptions' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_GetRandomUpgradeableMutatorOptions::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetRenderMatrix
// 0x0090 (0x0090 - 0x0000)
struct RGameFunctionLibrary_GetRenderMatrix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              Component;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetRenderMatrix) == 0x000010, "Wrong alignment on RGameFunctionLibrary_GetRenderMatrix");
static_assert(sizeof(RGameFunctionLibrary_GetRenderMatrix) == 0x000090, "Wrong size on RGameFunctionLibrary_GetRenderMatrix");
static_assert(offsetof(RGameFunctionLibrary_GetRenderMatrix, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_GetRenderMatrix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRenderMatrix, Component) == 0x000008, "Member 'RGameFunctionLibrary_GetRenderMatrix::Component' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetRenderMatrix, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetRenderMatrix::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetSafeNormalAndMagnitude
// 0x0040 (0x0040 - 0x0000)
struct RGameFunctionLibrary_GetSafeNormalAndMagnitude final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Vector;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagnitudeOut;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetSafeNormalAndMagnitude) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetSafeNormalAndMagnitude");
static_assert(sizeof(RGameFunctionLibrary_GetSafeNormalAndMagnitude) == 0x000040, "Wrong size on RGameFunctionLibrary_GetSafeNormalAndMagnitude");
static_assert(offsetof(RGameFunctionLibrary_GetSafeNormalAndMagnitude, Tolerance) == 0x000000, "Member 'RGameFunctionLibrary_GetSafeNormalAndMagnitude::Tolerance' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSafeNormalAndMagnitude, Vector) == 0x000008, "Member 'RGameFunctionLibrary_GetSafeNormalAndMagnitude::Vector' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSafeNormalAndMagnitude, MagnitudeOut) == 0x000020, "Member 'RGameFunctionLibrary_GetSafeNormalAndMagnitude::MagnitudeOut' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSafeNormalAndMagnitude, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_GetSafeNormalAndMagnitude::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetSFXFromSurfaceTable
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_GetSFXFromSurfaceTable final
{
public:
	const class UDataTable*                       SurfaceSFXTable;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RowFound;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSurfaceTypeSFX                        ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetSFXFromSurfaceTable) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetSFXFromSurfaceTable");
static_assert(sizeof(RGameFunctionLibrary_GetSFXFromSurfaceTable) == 0x000028, "Wrong size on RGameFunctionLibrary_GetSFXFromSurfaceTable");
static_assert(offsetof(RGameFunctionLibrary_GetSFXFromSurfaceTable, SurfaceSFXTable) == 0x000000, "Member 'RGameFunctionLibrary_GetSFXFromSurfaceTable::SurfaceSFXTable' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSFXFromSurfaceTable, SurfaceType) == 0x000008, "Member 'RGameFunctionLibrary_GetSFXFromSurfaceTable::SurfaceType' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSFXFromSurfaceTable, RowFound) == 0x000009, "Member 'RGameFunctionLibrary_GetSFXFromSurfaceTable::RowFound' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetSFXFromSurfaceTable, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetSFXFromSurfaceTable::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetVisibilityAsString
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_GetVisibilityAsString final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetVisibilityAsString) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetVisibilityAsString");
static_assert(sizeof(RGameFunctionLibrary_GetVisibilityAsString) == 0x000018, "Wrong size on RGameFunctionLibrary_GetVisibilityAsString");
static_assert(offsetof(RGameFunctionLibrary_GetVisibilityAsString, Widget) == 0x000000, "Member 'RGameFunctionLibrary_GetVisibilityAsString::Widget' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetVisibilityAsString, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_GetVisibilityAsString::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetVoiceOverDataTableRowByTag
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_GetVoiceOverDataTableRowByTag final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVoiceOverTableRow                     ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetVoiceOverDataTableRowByTag) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetVoiceOverDataTableRowByTag");
static_assert(sizeof(RGameFunctionLibrary_GetVoiceOverDataTableRowByTag) == 0x000038, "Wrong size on RGameFunctionLibrary_GetVoiceOverDataTableRowByTag");
static_assert(offsetof(RGameFunctionLibrary_GetVoiceOverDataTableRowByTag, Table) == 0x000000, "Member 'RGameFunctionLibrary_GetVoiceOverDataTableRowByTag::Table' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetVoiceOverDataTableRowByTag, Tag) == 0x000008, "Member 'RGameFunctionLibrary_GetVoiceOverDataTableRowByTag::Tag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetVoiceOverDataTableRowByTag, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetVoiceOverDataTableRowByTag::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.GetVulnerableActorsFromActors
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_GetVulnerableActorsFromActors final
{
public:
	TArray<class AActor*>                         ActorsToFilter;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_GetVulnerableActorsFromActors) == 0x000008, "Wrong alignment on RGameFunctionLibrary_GetVulnerableActorsFromActors");
static_assert(sizeof(RGameFunctionLibrary_GetVulnerableActorsFromActors) == 0x000020, "Wrong size on RGameFunctionLibrary_GetVulnerableActorsFromActors");
static_assert(offsetof(RGameFunctionLibrary_GetVulnerableActorsFromActors, ActorsToFilter) == 0x000000, "Member 'RGameFunctionLibrary_GetVulnerableActorsFromActors::ActorsToFilter' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_GetVulnerableActorsFromActors, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_GetVulnerableActorsFromActors::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.HasPlayerEverCompletedCurrentArea
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea) == 0x000008, "Wrong alignment on RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea");
static_assert(sizeof(RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea) == 0x000010, "Wrong size on RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea");
static_assert(offsetof(RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_HasPlayerEverCompletedCurrentArea::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.HueShift
// 0x0024 (0x0024 - 0x0000)
struct RGameFunctionLibrary_HueShift final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HueShiftPercentage;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0014(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_HueShift) == 0x000004, "Wrong alignment on RGameFunctionLibrary_HueShift");
static_assert(sizeof(RGameFunctionLibrary_HueShift) == 0x000024, "Wrong size on RGameFunctionLibrary_HueShift");
static_assert(offsetof(RGameFunctionLibrary_HueShift, Color) == 0x000000, "Member 'RGameFunctionLibrary_HueShift::Color' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_HueShift, HueShiftPercentage) == 0x000010, "Member 'RGameFunctionLibrary_HueShift::HueShiftPercentage' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_HueShift, ReturnValue) == 0x000014, "Member 'RGameFunctionLibrary_HueShift::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsActorAnEnemy
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsActorAnEnemy final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsActorAnEnemy) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsActorAnEnemy");
static_assert(sizeof(RGameFunctionLibrary_IsActorAnEnemy) == 0x000010, "Wrong size on RGameFunctionLibrary_IsActorAnEnemy");
static_assert(offsetof(RGameFunctionLibrary_IsActorAnEnemy, Actor) == 0x000000, "Member 'RGameFunctionLibrary_IsActorAnEnemy::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsActorAnEnemy, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsActorAnEnemy::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsDirectDamage
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_IsDirectDamage final
{
public:
	int32                                         Mask;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsDirectDamage) == 0x000004, "Wrong alignment on RGameFunctionLibrary_IsDirectDamage");
static_assert(sizeof(RGameFunctionLibrary_IsDirectDamage) == 0x000008, "Wrong size on RGameFunctionLibrary_IsDirectDamage");
static_assert(offsetof(RGameFunctionLibrary_IsDirectDamage, Mask) == 0x000000, "Member 'RGameFunctionLibrary_IsDirectDamage::Mask' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsDirectDamage, ReturnValue) == 0x000004, "Member 'RGameFunctionLibrary_IsDirectDamage::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsHitResultWeakspotHit
// 0x0108 (0x0108 - 0x0000)
struct RGameFunctionLibrary_IsHitResultWeakspotHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsHitResultWeakspotHit) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsHitResultWeakspotHit");
static_assert(sizeof(RGameFunctionLibrary_IsHitResultWeakspotHit) == 0x000108, "Wrong size on RGameFunctionLibrary_IsHitResultWeakspotHit");
static_assert(offsetof(RGameFunctionLibrary_IsHitResultWeakspotHit, HitResult) == 0x000000, "Member 'RGameFunctionLibrary_IsHitResultWeakspotHit::HitResult' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsHitResultWeakspotHit, ReturnValue) == 0x000100, "Member 'RGameFunctionLibrary_IsHitResultWeakspotHit::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsInLastOverworldArea
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsInLastOverworldArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsInLastOverworldArea) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsInLastOverworldArea");
static_assert(sizeof(RGameFunctionLibrary_IsInLastOverworldArea) == 0x000010, "Wrong size on RGameFunctionLibrary_IsInLastOverworldArea");
static_assert(offsetof(RGameFunctionLibrary_IsInLastOverworldArea, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_IsInLastOverworldArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsInLastOverworldArea, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsInLastOverworldArea::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsInsideOrOnBox
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_IsInsideOrOnBox final
{
public:
	struct FBox                                   Box;                                               // 0x0000(0x0038)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsInsideOrOnBox) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsInsideOrOnBox");
static_assert(sizeof(RGameFunctionLibrary_IsInsideOrOnBox) == 0x000058, "Wrong size on RGameFunctionLibrary_IsInsideOrOnBox");
static_assert(offsetof(RGameFunctionLibrary_IsInsideOrOnBox, Box) == 0x000000, "Member 'RGameFunctionLibrary_IsInsideOrOnBox::Box' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsInsideOrOnBox, Vector) == 0x000038, "Member 'RGameFunctionLibrary_IsInsideOrOnBox::Vector' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsInsideOrOnBox, ReturnValue) == 0x000050, "Member 'RGameFunctionLibrary_IsInsideOrOnBox::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsLocalControllerWithNullCheck
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsLocalControllerWithNullCheck final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsLocalControllerWithNullCheck) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsLocalControllerWithNullCheck");
static_assert(sizeof(RGameFunctionLibrary_IsLocalControllerWithNullCheck) == 0x000010, "Wrong size on RGameFunctionLibrary_IsLocalControllerWithNullCheck");
static_assert(offsetof(RGameFunctionLibrary_IsLocalControllerWithNullCheck, Controller) == 0x000000, "Member 'RGameFunctionLibrary_IsLocalControllerWithNullCheck::Controller' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsLocalControllerWithNullCheck, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsLocalControllerWithNullCheck::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsLocallyControlledPawnWithNullCheck
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck");
static_assert(sizeof(RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck) == 0x000010, "Wrong size on RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck");
static_assert(offsetof(RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck, Pawn) == 0x000000, "Member 'RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck::Pawn' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsLocallyControlledPawnWithNullCheck::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsMoviePlayerRunning
// 0x0001 (0x0001 - 0x0000)
struct RGameFunctionLibrary_IsMoviePlayerRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_IsMoviePlayerRunning) == 0x000001, "Wrong alignment on RGameFunctionLibrary_IsMoviePlayerRunning");
static_assert(sizeof(RGameFunctionLibrary_IsMoviePlayerRunning) == 0x000001, "Wrong size on RGameFunctionLibrary_IsMoviePlayerRunning");
static_assert(offsetof(RGameFunctionLibrary_IsMoviePlayerRunning, ReturnValue) == 0x000000, "Member 'RGameFunctionLibrary_IsMoviePlayerRunning::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsMutatorVariablePercentValueInText
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_IsMutatorVariablePercentValueInText final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VariableName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsMutatorVariablePercentValueInText");
static_assert(sizeof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText) == 0x000030, "Wrong size on RGameFunctionLibrary_IsMutatorVariablePercentValueInText");
static_assert(offsetof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_IsMutatorVariablePercentValueInText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText, VariableName) == 0x000008, "Member 'RGameFunctionLibrary_IsMutatorVariablePercentValueInText::VariableName' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText, Text) == 0x000018, "Member 'RGameFunctionLibrary_IsMutatorVariablePercentValueInText::Text' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsMutatorVariablePercentValueInText, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_IsMutatorVariablePercentValueInText::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsObjectInSameRoomAsPlayer
// 0x0050 (0x0050 - 0x0000)
struct RGameFunctionLibrary_IsObjectInSameRoomAsPlayer final
{
public:
	const class AActor*                           Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APlayerController*                PlayerController;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   LevelGenerationSettingsBox;                        // 0x0010(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsObjectInSameRoomAsPlayer");
static_assert(sizeof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer) == 0x000050, "Wrong size on RGameFunctionLibrary_IsObjectInSameRoomAsPlayer");
static_assert(offsetof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer, Object) == 0x000000, "Member 'RGameFunctionLibrary_IsObjectInSameRoomAsPlayer::Object' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer, PlayerController) == 0x000008, "Member 'RGameFunctionLibrary_IsObjectInSameRoomAsPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer, LevelGenerationSettingsBox) == 0x000010, "Member 'RGameFunctionLibrary_IsObjectInSameRoomAsPlayer::LevelGenerationSettingsBox' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsObjectInSameRoomAsPlayer, ReturnValue) == 0x000048, "Member 'RGameFunctionLibrary_IsObjectInSameRoomAsPlayer::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsOverworldNodeCompleted
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsOverworldNodeCompleted final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeID;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsOverworldNodeCompleted) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsOverworldNodeCompleted");
static_assert(sizeof(RGameFunctionLibrary_IsOverworldNodeCompleted) == 0x000010, "Wrong size on RGameFunctionLibrary_IsOverworldNodeCompleted");
static_assert(offsetof(RGameFunctionLibrary_IsOverworldNodeCompleted, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_IsOverworldNodeCompleted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsOverworldNodeCompleted, NodeID) == 0x000008, "Member 'RGameFunctionLibrary_IsOverworldNodeCompleted::NodeID' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsOverworldNodeCompleted, ReturnValue) == 0x00000C, "Member 'RGameFunctionLibrary_IsOverworldNodeCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsSingleplayer
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsSingleplayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsSingleplayer) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsSingleplayer");
static_assert(sizeof(RGameFunctionLibrary_IsSingleplayer) == 0x000010, "Wrong size on RGameFunctionLibrary_IsSingleplayer");
static_assert(offsetof(RGameFunctionLibrary_IsSingleplayer, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_IsSingleplayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsSingleplayer, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsSingleplayer::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsTargetWithinCone
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_IsTargetWithinCone final
{
public:
	struct FVector                                ConeOrigin;                                        // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ConeDirection;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeHalfAngle;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsTargetWithinCone) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsTargetWithinCone");
static_assert(sizeof(RGameFunctionLibrary_IsTargetWithinCone) == 0x000058, "Wrong size on RGameFunctionLibrary_IsTargetWithinCone");
static_assert(offsetof(RGameFunctionLibrary_IsTargetWithinCone, ConeOrigin) == 0x000000, "Member 'RGameFunctionLibrary_IsTargetWithinCone::ConeOrigin' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsTargetWithinCone, ConeDirection) == 0x000018, "Member 'RGameFunctionLibrary_IsTargetWithinCone::ConeDirection' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsTargetWithinCone, ConeHalfAngle) == 0x000030, "Member 'RGameFunctionLibrary_IsTargetWithinCone::ConeHalfAngle' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsTargetWithinCone, TargetLocation) == 0x000038, "Member 'RGameFunctionLibrary_IsTargetWithinCone::TargetLocation' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsTargetWithinCone, ReturnValue) == 0x000050, "Member 'RGameFunctionLibrary_IsTargetWithinCone::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsTearingDownWorld
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_IsTearingDownWorld final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsTearingDownWorld) == 0x000008, "Wrong alignment on RGameFunctionLibrary_IsTearingDownWorld");
static_assert(sizeof(RGameFunctionLibrary_IsTearingDownWorld) == 0x000010, "Wrong size on RGameFunctionLibrary_IsTearingDownWorld");
static_assert(offsetof(RGameFunctionLibrary_IsTearingDownWorld, PlayerController) == 0x000000, "Member 'RGameFunctionLibrary_IsTearingDownWorld::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsTearingDownWorld, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_IsTearingDownWorld::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsVectorInsideFrustum
// 0x00A0 (0x00A0 - 0x0000)
struct RGameFunctionLibrary_IsVectorInsideFrustum final
{
public:
	struct FMatrix                                Sides;                                             // 0x0000(0x0080)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0080(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0098(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_IsVectorInsideFrustum) == 0x000010, "Wrong alignment on RGameFunctionLibrary_IsVectorInsideFrustum");
static_assert(sizeof(RGameFunctionLibrary_IsVectorInsideFrustum) == 0x0000A0, "Wrong size on RGameFunctionLibrary_IsVectorInsideFrustum");
static_assert(offsetof(RGameFunctionLibrary_IsVectorInsideFrustum, Sides) == 0x000000, "Member 'RGameFunctionLibrary_IsVectorInsideFrustum::Sides' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsVectorInsideFrustum, Vector) == 0x000080, "Member 'RGameFunctionLibrary_IsVectorInsideFrustum::Vector' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsVectorInsideFrustum, Radius) == 0x000098, "Member 'RGameFunctionLibrary_IsVectorInsideFrustum::Radius' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_IsVectorInsideFrustum, ReturnValue) == 0x00009C, "Member 'RGameFunctionLibrary_IsVectorInsideFrustum::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct RGameFunctionLibrary_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_IsWithEditor) == 0x000001, "Wrong alignment on RGameFunctionLibrary_IsWithEditor");
static_assert(sizeof(RGameFunctionLibrary_IsWithEditor) == 0x000001, "Wrong size on RGameFunctionLibrary_IsWithEditor");
static_assert(offsetof(RGameFunctionLibrary_IsWithEditor, ReturnValue) == 0x000000, "Member 'RGameFunctionLibrary_IsWithEditor::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.LineTraceAndSpawnDecal
// 0x0178 (0x0178 - 0x0000)
struct RGameFunctionLibrary_LineTraceAndSpawnDecal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineTraceStart;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineTraceEnd;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DecalMinMaxLifetime;                               // 0x0058(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalFadeoutTime;                                  // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LineTraceHit;                                      // 0x006C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0070(0x0100)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UDecalComponent*                        ReturnValue;                                       // 0x0170(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_LineTraceAndSpawnDecal) == 0x000008, "Wrong alignment on RGameFunctionLibrary_LineTraceAndSpawnDecal");
static_assert(sizeof(RGameFunctionLibrary_LineTraceAndSpawnDecal) == 0x000178, "Wrong size on RGameFunctionLibrary_LineTraceAndSpawnDecal");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, LineTraceStart) == 0x000008, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::LineTraceStart' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, LineTraceEnd) == 0x000020, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::LineTraceEnd' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, DecalMaterial) == 0x000038, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::DecalMaterial' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, DecalSize) == 0x000040, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::DecalSize' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, DecalMinMaxLifetime) == 0x000058, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::DecalMinMaxLifetime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, DecalFadeoutTime) == 0x000068, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::DecalFadeoutTime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, LineTraceHit) == 0x00006C, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::LineTraceHit' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, OutHit) == 0x000070, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::OutHit' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_LineTraceAndSpawnDecal, ReturnValue) == 0x000170, "Member 'RGameFunctionLibrary_LineTraceAndSpawnDecal::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.MakeDamageSourceBitMask
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_MakeDamageSourceBitMask final
{
public:
	int32                                         Mask;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_MakeDamageSourceBitMask) == 0x000004, "Wrong alignment on RGameFunctionLibrary_MakeDamageSourceBitMask");
static_assert(sizeof(RGameFunctionLibrary_MakeDamageSourceBitMask) == 0x000008, "Wrong size on RGameFunctionLibrary_MakeDamageSourceBitMask");
static_assert(offsetof(RGameFunctionLibrary_MakeDamageSourceBitMask, Mask) == 0x000000, "Member 'RGameFunctionLibrary_MakeDamageSourceBitMask::Mask' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_MakeDamageSourceBitMask, ReturnValue) == 0x000004, "Member 'RGameFunctionLibrary_MakeDamageSourceBitMask::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.MutateFloat
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_MutateFloat final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x012C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_MutateFloat) == 0x000008, "Wrong alignment on RGameFunctionLibrary_MutateFloat");
static_assert(sizeof(RGameFunctionLibrary_MutateFloat) == 0x000130, "Wrong size on RGameFunctionLibrary_MutateFloat");
static_assert(offsetof(RGameFunctionLibrary_MutateFloat, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_MutateFloat::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_MutateFloat, Value) == 0x000128, "Member 'RGameFunctionLibrary_MutateFloat::Value' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_MutateFloat, ReturnValue) == 0x00012C, "Member 'RGameFunctionLibrary_MutateFloat::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.NegativeModuloFloat
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_NegativeModuloFloat final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         M;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_NegativeModuloFloat) == 0x000004, "Wrong alignment on RGameFunctionLibrary_NegativeModuloFloat");
static_assert(sizeof(RGameFunctionLibrary_NegativeModuloFloat) == 0x00000C, "Wrong size on RGameFunctionLibrary_NegativeModuloFloat");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloFloat, X) == 0x000000, "Member 'RGameFunctionLibrary_NegativeModuloFloat::X' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloFloat, M) == 0x000004, "Member 'RGameFunctionLibrary_NegativeModuloFloat::M' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloFloat, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_NegativeModuloFloat::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.NegativeModuloInt
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_NegativeModuloInt final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         M;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_NegativeModuloInt) == 0x000004, "Wrong alignment on RGameFunctionLibrary_NegativeModuloInt");
static_assert(sizeof(RGameFunctionLibrary_NegativeModuloInt) == 0x00000C, "Wrong size on RGameFunctionLibrary_NegativeModuloInt");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloInt, X) == 0x000000, "Member 'RGameFunctionLibrary_NegativeModuloInt::X' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloInt, M) == 0x000004, "Member 'RGameFunctionLibrary_NegativeModuloInt::M' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_NegativeModuloInt, ReturnValue) == 0x000008, "Member 'RGameFunctionLibrary_NegativeModuloInt::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.OpenConsole
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_OpenConsole final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_OpenConsole) == 0x000008, "Wrong alignment on RGameFunctionLibrary_OpenConsole");
static_assert(sizeof(RGameFunctionLibrary_OpenConsole) == 0x000008, "Wrong size on RGameFunctionLibrary_OpenConsole");
static_assert(offsetof(RGameFunctionLibrary_OpenConsole, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_OpenConsole::WorldContextObject' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ParseMutatorDescription
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_ParseMutatorDescription final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdvancedDescription;                           // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ParseMutatorDescription) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ParseMutatorDescription");
static_assert(sizeof(RGameFunctionLibrary_ParseMutatorDescription) == 0x000028, "Wrong size on RGameFunctionLibrary_ParseMutatorDescription");
static_assert(offsetof(RGameFunctionLibrary_ParseMutatorDescription, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_ParseMutatorDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ParseMutatorDescription, RMutatorPrimaryAsset) == 0x000008, "Member 'RGameFunctionLibrary_ParseMutatorDescription::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ParseMutatorDescription, MutatorRank) == 0x000010, "Member 'RGameFunctionLibrary_ParseMutatorDescription::MutatorRank' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ParseMutatorDescription, bUseAdvancedDescription) == 0x000014, "Member 'RGameFunctionLibrary_ParseMutatorDescription::bUseAdvancedDescription' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ParseMutatorDescription, ReturnValue) == 0x000018, "Member 'RGameFunctionLibrary_ParseMutatorDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.PointWithPolarOffset
// 0x0038 (0x0038 - 0x0000)
struct RGameFunctionLibrary_PointWithPolarOffset final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_PointWithPolarOffset) == 0x000008, "Wrong alignment on RGameFunctionLibrary_PointWithPolarOffset");
static_assert(sizeof(RGameFunctionLibrary_PointWithPolarOffset) == 0x000038, "Wrong size on RGameFunctionLibrary_PointWithPolarOffset");
static_assert(offsetof(RGameFunctionLibrary_PointWithPolarOffset, Origin) == 0x000000, "Member 'RGameFunctionLibrary_PointWithPolarOffset::Origin' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_PointWithPolarOffset, Distance) == 0x000018, "Member 'RGameFunctionLibrary_PointWithPolarOffset::Distance' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_PointWithPolarOffset, Angle) == 0x00001C, "Member 'RGameFunctionLibrary_PointWithPolarOffset::Angle' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_PointWithPolarOffset, ReturnValue) == 0x000020, "Member 'RGameFunctionLibrary_PointWithPolarOffset::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RecreatePhysicsStateOnSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh");
static_assert(sizeof(RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh) == 0x000008, "Wrong size on RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh");
static_assert(offsetof(RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'RGameFunctionLibrary_RecreatePhysicsStateOnSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableFloatCoefficient
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableFloatCoefficient final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableFloatCoefficient) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableFloatCoefficient");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableFloatCoefficient) == 0x000130, "Wrong size on RGameFunctionLibrary_RemoveMutableFloatCoefficient");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatCoefficient, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableFloatCoefficient::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatCoefficient, Key) == 0x000128, "Member 'RGameFunctionLibrary_RemoveMutableFloatCoefficient::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableFloatPostAdditive
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableFloatPostAdditive final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableFloatPostAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableFloatPostAdditive");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableFloatPostAdditive) == 0x000130, "Wrong size on RGameFunctionLibrary_RemoveMutableFloatPostAdditive");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatPostAdditive, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableFloatPostAdditive::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatPostAdditive, Key) == 0x000128, "Member 'RGameFunctionLibrary_RemoveMutableFloatPostAdditive::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableFloatPreAdditive
// 0x0130 (0x0130 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableFloatPreAdditive final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0128(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableFloatPreAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableFloatPreAdditive");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableFloatPreAdditive) == 0x000130, "Wrong size on RGameFunctionLibrary_RemoveMutableFloatPreAdditive");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatPreAdditive, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableFloatPreAdditive::MutableFloat' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableFloatPreAdditive, Key) == 0x000128, "Member 'RGameFunctionLibrary_RemoveMutableFloatPreAdditive::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableIntegerCoefficient
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableIntegerCoefficient final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableIntegerCoefficient) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableIntegerCoefficient");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableIntegerCoefficient) == 0x000128, "Wrong size on RGameFunctionLibrary_RemoveMutableIntegerCoefficient");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerCoefficient, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableIntegerCoefficient::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerCoefficient, Key) == 0x000120, "Member 'RGameFunctionLibrary_RemoveMutableIntegerCoefficient::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableIntegerPostAdditive
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableIntegerPostAdditive final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableIntegerPostAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableIntegerPostAdditive");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableIntegerPostAdditive) == 0x000128, "Wrong size on RGameFunctionLibrary_RemoveMutableIntegerPostAdditive");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerPostAdditive, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableIntegerPostAdditive::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerPostAdditive, Key) == 0x000120, "Member 'RGameFunctionLibrary_RemoveMutableIntegerPostAdditive::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RemoveMutableIntegerPreAdditive
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_RemoveMutableIntegerPreAdditive final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0120(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RemoveMutableIntegerPreAdditive) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RemoveMutableIntegerPreAdditive");
static_assert(sizeof(RGameFunctionLibrary_RemoveMutableIntegerPreAdditive) == 0x000128, "Wrong size on RGameFunctionLibrary_RemoveMutableIntegerPreAdditive");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerPreAdditive, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_RemoveMutableIntegerPreAdditive::MutableInteger' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RemoveMutableIntegerPreAdditive, Key) == 0x000120, "Member 'RGameFunctionLibrary_RemoveMutableIntegerPreAdditive::Key' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ResetMeshToDefaultMaterials
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_ResetMeshToDefaultMaterials final
{
public:
	class UPrimitiveComponent*                    MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ResetMeshToDefaultMaterials) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ResetMeshToDefaultMaterials");
static_assert(sizeof(RGameFunctionLibrary_ResetMeshToDefaultMaterials) == 0x000008, "Wrong size on RGameFunctionLibrary_ResetMeshToDefaultMaterials");
static_assert(offsetof(RGameFunctionLibrary_ResetMeshToDefaultMaterials, MeshComponent) == 0x000000, "Member 'RGameFunctionLibrary_ResetMeshToDefaultMaterials::MeshComponent' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ResetMutableFloat
// 0x0128 (0x0128 - 0x0000)
struct RGameFunctionLibrary_ResetMutableFloat final
{
public:
	struct FRMutableFloat                         MutableFloat;                                      // 0x0000(0x0128)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ResetMutableFloat) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ResetMutableFloat");
static_assert(sizeof(RGameFunctionLibrary_ResetMutableFloat) == 0x000128, "Wrong size on RGameFunctionLibrary_ResetMutableFloat");
static_assert(offsetof(RGameFunctionLibrary_ResetMutableFloat, MutableFloat) == 0x000000, "Member 'RGameFunctionLibrary_ResetMutableFloat::MutableFloat' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ResetMutableInteger
// 0x0120 (0x0120 - 0x0000)
struct RGameFunctionLibrary_ResetMutableInteger final
{
public:
	struct FRMutableInteger                       MutableInteger;                                    // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_ResetMutableInteger) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ResetMutableInteger");
static_assert(sizeof(RGameFunctionLibrary_ResetMutableInteger) == 0x000120, "Wrong size on RGameFunctionLibrary_ResetMutableInteger");
static_assert(offsetof(RGameFunctionLibrary_ResetMutableInteger, MutableInteger) == 0x000000, "Member 'RGameFunctionLibrary_ResetMutableInteger::MutableInteger' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.RInterpToShortestPath
// 0x0058 (0x0058 - 0x0000)
struct RGameFunctionLibrary_RInterpToShortestPath final
{
public:
	struct FRotator                               Current;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConstantSpeed;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseShortestPath;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_RInterpToShortestPath) == 0x000008, "Wrong alignment on RGameFunctionLibrary_RInterpToShortestPath");
static_assert(sizeof(RGameFunctionLibrary_RInterpToShortestPath) == 0x000058, "Wrong size on RGameFunctionLibrary_RInterpToShortestPath");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, Current) == 0x000000, "Member 'RGameFunctionLibrary_RInterpToShortestPath::Current' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, Target) == 0x000018, "Member 'RGameFunctionLibrary_RInterpToShortestPath::Target' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, DeltaTime) == 0x000030, "Member 'RGameFunctionLibrary_RInterpToShortestPath::DeltaTime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, InterpSpeed) == 0x000034, "Member 'RGameFunctionLibrary_RInterpToShortestPath::InterpSpeed' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, bConstantSpeed) == 0x000038, "Member 'RGameFunctionLibrary_RInterpToShortestPath::bConstantSpeed' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, bUseShortestPath) == 0x000039, "Member 'RGameFunctionLibrary_RInterpToShortestPath::bUseShortestPath' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_RInterpToShortestPath, ReturnValue) == 0x000040, "Member 'RGameFunctionLibrary_RInterpToShortestPath::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetActorIsEditorOnly
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SetActorIsEditorOnly final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditorOnly;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_SetActorIsEditorOnly) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetActorIsEditorOnly");
static_assert(sizeof(RGameFunctionLibrary_SetActorIsEditorOnly) == 0x000010, "Wrong size on RGameFunctionLibrary_SetActorIsEditorOnly");
static_assert(offsetof(RGameFunctionLibrary_SetActorIsEditorOnly, Actor) == 0x000000, "Member 'RGameFunctionLibrary_SetActorIsEditorOnly::Actor' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetActorIsEditorOnly, bIsEditorOnly) == 0x000008, "Member 'RGameFunctionLibrary_SetActorIsEditorOnly::bIsEditorOnly' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetAudioComponentSettingsMultiplayer
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AudioComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AController*                      OptionalController;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APawn*                            OptionalPlayerPawn;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerSound;                                    // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer");
static_assert(sizeof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer) == 0x000030, "Wrong size on RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, AudioComponent) == 0x000008, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::AudioComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, OptionalController) == 0x000010, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::OptionalController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, OptionalPlayerPawn) == 0x000018, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::OptionalPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, bIsPlayerSound) == 0x000020, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::bIsPlayerSound' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer, ReturnValue) == 0x000028, "Member 'RGameFunctionLibrary_SetAudioComponentSettingsMultiplayer::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetCosmeticMaterialParameters
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_SetCosmeticMaterialParameters final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMeshComponent*>                 MeshComponents;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      NewMI;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetCosmeticMaterialParameters) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetCosmeticMaterialParameters");
static_assert(sizeof(RGameFunctionLibrary_SetCosmeticMaterialParameters) == 0x000020, "Wrong size on RGameFunctionLibrary_SetCosmeticMaterialParameters");
static_assert(offsetof(RGameFunctionLibrary_SetCosmeticMaterialParameters, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SetCosmeticMaterialParameters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetCosmeticMaterialParameters, MeshComponents) == 0x000008, "Member 'RGameFunctionLibrary_SetCosmeticMaterialParameters::MeshComponents' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetCosmeticMaterialParameters, NewMI) == 0x000018, "Member 'RGameFunctionLibrary_SetCosmeticMaterialParameters::NewMI' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetLightPropertiesByTag
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SetLightPropertiesByTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LightActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetLightPropertiesByTag) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetLightPropertiesByTag");
static_assert(sizeof(RGameFunctionLibrary_SetLightPropertiesByTag) == 0x000010, "Wrong size on RGameFunctionLibrary_SetLightPropertiesByTag");
static_assert(offsetof(RGameFunctionLibrary_SetLightPropertiesByTag, Tag) == 0x000000, "Member 'RGameFunctionLibrary_SetLightPropertiesByTag::Tag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetLightPropertiesByTag, LightActor) == 0x000008, "Member 'RGameFunctionLibrary_SetLightPropertiesByTag::LightActor' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetOneOffTimer
// 0x0020 (0x0020 - 0x0000)
struct RGameFunctionLibrary_SetOneOffTimer final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetOneOffTimer) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetOneOffTimer");
static_assert(sizeof(RGameFunctionLibrary_SetOneOffTimer) == 0x000020, "Wrong size on RGameFunctionLibrary_SetOneOffTimer");
static_assert(offsetof(RGameFunctionLibrary_SetOneOffTimer, Delegate) == 0x000000, "Member 'RGameFunctionLibrary_SetOneOffTimer::Delegate' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetOneOffTimer, Time) == 0x000010, "Member 'RGameFunctionLibrary_SetOneOffTimer::Time' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetOneOffTimer, bLooping) == 0x000014, "Member 'RGameFunctionLibrary_SetOneOffTimer::bLooping' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetOneOffTimer, ReturnValue) == 0x000018, "Member 'RGameFunctionLibrary_SetOneOffTimer::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetSoundWaveSettingsFromOtherSound
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundWave*                       TemplateSound;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound");
static_assert(sizeof(RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound) == 0x000010, "Wrong size on RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound");
static_assert(offsetof(RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound, SoundWave) == 0x000000, "Member 'RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound::SoundWave' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound, TemplateSound) == 0x000008, "Member 'RGameFunctionLibrary_SetSoundWaveSettingsFromOtherSound::TemplateSound' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetSoundWaveSettingsFromTemplate
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate final
{
public:
	class USoundWave*                             NewMetaSoundWave;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundCue*                        TemplateSoundCue;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate");
static_assert(sizeof(RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate) == 0x000010, "Wrong size on RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate");
static_assert(offsetof(RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate, NewMetaSoundWave) == 0x000000, "Member 'RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate::NewMetaSoundWave' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate, TemplateSoundCue) == 0x000008, "Member 'RGameFunctionLibrary_SetSoundWaveSettingsFromTemplate::TemplateSoundCue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SetStencilMask
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SetStencilMask final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          renderDepth;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         stencilValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SetStencilMask) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SetStencilMask");
static_assert(sizeof(RGameFunctionLibrary_SetStencilMask) == 0x000010, "Wrong size on RGameFunctionLibrary_SetStencilMask");
static_assert(offsetof(RGameFunctionLibrary_SetStencilMask, Component) == 0x000000, "Member 'RGameFunctionLibrary_SetStencilMask::Component' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetStencilMask, renderDepth) == 0x000008, "Member 'RGameFunctionLibrary_SetStencilMask::renderDepth' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SetStencilMask, stencilValue) == 0x00000C, "Member 'RGameFunctionLibrary_SetStencilMask::stencilValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ShouldExcludeComponentFromRenderMatrix
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix final
{
public:
	const class ARGamePlayerController*           PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPrimitiveComponent*              Component;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix");
static_assert(sizeof(RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix) == 0x000018, "Wrong size on RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix");
static_assert(offsetof(RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix, PlayerController) == 0x000000, "Member 'RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix::PlayerController' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix, Component) == 0x000008, "Member 'RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix::Component' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_ShouldExcludeComponentFromRenderMatrix::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.ShouldShowExtendedInfo
// 0x0018 (0x0018 - 0x0000)
struct RGameFunctionLibrary_ShouldShowExtendedInfo final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ShowExtendedInfoTag;                               // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_ShouldShowExtendedInfo) == 0x000008, "Wrong alignment on RGameFunctionLibrary_ShouldShowExtendedInfo");
static_assert(sizeof(RGameFunctionLibrary_ShouldShowExtendedInfo) == 0x000018, "Wrong size on RGameFunctionLibrary_ShouldShowExtendedInfo");
static_assert(offsetof(RGameFunctionLibrary_ShouldShowExtendedInfo, Pawn) == 0x000000, "Member 'RGameFunctionLibrary_ShouldShowExtendedInfo::Pawn' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ShouldShowExtendedInfo, ShowExtendedInfoTag) == 0x000008, "Member 'RGameFunctionLibrary_ShouldShowExtendedInfo::ShowExtendedInfoTag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_ShouldShowExtendedInfo, ReturnValue) == 0x000010, "Member 'RGameFunctionLibrary_ShouldShowExtendedInfo::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SortAbilitiesByIndex
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SortAbilitiesByIndex final
{
public:
	TArray<class URGAbilityCharacterMutatorScript*> Abilities;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SortAbilitiesByIndex) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SortAbilitiesByIndex");
static_assert(sizeof(RGameFunctionLibrary_SortAbilitiesByIndex) == 0x000010, "Wrong size on RGameFunctionLibrary_SortAbilitiesByIndex");
static_assert(offsetof(RGameFunctionLibrary_SortAbilitiesByIndex, Abilities) == 0x000000, "Member 'RGameFunctionLibrary_SortAbilitiesByIndex::Abilities' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SortActorsByDistance
// 0x0028 (0x0028 - 0x0000)
struct RGameFunctionLibrary_SortActorsByDistance final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SortActorsByDistance) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SortActorsByDistance");
static_assert(sizeof(RGameFunctionLibrary_SortActorsByDistance) == 0x000028, "Wrong size on RGameFunctionLibrary_SortActorsByDistance");
static_assert(offsetof(RGameFunctionLibrary_SortActorsByDistance, Actors) == 0x000000, "Member 'RGameFunctionLibrary_SortActorsByDistance::Actors' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SortActorsByDistance, Origin) == 0x000010, "Member 'RGameFunctionLibrary_SortActorsByDistance::Origin' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SortAndReapplyActivatableAbilities
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_SortAndReapplyActivatableAbilities final
{
public:
	class URPlayerGScriptComponent*               PlayerGScriptComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SortAndReapplyActivatableAbilities) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SortAndReapplyActivatableAbilities");
static_assert(sizeof(RGameFunctionLibrary_SortAndReapplyActivatableAbilities) == 0x000008, "Wrong size on RGameFunctionLibrary_SortAndReapplyActivatableAbilities");
static_assert(offsetof(RGameFunctionLibrary_SortAndReapplyActivatableAbilities, PlayerGScriptComponent) == 0x000000, "Member 'RGameFunctionLibrary_SortAndReapplyActivatableAbilities::PlayerGScriptComponent' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SortHitsByDistance
// 0x0010 (0x0010 - 0x0000)
struct RGameFunctionLibrary_SortHitsByDistance final
{
public:
	TArray<struct FHitResult>                     Hits;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SortHitsByDistance) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SortHitsByDistance");
static_assert(sizeof(RGameFunctionLibrary_SortHitsByDistance) == 0x000010, "Wrong size on RGameFunctionLibrary_SortHitsByDistance");
static_assert(offsetof(RGameFunctionLibrary_SortHitsByDistance, Hits) == 0x000000, "Member 'RGameFunctionLibrary_SortHitsByDistance::Hits' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SpawnDecalFromHitResult
// 0x0148 (0x0148 - 0x0000)
struct RGameFunctionLibrary_SpawnDecalFromHitResult final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0100)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0110(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DecalMinMaxLifetime;                               // 0x0128(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalFadeoutTime;                                  // 0x0138(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        ReturnValue;                                       // 0x0140(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SpawnDecalFromHitResult) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SpawnDecalFromHitResult");
static_assert(sizeof(RGameFunctionLibrary_SpawnDecalFromHitResult) == 0x000148, "Wrong size on RGameFunctionLibrary_SpawnDecalFromHitResult");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, HitResult) == 0x000008, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::HitResult' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, DecalMaterial) == 0x000108, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::DecalMaterial' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, DecalSize) == 0x000110, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::DecalSize' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, DecalMinMaxLifetime) == 0x000128, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::DecalMinMaxLifetime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, DecalFadeoutTime) == 0x000138, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::DecalFadeoutTime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnDecalFromHitResult, ReturnValue) == 0x000140, "Member 'RGameFunctionLibrary_SpawnDecalFromHitResult::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SpawnGold
// 0x0030 (0x0030 - 0x0000)
struct RGameFunctionLibrary_SpawnGold final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FractionValue;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_SpawnGold) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SpawnGold");
static_assert(sizeof(RGameFunctionLibrary_SpawnGold) == 0x000030, "Wrong size on RGameFunctionLibrary_SpawnGold");
static_assert(offsetof(RGameFunctionLibrary_SpawnGold, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SpawnGold::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnGold, TotalValue) == 0x000008, "Member 'RGameFunctionLibrary_SpawnGold::TotalValue' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnGold, Location) == 0x000010, "Member 'RGameFunctionLibrary_SpawnGold::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnGold, FractionValue) == 0x000028, "Member 'RGameFunctionLibrary_SpawnGold::FractionValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SpawnHitEffect
// 0x0120 (0x0120 - 0x0000)
struct RGameFunctionLibrary_SpawnHitEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class AController*                      Controller;                                        // 0x0108(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataTable*                       SurfaceFXTableOverride;                            // 0x0110(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDataTable*                       SurfaceSFXTableOverride;                           // 0x0118(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SpawnHitEffect) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SpawnHitEffect");
static_assert(sizeof(RGameFunctionLibrary_SpawnHitEffect) == 0x000120, "Wrong size on RGameFunctionLibrary_SpawnHitEffect");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffect, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SpawnHitEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffect, HitResult) == 0x000008, "Member 'RGameFunctionLibrary_SpawnHitEffect::HitResult' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffect, Controller) == 0x000108, "Member 'RGameFunctionLibrary_SpawnHitEffect::Controller' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffect, SurfaceFXTableOverride) == 0x000110, "Member 'RGameFunctionLibrary_SpawnHitEffect::SurfaceFXTableOverride' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffect, SurfaceSFXTableOverride) == 0x000118, "Member 'RGameFunctionLibrary_SpawnHitEffect::SurfaceSFXTableOverride' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SpawnHitEffectsOnPawn
// 0x0118 (0x0118 - 0x0000)
struct RGameFunctionLibrary_SpawnHitEffectsOnPawn final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VFXTag;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0010(0x0100)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          WasCritical;                                       // 0x0110(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_SpawnHitEffectsOnPawn) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SpawnHitEffectsOnPawn");
static_assert(sizeof(RGameFunctionLibrary_SpawnHitEffectsOnPawn) == 0x000118, "Wrong size on RGameFunctionLibrary_SpawnHitEffectsOnPawn");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffectsOnPawn, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_SpawnHitEffectsOnPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffectsOnPawn, VFXTag) == 0x000008, "Member 'RGameFunctionLibrary_SpawnHitEffectsOnPawn::VFXTag' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffectsOnPawn, HitResult) == 0x000010, "Member 'RGameFunctionLibrary_SpawnHitEffectsOnPawn::HitResult' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnHitEffectsOnPawn, WasCritical) == 0x000110, "Member 'RGameFunctionLibrary_SpawnHitEffectsOnPawn::WasCritical' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.SpawnSystemAttached
// 0x0070 (0x0070 - 0x0000)
struct RGameFunctionLibrary_SpawnSystemAttached final
{
public:
	TSubclassOf<class URNiagaraComponent>         RNiagaraComponentClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolingMethod;                                     // 0x0061(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0062(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0063(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_SpawnSystemAttached) == 0x000008, "Wrong alignment on RGameFunctionLibrary_SpawnSystemAttached");
static_assert(sizeof(RGameFunctionLibrary_SpawnSystemAttached) == 0x000070, "Wrong size on RGameFunctionLibrary_SpawnSystemAttached");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, RNiagaraComponentClass) == 0x000000, "Member 'RGameFunctionLibrary_SpawnSystemAttached::RNiagaraComponentClass' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, AttachToComponent) == 0x000008, "Member 'RGameFunctionLibrary_SpawnSystemAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, AttachPointName) == 0x000010, "Member 'RGameFunctionLibrary_SpawnSystemAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, Location) == 0x000018, "Member 'RGameFunctionLibrary_SpawnSystemAttached::Location' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, Rotation) == 0x000030, "Member 'RGameFunctionLibrary_SpawnSystemAttached::Rotation' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, Scale) == 0x000048, "Member 'RGameFunctionLibrary_SpawnSystemAttached::Scale' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, LocationType) == 0x000060, "Member 'RGameFunctionLibrary_SpawnSystemAttached::LocationType' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, PoolingMethod) == 0x000061, "Member 'RGameFunctionLibrary_SpawnSystemAttached::PoolingMethod' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, bAutoDestroy) == 0x000062, "Member 'RGameFunctionLibrary_SpawnSystemAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, bAutoActivate) == 0x000063, "Member 'RGameFunctionLibrary_SpawnSystemAttached::bAutoActivate' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, bPreCullCheck) == 0x000064, "Member 'RGameFunctionLibrary_SpawnSystemAttached::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_SpawnSystemAttached, ReturnValue) == 0x000068, "Member 'RGameFunctionLibrary_SpawnSystemAttached::ReturnValue' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.StartLoadingScreen
// 0x000C (0x000C - 0x0000)
struct RGameFunctionLibrary_StartLoadingScreen final
{
public:
	bool                                          bPlayUntilStopped;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceStart;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameFunctionLibrary_StartLoadingScreen) == 0x000004, "Wrong alignment on RGameFunctionLibrary_StartLoadingScreen");
static_assert(sizeof(RGameFunctionLibrary_StartLoadingScreen) == 0x00000C, "Wrong size on RGameFunctionLibrary_StartLoadingScreen");
static_assert(offsetof(RGameFunctionLibrary_StartLoadingScreen, bPlayUntilStopped) == 0x000000, "Member 'RGameFunctionLibrary_StartLoadingScreen::bPlayUntilStopped' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_StartLoadingScreen, PlayTime) == 0x000004, "Member 'RGameFunctionLibrary_StartLoadingScreen::PlayTime' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_StartLoadingScreen, bForceStart) == 0x000008, "Member 'RGameFunctionLibrary_StartLoadingScreen::bForceStart' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.UnlockAllAbilities
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_UnlockAllAbilities final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_UnlockAllAbilities) == 0x000008, "Wrong alignment on RGameFunctionLibrary_UnlockAllAbilities");
static_assert(sizeof(RGameFunctionLibrary_UnlockAllAbilities) == 0x000008, "Wrong size on RGameFunctionLibrary_UnlockAllAbilities");
static_assert(offsetof(RGameFunctionLibrary_UnlockAllAbilities, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_UnlockAllAbilities::WorldContextObject' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.UnlockAllLockedContent
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_UnlockAllLockedContent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_UnlockAllLockedContent) == 0x000008, "Wrong alignment on RGameFunctionLibrary_UnlockAllLockedContent");
static_assert(sizeof(RGameFunctionLibrary_UnlockAllLockedContent) == 0x000008, "Wrong size on RGameFunctionLibrary_UnlockAllLockedContent");
static_assert(offsetof(RGameFunctionLibrary_UnlockAllLockedContent, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_UnlockAllLockedContent::WorldContextObject' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.UnlockAllMutators
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_UnlockAllMutators final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_UnlockAllMutators) == 0x000008, "Wrong alignment on RGameFunctionLibrary_UnlockAllMutators");
static_assert(sizeof(RGameFunctionLibrary_UnlockAllMutators) == 0x000008, "Wrong size on RGameFunctionLibrary_UnlockAllMutators");
static_assert(offsetof(RGameFunctionLibrary_UnlockAllMutators, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_UnlockAllMutators::WorldContextObject' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.UnlockAllWeaponMods
// 0x0008 (0x0008 - 0x0000)
struct RGameFunctionLibrary_UnlockAllWeaponMods final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_UnlockAllWeaponMods) == 0x000008, "Wrong alignment on RGameFunctionLibrary_UnlockAllWeaponMods");
static_assert(sizeof(RGameFunctionLibrary_UnlockAllWeaponMods) == 0x000008, "Wrong size on RGameFunctionLibrary_UnlockAllWeaponMods");
static_assert(offsetof(RGameFunctionLibrary_UnlockAllWeaponMods, WorldContextObject) == 0x000000, "Member 'RGameFunctionLibrary_UnlockAllWeaponMods::WorldContextObject' has a wrong offset!");

// Function RGame.RGameFunctionLibrary.WriteRunStatsToTextFile
// 0x00D8 (0x00D8 - 0x0000)
struct RGameFunctionLibrary_WriteRunStatsToTextFile final
{
public:
	struct FRPlayerStats                          Stats;                                             // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         RunIndex;                                          // 0x00C0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x00C8(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameFunctionLibrary_WriteRunStatsToTextFile) == 0x000008, "Wrong alignment on RGameFunctionLibrary_WriteRunStatsToTextFile");
static_assert(sizeof(RGameFunctionLibrary_WriteRunStatsToTextFile) == 0x0000D8, "Wrong size on RGameFunctionLibrary_WriteRunStatsToTextFile");
static_assert(offsetof(RGameFunctionLibrary_WriteRunStatsToTextFile, Stats) == 0x000000, "Member 'RGameFunctionLibrary_WriteRunStatsToTextFile::Stats' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_WriteRunStatsToTextFile, RunIndex) == 0x0000C0, "Member 'RGameFunctionLibrary_WriteRunStatsToTextFile::RunIndex' has a wrong offset!");
static_assert(offsetof(RGameFunctionLibrary_WriteRunStatsToTextFile, PlayerName) == 0x0000C8, "Member 'RGameFunctionLibrary_WriteRunStatsToTextFile::PlayerName' has a wrong offset!");

// Function RGame.RGameHud.GetChatLogWidget
// 0x0008 (0x0008 - 0x0000)
struct RGameHud_GetChatLogWidget final
{
public:
	class URChatLog*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_GetChatLogWidget) == 0x000008, "Wrong alignment on RGameHud_GetChatLogWidget");
static_assert(sizeof(RGameHud_GetChatLogWidget) == 0x000008, "Wrong size on RGameHud_GetChatLogWidget");
static_assert(offsetof(RGameHud_GetChatLogWidget, ReturnValue) == 0x000000, "Member 'RGameHud_GetChatLogWidget::ReturnValue' has a wrong offset!");

// Function RGame.RGameHud.GetWaitingForPlayersWidget
// 0x0008 (0x0008 - 0x0000)
struct RGameHud_GetWaitingForPlayersWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_GetWaitingForPlayersWidget) == 0x000008, "Wrong alignment on RGameHud_GetWaitingForPlayersWidget");
static_assert(sizeof(RGameHud_GetWaitingForPlayersWidget) == 0x000008, "Wrong size on RGameHud_GetWaitingForPlayersWidget");
static_assert(offsetof(RGameHud_GetWaitingForPlayersWidget, ReturnValue) == 0x000000, "Member 'RGameHud_GetWaitingForPlayersWidget::ReturnValue' has a wrong offset!");

// Function RGame.RGameHud.IsWaitingForPlayersWidgetVisible
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_IsWaitingForPlayersWidgetVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_IsWaitingForPlayersWidgetVisible) == 0x000001, "Wrong alignment on RGameHud_IsWaitingForPlayersWidgetVisible");
static_assert(sizeof(RGameHud_IsWaitingForPlayersWidgetVisible) == 0x000001, "Wrong size on RGameHud_IsWaitingForPlayersWidgetVisible");
static_assert(offsetof(RGameHud_IsWaitingForPlayersWidgetVisible, ReturnValue) == 0x000000, "Member 'RGameHud_IsWaitingForPlayersWidgetVisible::ReturnValue' has a wrong offset!");

// Function RGame.RGameHud.ReinitBossHealthWidget
// 0x0008 (0x0008 - 0x0000)
struct RGameHud_ReinitBossHealthWidget final
{
public:
	class ARBossPawnBase*                         BossPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_ReinitBossHealthWidget) == 0x000008, "Wrong alignment on RGameHud_ReinitBossHealthWidget");
static_assert(sizeof(RGameHud_ReinitBossHealthWidget) == 0x000008, "Wrong size on RGameHud_ReinitBossHealthWidget");
static_assert(offsetof(RGameHud_ReinitBossHealthWidget, BossPawn) == 0x000000, "Member 'RGameHud_ReinitBossHealthWidget::BossPawn' has a wrong offset!");

// Function RGame.RGameHud.SetBarrierGaugeVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetBarrierGaugeVisibility final
{
public:
	ESlateVisibility                              BarrierGaugeVisibility;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetBarrierGaugeVisibility) == 0x000001, "Wrong alignment on RGameHud_SetBarrierGaugeVisibility");
static_assert(sizeof(RGameHud_SetBarrierGaugeVisibility) == 0x000001, "Wrong size on RGameHud_SetBarrierGaugeVisibility");
static_assert(offsetof(RGameHud_SetBarrierGaugeVisibility, BarrierGaugeVisibility) == 0x000000, "Member 'RGameHud_SetBarrierGaugeVisibility::BarrierGaugeVisibility' has a wrong offset!");

// Function RGame.RGameHud.SetChargeUpBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetChargeUpBarVisibility final
{
public:
	ESlateVisibility                              ChargeUpBarVilibility;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetChargeUpBarVisibility) == 0x000001, "Wrong alignment on RGameHud_SetChargeUpBarVisibility");
static_assert(sizeof(RGameHud_SetChargeUpBarVisibility) == 0x000001, "Wrong size on RGameHud_SetChargeUpBarVisibility");
static_assert(offsetof(RGameHud_SetChargeUpBarVisibility, ChargeUpBarVilibility) == 0x000000, "Member 'RGameHud_SetChargeUpBarVisibility::ChargeUpBarVilibility' has a wrong offset!");

// Function RGame.RGameHud.SetCrosshairCooldownIndicatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetCrosshairCooldownIndicatorVisibility final
{
public:
	ESlateVisibility                              CrosshairIndicatorVisibility;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetCrosshairCooldownIndicatorVisibility) == 0x000001, "Wrong alignment on RGameHud_SetCrosshairCooldownIndicatorVisibility");
static_assert(sizeof(RGameHud_SetCrosshairCooldownIndicatorVisibility) == 0x000001, "Wrong size on RGameHud_SetCrosshairCooldownIndicatorVisibility");
static_assert(offsetof(RGameHud_SetCrosshairCooldownIndicatorVisibility, CrosshairIndicatorVisibility) == 0x000000, "Member 'RGameHud_SetCrosshairCooldownIndicatorVisibility::CrosshairIndicatorVisibility' has a wrong offset!");

// Function RGame.RGameHud.SetOverheatBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetOverheatBarVisibility final
{
public:
	ESlateVisibility                              OverheatBarVilibility;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetOverheatBarVisibility) == 0x000001, "Wrong alignment on RGameHud_SetOverheatBarVisibility");
static_assert(sizeof(RGameHud_SetOverheatBarVisibility) == 0x000001, "Wrong size on RGameHud_SetOverheatBarVisibility");
static_assert(offsetof(RGameHud_SetOverheatBarVisibility, OverheatBarVilibility) == 0x000000, "Member 'RGameHud_SetOverheatBarVisibility::OverheatBarVilibility' has a wrong offset!");

// Function RGame.RGameHud.SetPreventBossHealthbarRemovalOnDeath
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetPreventBossHealthbarRemovalOnDeath final
{
public:
	bool                                          bShouldPrevent;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetPreventBossHealthbarRemovalOnDeath) == 0x000001, "Wrong alignment on RGameHud_SetPreventBossHealthbarRemovalOnDeath");
static_assert(sizeof(RGameHud_SetPreventBossHealthbarRemovalOnDeath) == 0x000001, "Wrong size on RGameHud_SetPreventBossHealthbarRemovalOnDeath");
static_assert(offsetof(RGameHud_SetPreventBossHealthbarRemovalOnDeath, bShouldPrevent) == 0x000000, "Member 'RGameHud_SetPreventBossHealthbarRemovalOnDeath::bShouldPrevent' has a wrong offset!");

// Function RGame.RGameHud.SetReviveAvailabilityVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetReviveAvailabilityVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetReviveAvailabilityVisibility) == 0x000001, "Wrong alignment on RGameHud_SetReviveAvailabilityVisibility");
static_assert(sizeof(RGameHud_SetReviveAvailabilityVisibility) == 0x000001, "Wrong size on RGameHud_SetReviveAvailabilityVisibility");
static_assert(offsetof(RGameHud_SetReviveAvailabilityVisibility, InVisibility) == 0x000000, "Member 'RGameHud_SetReviveAvailabilityVisibility::InVisibility' has a wrong offset!");

// Function RGame.RGameHud.SetSpiritGaugeVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetSpiritGaugeVisibility final
{
public:
	ESlateVisibility                              SpiritGaugeVisibility;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetSpiritGaugeVisibility) == 0x000001, "Wrong alignment on RGameHud_SetSpiritGaugeVisibility");
static_assert(sizeof(RGameHud_SetSpiritGaugeVisibility) == 0x000001, "Wrong size on RGameHud_SetSpiritGaugeVisibility");
static_assert(offsetof(RGameHud_SetSpiritGaugeVisibility, SpiritGaugeVisibility) == 0x000000, "Member 'RGameHud_SetSpiritGaugeVisibility::SpiritGaugeVisibility' has a wrong offset!");

// Function RGame.RGameHud.SetTimerBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_SetTimerBarVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_SetTimerBarVisibility) == 0x000001, "Wrong alignment on RGameHud_SetTimerBarVisibility");
static_assert(sizeof(RGameHud_SetTimerBarVisibility) == 0x000001, "Wrong size on RGameHud_SetTimerBarVisibility");
static_assert(offsetof(RGameHud_SetTimerBarVisibility, InVisibility) == 0x000000, "Member 'RGameHud_SetTimerBarVisibility::InVisibility' has a wrong offset!");

// Function RGame.RGameHud.UpdateBarrierGaugePercent
// 0x0004 (0x0004 - 0x0000)
struct RGameHud_UpdateBarrierGaugePercent final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_UpdateBarrierGaugePercent) == 0x000004, "Wrong alignment on RGameHud_UpdateBarrierGaugePercent");
static_assert(sizeof(RGameHud_UpdateBarrierGaugePercent) == 0x000004, "Wrong size on RGameHud_UpdateBarrierGaugePercent");
static_assert(offsetof(RGameHud_UpdateBarrierGaugePercent, Threshold) == 0x000000, "Member 'RGameHud_UpdateBarrierGaugePercent::Threshold' has a wrong offset!");

// Function RGame.RGameHud.UpdateBossHealthWidget
// 0x0010 (0x0010 - 0x0000)
struct RGameHud_UpdateBossHealthWidget final
{
public:
	class ARBossPawnBase*                         BossPawn;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              BossHealthVisibility;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameHud_UpdateBossHealthWidget) == 0x000008, "Wrong alignment on RGameHud_UpdateBossHealthWidget");
static_assert(sizeof(RGameHud_UpdateBossHealthWidget) == 0x000010, "Wrong size on RGameHud_UpdateBossHealthWidget");
static_assert(offsetof(RGameHud_UpdateBossHealthWidget, BossPawn) == 0x000000, "Member 'RGameHud_UpdateBossHealthWidget::BossPawn' has a wrong offset!");
static_assert(offsetof(RGameHud_UpdateBossHealthWidget, BossHealthVisibility) == 0x000008, "Member 'RGameHud_UpdateBossHealthWidget::BossHealthVisibility' has a wrong offset!");

// Function RGame.RGameHud.UpdateChargeUpProgressBarPercent
// 0x0004 (0x0004 - 0x0000)
struct RGameHud_UpdateChargeUpProgressBarPercent final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_UpdateChargeUpProgressBarPercent) == 0x000004, "Wrong alignment on RGameHud_UpdateChargeUpProgressBarPercent");
static_assert(sizeof(RGameHud_UpdateChargeUpProgressBarPercent) == 0x000004, "Wrong size on RGameHud_UpdateChargeUpProgressBarPercent");
static_assert(offsetof(RGameHud_UpdateChargeUpProgressBarPercent, Threshold) == 0x000000, "Member 'RGameHud_UpdateChargeUpProgressBarPercent::Threshold' has a wrong offset!");

// Function RGame.RGameHud.UpdateReviveAvailability
// 0x0001 (0x0001 - 0x0000)
struct RGameHud_UpdateReviveAvailability final
{
public:
	bool                                          isConsumed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_UpdateReviveAvailability) == 0x000001, "Wrong alignment on RGameHud_UpdateReviveAvailability");
static_assert(sizeof(RGameHud_UpdateReviveAvailability) == 0x000001, "Wrong size on RGameHud_UpdateReviveAvailability");
static_assert(offsetof(RGameHud_UpdateReviveAvailability, isConsumed) == 0x000000, "Member 'RGameHud_UpdateReviveAvailability::isConsumed' has a wrong offset!");

// Function RGame.RGameHud.UpdateSpiritGaugePercent
// 0x0004 (0x0004 - 0x0000)
struct RGameHud_UpdateSpiritGaugePercent final
{
public:
	float                                         Threshold;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_UpdateSpiritGaugePercent) == 0x000004, "Wrong alignment on RGameHud_UpdateSpiritGaugePercent");
static_assert(sizeof(RGameHud_UpdateSpiritGaugePercent) == 0x000004, "Wrong size on RGameHud_UpdateSpiritGaugePercent");
static_assert(offsetof(RGameHud_UpdateSpiritGaugePercent, Threshold) == 0x000000, "Member 'RGameHud_UpdateSpiritGaugePercent::Threshold' has a wrong offset!");

// Function RGame.RGameHud.UpdateTimerBarPercentage
// 0x0004 (0x0004 - 0x0000)
struct RGameHud_UpdateTimerBarPercentage final
{
public:
	float                                         PercentageLeft;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameHud_UpdateTimerBarPercentage) == 0x000004, "Wrong alignment on RGameHud_UpdateTimerBarPercentage");
static_assert(sizeof(RGameHud_UpdateTimerBarPercentage) == 0x000004, "Wrong size on RGameHud_UpdateTimerBarPercentage");
static_assert(offsetof(RGameHud_UpdateTimerBarPercentage, PercentageLeft) == 0x000000, "Member 'RGameHud_UpdateTimerBarPercentage::PercentageLeft' has a wrong offset!");

// Function RGame.RGameInstance.GetEOSStats
// 0x0010 (0x0010 - 0x0000)
struct RGameInstance_GetEOSStats final
{
public:
	TArray<class FString>                         StatNames;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameInstance_GetEOSStats) == 0x000008, "Wrong alignment on RGameInstance_GetEOSStats");
static_assert(sizeof(RGameInstance_GetEOSStats) == 0x000010, "Wrong size on RGameInstance_GetEOSStats");
static_assert(offsetof(RGameInstance_GetEOSStats, StatNames) == 0x000000, "Member 'RGameInstance_GetEOSStats::StatNames' has a wrong offset!");

// Function RGame.RGameInstance.SetJoinablePresence
// 0x0001 (0x0001 - 0x0000)
struct RGameInstance_SetJoinablePresence final
{
public:
	bool                                          bJoinable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameInstance_SetJoinablePresence) == 0x000001, "Wrong alignment on RGameInstance_SetJoinablePresence");
static_assert(sizeof(RGameInstance_SetJoinablePresence) == 0x000001, "Wrong size on RGameInstance_SetJoinablePresence");
static_assert(offsetof(RGameInstance_SetJoinablePresence, bJoinable) == 0x000000, "Member 'RGameInstance_SetJoinablePresence::bJoinable' has a wrong offset!");

// Function RGame.RGameInstance.UpdateEOSStats
// 0x0018 (0x0018 - 0x0000)
struct RGameInstance_UpdateEOSStats final
{
public:
	class FString                                 StatName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameInstance_UpdateEOSStats) == 0x000008, "Wrong alignment on RGameInstance_UpdateEOSStats");
static_assert(sizeof(RGameInstance_UpdateEOSStats) == 0x000018, "Wrong size on RGameInstance_UpdateEOSStats");
static_assert(offsetof(RGameInstance_UpdateEOSStats, StatName) == 0x000000, "Member 'RGameInstance_UpdateEOSStats::StatName' has a wrong offset!");
static_assert(offsetof(RGameInstance_UpdateEOSStats, Value) == 0x000010, "Member 'RGameInstance_UpdateEOSStats::Value' has a wrong offset!");

// Function RGame.RPlayerController.BroadcastOnPlayerDroppedMutator
// 0x0018 (0x0018 - 0x0000)
struct RPlayerController_BroadcastOnPlayerDroppedMutator final
{
public:
	class ARPlayerController*                     RPlayerController;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerController_BroadcastOnPlayerDroppedMutator) == 0x000008, "Wrong alignment on RPlayerController_BroadcastOnPlayerDroppedMutator");
static_assert(sizeof(RPlayerController_BroadcastOnPlayerDroppedMutator) == 0x000018, "Wrong size on RPlayerController_BroadcastOnPlayerDroppedMutator");
static_assert(offsetof(RPlayerController_BroadcastOnPlayerDroppedMutator, RPlayerController) == 0x000000, "Member 'RPlayerController_BroadcastOnPlayerDroppedMutator::RPlayerController' has a wrong offset!");
static_assert(offsetof(RPlayerController_BroadcastOnPlayerDroppedMutator, RMutatorPrimaryAsset) == 0x000008, "Member 'RPlayerController_BroadcastOnPlayerDroppedMutator::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerController_BroadcastOnPlayerDroppedMutator, Rank) == 0x000010, "Member 'RPlayerController_BroadcastOnPlayerDroppedMutator::Rank' has a wrong offset!");

// Function RGame.RPlayerController.GamepadIconSchemeUpdated
// 0x0001 (0x0001 - 0x0000)
struct RPlayerController_GamepadIconSchemeUpdated final
{
public:
	EGamepadIconScheme                            NewIconScheme;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerController_GamepadIconSchemeUpdated) == 0x000001, "Wrong alignment on RPlayerController_GamepadIconSchemeUpdated");
static_assert(sizeof(RPlayerController_GamepadIconSchemeUpdated) == 0x000001, "Wrong size on RPlayerController_GamepadIconSchemeUpdated");
static_assert(offsetof(RPlayerController_GamepadIconSchemeUpdated, NewIconScheme) == 0x000000, "Member 'RPlayerController_GamepadIconSchemeUpdated::NewIconScheme' has a wrong offset!");

// Function RGame.RPlayerController.GetHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct RPlayerController_GetHUDWidget final
{
public:
	class URCommonHUDWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerController_GetHUDWidget) == 0x000008, "Wrong alignment on RPlayerController_GetHUDWidget");
static_assert(sizeof(RPlayerController_GetHUDWidget) == 0x000008, "Wrong size on RPlayerController_GetHUDWidget");
static_assert(offsetof(RPlayerController_GetHUDWidget, ReturnValue) == 0x000000, "Member 'RPlayerController_GetHUDWidget::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerController.SetClientControlRotation
// 0x0018 (0x0018 - 0x0000)
struct RPlayerController_SetClientControlRotation final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerController_SetClientControlRotation) == 0x000008, "Wrong alignment on RPlayerController_SetClientControlRotation");
static_assert(sizeof(RPlayerController_SetClientControlRotation) == 0x000018, "Wrong size on RPlayerController_SetClientControlRotation");
static_assert(offsetof(RPlayerController_SetClientControlRotation, Rotator) == 0x000000, "Member 'RPlayerController_SetClientControlRotation::Rotator' has a wrong offset!");

// Function RGame.RPlayerController.UpdatePostProcessGamma
// 0x0004 (0x0004 - 0x0000)
struct RPlayerController_UpdatePostProcessGamma final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerController_UpdatePostProcessGamma) == 0x000004, "Wrong alignment on RPlayerController_UpdatePostProcessGamma");
static_assert(sizeof(RPlayerController_UpdatePostProcessGamma) == 0x000004, "Wrong size on RPlayerController_UpdatePostProcessGamma");
static_assert(offsetof(RPlayerController_UpdatePostProcessGamma, NewValue) == 0x000000, "Member 'RPlayerController_UpdatePostProcessGamma::NewValue' has a wrong offset!");

// Function RGame.RPlayerController.BroadcastOnPlayerSkillTreeUpdated
// 0x0008 (0x0008 - 0x0000)
struct RPlayerController_BroadcastOnPlayerSkillTreeUpdated final
{
public:
	int32                                         NumPointsAssigned;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMaxPoints;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerController_BroadcastOnPlayerSkillTreeUpdated) == 0x000004, "Wrong alignment on RPlayerController_BroadcastOnPlayerSkillTreeUpdated");
static_assert(sizeof(RPlayerController_BroadcastOnPlayerSkillTreeUpdated) == 0x000008, "Wrong size on RPlayerController_BroadcastOnPlayerSkillTreeUpdated");
static_assert(offsetof(RPlayerController_BroadcastOnPlayerSkillTreeUpdated, NumPointsAssigned) == 0x000000, "Member 'RPlayerController_BroadcastOnPlayerSkillTreeUpdated::NumPointsAssigned' has a wrong offset!");
static_assert(offsetof(RPlayerController_BroadcastOnPlayerSkillTreeUpdated, NumMaxPoints) == 0x000004, "Member 'RPlayerController_BroadcastOnPlayerSkillTreeUpdated::NumMaxPoints' has a wrong offset!");

// Function RGame.RGamePlayerController.AddCrosshair
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_AddCrosshair final
{
public:
	class ARWeapon*                               Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_AddCrosshair) == 0x000008, "Wrong alignment on RGamePlayerController_AddCrosshair");
static_assert(sizeof(RGamePlayerController_AddCrosshair) == 0x000008, "Wrong size on RGamePlayerController_AddCrosshair");
static_assert(offsetof(RGamePlayerController_AddCrosshair, Weapon) == 0x000000, "Member 'RGamePlayerController_AddCrosshair::Weapon' has a wrong offset!");

// Function RGame.RGamePlayerController.AddHealthBonus_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_AddHealthBonus_Server final
{
public:
	class URPlayerGScriptComponent*               GScriptComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URCharacterMutatorPrimaryAsset*   HealthBonusMutatorPA;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_AddHealthBonus_Server) == 0x000008, "Wrong alignment on RGamePlayerController_AddHealthBonus_Server");
static_assert(sizeof(RGamePlayerController_AddHealthBonus_Server) == 0x000010, "Wrong size on RGamePlayerController_AddHealthBonus_Server");
static_assert(offsetof(RGamePlayerController_AddHealthBonus_Server, GScriptComponent) == 0x000000, "Member 'RGamePlayerController_AddHealthBonus_Server::GScriptComponent' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_AddHealthBonus_Server, HealthBonusMutatorPA) == 0x000008, "Member 'RGamePlayerController_AddHealthBonus_Server::HealthBonusMutatorPA' has a wrong offset!");

// Function RGame.RGamePlayerController.ApplyPlayerCosmetics
// 0x00E8 (0x00E8 - 0x0000)
struct RGamePlayerController_ApplyPlayerCosmetics final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerCosmeticOption                  CosmeticOptionData;                                // 0x0008(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         EmoteSlot;                                         // 0x00D8(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class URWeaponCosmeticPrimaryAsset*     RWeaponCosmeticPA;                                 // 0x00E0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ApplyPlayerCosmetics) == 0x000008, "Wrong alignment on RGamePlayerController_ApplyPlayerCosmetics");
static_assert(sizeof(RGamePlayerController_ApplyPlayerCosmetics) == 0x0000E8, "Wrong size on RGamePlayerController_ApplyPlayerCosmetics");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics, RPlayerPawn) == 0x000000, "Member 'RGamePlayerController_ApplyPlayerCosmetics::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics, CosmeticOptionData) == 0x000008, "Member 'RGamePlayerController_ApplyPlayerCosmetics::CosmeticOptionData' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics, EmoteSlot) == 0x0000D8, "Member 'RGamePlayerController_ApplyPlayerCosmetics::EmoteSlot' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics, RWeaponCosmeticPA) == 0x0000E0, "Member 'RGamePlayerController_ApplyPlayerCosmetics::RWeaponCosmeticPA' has a wrong offset!");

// Function RGame.RGamePlayerController.ApplyPlayerCosmetics_Server
// 0x00E8 (0x00E8 - 0x0000)
struct RGamePlayerController_ApplyPlayerCosmetics_Server final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerCosmeticOption                  CosmeticOptionData;                                // 0x0008(0x00D0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 RWeaponCosmeticPath;                               // 0x00D8(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ApplyPlayerCosmetics_Server) == 0x000008, "Wrong alignment on RGamePlayerController_ApplyPlayerCosmetics_Server");
static_assert(sizeof(RGamePlayerController_ApplyPlayerCosmetics_Server) == 0x0000E8, "Wrong size on RGamePlayerController_ApplyPlayerCosmetics_Server");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics_Server, RPlayerPawn) == 0x000000, "Member 'RGamePlayerController_ApplyPlayerCosmetics_Server::RPlayerPawn' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics_Server, CosmeticOptionData) == 0x000008, "Member 'RGamePlayerController_ApplyPlayerCosmetics_Server::CosmeticOptionData' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ApplyPlayerCosmetics_Server, RWeaponCosmeticPath) == 0x0000D8, "Member 'RGamePlayerController_ApplyPlayerCosmetics_Server::RWeaponCosmeticPath' has a wrong offset!");

// Function RGame.RGamePlayerController.AttachWeaponToController
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_AttachWeaponToController final
{
public:
	class URWeaponPrimaryAsset*                   WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URWeaponModPrimaryAsset*>        WeaponMods;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSaveToLoadout;                                    // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_AttachWeaponToController) == 0x000008, "Wrong alignment on RGamePlayerController_AttachWeaponToController");
static_assert(sizeof(RGamePlayerController_AttachWeaponToController) == 0x000020, "Wrong size on RGamePlayerController_AttachWeaponToController");
static_assert(offsetof(RGamePlayerController_AttachWeaponToController, WeaponClass) == 0x000000, "Member 'RGamePlayerController_AttachWeaponToController::WeaponClass' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_AttachWeaponToController, WeaponMods) == 0x000008, "Member 'RGamePlayerController_AttachWeaponToController::WeaponMods' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_AttachWeaponToController, bSaveToLoadout) == 0x000018, "Member 'RGamePlayerController_AttachWeaponToController::bSaveToLoadout' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnPlayerChoseGodCategoryMutator
// 0x0040 (0x0040 - 0x0000)
struct RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator final
{
public:
	class FString                                 ChosenGodCategoryName;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DiscardedGodCategoryNames;                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ChosenGodMutatorName;                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DiscardedGodMutatorNames;                          // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator) == 0x000008, "Wrong alignment on RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator");
static_assert(sizeof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator) == 0x000040, "Wrong size on RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator, ChosenGodCategoryName) == 0x000000, "Member 'RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator::ChosenGodCategoryName' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator, DiscardedGodCategoryNames) == 0x000010, "Member 'RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator::DiscardedGodCategoryNames' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator, ChosenGodMutatorName) == 0x000020, "Member 'RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator::ChosenGodMutatorName' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator, DiscardedGodMutatorNames) == 0x000030, "Member 'RGamePlayerController_BroadcastOnPlayerChoseGodCategoryMutator::DiscardedGodMutatorNames' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnPlayerPurchaseItem
// 0x0028 (0x0028 - 0x0000)
struct RGamePlayerController_BroadcastOnPlayerPurchaseItem final
{
public:
	class FString                                 PurchasedItemName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasedItemCost;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         NotPurchasedItems;                                 // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnPlayerPurchaseItem) == 0x000008, "Wrong alignment on RGamePlayerController_BroadcastOnPlayerPurchaseItem");
static_assert(sizeof(RGamePlayerController_BroadcastOnPlayerPurchaseItem) == 0x000028, "Wrong size on RGamePlayerController_BroadcastOnPlayerPurchaseItem");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerPurchaseItem, PurchasedItemName) == 0x000000, "Member 'RGamePlayerController_BroadcastOnPlayerPurchaseItem::PurchasedItemName' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerPurchaseItem, PurchasedItemCost) == 0x000010, "Member 'RGamePlayerController_BroadcastOnPlayerPurchaseItem::PurchasedItemCost' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnPlayerPurchaseItem, NotPurchasedItems) == 0x000018, "Member 'RGamePlayerController_BroadcastOnPlayerPurchaseItem::NotPurchasedItems' has a wrong offset!");

// Function RGame.RGamePlayerController.ClientPushFloatingTextAtLocation
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_ClientPushFloatingTextAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERFloatingTextType                            Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ClientPushFloatingTextAtLocation) == 0x000008, "Wrong alignment on RGamePlayerController_ClientPushFloatingTextAtLocation");
static_assert(sizeof(RGamePlayerController_ClientPushFloatingTextAtLocation) == 0x000020, "Wrong size on RGamePlayerController_ClientPushFloatingTextAtLocation");
static_assert(offsetof(RGamePlayerController_ClientPushFloatingTextAtLocation, Location) == 0x000000, "Member 'RGamePlayerController_ClientPushFloatingTextAtLocation::Location' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ClientPushFloatingTextAtLocation, Type) == 0x000018, "Member 'RGamePlayerController_ClientPushFloatingTextAtLocation::Type' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ClientPushFloatingTextAtLocation, Value) == 0x00001C, "Member 'RGamePlayerController_ClientPushFloatingTextAtLocation::Value' has a wrong offset!");

// Function RGame.RGamePlayerController.ClientQueueFloatingTextAtLocation
// 0x0028 (0x0028 - 0x0000)
struct RGamePlayerController_ClientQueueFloatingTextAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERFloatingTextType                            Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDelay;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_ClientQueueFloatingTextAtLocation) == 0x000008, "Wrong alignment on RGamePlayerController_ClientQueueFloatingTextAtLocation");
static_assert(sizeof(RGamePlayerController_ClientQueueFloatingTextAtLocation) == 0x000028, "Wrong size on RGamePlayerController_ClientQueueFloatingTextAtLocation");
static_assert(offsetof(RGamePlayerController_ClientQueueFloatingTextAtLocation, Location) == 0x000000, "Member 'RGamePlayerController_ClientQueueFloatingTextAtLocation::Location' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ClientQueueFloatingTextAtLocation, Type) == 0x000018, "Member 'RGamePlayerController_ClientQueueFloatingTextAtLocation::Type' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ClientQueueFloatingTextAtLocation, Value) == 0x00001C, "Member 'RGamePlayerController_ClientQueueFloatingTextAtLocation::Value' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ClientQueueFloatingTextAtLocation, bSkipDelay) == 0x000020, "Member 'RGamePlayerController_ClientQueueFloatingTextAtLocation::bSkipDelay' has a wrong offset!");

// Function RGame.RGamePlayerController.EquipStartLoadout
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_EquipStartLoadout final
{
public:
	bool                                          bIsRespawning;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_EquipStartLoadout) == 0x000001, "Wrong alignment on RGamePlayerController_EquipStartLoadout");
static_assert(sizeof(RGamePlayerController_EquipStartLoadout) == 0x000001, "Wrong size on RGamePlayerController_EquipStartLoadout");
static_assert(offsetof(RGamePlayerController_EquipStartLoadout, bIsRespawning) == 0x000000, "Member 'RGamePlayerController_EquipStartLoadout::bIsRespawning' has a wrong offset!");

// Function RGame.RGamePlayerController.HealActor_Server
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_HealActor_Server final
{
public:
	class URHealthComponent*                      HealthComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 _Instigator;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToHeal;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealType                                     HealType;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_HealActor_Server) == 0x000008, "Wrong alignment on RGamePlayerController_HealActor_Server");
static_assert(sizeof(RGamePlayerController_HealActor_Server) == 0x000020, "Wrong size on RGamePlayerController_HealActor_Server");
static_assert(offsetof(RGamePlayerController_HealActor_Server, HealthComp) == 0x000000, "Member 'RGamePlayerController_HealActor_Server::HealthComp' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_HealActor_Server, _Instigator) == 0x000008, "Member 'RGamePlayerController_HealActor_Server::_Instigator' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_HealActor_Server, ActorToHeal) == 0x000010, "Member 'RGamePlayerController_HealActor_Server::ActorToHeal' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_HealActor_Server, HealType) == 0x000018, "Member 'RGamePlayerController_HealActor_Server::HealType' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_HealActor_Server, Value) == 0x00001C, "Member 'RGamePlayerController_HealActor_Server::Value' has a wrong offset!");

// Function RGame.RGamePlayerController.K2_OnPawnHealthDepleted
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_K2_OnPawnHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_K2_OnPawnHealthDepleted) == 0x000008, "Wrong alignment on RGamePlayerController_K2_OnPawnHealthDepleted");
static_assert(sizeof(RGamePlayerController_K2_OnPawnHealthDepleted) == 0x000008, "Wrong size on RGamePlayerController_K2_OnPawnHealthDepleted");
static_assert(offsetof(RGamePlayerController_K2_OnPawnHealthDepleted, Component) == 0x000000, "Member 'RGamePlayerController_K2_OnPawnHealthDepleted::Component' has a wrong offset!");

// Function RGame.RGamePlayerController.KeyUsed_Server
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_KeyUsed_Server final
{
public:
	class AActor*                                 ActorUsedOn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_KeyUsed_Server) == 0x000008, "Wrong alignment on RGamePlayerController_KeyUsed_Server");
static_assert(sizeof(RGamePlayerController_KeyUsed_Server) == 0x000008, "Wrong size on RGamePlayerController_KeyUsed_Server");
static_assert(offsetof(RGamePlayerController_KeyUsed_Server, ActorUsedOn) == 0x000000, "Member 'RGamePlayerController_KeyUsed_Server::ActorUsedOn' has a wrong offset!");

// Function RGame.RGamePlayerController.OnCastStarted_Client
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_OnCastStarted_Client final
{
public:
	float                                         CastTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCastTime;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnCastStarted_Client) == 0x000004, "Wrong alignment on RGamePlayerController_OnCastStarted_Client");
static_assert(sizeof(RGamePlayerController_OnCastStarted_Client) == 0x000008, "Wrong size on RGamePlayerController_OnCastStarted_Client");
static_assert(offsetof(RGamePlayerController_OnCastStarted_Client, CastTime) == 0x000000, "Member 'RGamePlayerController_OnCastStarted_Client::CastTime' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_OnCastStarted_Client, CurrentCastTime) == 0x000004, "Member 'RGamePlayerController_OnCastStarted_Client::CurrentCastTime' has a wrong offset!");

// Function RGame.RGamePlayerController.OnCommonInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_OnCommonInputTypeChanged final
{
public:
	ECommonInputType                              InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnCommonInputTypeChanged) == 0x000001, "Wrong alignment on RGamePlayerController_OnCommonInputTypeChanged");
static_assert(sizeof(RGamePlayerController_OnCommonInputTypeChanged) == 0x000001, "Wrong size on RGamePlayerController_OnCommonInputTypeChanged");
static_assert(offsetof(RGamePlayerController_OnCommonInputTypeChanged, InputType) == 0x000000, "Member 'RGamePlayerController_OnCommonInputTypeChanged::InputType' has a wrong offset!");

// Function RGame.RGamePlayerController.OnCrosshairAlignmentChanged
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_OnCrosshairAlignmentChanged final
{
public:
	ECrosshairAlignmentOption                     NewOption;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnCrosshairAlignmentChanged) == 0x000001, "Wrong alignment on RGamePlayerController_OnCrosshairAlignmentChanged");
static_assert(sizeof(RGamePlayerController_OnCrosshairAlignmentChanged) == 0x000001, "Wrong size on RGamePlayerController_OnCrosshairAlignmentChanged");
static_assert(offsetof(RGamePlayerController_OnCrosshairAlignmentChanged, NewOption) == 0x000000, "Member 'RGamePlayerController_OnCrosshairAlignmentChanged::NewOption' has a wrong offset!");

// Function RGame.RGamePlayerController.OnGameEnded_Client
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_OnGameEnded_Client final
{
public:
	bool                                          GameWon;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnGameEnded_Client) == 0x000001, "Wrong alignment on RGamePlayerController_OnGameEnded_Client");
static_assert(sizeof(RGamePlayerController_OnGameEnded_Client) == 0x000001, "Wrong size on RGamePlayerController_OnGameEnded_Client");
static_assert(offsetof(RGamePlayerController_OnGameEnded_Client, GameWon) == 0x000000, "Member 'RGamePlayerController_OnGameEnded_Client::GameWon' has a wrong offset!");

// Function RGame.RGamePlayerController.OnGameEnded_Server
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_OnGameEnded_Server final
{
public:
	bool                                          GameWon;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnGameEnded_Server) == 0x000001, "Wrong alignment on RGamePlayerController_OnGameEnded_Server");
static_assert(sizeof(RGamePlayerController_OnGameEnded_Server) == 0x000001, "Wrong size on RGamePlayerController_OnGameEnded_Server");
static_assert(offsetof(RGamePlayerController_OnGameEnded_Server, GameWon) == 0x000000, "Member 'RGamePlayerController_OnGameEnded_Server::GameWon' has a wrong offset!");

// Function RGame.RGamePlayerController.OnPawnHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RGamePlayerController_OnPawnHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnPawnHealthDepleted) == 0x000008, "Wrong alignment on RGamePlayerController_OnPawnHealthDepleted");
static_assert(sizeof(RGamePlayerController_OnPawnHealthDepleted) == 0x0000C8, "Wrong size on RGamePlayerController_OnPawnHealthDepleted");
static_assert(offsetof(RGamePlayerController_OnPawnHealthDepleted, Component) == 0x000000, "Member 'RGamePlayerController_OnPawnHealthDepleted::Component' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_OnPawnHealthDepleted, DamageEventData) == 0x000008, "Member 'RGamePlayerController_OnPawnHealthDepleted::DamageEventData' has a wrong offset!");

// Function RGame.RGamePlayerController.OnPlayerJoined
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_OnPlayerJoined final
{
public:
	class APlayerState*                           JoiningPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnPlayerJoined) == 0x000008, "Wrong alignment on RGamePlayerController_OnPlayerJoined");
static_assert(sizeof(RGamePlayerController_OnPlayerJoined) == 0x000008, "Wrong size on RGamePlayerController_OnPlayerJoined");
static_assert(offsetof(RGamePlayerController_OnPlayerJoined, JoiningPlayerState) == 0x000000, "Member 'RGamePlayerController_OnPlayerJoined::JoiningPlayerState' has a wrong offset!");

// Function RGame.RGamePlayerController.OnUserInputDeviceChange
// 0x000C (0x000C - 0x0000)
struct RGamePlayerController_OnUserInputDeviceChange final
{
public:
	EInputDeviceConnectionState                   NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_OnUserInputDeviceChange) == 0x000004, "Wrong alignment on RGamePlayerController_OnUserInputDeviceChange");
static_assert(sizeof(RGamePlayerController_OnUserInputDeviceChange) == 0x00000C, "Wrong size on RGamePlayerController_OnUserInputDeviceChange");
static_assert(offsetof(RGamePlayerController_OnUserInputDeviceChange, NewConnectionState) == 0x000000, "Member 'RGamePlayerController_OnUserInputDeviceChange::NewConnectionState' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_OnUserInputDeviceChange, PlatformUserId) == 0x000004, "Member 'RGamePlayerController_OnUserInputDeviceChange::PlatformUserId' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_OnUserInputDeviceChange, InputDeviceId) == 0x000008, "Member 'RGamePlayerController_OnUserInputDeviceChange::InputDeviceId' has a wrong offset!");

// Function RGame.RGamePlayerController.PlayEmoteSong
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_PlayEmoteSong final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_PlayEmoteSong) == 0x000008, "Wrong alignment on RGamePlayerController_PlayEmoteSong");
static_assert(sizeof(RGamePlayerController_PlayEmoteSong) == 0x000008, "Wrong size on RGamePlayerController_PlayEmoteSong");
static_assert(offsetof(RGamePlayerController_PlayEmoteSong, EmoteSong) == 0x000000, "Member 'RGamePlayerController_PlayEmoteSong::EmoteSong' has a wrong offset!");

// Function RGame.RGamePlayerController.PlayEmoteSong_Server
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_PlayEmoteSong_Server final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_PlayEmoteSong_Server) == 0x000008, "Wrong alignment on RGamePlayerController_PlayEmoteSong_Server");
static_assert(sizeof(RGamePlayerController_PlayEmoteSong_Server) == 0x000008, "Wrong size on RGamePlayerController_PlayEmoteSong_Server");
static_assert(offsetof(RGamePlayerController_PlayEmoteSong_Server, EmoteSong) == 0x000000, "Member 'RGamePlayerController_PlayEmoteSong_Server::EmoteSong' has a wrong offset!");

// Function RGame.RGamePlayerController.PlayEmoteSongImplementation
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_PlayEmoteSongImplementation final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_PlayEmoteSongImplementation) == 0x000008, "Wrong alignment on RGamePlayerController_PlayEmoteSongImplementation");
static_assert(sizeof(RGamePlayerController_PlayEmoteSongImplementation) == 0x000008, "Wrong size on RGamePlayerController_PlayEmoteSongImplementation");
static_assert(offsetof(RGamePlayerController_PlayEmoteSongImplementation, EmoteSong) == 0x000000, "Member 'RGamePlayerController_PlayEmoteSongImplementation::EmoteSong' has a wrong offset!");

// Function RGame.RGamePlayerController.PlayerJoined_Server
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_PlayerJoined_Server final
{
public:
	class ARGameState*                            RGameState;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           InPlayerState;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_PlayerJoined_Server) == 0x000008, "Wrong alignment on RGamePlayerController_PlayerJoined_Server");
static_assert(sizeof(RGamePlayerController_PlayerJoined_Server) == 0x000020, "Wrong size on RGamePlayerController_PlayerJoined_Server");
static_assert(offsetof(RGamePlayerController_PlayerJoined_Server, RGameState) == 0x000000, "Member 'RGamePlayerController_PlayerJoined_Server::RGameState' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_PlayerJoined_Server, InPlayerState) == 0x000008, "Member 'RGamePlayerController_PlayerJoined_Server::InPlayerState' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_PlayerJoined_Server, Message) == 0x000010, "Member 'RGamePlayerController_PlayerJoined_Server::Message' has a wrong offset!");

// Function RGame.RGamePlayerController.ProceedFromEndOfRunScreen
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_ProceedFromEndOfRunScreen final
{
public:
	bool                                          bRunFailed;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ProceedFromEndOfRunScreen) == 0x000001, "Wrong alignment on RGamePlayerController_ProceedFromEndOfRunScreen");
static_assert(sizeof(RGamePlayerController_ProceedFromEndOfRunScreen) == 0x000001, "Wrong size on RGamePlayerController_ProceedFromEndOfRunScreen");
static_assert(offsetof(RGamePlayerController_ProceedFromEndOfRunScreen, bRunFailed) == 0x000000, "Member 'RGamePlayerController_ProceedFromEndOfRunScreen::bRunFailed' has a wrong offset!");

// Function RGame.RGamePlayerController.ProceedFromEndOfRunScreen_Server
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_ProceedFromEndOfRunScreen_Server final
{
public:
	bool                                          bRunFailed;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ProceedFromEndOfRunScreen_Server) == 0x000001, "Wrong alignment on RGamePlayerController_ProceedFromEndOfRunScreen_Server");
static_assert(sizeof(RGamePlayerController_ProceedFromEndOfRunScreen_Server) == 0x000001, "Wrong size on RGamePlayerController_ProceedFromEndOfRunScreen_Server");
static_assert(offsetof(RGamePlayerController_ProceedFromEndOfRunScreen_Server, bRunFailed) == 0x000000, "Member 'RGamePlayerController_ProceedFromEndOfRunScreen_Server::bRunFailed' has a wrong offset!");

// Function RGame.RGamePlayerController.ReconnectPlayerStateSync_Client
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_ReconnectPlayerStateSync_Client final
{
public:
	TArray<struct FRPlayerStateSync>              SyncData;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ReconnectPlayerStateSync_Client) == 0x000008, "Wrong alignment on RGamePlayerController_ReconnectPlayerStateSync_Client");
static_assert(sizeof(RGamePlayerController_ReconnectPlayerStateSync_Client) == 0x000010, "Wrong size on RGamePlayerController_ReconnectPlayerStateSync_Client");
static_assert(offsetof(RGamePlayerController_ReconnectPlayerStateSync_Client, SyncData) == 0x000000, "Member 'RGamePlayerController_ReconnectPlayerStateSync_Client::SyncData' has a wrong offset!");

// Function RGame.RGamePlayerController.RunRoutedObjectBehaviour_Server
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_RunRoutedObjectBehaviour_Server final
{
public:
	class UObject*                                RoutedObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_RunRoutedObjectBehaviour_Server) == 0x000008, "Wrong alignment on RGamePlayerController_RunRoutedObjectBehaviour_Server");
static_assert(sizeof(RGamePlayerController_RunRoutedObjectBehaviour_Server) == 0x000008, "Wrong size on RGamePlayerController_RunRoutedObjectBehaviour_Server");
static_assert(offsetof(RGamePlayerController_RunRoutedObjectBehaviour_Server, RoutedObject) == 0x000000, "Member 'RGamePlayerController_RunRoutedObjectBehaviour_Server::RoutedObject' has a wrong offset!");

// Function RGame.RGamePlayerController.RunRoutedObjectBehaviourByName_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_RunRoutedObjectBehaviourByName_Server final
{
public:
	class UObject*                                RoutedObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BehaviourName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_RunRoutedObjectBehaviourByName_Server) == 0x000008, "Wrong alignment on RGamePlayerController_RunRoutedObjectBehaviourByName_Server");
static_assert(sizeof(RGamePlayerController_RunRoutedObjectBehaviourByName_Server) == 0x000010, "Wrong size on RGamePlayerController_RunRoutedObjectBehaviourByName_Server");
static_assert(offsetof(RGamePlayerController_RunRoutedObjectBehaviourByName_Server, RoutedObject) == 0x000000, "Member 'RGamePlayerController_RunRoutedObjectBehaviourByName_Server::RoutedObject' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_RunRoutedObjectBehaviourByName_Server, BehaviourName) == 0x000008, "Member 'RGamePlayerController_RunRoutedObjectBehaviourByName_Server::BehaviourName' has a wrong offset!");

// Function RGame.RGamePlayerController.RunRoutedObjectBehaviourWithData_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_RunRoutedObjectBehaviourWithData_Server final
{
public:
	class UObject*                                RoutedObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRoutedObjectData                      RoutedData;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_RunRoutedObjectBehaviourWithData_Server) == 0x000008, "Wrong alignment on RGamePlayerController_RunRoutedObjectBehaviourWithData_Server");
static_assert(sizeof(RGamePlayerController_RunRoutedObjectBehaviourWithData_Server) == 0x000010, "Wrong size on RGamePlayerController_RunRoutedObjectBehaviourWithData_Server");
static_assert(offsetof(RGamePlayerController_RunRoutedObjectBehaviourWithData_Server, RoutedObject) == 0x000000, "Member 'RGamePlayerController_RunRoutedObjectBehaviourWithData_Server::RoutedObject' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_RunRoutedObjectBehaviourWithData_Server, RoutedData) == 0x000008, "Member 'RGamePlayerController_RunRoutedObjectBehaviourWithData_Server::RoutedData' has a wrong offset!");

// Function RGame.RGamePlayerController.SelectOverworldNode
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_SelectOverworldNode final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedNodeId;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SelectOverworldNode) == 0x000004, "Wrong alignment on RGamePlayerController_SelectOverworldNode");
static_assert(sizeof(RGamePlayerController_SelectOverworldNode) == 0x000008, "Wrong size on RGamePlayerController_SelectOverworldNode");
static_assert(offsetof(RGamePlayerController_SelectOverworldNode, PlayerId) == 0x000000, "Member 'RGamePlayerController_SelectOverworldNode::PlayerId' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SelectOverworldNode, SelectedNodeId) == 0x000004, "Member 'RGamePlayerController_SelectOverworldNode::SelectedNodeId' has a wrong offset!");

// Function RGame.RGamePlayerController.SelectOverworldNode_Server
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_SelectOverworldNode_Server final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedNodeId;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SelectOverworldNode_Server) == 0x000004, "Wrong alignment on RGamePlayerController_SelectOverworldNode_Server");
static_assert(sizeof(RGamePlayerController_SelectOverworldNode_Server) == 0x000008, "Wrong size on RGamePlayerController_SelectOverworldNode_Server");
static_assert(offsetof(RGamePlayerController_SelectOverworldNode_Server, PlayerId) == 0x000000, "Member 'RGamePlayerController_SelectOverworldNode_Server::PlayerId' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SelectOverworldNode_Server, SelectedNodeId) == 0x000004, "Member 'RGamePlayerController_SelectOverworldNode_Server::SelectedNodeId' has a wrong offset!");

// Function RGame.RGamePlayerController.ServerAttachWeaponToController
// 0x0018 (0x0018 - 0x0000)
struct RGamePlayerController_ServerAttachWeaponToController final
{
public:
	class URWeaponPrimaryAsset*                   WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URWeaponModPrimaryAsset*>        WeaponMods;                                        // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ServerAttachWeaponToController) == 0x000008, "Wrong alignment on RGamePlayerController_ServerAttachWeaponToController");
static_assert(sizeof(RGamePlayerController_ServerAttachWeaponToController) == 0x000018, "Wrong size on RGamePlayerController_ServerAttachWeaponToController");
static_assert(offsetof(RGamePlayerController_ServerAttachWeaponToController, WeaponClass) == 0x000000, "Member 'RGamePlayerController_ServerAttachWeaponToController::WeaponClass' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ServerAttachWeaponToController, WeaponMods) == 0x000008, "Member 'RGamePlayerController_ServerAttachWeaponToController::WeaponMods' has a wrong offset!");

// Function RGame.RGamePlayerController.ServerDestroyCharm
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_ServerDestroyCharm final
{
public:
	class ARPickupableCharm*                      CharmToDestroy;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ServerDestroyCharm) == 0x000008, "Wrong alignment on RGamePlayerController_ServerDestroyCharm");
static_assert(sizeof(RGamePlayerController_ServerDestroyCharm) == 0x000008, "Wrong size on RGamePlayerController_ServerDestroyCharm");
static_assert(offsetof(RGamePlayerController_ServerDestroyCharm, CharmToDestroy) == 0x000000, "Member 'RGamePlayerController_ServerDestroyCharm::CharmToDestroy' has a wrong offset!");

// Function RGame.RGamePlayerController.ServerSendChatMessage
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_ServerSendChatMessage final
{
public:
	struct FRChatLogMessage                       MessageToSend;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ServerSendChatMessage) == 0x000008, "Wrong alignment on RGamePlayerController_ServerSendChatMessage");
static_assert(sizeof(RGamePlayerController_ServerSendChatMessage) == 0x000020, "Wrong size on RGamePlayerController_ServerSendChatMessage");
static_assert(offsetof(RGamePlayerController_ServerSendChatMessage, MessageToSend) == 0x000000, "Member 'RGamePlayerController_ServerSendChatMessage::MessageToSend' has a wrong offset!");

// Function RGame.RGamePlayerController.ServerSetCrosshairDirectionAndOffset
// 0x0030 (0x0030 - 0x0000)
struct RGamePlayerController_ServerSetCrosshairDirectionAndOffset final
{
public:
	struct FVector                                CrosshairDirection;                                // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalOffset;                                       // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_ServerSetCrosshairDirectionAndOffset) == 0x000008, "Wrong alignment on RGamePlayerController_ServerSetCrosshairDirectionAndOffset");
static_assert(sizeof(RGamePlayerController_ServerSetCrosshairDirectionAndOffset) == 0x000030, "Wrong size on RGamePlayerController_ServerSetCrosshairDirectionAndOffset");
static_assert(offsetof(RGamePlayerController_ServerSetCrosshairDirectionAndOffset, CrosshairDirection) == 0x000000, "Member 'RGamePlayerController_ServerSetCrosshairDirectionAndOffset::CrosshairDirection' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_ServerSetCrosshairDirectionAndOffset, LocalOffset) == 0x000018, "Member 'RGamePlayerController_ServerSetCrosshairDirectionAndOffset::LocalOffset' has a wrong offset!");

// Function RGame.RGamePlayerController.SetChestState_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetChestState_Server final
{
public:
	class ARLootableContainer*                    Chest;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChestState                                   ChestState;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetChestState_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetChestState_Server");
static_assert(sizeof(RGamePlayerController_SetChestState_Server) == 0x000010, "Wrong size on RGamePlayerController_SetChestState_Server");
static_assert(offsetof(RGamePlayerController_SetChestState_Server, Chest) == 0x000000, "Member 'RGamePlayerController_SetChestState_Server::Chest' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetChestState_Server, ChestState) == 0x000008, "Member 'RGamePlayerController_SetChestState_Server::ChestState' has a wrong offset!");

// Function RGame.RGamePlayerController.SetCurrentHealth_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetCurrentHealth_Server final
{
public:
	class URHealthComponent*                      HealthComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetCurrentHealth_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetCurrentHealth_Server");
static_assert(sizeof(RGamePlayerController_SetCurrentHealth_Server) == 0x000010, "Wrong size on RGamePlayerController_SetCurrentHealth_Server");
static_assert(offsetof(RGamePlayerController_SetCurrentHealth_Server, HealthComp) == 0x000000, "Member 'RGamePlayerController_SetCurrentHealth_Server::HealthComp' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetCurrentHealth_Server, Value) == 0x000008, "Member 'RGamePlayerController_SetCurrentHealth_Server::Value' has a wrong offset!");

// Function RGame.RGamePlayerController.SetDamageEventReward_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetDamageEventReward_Server final
{
public:
	class URGObjectiveScript*                     ObjectiveScript;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessful;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetDamageEventReward_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetDamageEventReward_Server");
static_assert(sizeof(RGamePlayerController_SetDamageEventReward_Server) == 0x000010, "Wrong size on RGamePlayerController_SetDamageEventReward_Server");
static_assert(offsetof(RGamePlayerController_SetDamageEventReward_Server, ObjectiveScript) == 0x000000, "Member 'RGamePlayerController_SetDamageEventReward_Server::ObjectiveScript' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetDamageEventReward_Server, bSuccessful) == 0x000008, "Member 'RGamePlayerController_SetDamageEventReward_Server::bSuccessful' has a wrong offset!");

// Function RGame.RGamePlayerController.SetEquippedLoadout_Server
// 0x0040 (0x0040 - 0x0000)
struct RGamePlayerController_SetEquippedLoadout_Server final
{
public:
	struct FRLoadout                              Loadout;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SetEquippedLoadout_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetEquippedLoadout_Server");
static_assert(sizeof(RGamePlayerController_SetEquippedLoadout_Server) == 0x000040, "Wrong size on RGamePlayerController_SetEquippedLoadout_Server");
static_assert(offsetof(RGamePlayerController_SetEquippedLoadout_Server, Loadout) == 0x000000, "Member 'RGamePlayerController_SetEquippedLoadout_Server::Loadout' has a wrong offset!");

// Function RGame.RGamePlayerController.SetHealAltarSelection_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetHealAltarSelection_Server final
{
public:
	class ARHealAltar*                            HealAltar;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetHealAltarSelection_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetHealAltarSelection_Server");
static_assert(sizeof(RGamePlayerController_SetHealAltarSelection_Server) == 0x000010, "Wrong size on RGamePlayerController_SetHealAltarSelection_Server");
static_assert(offsetof(RGamePlayerController_SetHealAltarSelection_Server, HealAltar) == 0x000000, "Member 'RGamePlayerController_SetHealAltarSelection_Server::HealAltar' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetHealAltarSelection_Server, bConsumed) == 0x000008, "Member 'RGamePlayerController_SetHealAltarSelection_Server::bConsumed' has a wrong offset!");

// Function RGame.RGamePlayerController.SetLootOptionOnLootableContainer_Server
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_SetLootOptionOnLootableContainer_Server final
{
public:
	class ARLootableContainer*                    LootableContainer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRLootSelectionOption>          LootOption;                                        // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasChosenLoot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetLootOptionOnLootableContainer_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetLootOptionOnLootableContainer_Server");
static_assert(sizeof(RGamePlayerController_SetLootOptionOnLootableContainer_Server) == 0x000020, "Wrong size on RGamePlayerController_SetLootOptionOnLootableContainer_Server");
static_assert(offsetof(RGamePlayerController_SetLootOptionOnLootableContainer_Server, LootableContainer) == 0x000000, "Member 'RGamePlayerController_SetLootOptionOnLootableContainer_Server::LootableContainer' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetLootOptionOnLootableContainer_Server, LootOption) == 0x000008, "Member 'RGamePlayerController_SetLootOptionOnLootableContainer_Server::LootOption' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetLootOptionOnLootableContainer_Server, bHasChosenLoot) == 0x000018, "Member 'RGamePlayerController_SetLootOptionOnLootableContainer_Server::bHasChosenLoot' has a wrong offset!");

// Function RGame.RGamePlayerController.SetMerchantPlinthOption_Server
// 0x0040 (0x0040 - 0x0000)
struct RGamePlayerController_SetMerchantPlinthOption_Server final
{
public:
	class ARMerchantPlinth*                       MerchantPlinth;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRLootSelectionOption>          MutatorLootSelection;                              // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPlinthRewardType                             RewardType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMutatorPrimaryAsset*                  PrimaryAsset;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooted;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMutatorRewardCategoryDataAsset*       GodCategory;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearPlinth;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetMerchantPlinthOption_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetMerchantPlinthOption_Server");
static_assert(sizeof(RGamePlayerController_SetMerchantPlinthOption_Server) == 0x000040, "Wrong size on RGamePlayerController_SetMerchantPlinthOption_Server");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, MerchantPlinth) == 0x000000, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::MerchantPlinth' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, MutatorLootSelection) == 0x000008, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::MutatorLootSelection' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, RewardType) == 0x000018, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::RewardType' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, PrimaryAsset) == 0x000020, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::PrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, bLooted) == 0x000028, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::bLooted' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, GodCategory) == 0x000030, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::GodCategory' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetMerchantPlinthOption_Server, bClearPlinth) == 0x000038, "Member 'RGamePlayerController_SetMerchantPlinthOption_Server::bClearPlinth' has a wrong offset!");

// Function RGame.RGamePlayerController.SetNodeSpawnPointCharmReward_Server
// 0x0018 (0x0018 - 0x0000)
struct RGamePlayerController_SetNodeSpawnPointCharmReward_Server final
{
public:
	class ARNodeRewardSpawnPoint*                 NodeRewardSpawnPoint;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  CharmPrimaryAsset;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharmPickedUp;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetNodeSpawnPointCharmReward_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetNodeSpawnPointCharmReward_Server");
static_assert(sizeof(RGamePlayerController_SetNodeSpawnPointCharmReward_Server) == 0x000018, "Wrong size on RGamePlayerController_SetNodeSpawnPointCharmReward_Server");
static_assert(offsetof(RGamePlayerController_SetNodeSpawnPointCharmReward_Server, NodeRewardSpawnPoint) == 0x000000, "Member 'RGamePlayerController_SetNodeSpawnPointCharmReward_Server::NodeRewardSpawnPoint' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetNodeSpawnPointCharmReward_Server, CharmPrimaryAsset) == 0x000008, "Member 'RGamePlayerController_SetNodeSpawnPointCharmReward_Server::CharmPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetNodeSpawnPointCharmReward_Server, bCharmPickedUp) == 0x000010, "Member 'RGamePlayerController_SetNodeSpawnPointCharmReward_Server::bCharmPickedUp' has a wrong offset!");

// Function RGame.RGamePlayerController.SetPlayerCorruptedNodeChoiceVote_Server
// 0x0018 (0x0018 - 0x0000)
struct RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server final
{
public:
	class APlayerState*                           InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URNodeChoicePrimaryAsset*               VotedNodeChoicePA;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URNodeChoicePrimaryAsset*               VotedNodeChoiceRewardPA;                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server");
static_assert(sizeof(RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server) == 0x000018, "Wrong size on RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server");
static_assert(offsetof(RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server, InPlayerState) == 0x000000, "Member 'RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server::InPlayerState' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server, VotedNodeChoicePA) == 0x000008, "Member 'RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server::VotedNodeChoicePA' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server, VotedNodeChoiceRewardPA) == 0x000010, "Member 'RGamePlayerController_SetPlayerCorruptedNodeChoiceVote_Server::VotedNodeChoiceRewardPA' has a wrong offset!");

// Function RGame.RGamePlayerController.SetPlayerEmote
// 0x000C (0x000C - 0x0000)
struct RGamePlayerController_SetPlayerEmote final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EmoteTag;                                          // 0x0004(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SetPlayerEmote) == 0x000004, "Wrong alignment on RGamePlayerController_SetPlayerEmote");
static_assert(sizeof(RGamePlayerController_SetPlayerEmote) == 0x00000C, "Wrong size on RGamePlayerController_SetPlayerEmote");
static_assert(offsetof(RGamePlayerController_SetPlayerEmote, Slot) == 0x000000, "Member 'RGamePlayerController_SetPlayerEmote::Slot' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetPlayerEmote, EmoteTag) == 0x000004, "Member 'RGamePlayerController_SetPlayerEmote::EmoteTag' has a wrong offset!");

// Function RGame.RGamePlayerController.SetSacrificeAltarInteractionCost_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetSacrificeAltarInteractionCost_Server final
{
public:
	class ARLootableContainer*                    SacrificeAltar;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionCost;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SetSacrificeAltarInteractionCost_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetSacrificeAltarInteractionCost_Server");
static_assert(sizeof(RGamePlayerController_SetSacrificeAltarInteractionCost_Server) == 0x000010, "Wrong size on RGamePlayerController_SetSacrificeAltarInteractionCost_Server");
static_assert(offsetof(RGamePlayerController_SetSacrificeAltarInteractionCost_Server, SacrificeAltar) == 0x000000, "Member 'RGamePlayerController_SetSacrificeAltarInteractionCost_Server::SacrificeAltar' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetSacrificeAltarInteractionCost_Server, InteractionCost) == 0x000008, "Member 'RGamePlayerController_SetSacrificeAltarInteractionCost_Server::InteractionCost' has a wrong offset!");

// Function RGame.RGamePlayerController.SetWishingWellInteractionCost_Server
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_SetWishingWellInteractionCost_Server final
{
public:
	class ARLootableContainer*                    WishingWell;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionCost;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsesLeft;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SetWishingWellInteractionCost_Server) == 0x000008, "Wrong alignment on RGamePlayerController_SetWishingWellInteractionCost_Server");
static_assert(sizeof(RGamePlayerController_SetWishingWellInteractionCost_Server) == 0x000010, "Wrong size on RGamePlayerController_SetWishingWellInteractionCost_Server");
static_assert(offsetof(RGamePlayerController_SetWishingWellInteractionCost_Server, WishingWell) == 0x000000, "Member 'RGamePlayerController_SetWishingWellInteractionCost_Server::WishingWell' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetWishingWellInteractionCost_Server, InteractionCost) == 0x000008, "Member 'RGamePlayerController_SetWishingWellInteractionCost_Server::InteractionCost' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SetWishingWellInteractionCost_Server, UsesLeft) == 0x00000C, "Member 'RGamePlayerController_SetWishingWellInteractionCost_Server::UsesLeft' has a wrong offset!");

// Function RGame.RGamePlayerController.SwapHudVisibility
// 0x0001 (0x0001 - 0x0000)
struct RGamePlayerController_SwapHudVisibility final
{
public:
	bool                                          bShowSpectateHud;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SwapHudVisibility) == 0x000001, "Wrong alignment on RGamePlayerController_SwapHudVisibility");
static_assert(sizeof(RGamePlayerController_SwapHudVisibility) == 0x000001, "Wrong size on RGamePlayerController_SwapHudVisibility");
static_assert(offsetof(RGamePlayerController_SwapHudVisibility, bShowSpectateHud) == 0x000000, "Member 'RGamePlayerController_SwapHudVisibility::bShowSpectateHud' has a wrong offset!");

// Function RGame.RGamePlayerController.SwapPickupableCharm
// 0x0018 (0x0018 - 0x0000)
struct RGamePlayerController_SwapPickupableCharm final
{
public:
	class URMutatorPrimaryAsset*                  MutatorAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPickupableMutator*                    PickupableMutator;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SwapPickupableCharm) == 0x000008, "Wrong alignment on RGamePlayerController_SwapPickupableCharm");
static_assert(sizeof(RGamePlayerController_SwapPickupableCharm) == 0x000018, "Wrong size on RGamePlayerController_SwapPickupableCharm");
static_assert(offsetof(RGamePlayerController_SwapPickupableCharm, MutatorAsset) == 0x000000, "Member 'RGamePlayerController_SwapPickupableCharm::MutatorAsset' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapPickupableCharm, MutatorRank) == 0x000008, "Member 'RGamePlayerController_SwapPickupableCharm::MutatorRank' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapPickupableCharm, PickupableMutator) == 0x000010, "Member 'RGamePlayerController_SwapPickupableCharm::PickupableMutator' has a wrong offset!");

// Function RGame.RGamePlayerController.SwapPickupableMutator
// 0x0028 (0x0028 - 0x0000)
struct RGamePlayerController_SwapPickupableMutator final
{
public:
	class URMutatorPrimaryAsset*                  MutatorAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPickupableMutator*                    PickupableMutator;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutatorContainer                      AttachedMutators;                                  // 0x0018(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_SwapPickupableMutator) == 0x000008, "Wrong alignment on RGamePlayerController_SwapPickupableMutator");
static_assert(sizeof(RGamePlayerController_SwapPickupableMutator) == 0x000028, "Wrong size on RGamePlayerController_SwapPickupableMutator");
static_assert(offsetof(RGamePlayerController_SwapPickupableMutator, MutatorAsset) == 0x000000, "Member 'RGamePlayerController_SwapPickupableMutator::MutatorAsset' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapPickupableMutator, MutatorRank) == 0x000008, "Member 'RGamePlayerController_SwapPickupableMutator::MutatorRank' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapPickupableMutator, PickupableMutator) == 0x000010, "Member 'RGamePlayerController_SwapPickupableMutator::PickupableMutator' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapPickupableMutator, AttachedMutators) == 0x000018, "Member 'RGamePlayerController_SwapPickupableMutator::AttachedMutators' has a wrong offset!");

// Function RGame.RGamePlayerController.SwapStatCharmMutator
// 0x0090 (0x0090 - 0x0000)
struct RGamePlayerController_SwapStatCharmMutator final
{
public:
	class URGCharacterStatCharmScript*            StatCharmMutator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARPickupableItem*                       OldStatCharmActor;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERewardRarity                                 NewRarity;                                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatCharmStat>                 NewMutatorStats;                                   // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_SwapStatCharmMutator) == 0x000010, "Wrong alignment on RGamePlayerController_SwapStatCharmMutator");
static_assert(sizeof(RGamePlayerController_SwapStatCharmMutator) == 0x000090, "Wrong size on RGamePlayerController_SwapStatCharmMutator");
static_assert(offsetof(RGamePlayerController_SwapStatCharmMutator, StatCharmMutator) == 0x000000, "Member 'RGamePlayerController_SwapStatCharmMutator::StatCharmMutator' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapStatCharmMutator, OldStatCharmActor) == 0x000008, "Member 'RGamePlayerController_SwapStatCharmMutator::OldStatCharmActor' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapStatCharmMutator, SpawnTransform) == 0x000010, "Member 'RGamePlayerController_SwapStatCharmMutator::SpawnTransform' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapStatCharmMutator, NewRarity) == 0x000070, "Member 'RGamePlayerController_SwapStatCharmMutator::NewRarity' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_SwapStatCharmMutator, NewMutatorStats) == 0x000078, "Member 'RGamePlayerController_SwapStatCharmMutator::NewMutatorStats' has a wrong offset!");

// Function RGame.RGamePlayerController.TriggerHit_Server
// 0x0128 (0x0128 - 0x0000)
struct RGamePlayerController_TriggerHit_Server final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0100)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0100(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x0104(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGWeaponScript*                        WeaponScript;                                      // 0x0108(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ProjectileId;                                      // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCriticalOverride;                               // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCallHitEvents;                                    // 0x0115(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageClientPrediction;                           // 0x0116(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              NonWeaponContext;                                  // 0x0118(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeakspotOverride;                                 // 0x0120(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HitSequenceFlags;                                  // 0x0121(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGamePlayerController_TriggerHit_Server) == 0x000008, "Wrong alignment on RGamePlayerController_TriggerHit_Server");
static_assert(sizeof(RGamePlayerController_TriggerHit_Server) == 0x000128, "Wrong size on RGamePlayerController_TriggerHit_Server");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, Hit) == 0x000000, "Member 'RGamePlayerController_TriggerHit_Server::Hit' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, BaseDamage) == 0x000100, "Member 'RGamePlayerController_TriggerHit_Server::BaseDamage' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, DamageSources) == 0x000104, "Member 'RGamePlayerController_TriggerHit_Server::DamageSources' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, WeaponScript) == 0x000108, "Member 'RGamePlayerController_TriggerHit_Server::WeaponScript' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, ProjectileId) == 0x000110, "Member 'RGamePlayerController_TriggerHit_Server::ProjectileId' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, bIsCriticalOverride) == 0x000114, "Member 'RGamePlayerController_TriggerHit_Server::bIsCriticalOverride' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, bCallHitEvents) == 0x000115, "Member 'RGamePlayerController_TriggerHit_Server::bCallHitEvents' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, bDamageClientPrediction) == 0x000116, "Member 'RGamePlayerController_TriggerHit_Server::bDamageClientPrediction' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, NonWeaponContext) == 0x000118, "Member 'RGamePlayerController_TriggerHit_Server::NonWeaponContext' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, bWeakspotOverride) == 0x000120, "Member 'RGamePlayerController_TriggerHit_Server::bWeakspotOverride' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_TriggerHit_Server, HitSequenceFlags) == 0x000121, "Member 'RGamePlayerController_TriggerHit_Server::HitSequenceFlags' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnVoteToProceed
// 0x000C (0x000C - 0x0000)
struct RGamePlayerController_BroadcastOnVoteToProceed final
{
public:
	int32                                         NumVotes;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLeft;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnVoteToProceed) == 0x000004, "Wrong alignment on RGamePlayerController_BroadcastOnVoteToProceed");
static_assert(sizeof(RGamePlayerController_BroadcastOnVoteToProceed) == 0x00000C, "Wrong size on RGamePlayerController_BroadcastOnVoteToProceed");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed, NumVotes) == 0x000000, "Member 'RGamePlayerController_BroadcastOnVoteToProceed::NumVotes' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed, NumPlayers) == 0x000004, "Member 'RGamePlayerController_BroadcastOnVoteToProceed::NumPlayers' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed, TimeLeft) == 0x000008, "Member 'RGamePlayerController_BroadcastOnVoteToProceed::TimeLeft' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnVoteToProceed_Client
// 0x000C (0x000C - 0x0000)
struct RGamePlayerController_BroadcastOnVoteToProceed_Client final
{
public:
	int32                                         NumVotes;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeLeft;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnVoteToProceed_Client) == 0x000004, "Wrong alignment on RGamePlayerController_BroadcastOnVoteToProceed_Client");
static_assert(sizeof(RGamePlayerController_BroadcastOnVoteToProceed_Client) == 0x00000C, "Wrong size on RGamePlayerController_BroadcastOnVoteToProceed_Client");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed_Client, NumVotes) == 0x000000, "Member 'RGamePlayerController_BroadcastOnVoteToProceed_Client::NumVotes' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed_Client, NumPlayers) == 0x000004, "Member 'RGamePlayerController_BroadcastOnVoteToProceed_Client::NumPlayers' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceed_Client, TimeLeft) == 0x000008, "Member 'RGamePlayerController_BroadcastOnVoteToProceed_Client::TimeLeft' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnVoteToProceedTick_Client
// 0x0004 (0x0004 - 0x0000)
struct RGamePlayerController_BroadcastOnVoteToProceedTick_Client final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnVoteToProceedTick_Client) == 0x000004, "Wrong alignment on RGamePlayerController_BroadcastOnVoteToProceedTick_Client");
static_assert(sizeof(RGamePlayerController_BroadcastOnVoteToProceedTick_Client) == 0x000004, "Wrong size on RGamePlayerController_BroadcastOnVoteToProceedTick_Client");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceedTick_Client, TimeLeft) == 0x000000, "Member 'RGamePlayerController_BroadcastOnVoteToProceedTick_Client::TimeLeft' has a wrong offset!");

// Function RGame.RGamePlayerController.BroadcastOnVoteToProceedTimerTick
// 0x0004 (0x0004 - 0x0000)
struct RGamePlayerController_BroadcastOnVoteToProceedTimerTick final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_BroadcastOnVoteToProceedTimerTick) == 0x000004, "Wrong alignment on RGamePlayerController_BroadcastOnVoteToProceedTimerTick");
static_assert(sizeof(RGamePlayerController_BroadcastOnVoteToProceedTimerTick) == 0x000004, "Wrong size on RGamePlayerController_BroadcastOnVoteToProceedTimerTick");
static_assert(offsetof(RGamePlayerController_BroadcastOnVoteToProceedTimerTick, TimeLeft) == 0x000000, "Member 'RGamePlayerController_BroadcastOnVoteToProceedTimerTick::TimeLeft' has a wrong offset!");

// Function RGame.RGamePlayerController.GetControlledPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_GetControlledPlayerPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetControlledPlayerPawn) == 0x000008, "Wrong alignment on RGamePlayerController_GetControlledPlayerPawn");
static_assert(sizeof(RGamePlayerController_GetControlledPlayerPawn) == 0x000008, "Wrong size on RGamePlayerController_GetControlledPlayerPawn");
static_assert(offsetof(RGamePlayerController_GetControlledPlayerPawn, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetControlledPlayerPawn::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetCurrentlyEquippedOveriddingWeaponScript
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript final
{
public:
	class URGWeaponScript*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript) == 0x000008, "Wrong alignment on RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript");
static_assert(sizeof(RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript) == 0x000008, "Wrong size on RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript");
static_assert(offsetof(RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetCurrentlyEquippedOveriddingWeaponScript::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetCurrentPlayerEmotes
// 0x0050 (0x0050 - 0x0000)
struct RGamePlayerController_GetCurrentPlayerEmotes final
{
public:
	TMap<int32, struct FGameplayTag>              ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetCurrentPlayerEmotes) == 0x000008, "Wrong alignment on RGamePlayerController_GetCurrentPlayerEmotes");
static_assert(sizeof(RGamePlayerController_GetCurrentPlayerEmotes) == 0x000050, "Wrong size on RGamePlayerController_GetCurrentPlayerEmotes");
static_assert(offsetof(RGamePlayerController_GetCurrentPlayerEmotes, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetCurrentPlayerEmotes::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetGameHud
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_GetGameHud final
{
public:
	class URGameHud*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetGameHud) == 0x000008, "Wrong alignment on RGamePlayerController_GetGameHud");
static_assert(sizeof(RGamePlayerController_GetGameHud) == 0x000008, "Wrong size on RGamePlayerController_GetGameHud");
static_assert(offsetof(RGamePlayerController_GetGameHud, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetGameHud::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct RGamePlayerController_GetGameplayTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetGameplayTags) == 0x000008, "Wrong alignment on RGamePlayerController_GetGameplayTags");
static_assert(sizeof(RGamePlayerController_GetGameplayTags) == 0x000020, "Wrong size on RGamePlayerController_GetGameplayTags");
static_assert(offsetof(RGamePlayerController_GetGameplayTags, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetGameplayTags::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetNumMaxMutatorCategories
// 0x0004 (0x0004 - 0x0000)
struct RGamePlayerController_GetNumMaxMutatorCategories final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetNumMaxMutatorCategories) == 0x000004, "Wrong alignment on RGamePlayerController_GetNumMaxMutatorCategories");
static_assert(sizeof(RGamePlayerController_GetNumMaxMutatorCategories) == 0x000004, "Wrong size on RGamePlayerController_GetNumMaxMutatorCategories");
static_assert(offsetof(RGamePlayerController_GetNumMaxMutatorCategories, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetNumMaxMutatorCategories::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetSpectateHud
// 0x0008 (0x0008 - 0x0000)
struct RGamePlayerController_GetSpectateHud final
{
public:
	class URSpectateHud*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetSpectateHud) == 0x000008, "Wrong alignment on RGamePlayerController_GetSpectateHud");
static_assert(sizeof(RGamePlayerController_GetSpectateHud) == 0x000008, "Wrong size on RGamePlayerController_GetSpectateHud");
static_assert(offsetof(RGamePlayerController_GetSpectateHud, ReturnValue) == 0x000000, "Member 'RGamePlayerController_GetSpectateHud::ReturnValue' has a wrong offset!");

// Function RGame.RGamePlayerController.GetWeaponOverridingWeaponScript
// 0x0010 (0x0010 - 0x0000)
struct RGamePlayerController_GetWeaponOverridingWeaponScript final
{
public:
	class ARWeapon*                               Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGWeaponScript*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGamePlayerController_GetWeaponOverridingWeaponScript) == 0x000008, "Wrong alignment on RGamePlayerController_GetWeaponOverridingWeaponScript");
static_assert(sizeof(RGamePlayerController_GetWeaponOverridingWeaponScript) == 0x000010, "Wrong size on RGamePlayerController_GetWeaponOverridingWeaponScript");
static_assert(offsetof(RGamePlayerController_GetWeaponOverridingWeaponScript, Weapon) == 0x000000, "Member 'RGamePlayerController_GetWeaponOverridingWeaponScript::Weapon' has a wrong offset!");
static_assert(offsetof(RGamePlayerController_GetWeaponOverridingWeaponScript, ReturnValue) == 0x000008, "Member 'RGamePlayerController_GetWeaponOverridingWeaponScript::ReturnValue' has a wrong offset!");

// Function RGame.RGameplayTagAssetInterface.AddGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct RGameplayTagAssetInterface_AddGameplayTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameplayTagAssetInterface_AddGameplayTag) == 0x000004, "Wrong alignment on RGameplayTagAssetInterface_AddGameplayTag");
static_assert(sizeof(RGameplayTagAssetInterface_AddGameplayTag) == 0x000008, "Wrong size on RGameplayTagAssetInterface_AddGameplayTag");
static_assert(offsetof(RGameplayTagAssetInterface_AddGameplayTag, Tag) == 0x000000, "Member 'RGameplayTagAssetInterface_AddGameplayTag::Tag' has a wrong offset!");

// Function RGame.RGameplayTagRelationshipMapping.HasTag
// 0x0030 (0x0030 - 0x0000)
struct RGameplayTagRelationshipMapping_HasTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActiveTags;                                        // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGameplayTagRelationshipMapping_HasTag) == 0x000008, "Wrong alignment on RGameplayTagRelationshipMapping_HasTag");
static_assert(sizeof(RGameplayTagRelationshipMapping_HasTag) == 0x000030, "Wrong size on RGameplayTagRelationshipMapping_HasTag");
static_assert(offsetof(RGameplayTagRelationshipMapping_HasTag, Tag) == 0x000000, "Member 'RGameplayTagRelationshipMapping_HasTag::Tag' has a wrong offset!");
static_assert(offsetof(RGameplayTagRelationshipMapping_HasTag, ActiveTags) == 0x000008, "Member 'RGameplayTagRelationshipMapping_HasTag::ActiveTags' has a wrong offset!");
static_assert(offsetof(RGameplayTagRelationshipMapping_HasTag, ReturnValue) == 0x000028, "Member 'RGameplayTagRelationshipMapping_HasTag::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetRGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct RGameUserSettings_GetRGameUserSettings final
{
public:
	class URGameUserSettings*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetRGameUserSettings) == 0x000008, "Wrong alignment on RGameUserSettings_GetRGameUserSettings");
static_assert(sizeof(RGameUserSettings_GetRGameUserSettings) == 0x000008, "Wrong size on RGameUserSettings_GetRGameUserSettings");
static_assert(offsetof(RGameUserSettings_GetRGameUserSettings, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetRGameUserSettings::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetAimAssistStrength
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetAimAssistStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetAimAssistStrength) == 0x000004, "Wrong alignment on RGameUserSettings_GetAimAssistStrength");
static_assert(sizeof(RGameUserSettings_GetAimAssistStrength) == 0x000004, "Wrong size on RGameUserSettings_GetAimAssistStrength");
static_assert(offsetof(RGameUserSettings_GetAimAssistStrength, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetAimAssistStrength::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetHasShownTelemetryConsentScreen
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetHasShownTelemetryConsentScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetHasShownTelemetryConsentScreen) == 0x000001, "Wrong alignment on RGameUserSettings_GetHasShownTelemetryConsentScreen");
static_assert(sizeof(RGameUserSettings_GetHasShownTelemetryConsentScreen) == 0x000001, "Wrong size on RGameUserSettings_GetHasShownTelemetryConsentScreen");
static_assert(offsetof(RGameUserSettings_GetHasShownTelemetryConsentScreen, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetHasShownTelemetryConsentScreen::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.OpenComboBox
// 0x0008 (0x0008 - 0x0000)
struct RGameUserSettings_OpenComboBox final
{
public:
	class UComboBoxString*                        ComboBox;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_OpenComboBox) == 0x000008, "Wrong alignment on RGameUserSettings_OpenComboBox");
static_assert(sizeof(RGameUserSettings_OpenComboBox) == 0x000008, "Wrong size on RGameUserSettings_OpenComboBox");
static_assert(offsetof(RGameUserSettings_OpenComboBox, ComboBox) == 0x000000, "Member 'RGameUserSettings_OpenComboBox::ComboBox' has a wrong offset!");

// Function RGame.RGameUserSettings.SetAAMethod
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetAAMethod final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetAAMethod) == 0x000004, "Wrong alignment on RGameUserSettings_SetAAMethod");
static_assert(sizeof(RGameUserSettings_SetAAMethod) == 0x000004, "Wrong size on RGameUserSettings_SetAAMethod");
static_assert(offsetof(RGameUserSettings_SetAAMethod, NewValue) == 0x000000, "Member 'RGameUserSettings_SetAAMethod::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetAimAssistStrength
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetAimAssistStrength final
{
public:
	float                                         NewStrength;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetAimAssistStrength) == 0x000004, "Wrong alignment on RGameUserSettings_SetAimAssistStrength");
static_assert(sizeof(RGameUserSettings_SetAimAssistStrength) == 0x000004, "Wrong size on RGameUserSettings_SetAimAssistStrength");
static_assert(offsetof(RGameUserSettings_SetAimAssistStrength, NewStrength) == 0x000000, "Member 'RGameUserSettings_SetAimAssistStrength::NewStrength' has a wrong offset!");

// Function RGame.RGameUserSettings.SetAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetAimSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetAimSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetAimSensitivity");
static_assert(sizeof(RGameUserSettings_SetAimSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetAimSensitivity");
static_assert(offsetof(RGameUserSettings_SetAimSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetAimSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetAllowTelemetryDataCollection
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetAllowTelemetryDataCollection final
{
public:
	bool                                          bNewAllow;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetAllowTelemetryDataCollection) == 0x000001, "Wrong alignment on RGameUserSettings_SetAllowTelemetryDataCollection");
static_assert(sizeof(RGameUserSettings_SetAllowTelemetryDataCollection) == 0x000001, "Wrong size on RGameUserSettings_SetAllowTelemetryDataCollection");
static_assert(offsetof(RGameUserSettings_SetAllowTelemetryDataCollection, bNewAllow) == 0x000000, "Member 'RGameUserSettings_SetAllowTelemetryDataCollection::bNewAllow' has a wrong offset!");

// Function RGame.RGameUserSettings.SetAlternateMusicList
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetAlternateMusicList final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetAlternateMusicList) == 0x000001, "Wrong alignment on RGameUserSettings_SetAlternateMusicList");
static_assert(sizeof(RGameUserSettings_SetAlternateMusicList) == 0x000001, "Wrong size on RGameUserSettings_SetAlternateMusicList");
static_assert(offsetof(RGameUserSettings_SetAlternateMusicList, NewValue) == 0x000000, "Member 'RGameUserSettings_SetAlternateMusicList::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetBackgroundMaxFramerate
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetBackgroundMaxFramerate final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetBackgroundMaxFramerate) == 0x000004, "Wrong alignment on RGameUserSettings_SetBackgroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_SetBackgroundMaxFramerate) == 0x000004, "Wrong size on RGameUserSettings_SetBackgroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_SetBackgroundMaxFramerate, NewValue) == 0x000000, "Member 'RGameUserSettings_SetBackgroundMaxFramerate::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetBinauralAudio
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetBinauralAudio final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetBinauralAudio) == 0x000001, "Wrong alignment on RGameUserSettings_SetBinauralAudio");
static_assert(sizeof(RGameUserSettings_SetBinauralAudio) == 0x000001, "Wrong size on RGameUserSettings_SetBinauralAudio");
static_assert(offsetof(RGameUserSettings_SetBinauralAudio, NewValue) == 0x000000, "Member 'RGameUserSettings_SetBinauralAudio::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetControllerScopedXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetControllerScopedXSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetControllerScopedXSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetControllerScopedXSensitivity");
static_assert(sizeof(RGameUserSettings_SetControllerScopedXSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetControllerScopedXSensitivity");
static_assert(offsetof(RGameUserSettings_SetControllerScopedXSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetControllerScopedXSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetControllerScopedYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetControllerScopedYSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetControllerScopedYSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetControllerScopedYSensitivity");
static_assert(sizeof(RGameUserSettings_SetControllerScopedYSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetControllerScopedYSensitivity");
static_assert(offsetof(RGameUserSettings_SetControllerScopedYSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetControllerScopedYSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetControllerVibrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetControllerVibrationEnabled final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetControllerVibrationEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_SetControllerVibrationEnabled");
static_assert(sizeof(RGameUserSettings_SetControllerVibrationEnabled) == 0x000001, "Wrong size on RGameUserSettings_SetControllerVibrationEnabled");
static_assert(offsetof(RGameUserSettings_SetControllerVibrationEnabled, NewValue) == 0x000000, "Member 'RGameUserSettings_SetControllerVibrationEnabled::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetControllerXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetControllerXSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetControllerXSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetControllerXSensitivity");
static_assert(sizeof(RGameUserSettings_SetControllerXSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetControllerXSensitivity");
static_assert(offsetof(RGameUserSettings_SetControllerXSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetControllerXSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetControllerYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetControllerYSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetControllerYSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetControllerYSensitivity");
static_assert(sizeof(RGameUserSettings_SetControllerYSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetControllerYSensitivity");
static_assert(offsetof(RGameUserSettings_SetControllerYSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetControllerYSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetCrosshairAlignment
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetCrosshairAlignment final
{
public:
	ECrosshairAlignmentOption                     NewCrosshairAlignmentOption;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetCrosshairAlignment) == 0x000001, "Wrong alignment on RGameUserSettings_SetCrosshairAlignment");
static_assert(sizeof(RGameUserSettings_SetCrosshairAlignment) == 0x000001, "Wrong size on RGameUserSettings_SetCrosshairAlignment");
static_assert(offsetof(RGameUserSettings_SetCrosshairAlignment, NewCrosshairAlignmentOption) == 0x000000, "Member 'RGameUserSettings_SetCrosshairAlignment::NewCrosshairAlignmentOption' has a wrong offset!");

// Function RGame.RGameUserSettings.SetDepthOfFieldEnabled
// 0x0002 (0x0002 - 0x0000)
struct RGameUserSettings_SetDepthOfFieldEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOnlyConfigValue;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetDepthOfFieldEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_SetDepthOfFieldEnabled");
static_assert(sizeof(RGameUserSettings_SetDepthOfFieldEnabled) == 0x000002, "Wrong size on RGameUserSettings_SetDepthOfFieldEnabled");
static_assert(offsetof(RGameUserSettings_SetDepthOfFieldEnabled, bNewValue) == 0x000000, "Member 'RGameUserSettings_SetDepthOfFieldEnabled::bNewValue' has a wrong offset!");
static_assert(offsetof(RGameUserSettings_SetDepthOfFieldEnabled, bSetOnlyConfigValue) == 0x000001, "Member 'RGameUserSettings_SetDepthOfFieldEnabled::bSetOnlyConfigValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetDisableLanguageFiltering
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetDisableLanguageFiltering final
{
public:
	bool                                          bNewDisabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetDisableLanguageFiltering) == 0x000001, "Wrong alignment on RGameUserSettings_SetDisableLanguageFiltering");
static_assert(sizeof(RGameUserSettings_SetDisableLanguageFiltering) == 0x000001, "Wrong size on RGameUserSettings_SetDisableLanguageFiltering");
static_assert(offsetof(RGameUserSettings_SetDisableLanguageFiltering, bNewDisabled) == 0x000000, "Member 'RGameUserSettings_SetDisableLanguageFiltering::bNewDisabled' has a wrong offset!");

// Function RGame.RGameUserSettings.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetFieldOfView final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetFieldOfView) == 0x000004, "Wrong alignment on RGameUserSettings_SetFieldOfView");
static_assert(sizeof(RGameUserSettings_SetFieldOfView) == 0x000004, "Wrong size on RGameUserSettings_SetFieldOfView");
static_assert(offsetof(RGameUserSettings_SetFieldOfView, NewValue) == 0x000000, "Member 'RGameUserSettings_SetFieldOfView::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetForegroundMaxFramerate
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetForegroundMaxFramerate final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetForegroundMaxFramerate) == 0x000004, "Wrong alignment on RGameUserSettings_SetForegroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_SetForegroundMaxFramerate) == 0x000004, "Wrong size on RGameUserSettings_SetForegroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_SetForegroundMaxFramerate, NewValue) == 0x000000, "Member 'RGameUserSettings_SetForegroundMaxFramerate::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetGameLanguage
// 0x0010 (0x0010 - 0x0000)
struct RGameUserSettings_SetGameLanguage final
{
public:
	class FString                                 NewValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetGameLanguage) == 0x000008, "Wrong alignment on RGameUserSettings_SetGameLanguage");
static_assert(sizeof(RGameUserSettings_SetGameLanguage) == 0x000010, "Wrong size on RGameUserSettings_SetGameLanguage");
static_assert(offsetof(RGameUserSettings_SetGameLanguage, NewValue) == 0x000000, "Member 'RGameUserSettings_SetGameLanguage::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetGamepadIconScheme
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetGamepadIconScheme final
{
public:
	EGamepadIconScheme                            NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetGamepadIconScheme) == 0x000001, "Wrong alignment on RGameUserSettings_SetGamepadIconScheme");
static_assert(sizeof(RGameUserSettings_SetGamepadIconScheme) == 0x000001, "Wrong size on RGameUserSettings_SetGamepadIconScheme");
static_assert(offsetof(RGameUserSettings_SetGamepadIconScheme, NewValue) == 0x000000, "Member 'RGameUserSettings_SetGamepadIconScheme::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetGamma
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetGamma final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetGamma) == 0x000004, "Wrong alignment on RGameUserSettings_SetGamma");
static_assert(sizeof(RGameUserSettings_SetGamma) == 0x000004, "Wrong size on RGameUserSettings_SetGamma");
static_assert(offsetof(RGameUserSettings_SetGamma, NewValue) == 0x000000, "Member 'RGameUserSettings_SetGamma::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetGlobalIlluminationMethod
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetGlobalIlluminationMethod final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetGlobalIlluminationMethod) == 0x000004, "Wrong alignment on RGameUserSettings_SetGlobalIlluminationMethod");
static_assert(sizeof(RGameUserSettings_SetGlobalIlluminationMethod) == 0x000004, "Wrong size on RGameUserSettings_SetGlobalIlluminationMethod");
static_assert(offsetof(RGameUserSettings_SetGlobalIlluminationMethod, NewValue) == 0x000000, "Member 'RGameUserSettings_SetGlobalIlluminationMethod::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetHasShownTelemetryConsentScreen
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetHasShownTelemetryConsentScreen final
{
public:
	bool                                          bNewHasShown;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetHasShownTelemetryConsentScreen) == 0x000001, "Wrong alignment on RGameUserSettings_SetHasShownTelemetryConsentScreen");
static_assert(sizeof(RGameUserSettings_SetHasShownTelemetryConsentScreen) == 0x000001, "Wrong size on RGameUserSettings_SetHasShownTelemetryConsentScreen");
static_assert(offsetof(RGameUserSettings_SetHasShownTelemetryConsentScreen, bNewHasShown) == 0x000000, "Member 'RGameUserSettings_SetHasShownTelemetryConsentScreen::bNewHasShown' has a wrong offset!");

// Function RGame.RGameUserSettings.SetHoldToScope
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetHoldToScope final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetHoldToScope) == 0x000001, "Wrong alignment on RGameUserSettings_SetHoldToScope");
static_assert(sizeof(RGameUserSettings_SetHoldToScope) == 0x000001, "Wrong size on RGameUserSettings_SetHoldToScope");
static_assert(offsetof(RGameUserSettings_SetHoldToScope, NewValue) == 0x000000, "Member 'RGameUserSettings_SetHoldToScope::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetInvertedXAxisAiming
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetInvertedXAxisAiming final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetInvertedXAxisAiming) == 0x000001, "Wrong alignment on RGameUserSettings_SetInvertedXAxisAiming");
static_assert(sizeof(RGameUserSettings_SetInvertedXAxisAiming) == 0x000001, "Wrong size on RGameUserSettings_SetInvertedXAxisAiming");
static_assert(offsetof(RGameUserSettings_SetInvertedXAxisAiming, NewValue) == 0x000000, "Member 'RGameUserSettings_SetInvertedXAxisAiming::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetInvertedYAxisAiming
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetInvertedYAxisAiming final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetInvertedYAxisAiming) == 0x000001, "Wrong alignment on RGameUserSettings_SetInvertedYAxisAiming");
static_assert(sizeof(RGameUserSettings_SetInvertedYAxisAiming) == 0x000001, "Wrong size on RGameUserSettings_SetInvertedYAxisAiming");
static_assert(offsetof(RGameUserSettings_SetInvertedYAxisAiming, NewValue) == 0x000000, "Member 'RGameUserSettings_SetInvertedYAxisAiming::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetLockForegroundMaxFramerate
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetLockForegroundMaxFramerate final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetLockForegroundMaxFramerate) == 0x000001, "Wrong alignment on RGameUserSettings_SetLockForegroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_SetLockForegroundMaxFramerate) == 0x000001, "Wrong size on RGameUserSettings_SetLockForegroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_SetLockForegroundMaxFramerate, NewValue) == 0x000000, "Member 'RGameUserSettings_SetLockForegroundMaxFramerate::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetMasterVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetMasterVolume) == 0x000004, "Wrong alignment on RGameUserSettings_SetMasterVolume");
static_assert(sizeof(RGameUserSettings_SetMasterVolume) == 0x000004, "Wrong size on RGameUserSettings_SetMasterVolume");
static_assert(offsetof(RGameUserSettings_SetMasterVolume, NewValue) == 0x000000, "Member 'RGameUserSettings_SetMasterVolume::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetMotionBlurEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetMotionBlurEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_SetMotionBlurEnabled");
static_assert(sizeof(RGameUserSettings_SetMotionBlurEnabled) == 0x000001, "Wrong size on RGameUserSettings_SetMotionBlurEnabled");
static_assert(offsetof(RGameUserSettings_SetMotionBlurEnabled, bNewValue) == 0x000000, "Member 'RGameUserSettings_SetMotionBlurEnabled::bNewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetMusicVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetMusicVolume) == 0x000004, "Wrong alignment on RGameUserSettings_SetMusicVolume");
static_assert(sizeof(RGameUserSettings_SetMusicVolume) == 0x000004, "Wrong size on RGameUserSettings_SetMusicVolume");
static_assert(offsetof(RGameUserSettings_SetMusicVolume, NewValue) == 0x000000, "Member 'RGameUserSettings_SetMusicVolume::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetMuteWhenUnfocused
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetMuteWhenUnfocused final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetMuteWhenUnfocused) == 0x000001, "Wrong alignment on RGameUserSettings_SetMuteWhenUnfocused");
static_assert(sizeof(RGameUserSettings_SetMuteWhenUnfocused) == 0x000001, "Wrong size on RGameUserSettings_SetMuteWhenUnfocused");
static_assert(offsetof(RGameUserSettings_SetMuteWhenUnfocused, NewValue) == 0x000000, "Member 'RGameUserSettings_SetMuteWhenUnfocused::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetPerformCameraShakes
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetPerformCameraShakes final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetPerformCameraShakes) == 0x000001, "Wrong alignment on RGameUserSettings_SetPerformCameraShakes");
static_assert(sizeof(RGameUserSettings_SetPerformCameraShakes) == 0x000001, "Wrong size on RGameUserSettings_SetPerformCameraShakes");
static_assert(offsetof(RGameUserSettings_SetPerformCameraShakes, NewValue) == 0x000000, "Member 'RGameUserSettings_SetPerformCameraShakes::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetScopedAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetScopedAimSensitivity final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetScopedAimSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_SetScopedAimSensitivity");
static_assert(sizeof(RGameUserSettings_SetScopedAimSensitivity) == 0x000004, "Wrong size on RGameUserSettings_SetScopedAimSensitivity");
static_assert(offsetof(RGameUserSettings_SetScopedAimSensitivity, NewValue) == 0x000000, "Member 'RGameUserSettings_SetScopedAimSensitivity::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetScreenPercentage final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetScreenPercentage) == 0x000004, "Wrong alignment on RGameUserSettings_SetScreenPercentage");
static_assert(sizeof(RGameUserSettings_SetScreenPercentage) == 0x000004, "Wrong size on RGameUserSettings_SetScreenPercentage");
static_assert(offsetof(RGameUserSettings_SetScreenPercentage, NewValue) == 0x000000, "Member 'RGameUserSettings_SetScreenPercentage::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetSFXVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetSFXVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetSFXVolume) == 0x000004, "Wrong alignment on RGameUserSettings_SetSFXVolume");
static_assert(sizeof(RGameUserSettings_SetSFXVolume) == 0x000004, "Wrong size on RGameUserSettings_SetSFXVolume");
static_assert(offsetof(RGameUserSettings_SetSFXVolume, NewValue) == 0x000000, "Member 'RGameUserSettings_SetSFXVolume::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowCrosshair
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowCrosshair final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowCrosshair) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowCrosshair");
static_assert(sizeof(RGameUserSettings_SetShowCrosshair) == 0x000001, "Wrong size on RGameUserSettings_SetShowCrosshair");
static_assert(offsetof(RGameUserSettings_SetShowCrosshair, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowCrosshair::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowDamageNumbers
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowDamageNumbers final
{
public:
	EDamageNumbersOption                          NewDamageNumbersOption;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowDamageNumbers) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowDamageNumbers");
static_assert(sizeof(RGameUserSettings_SetShowDamageNumbers) == 0x000001, "Wrong size on RGameUserSettings_SetShowDamageNumbers");
static_assert(offsetof(RGameUserSettings_SetShowDamageNumbers, NewDamageNumbersOption) == 0x000000, "Member 'RGameUserSettings_SetShowDamageNumbers::NewDamageNumbersOption' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowDashIndicator
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowDashIndicator final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowDashIndicator) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowDashIndicator");
static_assert(sizeof(RGameUserSettings_SetShowDashIndicator) == 0x000001, "Wrong size on RGameUserSettings_SetShowDashIndicator");
static_assert(offsetof(RGameUserSettings_SetShowDashIndicator, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowDashIndicator::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowEnemyHealthNumbers
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowEnemyHealthNumbers final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowEnemyHealthNumbers) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowEnemyHealthNumbers");
static_assert(sizeof(RGameUserSettings_SetShowEnemyHealthNumbers) == 0x000001, "Wrong size on RGameUserSettings_SetShowEnemyHealthNumbers");
static_assert(offsetof(RGameUserSettings_SetShowEnemyHealthNumbers, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowEnemyHealthNumbers::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowHealthBars
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowHealthBars final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowHealthBars) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowHealthBars");
static_assert(sizeof(RGameUserSettings_SetShowHealthBars) == 0x000001, "Wrong size on RGameUserSettings_SetShowHealthBars");
static_assert(offsetof(RGameUserSettings_SetShowHealthBars, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowHealthBars::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowPlayerHUD
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowPlayerHUD final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowPlayerHUD) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowPlayerHUD");
static_assert(sizeof(RGameUserSettings_SetShowPlayerHUD) == 0x000001, "Wrong size on RGameUserSettings_SetShowPlayerHUD");
static_assert(offsetof(RGameUserSettings_SetShowPlayerHUD, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowPlayerHUD::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowPlayerNames
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowPlayerNames final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowPlayerNames) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowPlayerNames");
static_assert(sizeof(RGameUserSettings_SetShowPlayerNames) == 0x000001, "Wrong size on RGameUserSettings_SetShowPlayerNames");
static_assert(offsetof(RGameUserSettings_SetShowPlayerNames, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowPlayerNames::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_SetShowSubtitles final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetShowSubtitles) == 0x000001, "Wrong alignment on RGameUserSettings_SetShowSubtitles");
static_assert(sizeof(RGameUserSettings_SetShowSubtitles) == 0x000001, "Wrong size on RGameUserSettings_SetShowSubtitles");
static_assert(offsetof(RGameUserSettings_SetShowSubtitles, NewValue) == 0x000000, "Member 'RGameUserSettings_SetShowSubtitles::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_SetVoiceVolume final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong alignment on RGameUserSettings_SetVoiceVolume");
static_assert(sizeof(RGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong size on RGameUserSettings_SetVoiceVolume");
static_assert(offsetof(RGameUserSettings_SetVoiceVolume, NewValue) == 0x000000, "Member 'RGameUserSettings_SetVoiceVolume::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.UpdateScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct RGameUserSettings_UpdateScreenResolution final
{
public:
	struct FIntPoint                              NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_UpdateScreenResolution) == 0x000004, "Wrong alignment on RGameUserSettings_UpdateScreenResolution");
static_assert(sizeof(RGameUserSettings_UpdateScreenResolution) == 0x000008, "Wrong size on RGameUserSettings_UpdateScreenResolution");
static_assert(offsetof(RGameUserSettings_UpdateScreenResolution, NewValue) == 0x000000, "Member 'RGameUserSettings_UpdateScreenResolution::NewValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetAAType
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetAAType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetAAType) == 0x000004, "Wrong alignment on RGameUserSettings_GetAAType");
static_assert(sizeof(RGameUserSettings_GetAAType) == 0x000004, "Wrong size on RGameUserSettings_GetAAType");
static_assert(offsetof(RGameUserSettings_GetAAType, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetAAType::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetAimSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetAimSensitivity");
static_assert(sizeof(RGameUserSettings_GetAimSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetAimSensitivity");
static_assert(offsetof(RGameUserSettings_GetAimSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetAimSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetAllowTelemetryDataCollection
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetAllowTelemetryDataCollection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetAllowTelemetryDataCollection) == 0x000001, "Wrong alignment on RGameUserSettings_GetAllowTelemetryDataCollection");
static_assert(sizeof(RGameUserSettings_GetAllowTelemetryDataCollection) == 0x000001, "Wrong size on RGameUserSettings_GetAllowTelemetryDataCollection");
static_assert(offsetof(RGameUserSettings_GetAllowTelemetryDataCollection, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetAllowTelemetryDataCollection::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetBackgroundMaxFramerate
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetBackgroundMaxFramerate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetBackgroundMaxFramerate) == 0x000004, "Wrong alignment on RGameUserSettings_GetBackgroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_GetBackgroundMaxFramerate) == 0x000004, "Wrong size on RGameUserSettings_GetBackgroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_GetBackgroundMaxFramerate, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetBackgroundMaxFramerate::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetBinauralAudio
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetBinauralAudio final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetBinauralAudio) == 0x000001, "Wrong alignment on RGameUserSettings_GetBinauralAudio");
static_assert(sizeof(RGameUserSettings_GetBinauralAudio) == 0x000001, "Wrong size on RGameUserSettings_GetBinauralAudio");
static_assert(offsetof(RGameUserSettings_GetBinauralAudio, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetBinauralAudio::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetControllerScopedXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetControllerScopedXSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetControllerScopedXSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetControllerScopedXSensitivity");
static_assert(sizeof(RGameUserSettings_GetControllerScopedXSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetControllerScopedXSensitivity");
static_assert(offsetof(RGameUserSettings_GetControllerScopedXSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetControllerScopedXSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetControllerScopedYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetControllerScopedYSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetControllerScopedYSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetControllerScopedYSensitivity");
static_assert(sizeof(RGameUserSettings_GetControllerScopedYSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetControllerScopedYSensitivity");
static_assert(offsetof(RGameUserSettings_GetControllerScopedYSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetControllerScopedYSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetControllerXSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetControllerXSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetControllerXSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetControllerXSensitivity");
static_assert(sizeof(RGameUserSettings_GetControllerXSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetControllerXSensitivity");
static_assert(offsetof(RGameUserSettings_GetControllerXSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetControllerXSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetControllerYSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetControllerYSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetControllerYSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetControllerYSensitivity");
static_assert(sizeof(RGameUserSettings_GetControllerYSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetControllerYSensitivity");
static_assert(offsetof(RGameUserSettings_GetControllerYSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetControllerYSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetCrosshairAlignmentOption
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetCrosshairAlignmentOption final
{
public:
	ECrosshairAlignmentOption                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetCrosshairAlignmentOption) == 0x000001, "Wrong alignment on RGameUserSettings_GetCrosshairAlignmentOption");
static_assert(sizeof(RGameUserSettings_GetCrosshairAlignmentOption) == 0x000001, "Wrong size on RGameUserSettings_GetCrosshairAlignmentOption");
static_assert(offsetof(RGameUserSettings_GetCrosshairAlignmentOption, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetCrosshairAlignmentOption::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetDepthOfFieldEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetDepthOfFieldEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetDepthOfFieldEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_GetDepthOfFieldEnabled");
static_assert(sizeof(RGameUserSettings_GetDepthOfFieldEnabled) == 0x000001, "Wrong size on RGameUserSettings_GetDepthOfFieldEnabled");
static_assert(offsetof(RGameUserSettings_GetDepthOfFieldEnabled, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetDepthOfFieldEnabled::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetDisableLanguageFiltering
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetDisableLanguageFiltering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetDisableLanguageFiltering) == 0x000001, "Wrong alignment on RGameUserSettings_GetDisableLanguageFiltering");
static_assert(sizeof(RGameUserSettings_GetDisableLanguageFiltering) == 0x000001, "Wrong size on RGameUserSettings_GetDisableLanguageFiltering");
static_assert(offsetof(RGameUserSettings_GetDisableLanguageFiltering, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetDisableLanguageFiltering::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetFieldOfView) == 0x000004, "Wrong alignment on RGameUserSettings_GetFieldOfView");
static_assert(sizeof(RGameUserSettings_GetFieldOfView) == 0x000004, "Wrong size on RGameUserSettings_GetFieldOfView");
static_assert(offsetof(RGameUserSettings_GetFieldOfView, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetForegroundMaxFramerate
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetForegroundMaxFramerate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetForegroundMaxFramerate) == 0x000004, "Wrong alignment on RGameUserSettings_GetForegroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_GetForegroundMaxFramerate) == 0x000004, "Wrong size on RGameUserSettings_GetForegroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_GetForegroundMaxFramerate, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetForegroundMaxFramerate::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetGameLanguage
// 0x0010 (0x0010 - 0x0000)
struct RGameUserSettings_GetGameLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetGameLanguage) == 0x000008, "Wrong alignment on RGameUserSettings_GetGameLanguage");
static_assert(sizeof(RGameUserSettings_GetGameLanguage) == 0x000010, "Wrong size on RGameUserSettings_GetGameLanguage");
static_assert(offsetof(RGameUserSettings_GetGameLanguage, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetGameLanguage::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetGamepadIconScheme
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetGamepadIconScheme final
{
public:
	EGamepadIconScheme                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetGamepadIconScheme) == 0x000001, "Wrong alignment on RGameUserSettings_GetGamepadIconScheme");
static_assert(sizeof(RGameUserSettings_GetGamepadIconScheme) == 0x000001, "Wrong size on RGameUserSettings_GetGamepadIconScheme");
static_assert(offsetof(RGameUserSettings_GetGamepadIconScheme, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetGamepadIconScheme::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetGamma
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetGamma) == 0x000004, "Wrong alignment on RGameUserSettings_GetGamma");
static_assert(sizeof(RGameUserSettings_GetGamma) == 0x000004, "Wrong size on RGameUserSettings_GetGamma");
static_assert(offsetof(RGameUserSettings_GetGamma, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetGamma::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetGIType
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetGIType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetGIType) == 0x000004, "Wrong alignment on RGameUserSettings_GetGIType");
static_assert(sizeof(RGameUserSettings_GetGIType) == 0x000004, "Wrong size on RGameUserSettings_GetGIType");
static_assert(offsetof(RGameUserSettings_GetGIType, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetGIType::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetHoldToScope
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetHoldToScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetHoldToScope) == 0x000001, "Wrong alignment on RGameUserSettings_GetHoldToScope");
static_assert(sizeof(RGameUserSettings_GetHoldToScope) == 0x000001, "Wrong size on RGameUserSettings_GetHoldToScope");
static_assert(offsetof(RGameUserSettings_GetHoldToScope, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetHoldToScope::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetInvertXAxis
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetInvertXAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetInvertXAxis) == 0x000001, "Wrong alignment on RGameUserSettings_GetInvertXAxis");
static_assert(sizeof(RGameUserSettings_GetInvertXAxis) == 0x000001, "Wrong size on RGameUserSettings_GetInvertXAxis");
static_assert(offsetof(RGameUserSettings_GetInvertXAxis, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetInvertXAxis::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetInvertYAxis
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetInvertYAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetInvertYAxis) == 0x000001, "Wrong alignment on RGameUserSettings_GetInvertYAxis");
static_assert(sizeof(RGameUserSettings_GetInvertYAxis) == 0x000001, "Wrong size on RGameUserSettings_GetInvertYAxis");
static_assert(offsetof(RGameUserSettings_GetInvertYAxis, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetInvertYAxis::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetIsControllerVibrationEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetIsControllerVibrationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetIsControllerVibrationEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_GetIsControllerVibrationEnabled");
static_assert(sizeof(RGameUserSettings_GetIsControllerVibrationEnabled) == 0x000001, "Wrong size on RGameUserSettings_GetIsControllerVibrationEnabled");
static_assert(offsetof(RGameUserSettings_GetIsControllerVibrationEnabled, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetIsControllerVibrationEnabled::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetLockForegroundMaxFramerate
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetLockForegroundMaxFramerate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetLockForegroundMaxFramerate) == 0x000001, "Wrong alignment on RGameUserSettings_GetLockForegroundMaxFramerate");
static_assert(sizeof(RGameUserSettings_GetLockForegroundMaxFramerate) == 0x000001, "Wrong size on RGameUserSettings_GetLockForegroundMaxFramerate");
static_assert(offsetof(RGameUserSettings_GetLockForegroundMaxFramerate, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetLockForegroundMaxFramerate::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetMasterAudioVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetMasterAudioVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetMasterAudioVolume) == 0x000004, "Wrong alignment on RGameUserSettings_GetMasterAudioVolume");
static_assert(sizeof(RGameUserSettings_GetMasterAudioVolume) == 0x000004, "Wrong size on RGameUserSettings_GetMasterAudioVolume");
static_assert(offsetof(RGameUserSettings_GetMasterAudioVolume, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetMasterAudioVolume::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetMotionBlurEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetMotionBlurEnabled) == 0x000001, "Wrong alignment on RGameUserSettings_GetMotionBlurEnabled");
static_assert(sizeof(RGameUserSettings_GetMotionBlurEnabled) == 0x000001, "Wrong size on RGameUserSettings_GetMotionBlurEnabled");
static_assert(offsetof(RGameUserSettings_GetMotionBlurEnabled, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetMotionBlurEnabled::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetMusicAudioVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetMusicAudioVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetMusicAudioVolume) == 0x000004, "Wrong alignment on RGameUserSettings_GetMusicAudioVolume");
static_assert(sizeof(RGameUserSettings_GetMusicAudioVolume) == 0x000004, "Wrong size on RGameUserSettings_GetMusicAudioVolume");
static_assert(offsetof(RGameUserSettings_GetMusicAudioVolume, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetMusicAudioVolume::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetMuteWhenUnfocused
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetMuteWhenUnfocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetMuteWhenUnfocused) == 0x000001, "Wrong alignment on RGameUserSettings_GetMuteWhenUnfocused");
static_assert(sizeof(RGameUserSettings_GetMuteWhenUnfocused) == 0x000001, "Wrong size on RGameUserSettings_GetMuteWhenUnfocused");
static_assert(offsetof(RGameUserSettings_GetMuteWhenUnfocused, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetMuteWhenUnfocused::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetPerformCameraShakes
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetPerformCameraShakes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetPerformCameraShakes) == 0x000001, "Wrong alignment on RGameUserSettings_GetPerformCameraShakes");
static_assert(sizeof(RGameUserSettings_GetPerformCameraShakes) == 0x000001, "Wrong size on RGameUserSettings_GetPerformCameraShakes");
static_assert(offsetof(RGameUserSettings_GetPerformCameraShakes, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetPerformCameraShakes::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetScopedAimSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetScopedAimSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetScopedAimSensitivity) == 0x000004, "Wrong alignment on RGameUserSettings_GetScopedAimSensitivity");
static_assert(sizeof(RGameUserSettings_GetScopedAimSensitivity) == 0x000004, "Wrong size on RGameUserSettings_GetScopedAimSensitivity");
static_assert(offsetof(RGameUserSettings_GetScopedAimSensitivity, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetScopedAimSensitivity::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetScreenPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetScreenPercentage) == 0x000004, "Wrong alignment on RGameUserSettings_GetScreenPercentage");
static_assert(sizeof(RGameUserSettings_GetScreenPercentage) == 0x000004, "Wrong size on RGameUserSettings_GetScreenPercentage");
static_assert(offsetof(RGameUserSettings_GetScreenPercentage, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetScreenPercentage::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetSFXAudioVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetSFXAudioVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetSFXAudioVolume) == 0x000004, "Wrong alignment on RGameUserSettings_GetSFXAudioVolume");
static_assert(sizeof(RGameUserSettings_GetSFXAudioVolume) == 0x000004, "Wrong size on RGameUserSettings_GetSFXAudioVolume");
static_assert(offsetof(RGameUserSettings_GetSFXAudioVolume, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetSFXAudioVolume::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowCrosshair
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowCrosshair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowCrosshair) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowCrosshair");
static_assert(sizeof(RGameUserSettings_GetShowCrosshair) == 0x000001, "Wrong size on RGameUserSettings_GetShowCrosshair");
static_assert(offsetof(RGameUserSettings_GetShowCrosshair, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowCrosshair::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowDamageNumbers
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowDamageNumbers final
{
public:
	EDamageNumbersOption                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowDamageNumbers) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowDamageNumbers");
static_assert(sizeof(RGameUserSettings_GetShowDamageNumbers) == 0x000001, "Wrong size on RGameUserSettings_GetShowDamageNumbers");
static_assert(offsetof(RGameUserSettings_GetShowDamageNumbers, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowDamageNumbers::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowDashIndicator
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowDashIndicator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowDashIndicator) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowDashIndicator");
static_assert(sizeof(RGameUserSettings_GetShowDashIndicator) == 0x000001, "Wrong size on RGameUserSettings_GetShowDashIndicator");
static_assert(offsetof(RGameUserSettings_GetShowDashIndicator, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowDashIndicator::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowEnemyHealthNumbers
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowEnemyHealthNumbers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowEnemyHealthNumbers) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowEnemyHealthNumbers");
static_assert(sizeof(RGameUserSettings_GetShowEnemyHealthNumbers) == 0x000001, "Wrong size on RGameUserSettings_GetShowEnemyHealthNumbers");
static_assert(offsetof(RGameUserSettings_GetShowEnemyHealthNumbers, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowEnemyHealthNumbers::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowHealthBars
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowHealthBars final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowHealthBars) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowHealthBars");
static_assert(sizeof(RGameUserSettings_GetShowHealthBars) == 0x000001, "Wrong size on RGameUserSettings_GetShowHealthBars");
static_assert(offsetof(RGameUserSettings_GetShowHealthBars, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowHealthBars::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowPlayerHUD
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowPlayerHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowPlayerHUD) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowPlayerHUD");
static_assert(sizeof(RGameUserSettings_GetShowPlayerHUD) == 0x000001, "Wrong size on RGameUserSettings_GetShowPlayerHUD");
static_assert(offsetof(RGameUserSettings_GetShowPlayerHUD, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowPlayerHUD::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowPlayerNames
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowPlayerNames final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowPlayerNames) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowPlayerNames");
static_assert(sizeof(RGameUserSettings_GetShowPlayerNames) == 0x000001, "Wrong size on RGameUserSettings_GetShowPlayerNames");
static_assert(offsetof(RGameUserSettings_GetShowPlayerNames, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowPlayerNames::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetShowSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetShowSubtitles) == 0x000001, "Wrong alignment on RGameUserSettings_GetShowSubtitles");
static_assert(sizeof(RGameUserSettings_GetShowSubtitles) == 0x000001, "Wrong size on RGameUserSettings_GetShowSubtitles");
static_assert(offsetof(RGameUserSettings_GetShowSubtitles, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetShowSubtitles::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetUseAlternateMusicList
// 0x0001 (0x0001 - 0x0000)
struct RGameUserSettings_GetUseAlternateMusicList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetUseAlternateMusicList) == 0x000001, "Wrong alignment on RGameUserSettings_GetUseAlternateMusicList");
static_assert(sizeof(RGameUserSettings_GetUseAlternateMusicList) == 0x000001, "Wrong size on RGameUserSettings_GetUseAlternateMusicList");
static_assert(offsetof(RGameUserSettings_GetUseAlternateMusicList, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetUseAlternateMusicList::ReturnValue' has a wrong offset!");

// Function RGame.RGameUserSettings.GetVoiceAudioVolume
// 0x0004 (0x0004 - 0x0000)
struct RGameUserSettings_GetVoiceAudioVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGameUserSettings_GetVoiceAudioVolume) == 0x000004, "Wrong alignment on RGameUserSettings_GetVoiceAudioVolume");
static_assert(sizeof(RGameUserSettings_GetVoiceAudioVolume) == 0x000004, "Wrong size on RGameUserSettings_GetVoiceAudioVolume");
static_assert(offsetof(RGameUserSettings_GetVoiceAudioVolume, ReturnValue) == 0x000000, "Member 'RGameUserSettings_GetVoiceAudioVolume::ReturnValue' has a wrong offset!");

// Function RGame.RGAreaEffectScript.GetActorsInArea
// 0x0010 (0x0010 - 0x0000)
struct RGAreaEffectScript_GetActorsInArea final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_GetActorsInArea) == 0x000008, "Wrong alignment on RGAreaEffectScript_GetActorsInArea");
static_assert(sizeof(RGAreaEffectScript_GetActorsInArea) == 0x000010, "Wrong size on RGAreaEffectScript_GetActorsInArea");
static_assert(offsetof(RGAreaEffectScript_GetActorsInArea, ReturnValue) == 0x000000, "Member 'RGAreaEffectScript_GetActorsInArea::ReturnValue' has a wrong offset!");

// Function RGame.RGAreaEffectScript.GetAliveNPCPawnsInArea
// 0x0010 (0x0010 - 0x0000)
struct RGAreaEffectScript_GetAliveNPCPawnsInArea final
{
public:
	TArray<class ARNPCPawnBase*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_GetAliveNPCPawnsInArea) == 0x000008, "Wrong alignment on RGAreaEffectScript_GetAliveNPCPawnsInArea");
static_assert(sizeof(RGAreaEffectScript_GetAliveNPCPawnsInArea) == 0x000010, "Wrong size on RGAreaEffectScript_GetAliveNPCPawnsInArea");
static_assert(offsetof(RGAreaEffectScript_GetAliveNPCPawnsInArea, ReturnValue) == 0x000000, "Member 'RGAreaEffectScript_GetAliveNPCPawnsInArea::ReturnValue' has a wrong offset!");

// Function RGame.RGAreaEffectScript.GetAlivePawnsInArea
// 0x0010 (0x0010 - 0x0000)
struct RGAreaEffectScript_GetAlivePawnsInArea final
{
public:
	TArray<class ARPawnBase*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_GetAlivePawnsInArea) == 0x000008, "Wrong alignment on RGAreaEffectScript_GetAlivePawnsInArea");
static_assert(sizeof(RGAreaEffectScript_GetAlivePawnsInArea) == 0x000010, "Wrong size on RGAreaEffectScript_GetAlivePawnsInArea");
static_assert(offsetof(RGAreaEffectScript_GetAlivePawnsInArea, ReturnValue) == 0x000000, "Member 'RGAreaEffectScript_GetAlivePawnsInArea::ReturnValue' has a wrong offset!");

// Function RGame.RGAreaEffectScript.K2_OnEnter
// 0x0008 (0x0008 - 0x0000)
struct RGAreaEffectScript_K2_OnEnter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_K2_OnEnter) == 0x000008, "Wrong alignment on RGAreaEffectScript_K2_OnEnter");
static_assert(sizeof(RGAreaEffectScript_K2_OnEnter) == 0x000008, "Wrong size on RGAreaEffectScript_K2_OnEnter");
static_assert(offsetof(RGAreaEffectScript_K2_OnEnter, Actor) == 0x000000, "Member 'RGAreaEffectScript_K2_OnEnter::Actor' has a wrong offset!");

// Function RGame.RGAreaEffectScript.K2_OnExit
// 0x0008 (0x0008 - 0x0000)
struct RGAreaEffectScript_K2_OnExit final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_K2_OnExit) == 0x000008, "Wrong alignment on RGAreaEffectScript_K2_OnExit");
static_assert(sizeof(RGAreaEffectScript_K2_OnExit) == 0x000008, "Wrong size on RGAreaEffectScript_K2_OnExit");
static_assert(offsetof(RGAreaEffectScript_K2_OnExit, Actor) == 0x000000, "Member 'RGAreaEffectScript_K2_OnExit::Actor' has a wrong offset!");

// Function RGame.RGAreaEffectScript.OnEnter
// 0x0008 (0x0008 - 0x0000)
struct RGAreaEffectScript_OnEnter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_OnEnter) == 0x000008, "Wrong alignment on RGAreaEffectScript_OnEnter");
static_assert(sizeof(RGAreaEffectScript_OnEnter) == 0x000008, "Wrong size on RGAreaEffectScript_OnEnter");
static_assert(offsetof(RGAreaEffectScript_OnEnter, Actor) == 0x000000, "Member 'RGAreaEffectScript_OnEnter::Actor' has a wrong offset!");

// Function RGame.RGAreaEffectScript.OnExit
// 0x0008 (0x0008 - 0x0000)
struct RGAreaEffectScript_OnExit final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_OnExit) == 0x000008, "Wrong alignment on RGAreaEffectScript_OnExit");
static_assert(sizeof(RGAreaEffectScript_OnExit) == 0x000008, "Wrong size on RGAreaEffectScript_OnExit");
static_assert(offsetof(RGAreaEffectScript_OnExit, Actor) == 0x000000, "Member 'RGAreaEffectScript_OnExit::Actor' has a wrong offset!");

// Function RGame.RGAreaEffectScript.GetOwningAreaEffect
// 0x0008 (0x0008 - 0x0000)
struct RGAreaEffectScript_GetOwningAreaEffect final
{
public:
	class ARAreaEffect*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGAreaEffectScript_GetOwningAreaEffect) == 0x000008, "Wrong alignment on RGAreaEffectScript_GetOwningAreaEffect");
static_assert(sizeof(RGAreaEffectScript_GetOwningAreaEffect) == 0x000008, "Wrong size on RGAreaEffectScript_GetOwningAreaEffect");
static_assert(offsetof(RGAreaEffectScript_GetOwningAreaEffect, ReturnValue) == 0x000000, "Member 'RGAreaEffectScript_GetOwningAreaEffect::ReturnValue' has a wrong offset!");

// Function RGame.RGBossAbilityScript.IsMainAbilityScript
// 0x0001 (0x0001 - 0x0000)
struct RGBossAbilityScript_IsMainAbilityScript final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossAbilityScript_IsMainAbilityScript) == 0x000001, "Wrong alignment on RGBossAbilityScript_IsMainAbilityScript");
static_assert(sizeof(RGBossAbilityScript_IsMainAbilityScript) == 0x000001, "Wrong size on RGBossAbilityScript_IsMainAbilityScript");
static_assert(offsetof(RGBossAbilityScript_IsMainAbilityScript, ReturnValue) == 0x000000, "Member 'RGBossAbilityScript_IsMainAbilityScript::ReturnValue' has a wrong offset!");

// Function RGame.RGBossAbilityScript.K2_OnAnimationTriggerEvent
// 0x0008 (0x0008 - 0x0000)
struct RGBossAbilityScript_K2_OnAnimationTriggerEvent final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossAbilityScript_K2_OnAnimationTriggerEvent) == 0x000004, "Wrong alignment on RGBossAbilityScript_K2_OnAnimationTriggerEvent");
static_assert(sizeof(RGBossAbilityScript_K2_OnAnimationTriggerEvent) == 0x000008, "Wrong size on RGBossAbilityScript_K2_OnAnimationTriggerEvent");
static_assert(offsetof(RGBossAbilityScript_K2_OnAnimationTriggerEvent, Event) == 0x000000, "Member 'RGBossAbilityScript_K2_OnAnimationTriggerEvent::Event' has a wrong offset!");

// Function RGame.RGBossAbilityScript.OnAnimationTriggerEvent
// 0x0008 (0x0008 - 0x0000)
struct RGBossAbilityScript_OnAnimationTriggerEvent final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBossAbilityScript_OnAnimationTriggerEvent) == 0x000004, "Wrong alignment on RGBossAbilityScript_OnAnimationTriggerEvent");
static_assert(sizeof(RGBossAbilityScript_OnAnimationTriggerEvent) == 0x000008, "Wrong size on RGBossAbilityScript_OnAnimationTriggerEvent");
static_assert(offsetof(RGBossAbilityScript_OnAnimationTriggerEvent, Event) == 0x000000, "Member 'RGBossAbilityScript_OnAnimationTriggerEvent::Event' has a wrong offset!");

// Function RGame.RGBurningAilment.GetFirePassive1SpreadTargets
// 0x0010 (0x0010 - 0x0000)
struct RGBurningAilment_GetFirePassive1SpreadTargets final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGBurningAilment_GetFirePassive1SpreadTargets) == 0x000008, "Wrong alignment on RGBurningAilment_GetFirePassive1SpreadTargets");
static_assert(sizeof(RGBurningAilment_GetFirePassive1SpreadTargets) == 0x000010, "Wrong size on RGBurningAilment_GetFirePassive1SpreadTargets");
static_assert(offsetof(RGBurningAilment_GetFirePassive1SpreadTargets, ReturnValue) == 0x000000, "Member 'RGBurningAilment_GetFirePassive1SpreadTargets::ReturnValue' has a wrong offset!");

// Function RGame.RGCharSkillTreeMutatorScript.RefreshSkillTreeMutator
// 0x0004 (0x0004 - 0x0000)
struct RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator final
{
public:
	int32                                         MutatorRank;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator) == 0x000004, "Wrong alignment on RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator");
static_assert(sizeof(RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator) == 0x000004, "Wrong size on RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator");
static_assert(offsetof(RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator, MutatorRank) == 0x000000, "Member 'RGCharSkillTreeMutatorScript_RefreshSkillTreeMutator::MutatorRank' has a wrong offset!");

// Function RGame.RGEnemyAttackScript.GetCategoryName
// 0x0008 (0x0008 - 0x0000)
struct RGEnemyAttackScript_GetCategoryName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyAttackScript_GetCategoryName) == 0x000004, "Wrong alignment on RGEnemyAttackScript_GetCategoryName");
static_assert(sizeof(RGEnemyAttackScript_GetCategoryName) == 0x000008, "Wrong size on RGEnemyAttackScript_GetCategoryName");
static_assert(offsetof(RGEnemyAttackScript_GetCategoryName, ReturnValue) == 0x000000, "Member 'RGEnemyAttackScript_GetCategoryName::ReturnValue' has a wrong offset!");

// Function RGame.RGEnemyAttackScript.OnAttack
// 0x0008 (0x0008 - 0x0000)
struct RGEnemyAttackScript_OnAttack final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGEnemyAttackScript_OnAttack) == 0x000008, "Wrong alignment on RGEnemyAttackScript_OnAttack");
static_assert(sizeof(RGEnemyAttackScript_OnAttack) == 0x000008, "Wrong size on RGEnemyAttackScript_OnAttack");
static_assert(offsetof(RGEnemyAttackScript_OnAttack, Target) == 0x000000, "Member 'RGEnemyAttackScript_OnAttack::Target' has a wrong offset!");

// Function RGame.RGeometryCollectionActor.GetHasBroken
// 0x0001 (0x0001 - 0x0000)
struct RGeometryCollectionActor_GetHasBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGeometryCollectionActor_GetHasBroken) == 0x000001, "Wrong alignment on RGeometryCollectionActor_GetHasBroken");
static_assert(sizeof(RGeometryCollectionActor_GetHasBroken) == 0x000001, "Wrong size on RGeometryCollectionActor_GetHasBroken");
static_assert(offsetof(RGeometryCollectionActor_GetHasBroken, ReturnValue) == 0x000000, "Member 'RGeometryCollectionActor_GetHasBroken::ReturnValue' has a wrong offset!");

// Function RGame.RGeometryCollectionActor.HandleBreakEvent
// 0x0078 (0x0078 - 0x0000)
struct RGeometryCollectionActor_HandleBreakEvent final
{
public:
	struct FChaosBreakEvent                       BreakEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGeometryCollectionActor_HandleBreakEvent) == 0x000008, "Wrong alignment on RGeometryCollectionActor_HandleBreakEvent");
static_assert(sizeof(RGeometryCollectionActor_HandleBreakEvent) == 0x000078, "Wrong size on RGeometryCollectionActor_HandleBreakEvent");
static_assert(offsetof(RGeometryCollectionActor_HandleBreakEvent, BreakEvent) == 0x000000, "Member 'RGeometryCollectionActor_HandleBreakEvent::BreakEvent' has a wrong offset!");

// Function RGame.RGeometryCollectionActor.K2_OnMeshBroken
// 0x0078 (0x0078 - 0x0000)
struct RGeometryCollectionActor_K2_OnMeshBroken final
{
public:
	struct FChaosBreakEvent                       BreakEvent;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGeometryCollectionActor_K2_OnMeshBroken) == 0x000008, "Wrong alignment on RGeometryCollectionActor_K2_OnMeshBroken");
static_assert(sizeof(RGeometryCollectionActor_K2_OnMeshBroken) == 0x000078, "Wrong size on RGeometryCollectionActor_K2_OnMeshBroken");
static_assert(offsetof(RGeometryCollectionActor_K2_OnMeshBroken, BreakEvent) == 0x000000, "Member 'RGeometryCollectionActor_K2_OnMeshBroken::BreakEvent' has a wrong offset!");

// Function RGame.RGeometryCollectionActor.OnComponentHit
// 0x0130 (0x0130 - 0x0000)
struct RGeometryCollectionActor_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGeometryCollectionActor_OnComponentHit) == 0x000008, "Wrong alignment on RGeometryCollectionActor_OnComponentHit");
static_assert(sizeof(RGeometryCollectionActor_OnComponentHit) == 0x000130, "Wrong size on RGeometryCollectionActor_OnComponentHit");
static_assert(offsetof(RGeometryCollectionActor_OnComponentHit, HitComponent) == 0x000000, "Member 'RGeometryCollectionActor_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RGeometryCollectionActor_OnComponentHit, OtherActor) == 0x000008, "Member 'RGeometryCollectionActor_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RGeometryCollectionActor_OnComponentHit, OtherComponent) == 0x000010, "Member 'RGeometryCollectionActor_OnComponentHit::OtherComponent' has a wrong offset!");
static_assert(offsetof(RGeometryCollectionActor_OnComponentHit, NormalImpulse) == 0x000018, "Member 'RGeometryCollectionActor_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RGeometryCollectionActor_OnComponentHit, Hit) == 0x000030, "Member 'RGeometryCollectionActor_OnComponentHit::Hit' has a wrong offset!");

// Function RGame.RGFrostPassive3CharacterMutator.GetFrostPassive3Multiplier
// 0x0004 (0x0004 - 0x0000)
struct RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier) == 0x000004, "Wrong alignment on RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier");
static_assert(sizeof(RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier) == 0x000004, "Wrong size on RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier");
static_assert(offsetof(RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier, ReturnValue) == 0x000000, "Member 'RGFrostPassive3CharacterMutator_GetFrostPassive3Multiplier::ReturnValue' has a wrong offset!");

// Function RGame.RGFrozenSlipperyStatusEffect.DoAoeSlam
// 0x0030 (0x0030 - 0x0000)
struct RGFrozenSlipperyStatusEffect_DoAoeSlam final
{
public:
	TArray<class URStatusEffectGScript*>          Instigators;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMaxRadius;                                      // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGFrozenSlipperyStatusEffect_DoAoeSlam) == 0x000008, "Wrong alignment on RGFrozenSlipperyStatusEffect_DoAoeSlam");
static_assert(sizeof(RGFrozenSlipperyStatusEffect_DoAoeSlam) == 0x000030, "Wrong size on RGFrozenSlipperyStatusEffect_DoAoeSlam");
static_assert(offsetof(RGFrozenSlipperyStatusEffect_DoAoeSlam, Instigators) == 0x000000, "Member 'RGFrozenSlipperyStatusEffect_DoAoeSlam::Instigators' has a wrong offset!");
static_assert(offsetof(RGFrozenSlipperyStatusEffect_DoAoeSlam, Origin) == 0x000010, "Member 'RGFrozenSlipperyStatusEffect_DoAoeSlam::Origin' has a wrong offset!");
static_assert(offsetof(RGFrozenSlipperyStatusEffect_DoAoeSlam, OutMaxRadius) == 0x000028, "Member 'RGFrozenSlipperyStatusEffect_DoAoeSlam::OutMaxRadius' has a wrong offset!");

// Function RGame.RGGrenadeScript.GetOwningGrenade
// 0x0008 (0x0008 - 0x0000)
struct RGGrenadeScript_GetOwningGrenade final
{
public:
	class ARGrenade*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGGrenadeScript_GetOwningGrenade) == 0x000008, "Wrong alignment on RGGrenadeScript_GetOwningGrenade");
static_assert(sizeof(RGGrenadeScript_GetOwningGrenade) == 0x000008, "Wrong size on RGGrenadeScript_GetOwningGrenade");
static_assert(offsetof(RGGrenadeScript_GetOwningGrenade, ReturnValue) == 0x000000, "Member 'RGGrenadeScript_GetOwningGrenade::ReturnValue' has a wrong offset!");

// Function RGame.RGObjectiveScript.EndObjective
// 0x0001 (0x0001 - 0x0000)
struct RGObjectiveScript_EndObjective final
{
public:
	bool                                          bCompleted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_EndObjective) == 0x000001, "Wrong alignment on RGObjectiveScript_EndObjective");
static_assert(sizeof(RGObjectiveScript_EndObjective) == 0x000001, "Wrong size on RGObjectiveScript_EndObjective");
static_assert(offsetof(RGObjectiveScript_EndObjective, bCompleted) == 0x000000, "Member 'RGObjectiveScript_EndObjective::bCompleted' has a wrong offset!");

// Function RGame.RGObjectiveScript.SetHasObjectiveEnded
// 0x0001 (0x0001 - 0x0000)
struct RGObjectiveScript_SetHasObjectiveEnded final
{
public:
	bool                                          bNewHasEnded;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_SetHasObjectiveEnded) == 0x000001, "Wrong alignment on RGObjectiveScript_SetHasObjectiveEnded");
static_assert(sizeof(RGObjectiveScript_SetHasObjectiveEnded) == 0x000001, "Wrong size on RGObjectiveScript_SetHasObjectiveEnded");
static_assert(offsetof(RGObjectiveScript_SetHasObjectiveEnded, bNewHasEnded) == 0x000000, "Member 'RGObjectiveScript_SetHasObjectiveEnded::bNewHasEnded' has a wrong offset!");

// Function RGame.RGObjectiveScript.SetResultForController
// 0x0010 (0x0010 - 0x0000)
struct RGObjectiveScript_SetResultForController final
{
public:
	bool                                          bSuccesful;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_SetResultForController) == 0x000008, "Wrong alignment on RGObjectiveScript_SetResultForController");
static_assert(sizeof(RGObjectiveScript_SetResultForController) == 0x000010, "Wrong size on RGObjectiveScript_SetResultForController");
static_assert(offsetof(RGObjectiveScript_SetResultForController, bSuccesful) == 0x000000, "Member 'RGObjectiveScript_SetResultForController::bSuccesful' has a wrong offset!");
static_assert(offsetof(RGObjectiveScript_SetResultForController, PlayerController) == 0x000008, "Member 'RGObjectiveScript_SetResultForController::PlayerController' has a wrong offset!");

// Function RGame.RGObjectiveScript.UpdateObjective
// 0x0010 (0x0010 - 0x0000)
struct RGObjectiveScript_UpdateObjective final
{
public:
	class FText                                   UpdateInfo;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_UpdateObjective) == 0x000008, "Wrong alignment on RGObjectiveScript_UpdateObjective");
static_assert(sizeof(RGObjectiveScript_UpdateObjective) == 0x000010, "Wrong size on RGObjectiveScript_UpdateObjective");
static_assert(offsetof(RGObjectiveScript_UpdateObjective, UpdateInfo) == 0x000000, "Member 'RGObjectiveScript_UpdateObjective::UpdateInfo' has a wrong offset!");

// Function RGame.RGObjectiveScript.GetProgressionText
// 0x0010 (0x0010 - 0x0000)
struct RGObjectiveScript_GetProgressionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_GetProgressionText) == 0x000008, "Wrong alignment on RGObjectiveScript_GetProgressionText");
static_assert(sizeof(RGObjectiveScript_GetProgressionText) == 0x000010, "Wrong size on RGObjectiveScript_GetProgressionText");
static_assert(offsetof(RGObjectiveScript_GetProgressionText, ReturnValue) == 0x000000, "Member 'RGObjectiveScript_GetProgressionText::ReturnValue' has a wrong offset!");

// Function RGame.RGObjectiveScript.HasObjectiveEnded
// 0x0001 (0x0001 - 0x0000)
struct RGObjectiveScript_HasObjectiveEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGObjectiveScript_HasObjectiveEnded) == 0x000001, "Wrong alignment on RGObjectiveScript_HasObjectiveEnded");
static_assert(sizeof(RGObjectiveScript_HasObjectiveEnded) == 0x000001, "Wrong size on RGObjectiveScript_HasObjectiveEnded");
static_assert(offsetof(RGObjectiveScript_HasObjectiveEnded, ReturnValue) == 0x000000, "Member 'RGObjectiveScript_HasObjectiveEnded::ReturnValue' has a wrong offset!");

// Function RGame.RGoldManager.GetGoldManager
// 0x0010 (0x0010 - 0x0000)
struct RGoldManager_GetGoldManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARGoldManager*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGoldManager_GetGoldManager) == 0x000008, "Wrong alignment on RGoldManager_GetGoldManager");
static_assert(sizeof(RGoldManager_GetGoldManager) == 0x000010, "Wrong size on RGoldManager_GetGoldManager");
static_assert(offsetof(RGoldManager_GetGoldManager, WorldContextObject) == 0x000000, "Member 'RGoldManager_GetGoldManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RGoldManager_GetGoldManager, ReturnValue) == 0x000008, "Member 'RGoldManager_GetGoldManager::ReturnValue' has a wrong offset!");

// Function RGame.RGoldManager.SpawnGold
// 0x0028 (0x0028 - 0x0000)
struct RGoldManager_SpawnGold final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBurst;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGoldManager_SpawnGold) == 0x000008, "Wrong alignment on RGoldManager_SpawnGold");
static_assert(sizeof(RGoldManager_SpawnGold) == 0x000028, "Wrong size on RGoldManager_SpawnGold");
static_assert(offsetof(RGoldManager_SpawnGold, Player) == 0x000000, "Member 'RGoldManager_SpawnGold::Player' has a wrong offset!");
static_assert(offsetof(RGoldManager_SpawnGold, bBurst) == 0x000008, "Member 'RGoldManager_SpawnGold::bBurst' has a wrong offset!");
static_assert(offsetof(RGoldManager_SpawnGold, Amount) == 0x00000C, "Member 'RGoldManager_SpawnGold::Amount' has a wrong offset!");
static_assert(offsetof(RGoldManager_SpawnGold, Location) == 0x000010, "Member 'RGoldManager_SpawnGold::Location' has a wrong offset!");

// Function RGame.RGolemancerPlatform.FlipTile
// 0x0008 (0x0008 - 0x0000)
struct RGolemancerPlatform_FlipTile final
{
public:
	class ARGolemancerPlatform*                   FlipSourceActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGolemancerPlatform_FlipTile) == 0x000008, "Wrong alignment on RGolemancerPlatform_FlipTile");
static_assert(sizeof(RGolemancerPlatform_FlipTile) == 0x000008, "Wrong size on RGolemancerPlatform_FlipTile");
static_assert(offsetof(RGolemancerPlatform_FlipTile, FlipSourceActor) == 0x000000, "Member 'RGolemancerPlatform_FlipTile::FlipSourceActor' has a wrong offset!");

// Function RGame.RGolemancerPlatform.GetPlatformMesh
// 0x0008 (0x0008 - 0x0000)
struct RGolemancerPlatform_GetPlatformMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGolemancerPlatform_GetPlatformMesh) == 0x000008, "Wrong alignment on RGolemancerPlatform_GetPlatformMesh");
static_assert(sizeof(RGolemancerPlatform_GetPlatformMesh) == 0x000008, "Wrong size on RGolemancerPlatform_GetPlatformMesh");
static_assert(offsetof(RGolemancerPlatform_GetPlatformMesh, ReturnValue) == 0x000000, "Member 'RGolemancerPlatform_GetPlatformMesh::ReturnValue' has a wrong offset!");

// Function RGame.RGolemancerPlatform.PrimeTileExplosion
// 0x0004 (0x0004 - 0x0000)
struct RGolemancerPlatform_PrimeTileExplosion final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGolemancerPlatform_PrimeTileExplosion) == 0x000004, "Wrong alignment on RGolemancerPlatform_PrimeTileExplosion");
static_assert(sizeof(RGolemancerPlatform_PrimeTileExplosion) == 0x000004, "Wrong size on RGolemancerPlatform_PrimeTileExplosion");
static_assert(offsetof(RGolemancerPlatform_PrimeTileExplosion, Duration) == 0x000000, "Member 'RGolemancerPlatform_PrimeTileExplosion::Duration' has a wrong offset!");

// Function RGame.RGolemancerPylon.SetIsActive
// 0x0001 (0x0001 - 0x0000)
struct RGolemancerPylon_SetIsActive final
{
public:
	bool                                          bNewIsActive;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGolemancerPylon_SetIsActive) == 0x000001, "Wrong alignment on RGolemancerPylon_SetIsActive");
static_assert(sizeof(RGolemancerPylon_SetIsActive) == 0x000001, "Wrong size on RGolemancerPylon_SetIsActive");
static_assert(offsetof(RGolemancerPylon_SetIsActive, bNewIsActive) == 0x000000, "Member 'RGolemancerPylon_SetIsActive::bNewIsActive' has a wrong offset!");

// Function RGame.RGolemancerPylon.IsActive
// 0x0001 (0x0001 - 0x0000)
struct RGolemancerPylon_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGolemancerPylon_IsActive) == 0x000001, "Wrong alignment on RGolemancerPylon_IsActive");
static_assert(sizeof(RGolemancerPylon_IsActive) == 0x000001, "Wrong size on RGolemancerPylon_IsActive");
static_assert(offsetof(RGolemancerPylon_IsActive, ReturnValue) == 0x000000, "Member 'RGolemancerPylon_IsActive::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileEffectScript.GetOwningProjectile
// 0x0008 (0x0008 - 0x0000)
struct RGProjectileEffectScript_GetOwningProjectile final
{
public:
	class ARProjectileBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileEffectScript_GetOwningProjectile) == 0x000008, "Wrong alignment on RGProjectileEffectScript_GetOwningProjectile");
static_assert(sizeof(RGProjectileEffectScript_GetOwningProjectile) == 0x000008, "Wrong size on RGProjectileEffectScript_GetOwningProjectile");
static_assert(offsetof(RGProjectileEffectScript_GetOwningProjectile, ReturnValue) == 0x000000, "Member 'RGProjectileEffectScript_GetOwningProjectile::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileEffectScript.GetProjectileScript
// 0x0008 (0x0008 - 0x0000)
struct RGProjectileEffectScript_GetProjectileScript final
{
public:
	class URProjectileBaseScript*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileEffectScript_GetProjectileScript) == 0x000008, "Wrong alignment on RGProjectileEffectScript_GetProjectileScript");
static_assert(sizeof(RGProjectileEffectScript_GetProjectileScript) == 0x000008, "Wrong size on RGProjectileEffectScript_GetProjectileScript");
static_assert(offsetof(RGProjectileEffectScript_GetProjectileScript, ReturnValue) == 0x000000, "Member 'RGProjectileEffectScript_GetProjectileScript::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.GetMutatorDescription
// 0x0010 (0x0010 - 0x0000)
struct RGProjectileMutatorScript_GetMutatorDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileMutatorScript_GetMutatorDescription) == 0x000008, "Wrong alignment on RGProjectileMutatorScript_GetMutatorDescription");
static_assert(sizeof(RGProjectileMutatorScript_GetMutatorDescription) == 0x000010, "Wrong size on RGProjectileMutatorScript_GetMutatorDescription");
static_assert(offsetof(RGProjectileMutatorScript_GetMutatorDescription, ReturnValue) == 0x000000, "Member 'RGProjectileMutatorScript_GetMutatorDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.GetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RGProjectileMutatorScript_GetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGProjectileMutatorScript_GetMutatorRank) == 0x000008, "Wrong alignment on RGProjectileMutatorScript_GetMutatorRank");
static_assert(sizeof(RGProjectileMutatorScript_GetMutatorRank) == 0x000010, "Wrong size on RGProjectileMutatorScript_GetMutatorRank");
static_assert(offsetof(RGProjectileMutatorScript_GetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RGProjectileMutatorScript_GetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RGProjectileMutatorScript_GetMutatorRank, ReturnValue) == 0x000008, "Member 'RGProjectileMutatorScript_GetMutatorRank::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct RGProjectileMutatorScript_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileMutatorScript_GetDescription) == 0x000008, "Wrong alignment on RGProjectileMutatorScript_GetDescription");
static_assert(sizeof(RGProjectileMutatorScript_GetDescription) == 0x000010, "Wrong size on RGProjectileMutatorScript_GetDescription");
static_assert(offsetof(RGProjectileMutatorScript_GetDescription, ReturnValue) == 0x000000, "Member 'RGProjectileMutatorScript_GetDescription::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.GetOwningProjectile
// 0x0008 (0x0008 - 0x0000)
struct RGProjectileMutatorScript_GetOwningProjectile final
{
public:
	class ARProjectileBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileMutatorScript_GetOwningProjectile) == 0x000008, "Wrong alignment on RGProjectileMutatorScript_GetOwningProjectile");
static_assert(sizeof(RGProjectileMutatorScript_GetOwningProjectile) == 0x000008, "Wrong size on RGProjectileMutatorScript_GetOwningProjectile");
static_assert(offsetof(RGProjectileMutatorScript_GetOwningProjectile, ReturnValue) == 0x000000, "Member 'RGProjectileMutatorScript_GetOwningProjectile::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.GetProjectileScript
// 0x0008 (0x0008 - 0x0000)
struct RGProjectileMutatorScript_GetProjectileScript final
{
public:
	class URProjectileBaseScript*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGProjectileMutatorScript_GetProjectileScript) == 0x000008, "Wrong alignment on RGProjectileMutatorScript_GetProjectileScript");
static_assert(sizeof(RGProjectileMutatorScript_GetProjectileScript) == 0x000008, "Wrong size on RGProjectileMutatorScript_GetProjectileScript");
static_assert(offsetof(RGProjectileMutatorScript_GetProjectileScript, ReturnValue) == 0x000000, "Member 'RGProjectileMutatorScript_GetProjectileScript::ReturnValue' has a wrong offset!");

// Function RGame.RGProjectileMutatorScript.RollProcChance
// 0x0008 (0x0008 - 0x0000)
struct RGProjectileMutatorScript_RollProcChance final
{
public:
	int32                                         Chance;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGProjectileMutatorScript_RollProcChance) == 0x000004, "Wrong alignment on RGProjectileMutatorScript_RollProcChance");
static_assert(sizeof(RGProjectileMutatorScript_RollProcChance) == 0x000008, "Wrong size on RGProjectileMutatorScript_RollProcChance");
static_assert(offsetof(RGProjectileMutatorScript_RollProcChance, Chance) == 0x000000, "Member 'RGProjectileMutatorScript_RollProcChance::Chance' has a wrong offset!");
static_assert(offsetof(RGProjectileMutatorScript_RollProcChance, ReturnValue) == 0x000004, "Member 'RGProjectileMutatorScript_RollProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGrenade.FetchHitResults
// 0x0010 (0x0010 - 0x0000)
struct RGrenade_FetchHitResults final
{
public:
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGrenade_FetchHitResults) == 0x000008, "Wrong alignment on RGrenade_FetchHitResults");
static_assert(sizeof(RGrenade_FetchHitResults) == 0x000010, "Wrong size on RGrenade_FetchHitResults");
static_assert(offsetof(RGrenade_FetchHitResults, ReturnValue) == 0x000000, "Member 'RGrenade_FetchHitResults::ReturnValue' has a wrong offset!");

// Function RGame.RGrenade.ResetDetonateTimer
// 0x0004 (0x0004 - 0x0000)
struct RGrenade_ResetDetonateTimer final
{
public:
	float                                         NewTimeToDetonate;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGrenade_ResetDetonateTimer) == 0x000004, "Wrong alignment on RGrenade_ResetDetonateTimer");
static_assert(sizeof(RGrenade_ResetDetonateTimer) == 0x000004, "Wrong size on RGrenade_ResetDetonateTimer");
static_assert(offsetof(RGrenade_ResetDetonateTimer, NewTimeToDetonate) == 0x000000, "Member 'RGrenade_ResetDetonateTimer::NewTimeToDetonate' has a wrong offset!");

// Function RGame.RGrenade.SetBaseAreaOfEffectSize
// 0x0004 (0x0004 - 0x0000)
struct RGrenade_SetBaseAreaOfEffectSize final
{
public:
	float                                         newBaseAreaOfEffectRadius;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGrenade_SetBaseAreaOfEffectSize) == 0x000004, "Wrong alignment on RGrenade_SetBaseAreaOfEffectSize");
static_assert(sizeof(RGrenade_SetBaseAreaOfEffectSize) == 0x000004, "Wrong size on RGrenade_SetBaseAreaOfEffectSize");
static_assert(offsetof(RGrenade_SetBaseAreaOfEffectSize, newBaseAreaOfEffectRadius) == 0x000000, "Member 'RGrenade_SetBaseAreaOfEffectSize::newBaseAreaOfEffectRadius' has a wrong offset!");

// Function RGame.RGScriptComponent.AddOrExecuteScriptFunction
// 0x0030 (0x0030 - 0x0000)
struct RGScriptComponent_AddOrExecuteScriptFunction final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URGScript>                  ScriptClass;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_AddOrExecuteScriptFunction) == 0x000008, "Wrong alignment on RGScriptComponent_AddOrExecuteScriptFunction");
static_assert(sizeof(RGScriptComponent_AddOrExecuteScriptFunction) == 0x000030, "Wrong size on RGScriptComponent_AddOrExecuteScriptFunction");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, OwningComponent) == 0x000000, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, Category) == 0x000008, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, FunctionName) == 0x000010, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, ScriptClass) == 0x000018, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::ScriptClass' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, Priority) == 0x000020, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::Priority' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddOrExecuteScriptFunction, ReturnValue) == 0x000028, "Member 'RGScriptComponent_AddOrExecuteScriptFunction::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.AddScript
// 0x0030 (0x0030 - 0x0000)
struct RGScriptComponent_AddScript final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URGScript>                  ScriptClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRep;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              InstigatorScript;                                  // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScript*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_AddScript) == 0x000008, "Wrong alignment on RGScriptComponent_AddScript");
static_assert(sizeof(RGScriptComponent_AddScript) == 0x000030, "Wrong size on RGScriptComponent_AddScript");
static_assert(offsetof(RGScriptComponent_AddScript, OwningComponent) == 0x000000, "Member 'RGScriptComponent_AddScript::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, Category) == 0x000008, "Member 'RGScriptComponent_AddScript::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, ScriptClass) == 0x000010, "Member 'RGScriptComponent_AddScript::ScriptClass' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, Priority) == 0x000018, "Member 'RGScriptComponent_AddScript::Priority' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, bNoRep) == 0x00001C, "Member 'RGScriptComponent_AddScript::bNoRep' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, InstigatorScript) == 0x000020, "Member 'RGScriptComponent_AddScript::InstigatorScript' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScript, ReturnValue) == 0x000028, "Member 'RGScriptComponent_AddScript::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.AddScriptNoActivate
// 0x0028 (0x0028 - 0x0000)
struct RGScriptComponent_AddScriptNoActivate final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URGScript>                  ScriptClass;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRep;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_AddScriptNoActivate) == 0x000008, "Wrong alignment on RGScriptComponent_AddScriptNoActivate");
static_assert(sizeof(RGScriptComponent_AddScriptNoActivate) == 0x000028, "Wrong size on RGScriptComponent_AddScriptNoActivate");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, OwningComponent) == 0x000000, "Member 'RGScriptComponent_AddScriptNoActivate::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, Category) == 0x000008, "Member 'RGScriptComponent_AddScriptNoActivate::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, ScriptClass) == 0x000010, "Member 'RGScriptComponent_AddScriptNoActivate::ScriptClass' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, Priority) == 0x000018, "Member 'RGScriptComponent_AddScriptNoActivate::Priority' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, bNoRep) == 0x00001C, "Member 'RGScriptComponent_AddScriptNoActivate::bNoRep' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_AddScriptNoActivate, ReturnValue) == 0x000020, "Member 'RGScriptComponent_AddScriptNoActivate::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.BindOnFinishScriptExecutionByCategory
// 0x0028 (0x0028 - 0x0000)
struct RGScriptComponent_BindOnFinishScriptExecutionByCategory final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Function;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FName& Category, const class FName& Function)> Event;                 // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_BindOnFinishScriptExecutionByCategory) == 0x000008, "Wrong alignment on RGScriptComponent_BindOnFinishScriptExecutionByCategory");
static_assert(sizeof(RGScriptComponent_BindOnFinishScriptExecutionByCategory) == 0x000028, "Wrong size on RGScriptComponent_BindOnFinishScriptExecutionByCategory");
static_assert(offsetof(RGScriptComponent_BindOnFinishScriptExecutionByCategory, OwningComponent) == 0x000000, "Member 'RGScriptComponent_BindOnFinishScriptExecutionByCategory::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_BindOnFinishScriptExecutionByCategory, Category) == 0x000008, "Member 'RGScriptComponent_BindOnFinishScriptExecutionByCategory::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_BindOnFinishScriptExecutionByCategory, Function) == 0x000010, "Member 'RGScriptComponent_BindOnFinishScriptExecutionByCategory::Function' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_BindOnFinishScriptExecutionByCategory, Event) == 0x000018, "Member 'RGScriptComponent_BindOnFinishScriptExecutionByCategory::Event' has a wrong offset!");

// Function RGame.RGScriptComponent.ClearScripts
// 0x0010 (0x0010 - 0x0000)
struct RGScriptComponent_ClearScripts final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_ClearScripts) == 0x000008, "Wrong alignment on RGScriptComponent_ClearScripts");
static_assert(sizeof(RGScriptComponent_ClearScripts) == 0x000010, "Wrong size on RGScriptComponent_ClearScripts");
static_assert(offsetof(RGScriptComponent_ClearScripts, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ClearScripts::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ClearScripts, Category) == 0x000008, "Member 'RGScriptComponent_ClearScripts::Category' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunction
// 0x0018 (0x0018 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunction final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunction) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunction");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunction) == 0x000018, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunction");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunction, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunction::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunction, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunction::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunction, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunction, Replication) == 0x000011, "Member 'RGScriptComponent_ExecuteGenericScriptFunction::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionForAllCategories
// 0x0010 (0x0010 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories) == 0x000010, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories, FunctionName) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories, Replication) == 0x000009, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionForAllCategories::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionWithActorRef
// 0x0028 (0x0028 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef) == 0x000028, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef, Actor) == 0x000018, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef::Actor' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef, Replication) == 0x000020, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithActorRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionWithDamageEventRef
// 0x00E0 (0x00E0 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0018(0x00C0)(Parm, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef) == 0x0000E0, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef, DamageCombatEvent) == 0x000018, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef::DamageCombatEvent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef, Replication) == 0x0000D8, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithDamageEventRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionWithGScriptRef
// 0x0028 (0x0028 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              GScript;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef) == 0x000028, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef, GScript) == 0x000018, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef::GScript' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef, Replication) == 0x000020, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithGScriptRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionWithInt
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionWithInt final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionWithInt");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt) == 0x000020, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionWithInt");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithInt::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithInt::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithInt::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt, Value) == 0x000014, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithInt::Value' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithInt, Replication) == 0x000018, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithInt::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.ExecuteGenericScriptFunctionWithVector
// 0x0038 (0x0038 - 0x0000)
struct RGScriptComponent_ExecuteGenericScriptFunctionWithVector final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector) == 0x000008, "Wrong alignment on RGScriptComponent_ExecuteGenericScriptFunctionWithVector");
static_assert(sizeof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector) == 0x000038, "Wrong size on RGScriptComponent_ExecuteGenericScriptFunctionWithVector");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector, OwningComponent) == 0x000000, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithVector::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector, Category) == 0x000008, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithVector::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector, FunctionName) == 0x000010, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithVector::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector, Value) == 0x000018, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithVector::Value' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_ExecuteGenericScriptFunctionWithVector, Replication) == 0x000030, "Member 'RGScriptComponent_ExecuteGenericScriptFunctionWithVector::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.GetAllAilmentScripts
// 0x0018 (0x0018 - 0x0000)
struct RGScriptComponent_GetAllAilmentScripts final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URStatusEffectAilmentGScript*>   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetAllAilmentScripts) == 0x000008, "Wrong alignment on RGScriptComponent_GetAllAilmentScripts");
static_assert(sizeof(RGScriptComponent_GetAllAilmentScripts) == 0x000018, "Wrong size on RGScriptComponent_GetAllAilmentScripts");
static_assert(offsetof(RGScriptComponent_GetAllAilmentScripts, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetAllAilmentScripts::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllAilmentScripts, ReturnValue) == 0x000008, "Member 'RGScriptComponent_GetAllAilmentScripts::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetAllEnemyAttackScripts
// 0x0018 (0x0018 - 0x0000)
struct RGScriptComponent_GetAllEnemyAttackScripts final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URGEnemyAttackScript*>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetAllEnemyAttackScripts) == 0x000008, "Wrong alignment on RGScriptComponent_GetAllEnemyAttackScripts");
static_assert(sizeof(RGScriptComponent_GetAllEnemyAttackScripts) == 0x000018, "Wrong size on RGScriptComponent_GetAllEnemyAttackScripts");
static_assert(offsetof(RGScriptComponent_GetAllEnemyAttackScripts, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetAllEnemyAttackScripts::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllEnemyAttackScripts, ReturnValue) == 0x000008, "Member 'RGScriptComponent_GetAllEnemyAttackScripts::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetAllScriptChildrenOfType
// 0x0040 (0x0040 - 0x0000)
struct RGScriptComponent_GetAllScriptChildrenOfType final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   parentType;                                        // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URGScript*>                      ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetAllScriptChildrenOfType) == 0x000008, "Wrong alignment on RGScriptComponent_GetAllScriptChildrenOfType");
static_assert(sizeof(RGScriptComponent_GetAllScriptChildrenOfType) == 0x000040, "Wrong size on RGScriptComponent_GetAllScriptChildrenOfType");
static_assert(offsetof(RGScriptComponent_GetAllScriptChildrenOfType, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetAllScriptChildrenOfType::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllScriptChildrenOfType, parentType) == 0x000008, "Member 'RGScriptComponent_GetAllScriptChildrenOfType::parentType' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllScriptChildrenOfType, ReturnValue) == 0x000030, "Member 'RGScriptComponent_GetAllScriptChildrenOfType::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetAllScriptsOfType
// 0x0040 (0x0040 - 0x0000)
struct RGScriptComponent_GetAllScriptsOfType final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   scriptType;                                        // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URGScript*>                      ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetAllScriptsOfType) == 0x000008, "Wrong alignment on RGScriptComponent_GetAllScriptsOfType");
static_assert(sizeof(RGScriptComponent_GetAllScriptsOfType) == 0x000040, "Wrong size on RGScriptComponent_GetAllScriptsOfType");
static_assert(offsetof(RGScriptComponent_GetAllScriptsOfType, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetAllScriptsOfType::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllScriptsOfType, scriptType) == 0x000008, "Member 'RGScriptComponent_GetAllScriptsOfType::scriptType' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllScriptsOfType, ReturnValue) == 0x000030, "Member 'RGScriptComponent_GetAllScriptsOfType::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetAllStatusEffectScripts
// 0x0018 (0x0018 - 0x0000)
struct RGScriptComponent_GetAllStatusEffectScripts final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URStatusEffectGScript*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetAllStatusEffectScripts) == 0x000008, "Wrong alignment on RGScriptComponent_GetAllStatusEffectScripts");
static_assert(sizeof(RGScriptComponent_GetAllStatusEffectScripts) == 0x000018, "Wrong size on RGScriptComponent_GetAllStatusEffectScripts");
static_assert(offsetof(RGScriptComponent_GetAllStatusEffectScripts, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetAllStatusEffectScripts::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetAllStatusEffectScripts, ReturnValue) == 0x000008, "Member 'RGScriptComponent_GetAllStatusEffectScripts::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetFirstScriptOfType
// 0x0038 (0x0038 - 0x0000)
struct RGScriptComponent_GetFirstScriptOfType final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   scriptType;                                        // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScript*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetFirstScriptOfType) == 0x000008, "Wrong alignment on RGScriptComponent_GetFirstScriptOfType");
static_assert(sizeof(RGScriptComponent_GetFirstScriptOfType) == 0x000038, "Wrong size on RGScriptComponent_GetFirstScriptOfType");
static_assert(offsetof(RGScriptComponent_GetFirstScriptOfType, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetFirstScriptOfType::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetFirstScriptOfType, scriptType) == 0x000008, "Member 'RGScriptComponent_GetFirstScriptOfType::scriptType' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetFirstScriptOfType, ReturnValue) == 0x000030, "Member 'RGScriptComponent_GetFirstScriptOfType::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetGScriptContext
// 0x0040 (0x0040 - 0x0000)
struct RGScriptComponent_GetGScriptContext final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGScriptActorInfo                      ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetGScriptContext) == 0x000008, "Wrong alignment on RGScriptComponent_GetGScriptContext");
static_assert(sizeof(RGScriptComponent_GetGScriptContext) == 0x000040, "Wrong size on RGScriptComponent_GetGScriptContext");
static_assert(offsetof(RGScriptComponent_GetGScriptContext, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetGScriptContext::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetGScriptContext, Category) == 0x000008, "Member 'RGScriptComponent_GetGScriptContext::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetGScriptContext, ReturnValue) == 0x000010, "Member 'RGScriptComponent_GetGScriptContext::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetRGScriptComponent
// 0x0010 (0x0010 - 0x0000)
struct RGScriptComponent_GetRGScriptComponent final
{
public:
	class APlayerController*                      OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetRGScriptComponent) == 0x000008, "Wrong alignment on RGScriptComponent_GetRGScriptComponent");
static_assert(sizeof(RGScriptComponent_GetRGScriptComponent) == 0x000010, "Wrong size on RGScriptComponent_GetRGScriptComponent");
static_assert(offsetof(RGScriptComponent_GetRGScriptComponent, OwningPlayer) == 0x000000, "Member 'RGScriptComponent_GetRGScriptComponent::OwningPlayer' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetRGScriptComponent, ReturnValue) == 0x000008, "Member 'RGScriptComponent_GetRGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.GetScriptInCategory
// 0x0040 (0x0040 - 0x0000)
struct RGScriptComponent_GetScriptInCategory final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   scriptType;                                        // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScript*                              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetScriptInCategory) == 0x000008, "Wrong alignment on RGScriptComponent_GetScriptInCategory");
static_assert(sizeof(RGScriptComponent_GetScriptInCategory) == 0x000040, "Wrong size on RGScriptComponent_GetScriptInCategory");
static_assert(offsetof(RGScriptComponent_GetScriptInCategory, OwningComponent) == 0x000000, "Member 'RGScriptComponent_GetScriptInCategory::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetScriptInCategory, Category) == 0x000008, "Member 'RGScriptComponent_GetScriptInCategory::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetScriptInCategory, scriptType) == 0x000010, "Member 'RGScriptComponent_GetScriptInCategory::scriptType' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_GetScriptInCategory, ReturnValue) == 0x000038, "Member 'RGScriptComponent_GetScriptInCategory::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.K2_ExecuteGenericScriptFunctionWithParams
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Params_0;                                          // 0x0014(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllCategories;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams) == 0x000008, "Wrong alignment on RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams");
static_assert(sizeof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams) == 0x000020, "Wrong size on RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, OwningComponent) == 0x000000, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, Category) == 0x000008, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, FunctionName) == 0x000010, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, Params_0) == 0x000014, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::Params_0' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, Replication) == 0x000018, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::Replication' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams, bAllCategories) == 0x000019, "Member 'RGScriptComponent_K2_ExecuteGenericScriptFunctionWithParams::bAllCategories' has a wrong offset!");

// Function RGame.RGScriptComponent.RemoveScript
// 0x0018 (0x0018 - 0x0000)
struct RGScriptComponent_RemoveScript final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScript*                              Script;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_RemoveScript) == 0x000008, "Wrong alignment on RGScriptComponent_RemoveScript");
static_assert(sizeof(RGScriptComponent_RemoveScript) == 0x000018, "Wrong size on RGScriptComponent_RemoveScript");
static_assert(offsetof(RGScriptComponent_RemoveScript, OwningComponent) == 0x000000, "Member 'RGScriptComponent_RemoveScript::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_RemoveScript, Category) == 0x000008, "Member 'RGScriptComponent_RemoveScript::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_RemoveScript, Script) == 0x000010, "Member 'RGScriptComponent_RemoveScript::Script' has a wrong offset!");

// Function RGame.RGScriptComponent.RemoveScriptContext
// 0x0010 (0x0010 - 0x0000)
struct RGScriptComponent_RemoveScriptContext final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_RemoveScriptContext) == 0x000008, "Wrong alignment on RGScriptComponent_RemoveScriptContext");
static_assert(sizeof(RGScriptComponent_RemoveScriptContext) == 0x000010, "Wrong size on RGScriptComponent_RemoveScriptContext");
static_assert(offsetof(RGScriptComponent_RemoveScriptContext, OwningComponent) == 0x000000, "Member 'RGScriptComponent_RemoveScriptContext::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_RemoveScriptContext, Category) == 0x000008, "Member 'RGScriptComponent_RemoveScriptContext::Category' has a wrong offset!");

// Function RGame.RGScriptComponent.SetGScriptContext
// 0x0068 (0x0068 - 0x0000)
struct RGScriptComponent_SetGScriptContext final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AvatarActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGScriptComponent*                     InstigatorScriptComponent;                         // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRep;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGScriptActorInfo                      ReturnValue;                                       // 0x0038(0x0030)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_SetGScriptContext) == 0x000008, "Wrong alignment on RGScriptComponent_SetGScriptContext");
static_assert(sizeof(RGScriptComponent_SetGScriptContext) == 0x000068, "Wrong size on RGScriptComponent_SetGScriptContext");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, OwningComponent) == 0x000000, "Member 'RGScriptComponent_SetGScriptContext::OwningComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, Category) == 0x000008, "Member 'RGScriptComponent_SetGScriptContext::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, Owner) == 0x000010, "Member 'RGScriptComponent_SetGScriptContext::Owner' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, AvatarActor) == 0x000018, "Member 'RGScriptComponent_SetGScriptContext::AvatarActor' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, Controller) == 0x000020, "Member 'RGScriptComponent_SetGScriptContext::Controller' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, InstigatorScriptComponent) == 0x000028, "Member 'RGScriptComponent_SetGScriptContext::InstigatorScriptComponent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, bNoRep) == 0x000030, "Member 'RGScriptComponent_SetGScriptContext::bNoRep' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_SetGScriptContext, ReturnValue) == 0x000038, "Member 'RGScriptComponent_SetGScriptContext::ReturnValue' has a wrong offset!");

// Function RGame.RGScriptComponent.CacheHitResult
// 0x0100 (0x0100 - 0x0000)
struct RGScriptComponent_CacheHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_CacheHitResult) == 0x000008, "Wrong alignment on RGScriptComponent_CacheHitResult");
static_assert(sizeof(RGScriptComponent_CacheHitResult) == 0x000100, "Wrong size on RGScriptComponent_CacheHitResult");
static_assert(offsetof(RGScriptComponent_CacheHitResult, Hit) == 0x000000, "Member 'RGScriptComponent_CacheHitResult::Hit' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunction
// 0x0028 (0x0028 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunction final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRGscriptFunctionParams                Params_0;                                          // 0x0010(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunction) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunction");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunction) == 0x000028, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunction");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunction, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunction::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunction, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunction, Replication) == 0x000009, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunction::Replication' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunction, Params_0) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunction::Params_0' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionForAllCategories
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories final
{
public:
	ERGScriptFunction                             FunctionName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRGscriptFunctionParams                Params_0;                                          // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories) == 0x000020, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories, FunctionName) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories, Replication) == 0x000001, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories::Replication' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories, Params_0) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionForAllCategories::Params_0' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionWithActorRef
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef) == 0x000020, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef, Actor) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef::Actor' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef, Replication) == 0x000018, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithActorRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionWithDamageEventRef
// 0x00D8 (0x00D8 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0010(0x00C0)(Parm, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef) == 0x0000D8, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef, DamageCombatEvent) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef::DamageCombatEvent' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef, Replication) == 0x0000D0, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithDamageEventRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionWithGScriptRef
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              GScript;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef) == 0x000020, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef, GScript) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef::GScript' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef, Replication) == 0x000018, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithGScriptRef::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionWithInt
// 0x0014 (0x0014 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt) == 0x000004, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt) == 0x000014, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt, Value) == 0x00000C, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt::Value' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt, Replication) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithInt::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.MulticastExecuteGenericScriptFunctionWithVector
// 0x0030 (0x0030 - 0x0000)
struct RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERGScriptFunction                             FunctionName;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector) == 0x000008, "Wrong alignment on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector");
static_assert(sizeof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector) == 0x000030, "Wrong size on RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector, Category) == 0x000000, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector, FunctionName) == 0x000008, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector::FunctionName' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector, Value) == 0x000010, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector::Value' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector, Replication) == 0x000028, "Member 'RGScriptComponent_MulticastExecuteGenericScriptFunctionWithVector::Replication' has a wrong offset!");

// Function RGame.RGScriptComponent.OnRep_ScriptContainers
// 0x0010 (0x0010 - 0x0000)
struct RGScriptComponent_OnRep_ScriptContainers final
{
public:
	TArray<struct FGScriptContainer>              PreviousValue;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_OnRep_ScriptContainers) == 0x000008, "Wrong alignment on RGScriptComponent_OnRep_ScriptContainers");
static_assert(sizeof(RGScriptComponent_OnRep_ScriptContainers) == 0x000010, "Wrong size on RGScriptComponent_OnRep_ScriptContainers");
static_assert(offsetof(RGScriptComponent_OnRep_ScriptContainers, PreviousValue) == 0x000000, "Member 'RGScriptComponent_OnRep_ScriptContainers::PreviousValue' has a wrong offset!");

// Function RGame.RGScriptComponent.OnScriptFinishedExecution
// 0x0020 (0x0020 - 0x0000)
struct RGScriptComponent_OnScriptFinishedExecution final
{
public:
	class URGScript*                              Script;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExecutionParam;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         consumePriority;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGScriptComponent_OnScriptFinishedExecution) == 0x000008, "Wrong alignment on RGScriptComponent_OnScriptFinishedExecution");
static_assert(sizeof(RGScriptComponent_OnScriptFinishedExecution) == 0x000020, "Wrong size on RGScriptComponent_OnScriptFinishedExecution");
static_assert(offsetof(RGScriptComponent_OnScriptFinishedExecution, Script) == 0x000000, "Member 'RGScriptComponent_OnScriptFinishedExecution::Script' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_OnScriptFinishedExecution, Category) == 0x000008, "Member 'RGScriptComponent_OnScriptFinishedExecution::Category' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_OnScriptFinishedExecution, ExecutionParam) == 0x000010, "Member 'RGScriptComponent_OnScriptFinishedExecution::ExecutionParam' has a wrong offset!");
static_assert(offsetof(RGScriptComponent_OnScriptFinishedExecution, consumePriority) == 0x000018, "Member 'RGScriptComponent_OnScriptFinishedExecution::consumePriority' has a wrong offset!");

// Function RGame.RGScriptComponent.OverridePreHitDamageData
// 0x0258 (0x0258 - 0x0000)
struct RGScriptComponent_OverridePreHitDamageData final
{
public:
	struct FPreHitDamageData                      NewPreHitDamageData;                               // 0x0000(0x0258)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_OverridePreHitDamageData) == 0x000008, "Wrong alignment on RGScriptComponent_OverridePreHitDamageData");
static_assert(sizeof(RGScriptComponent_OverridePreHitDamageData) == 0x000258, "Wrong size on RGScriptComponent_OverridePreHitDamageData");
static_assert(offsetof(RGScriptComponent_OverridePreHitDamageData, NewPreHitDamageData) == 0x000000, "Member 'RGScriptComponent_OverridePreHitDamageData::NewPreHitDamageData' has a wrong offset!");

// Function RGame.RGScriptComponent.GetCachedHitResult
// 0x0100 (0x0100 - 0x0000)
struct RGScriptComponent_GetCachedHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGScriptComponent_GetCachedHitResult) == 0x000008, "Wrong alignment on RGScriptComponent_GetCachedHitResult");
static_assert(sizeof(RGScriptComponent_GetCachedHitResult) == 0x000100, "Wrong size on RGScriptComponent_GetCachedHitResult");
static_assert(offsetof(RGScriptComponent_GetCachedHitResult, ReturnValue) == 0x000000, "Member 'RGScriptComponent_GetCachedHitResult::ReturnValue' has a wrong offset!");

// Function RGame.RGSlowStatusEffect.AddEntry
// 0x000C (0x000C - 0x0000)
struct RGSlowStatusEffect_AddEntry final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGSlowStatusEffect_AddEntry) == 0x000004, "Wrong alignment on RGSlowStatusEffect_AddEntry");
static_assert(sizeof(RGSlowStatusEffect_AddEntry) == 0x00000C, "Wrong size on RGSlowStatusEffect_AddEntry");
static_assert(offsetof(RGSlowStatusEffect_AddEntry, Key) == 0x000000, "Member 'RGSlowStatusEffect_AddEntry::Key' has a wrong offset!");
static_assert(offsetof(RGSlowStatusEffect_AddEntry, Duration) == 0x000008, "Member 'RGSlowStatusEffect_AddEntry::Duration' has a wrong offset!");

// Function RGame.RGSlowStatusEffect.K2_OnAddEntry
// 0x000C (0x000C - 0x0000)
struct RGSlowStatusEffect_K2_OnAddEntry final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGSlowStatusEffect_K2_OnAddEntry) == 0x000004, "Wrong alignment on RGSlowStatusEffect_K2_OnAddEntry");
static_assert(sizeof(RGSlowStatusEffect_K2_OnAddEntry) == 0x00000C, "Wrong size on RGSlowStatusEffect_K2_OnAddEntry");
static_assert(offsetof(RGSlowStatusEffect_K2_OnAddEntry, Key) == 0x000000, "Member 'RGSlowStatusEffect_K2_OnAddEntry::Key' has a wrong offset!");
static_assert(offsetof(RGSlowStatusEffect_K2_OnAddEntry, Duration) == 0x000008, "Member 'RGSlowStatusEffect_K2_OnAddEntry::Duration' has a wrong offset!");

// Function RGame.RGSlowStatusEffect.K2_OnRemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct RGSlowStatusEffect_K2_OnRemoveEntry final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGSlowStatusEffect_K2_OnRemoveEntry) == 0x000004, "Wrong alignment on RGSlowStatusEffect_K2_OnRemoveEntry");
static_assert(sizeof(RGSlowStatusEffect_K2_OnRemoveEntry) == 0x000008, "Wrong size on RGSlowStatusEffect_K2_OnRemoveEntry");
static_assert(offsetof(RGSlowStatusEffect_K2_OnRemoveEntry, Key) == 0x000000, "Member 'RGSlowStatusEffect_K2_OnRemoveEntry::Key' has a wrong offset!");

// Function RGame.RGSlowStatusEffect.RemoveEntry
// 0x000C (0x000C - 0x0000)
struct RGSlowStatusEffect_RemoveEntry final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefreshEntriesWithDuration;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGSlowStatusEffect_RemoveEntry) == 0x000004, "Wrong alignment on RGSlowStatusEffect_RemoveEntry");
static_assert(sizeof(RGSlowStatusEffect_RemoveEntry) == 0x00000C, "Wrong size on RGSlowStatusEffect_RemoveEntry");
static_assert(offsetof(RGSlowStatusEffect_RemoveEntry, Key) == 0x000000, "Member 'RGSlowStatusEffect_RemoveEntry::Key' has a wrong offset!");
static_assert(offsetof(RGSlowStatusEffect_RemoveEntry, bRefreshEntriesWithDuration) == 0x000008, "Member 'RGSlowStatusEffect_RemoveEntry::bRefreshEntriesWithDuration' has a wrong offset!");

// Function RGame.RGTask_AddRecoil.AddRecoil
// 0x0020 (0x0020 - 0x0000)
struct RGTask_AddRecoil_AddRecoil final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RecoilAnimOverride;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownOverride;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_AddRecoil*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_AddRecoil_AddRecoil) == 0x000008, "Wrong alignment on RGTask_AddRecoil_AddRecoil");
static_assert(sizeof(RGTask_AddRecoil_AddRecoil) == 0x000020, "Wrong size on RGTask_AddRecoil_AddRecoil");
static_assert(offsetof(RGTask_AddRecoil_AddRecoil, OwningScript) == 0x000000, "Member 'RGTask_AddRecoil_AddRecoil::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_AddRecoil_AddRecoil, RecoilAnimOverride) == 0x000008, "Member 'RGTask_AddRecoil_AddRecoil::RecoilAnimOverride' has a wrong offset!");
static_assert(offsetof(RGTask_AddRecoil_AddRecoil, CooldownOverride) == 0x000010, "Member 'RGTask_AddRecoil_AddRecoil::CooldownOverride' has a wrong offset!");
static_assert(offsetof(RGTask_AddRecoil_AddRecoil, ReturnValue) == 0x000018, "Member 'RGTask_AddRecoil_AddRecoil::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_DelayedWhile.DelayedWhile
// 0x0028 (0x0028 - 0x0000)
struct RGTask_DelayedWhile_DelayedWhile final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenTicks_0;                                // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool* RetValue)>               Predicate;                                         // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_DelayedWhile*                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_DelayedWhile_DelayedWhile) == 0x000008, "Wrong alignment on RGTask_DelayedWhile_DelayedWhile");
static_assert(sizeof(RGTask_DelayedWhile_DelayedWhile) == 0x000028, "Wrong size on RGTask_DelayedWhile_DelayedWhile");
static_assert(offsetof(RGTask_DelayedWhile_DelayedWhile, OwningScript) == 0x000000, "Member 'RGTask_DelayedWhile_DelayedWhile::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_DelayedWhile_DelayedWhile, TimeBetweenTicks_0) == 0x000008, "Member 'RGTask_DelayedWhile_DelayedWhile::TimeBetweenTicks_0' has a wrong offset!");
static_assert(offsetof(RGTask_DelayedWhile_DelayedWhile, Predicate) == 0x00000C, "Member 'RGTask_DelayedWhile_DelayedWhile::Predicate' has a wrong offset!");
static_assert(offsetof(RGTask_DelayedWhile_DelayedWhile, ReturnValue) == 0x000020, "Member 'RGTask_DelayedWhile_DelayedWhile::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_PlayAnimation.CreatePlayMontageAndWaitProxy
// 0x0028 (0x0028 - 0x0000)
struct RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName_0;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate_0;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds_0;                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_PlayAnimation*                  ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy) == 0x000008, "Wrong alignment on RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy");
static_assert(sizeof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy) == 0x000028, "Wrong size on RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, OwningScript) == 0x000000, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, MontageToPlay_0) == 0x000008, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, SectionName_0) == 0x000010, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::SectionName_0' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, PlayRate_0) == 0x000018, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::PlayRate_0' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, bStopWhenAbilityEnds_0) == 0x00001C, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::bStopWhenAbilityEnds_0' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy, ReturnValue) == 0x000020, "Member 'RGTask_PlayAnimation_CreatePlayMontageAndWaitProxy::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_PlayAnimation.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RGTask_PlayAnimation_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGTask_PlayAnimation_OnMontageBlendingOut) == 0x000008, "Wrong alignment on RGTask_PlayAnimation_OnMontageBlendingOut");
static_assert(sizeof(RGTask_PlayAnimation_OnMontageBlendingOut) == 0x000010, "Wrong size on RGTask_PlayAnimation_OnMontageBlendingOut");
static_assert(offsetof(RGTask_PlayAnimation_OnMontageBlendingOut, Montage) == 0x000000, "Member 'RGTask_PlayAnimation_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'RGTask_PlayAnimation_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function RGame.RGTask_PlayAnimation.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct RGTask_PlayAnimation_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGTask_PlayAnimation_OnMontageEnded) == 0x000008, "Wrong alignment on RGTask_PlayAnimation_OnMontageEnded");
static_assert(sizeof(RGTask_PlayAnimation_OnMontageEnded) == 0x000010, "Wrong size on RGTask_PlayAnimation_OnMontageEnded");
static_assert(offsetof(RGTask_PlayAnimation_OnMontageEnded, Montage) == 0x000000, "Member 'RGTask_PlayAnimation_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(RGTask_PlayAnimation_OnMontageEnded, bInterrupted) == 0x000008, "Member 'RGTask_PlayAnimation_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function RGame.RGTask_PlayPlayerSound.PlayPlayerSound
// 0x0050 (0x0050 - 0x0000)
struct RGTask_PlayPlayerSound_PlayPlayerSound final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_PlayPlayerSound*                ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_PlayPlayerSound_PlayPlayerSound) == 0x000008, "Wrong alignment on RGTask_PlayPlayerSound_PlayPlayerSound");
static_assert(sizeof(RGTask_PlayPlayerSound_PlayPlayerSound) == 0x000050, "Wrong size on RGTask_PlayPlayerSound_PlayPlayerSound");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, OwningScript) == 0x000000, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, Sound) == 0x000008, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::Sound' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, Location) == 0x000010, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::Location' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, VolumeMultiplier) == 0x000028, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, PitchMultiplier) == 0x00002C, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, StartTime) == 0x000030, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::StartTime' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, AttenuationSettings) == 0x000038, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, ConcurrencySettings) == 0x000040, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(RGTask_PlayPlayerSound_PlayPlayerSound, ReturnValue) == 0x000048, "Member 'RGTask_PlayPlayerSound_PlayPlayerSound::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_PredicateCheck.PredicateCheck
// 0x0020 (0x0020 - 0x0000)
struct RGTask_PredicateCheck_PredicateCheck final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool* RetValue)>               Predicate;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_PredicateCheck*                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_PredicateCheck_PredicateCheck) == 0x000008, "Wrong alignment on RGTask_PredicateCheck_PredicateCheck");
static_assert(sizeof(RGTask_PredicateCheck_PredicateCheck) == 0x000020, "Wrong size on RGTask_PredicateCheck_PredicateCheck");
static_assert(offsetof(RGTask_PredicateCheck_PredicateCheck, OwningScript) == 0x000000, "Member 'RGTask_PredicateCheck_PredicateCheck::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_PredicateCheck_PredicateCheck, Predicate) == 0x000008, "Member 'RGTask_PredicateCheck_PredicateCheck::Predicate' has a wrong offset!");
static_assert(offsetof(RGTask_PredicateCheck_PredicateCheck, ReturnValue) == 0x000018, "Member 'RGTask_PredicateCheck_PredicateCheck::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_ReloadWeapon.ReloadWeapon
// 0x0010 (0x0010 - 0x0000)
struct RGTask_ReloadWeapon_ReloadWeapon final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_ReloadWeapon*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_ReloadWeapon_ReloadWeapon) == 0x000008, "Wrong alignment on RGTask_ReloadWeapon_ReloadWeapon");
static_assert(sizeof(RGTask_ReloadWeapon_ReloadWeapon) == 0x000010, "Wrong size on RGTask_ReloadWeapon_ReloadWeapon");
static_assert(offsetof(RGTask_ReloadWeapon_ReloadWeapon, OwningScript) == 0x000000, "Member 'RGTask_ReloadWeapon_ReloadWeapon::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_ReloadWeapon_ReloadWeapon, ReturnValue) == 0x000008, "Member 'RGTask_ReloadWeapon_ReloadWeapon::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_ScopeWeapon.ScopeWeapon
// 0x0018 (0x0018 - 0x0000)
struct RGTask_ScopeWeapon_ScopeWeapon final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScopeIn;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_ScopeWeapon*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_ScopeWeapon_ScopeWeapon) == 0x000008, "Wrong alignment on RGTask_ScopeWeapon_ScopeWeapon");
static_assert(sizeof(RGTask_ScopeWeapon_ScopeWeapon) == 0x000018, "Wrong size on RGTask_ScopeWeapon_ScopeWeapon");
static_assert(offsetof(RGTask_ScopeWeapon_ScopeWeapon, OwningScript) == 0x000000, "Member 'RGTask_ScopeWeapon_ScopeWeapon::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_ScopeWeapon_ScopeWeapon, bScopeIn) == 0x000008, "Member 'RGTask_ScopeWeapon_ScopeWeapon::bScopeIn' has a wrong offset!");
static_assert(offsetof(RGTask_ScopeWeapon_ScopeWeapon, ReturnValue) == 0x000010, "Member 'RGTask_ScopeWeapon_ScopeWeapon::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_SpawnAreaEffect.SpawnAreaEffect
// 0x0090 (0x0090 - 0x0000)
struct RGTask_SpawnAreaEffect_SpawnAreaEffect final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARAreaEffect>               InAreaEffectClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InSpawnTransform;                                  // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLifetime;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InOptionalOwningActor;                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  InOptionalInstigator;                              // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_SpawnAreaEffect*                ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_SpawnAreaEffect_SpawnAreaEffect) == 0x000010, "Wrong alignment on RGTask_SpawnAreaEffect_SpawnAreaEffect");
static_assert(sizeof(RGTask_SpawnAreaEffect_SpawnAreaEffect) == 0x000090, "Wrong size on RGTask_SpawnAreaEffect_SpawnAreaEffect");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, OwningScript) == 0x000000, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, InAreaEffectClass) == 0x000008, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::InAreaEffectClass' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, InSpawnTransform) == 0x000010, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::InSpawnTransform' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, InLifetime) == 0x000070, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::InLifetime' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, InOptionalOwningActor) == 0x000078, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::InOptionalOwningActor' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, InOptionalInstigator) == 0x000080, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::InOptionalInstigator' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnAreaEffect_SpawnAreaEffect, ReturnValue) == 0x000088, "Member 'RGTask_SpawnAreaEffect_SpawnAreaEffect::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_SpawnNonWeaponProjectile.SpawnNonWeaponProjectile
// 0x0090 (0x0090 - 0x0000)
struct RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARProjectileBase>           ProjectileClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ProjectileSpawnTransform;                          // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCriticalMultiplier;                            // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseEffectiveRange;                                // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_SpawnNonWeaponProjectile*       ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile) == 0x000010, "Wrong alignment on RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile");
static_assert(sizeof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile) == 0x000090, "Wrong size on RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, OwningScript) == 0x000000, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, ProjectileClass) == 0x000008, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, ProjectileSpawnTransform) == 0x000010, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::ProjectileSpawnTransform' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, BaseDamage) == 0x000070, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::BaseDamage' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, BaseCriticalMultiplier) == 0x000074, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::BaseCriticalMultiplier' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, BaseEffectiveRange) == 0x000078, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::BaseEffectiveRange' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile, ReturnValue) == 0x000080, "Member 'RGTask_SpawnNonWeaponProjectile_SpawnNonWeaponProjectile::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_SpawnProjectile.SpawnProjectile
// 0x0080 (0x0080 - 0x0000)
struct RGTask_SpawnProjectile_SpawnProjectile final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARProjectileBase>           ProjectileClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                projectileSpawnOffset;                             // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          OverrideSpawnDirection;                            // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnDirectionOverride;                            // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          useWeaponDamage;                                   // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URGWeaponModScript*                     WeaponScriptSpawner;                               // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegisterLastTimeFired;                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreSpread;                                      // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerPrimaryFireFX;                              // 0x0072(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_SpawnProjectile*                ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_SpawnProjectile_SpawnProjectile) == 0x000008, "Wrong alignment on RGTask_SpawnProjectile_SpawnProjectile");
static_assert(sizeof(RGTask_SpawnProjectile_SpawnProjectile) == 0x000080, "Wrong size on RGTask_SpawnProjectile_SpawnProjectile");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, OwningScript) == 0x000000, "Member 'RGTask_SpawnProjectile_SpawnProjectile::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, ProjectileClass) == 0x000008, "Member 'RGTask_SpawnProjectile_SpawnProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, projectileSpawnOffset) == 0x000010, "Member 'RGTask_SpawnProjectile_SpawnProjectile::projectileSpawnOffset' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, OffsetRotation) == 0x000028, "Member 'RGTask_SpawnProjectile_SpawnProjectile::OffsetRotation' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, OverrideSpawnDirection) == 0x000040, "Member 'RGTask_SpawnProjectile_SpawnProjectile::OverrideSpawnDirection' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, SpawnDirectionOverride) == 0x000048, "Member 'RGTask_SpawnProjectile_SpawnProjectile::SpawnDirectionOverride' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, useWeaponDamage) == 0x000060, "Member 'RGTask_SpawnProjectile_SpawnProjectile::useWeaponDamage' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, WeaponScriptSpawner) == 0x000068, "Member 'RGTask_SpawnProjectile_SpawnProjectile::WeaponScriptSpawner' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, RegisterLastTimeFired) == 0x000070, "Member 'RGTask_SpawnProjectile_SpawnProjectile::RegisterLastTimeFired' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, IgnoreSpread) == 0x000071, "Member 'RGTask_SpawnProjectile_SpawnProjectile::IgnoreSpread' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, TriggerPrimaryFireFX) == 0x000072, "Member 'RGTask_SpawnProjectile_SpawnProjectile::TriggerPrimaryFireFX' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectile_SpawnProjectile, ReturnValue) == 0x000078, "Member 'RGTask_SpawnProjectile_SpawnProjectile::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_SpawnProjectileHitEffects.SpawnProjectileHitEffect
// 0x0018 (0x0018 - 0x0000)
struct RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OverrideTag;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGTask_SpawnProjectileHitEffects*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect) == 0x000008, "Wrong alignment on RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect");
static_assert(sizeof(RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect) == 0x000018, "Wrong size on RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect");
static_assert(offsetof(RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect, OwningScript) == 0x000000, "Member 'RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect, OverrideTag) == 0x000008, "Member 'RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect::OverrideTag' has a wrong offset!");
static_assert(offsetof(RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect, ReturnValue) == 0x000010, "Member 'RGTask_SpawnProjectileHitEffects_SpawnProjectileHitEffect::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_TimeLoop.TimeLoop
// 0x0018 (0x0018 - 0x0000)
struct RGTask_TimeLoop_TimeLoop final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_TimeLoop*                       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_TimeLoop_TimeLoop) == 0x000008, "Wrong alignment on RGTask_TimeLoop_TimeLoop");
static_assert(sizeof(RGTask_TimeLoop_TimeLoop) == 0x000018, "Wrong size on RGTask_TimeLoop_TimeLoop");
static_assert(offsetof(RGTask_TimeLoop_TimeLoop, OwningScript) == 0x000000, "Member 'RGTask_TimeLoop_TimeLoop::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_TimeLoop_TimeLoop, Time) == 0x000008, "Member 'RGTask_TimeLoop_TimeLoop::Time' has a wrong offset!");
static_assert(offsetof(RGTask_TimeLoop_TimeLoop, ReturnValue) == 0x000010, "Member 'RGTask_TimeLoop_TimeLoop::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_TurnAndWait.TurnAndWait
// 0x0020 (0x0020 - 0x0000)
struct RGTask_TurnAndWait_TurnAndWait final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor_0;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningDuration;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_TurnAndWait*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_TurnAndWait_TurnAndWait) == 0x000008, "Wrong alignment on RGTask_TurnAndWait_TurnAndWait");
static_assert(sizeof(RGTask_TurnAndWait_TurnAndWait) == 0x000020, "Wrong size on RGTask_TurnAndWait_TurnAndWait");
static_assert(offsetof(RGTask_TurnAndWait_TurnAndWait, OwningScript) == 0x000000, "Member 'RGTask_TurnAndWait_TurnAndWait::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_TurnAndWait_TurnAndWait, TargetActor_0) == 0x000008, "Member 'RGTask_TurnAndWait_TurnAndWait::TargetActor_0' has a wrong offset!");
static_assert(offsetof(RGTask_TurnAndWait_TurnAndWait, TurningDuration) == 0x000010, "Member 'RGTask_TurnAndWait_TurnAndWait::TurningDuration' has a wrong offset!");
static_assert(offsetof(RGTask_TurnAndWait_TurnAndWait, ReturnValue) == 0x000018, "Member 'RGTask_TurnAndWait_TurnAndWait::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_UpdateAmmoInClip.UpdateAmmoInClip
// 0x0018 (0x0018 - 0x0000)
struct RGTask_UpdateAmmoInClip_UpdateAmmoInClip final
{
public:
	class URGScript*                              OptionalOwningScript;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_UpdateAmmoInClip*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_UpdateAmmoInClip_UpdateAmmoInClip) == 0x000008, "Wrong alignment on RGTask_UpdateAmmoInClip_UpdateAmmoInClip");
static_assert(sizeof(RGTask_UpdateAmmoInClip_UpdateAmmoInClip) == 0x000018, "Wrong size on RGTask_UpdateAmmoInClip_UpdateAmmoInClip");
static_assert(offsetof(RGTask_UpdateAmmoInClip_UpdateAmmoInClip, OptionalOwningScript) == 0x000000, "Member 'RGTask_UpdateAmmoInClip_UpdateAmmoInClip::OptionalOwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_UpdateAmmoInClip_UpdateAmmoInClip, Delta) == 0x000008, "Member 'RGTask_UpdateAmmoInClip_UpdateAmmoInClip::Delta' has a wrong offset!");
static_assert(offsetof(RGTask_UpdateAmmoInClip_UpdateAmmoInClip, ReturnValue) == 0x000010, "Member 'RGTask_UpdateAmmoInClip_UpdateAmmoInClip::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_WaitDelay.WaitDelay
// 0x0018 (0x0018 - 0x0000)
struct RGTask_WaitDelay_WaitDelay final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGTask_WaitDelay*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGTask_WaitDelay_WaitDelay) == 0x000008, "Wrong alignment on RGTask_WaitDelay_WaitDelay");
static_assert(sizeof(RGTask_WaitDelay_WaitDelay) == 0x000018, "Wrong size on RGTask_WaitDelay_WaitDelay");
static_assert(offsetof(RGTask_WaitDelay_WaitDelay, OwningScript) == 0x000000, "Member 'RGTask_WaitDelay_WaitDelay::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_WaitDelay_WaitDelay, Time) == 0x000008, "Member 'RGTask_WaitDelay_WaitDelay::Time' has a wrong offset!");
static_assert(offsetof(RGTask_WaitDelay_WaitDelay, ReturnValue) == 0x000010, "Member 'RGTask_WaitDelay_WaitDelay::ReturnValue' has a wrong offset!");

// Function RGame.RGTask_WaitDelay.IncreaseTimer
// 0x0010 (0x0010 - 0x0000)
struct RGTask_WaitDelay_IncreaseTimer final
{
public:
	class URGScript*                              OwningScript;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delta;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGTask_WaitDelay_IncreaseTimer) == 0x000008, "Wrong alignment on RGTask_WaitDelay_IncreaseTimer");
static_assert(sizeof(RGTask_WaitDelay_IncreaseTimer) == 0x000010, "Wrong size on RGTask_WaitDelay_IncreaseTimer");
static_assert(offsetof(RGTask_WaitDelay_IncreaseTimer, OwningScript) == 0x000000, "Member 'RGTask_WaitDelay_IncreaseTimer::OwningScript' has a wrong offset!");
static_assert(offsetof(RGTask_WaitDelay_IncreaseTimer, Delta) == 0x000008, "Member 'RGTask_WaitDelay_IncreaseTimer::Delta' has a wrong offset!");

// Function RGame.RGWeaponModScript.AlterRemainingCooldown
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponModScript_AlterRemainingCooldown final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_AlterRemainingCooldown) == 0x000004, "Wrong alignment on RGWeaponModScript_AlterRemainingCooldown");
static_assert(sizeof(RGWeaponModScript_AlterRemainingCooldown) == 0x000004, "Wrong size on RGWeaponModScript_AlterRemainingCooldown");
static_assert(offsetof(RGWeaponModScript_AlterRemainingCooldown, DeltaSeconds) == 0x000000, "Member 'RGWeaponModScript_AlterRemainingCooldown::DeltaSeconds' has a wrong offset!");

// Function RGame.RGWeaponModScript.ApplyFireSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponModScript_ApplyFireSettings final
{
public:
	class URBaseWeaponSettings*                   FireSettings;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_ApplyFireSettings) == 0x000008, "Wrong alignment on RGWeaponModScript_ApplyFireSettings");
static_assert(sizeof(RGWeaponModScript_ApplyFireSettings) == 0x000008, "Wrong size on RGWeaponModScript_ApplyFireSettings");
static_assert(offsetof(RGWeaponModScript_ApplyFireSettings, FireSettings) == 0x000000, "Member 'RGWeaponModScript_ApplyFireSettings::FireSettings' has a wrong offset!");

// Function RGame.RGWeaponModScript.FanFire
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponModScript_FanFire final
{
public:
	struct FRotator                               RotationOffset;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_FanFire) == 0x000008, "Wrong alignment on RGWeaponModScript_FanFire");
static_assert(sizeof(RGWeaponModScript_FanFire) == 0x000018, "Wrong size on RGWeaponModScript_FanFire");
static_assert(offsetof(RGWeaponModScript_FanFire, RotationOffset) == 0x000000, "Member 'RGWeaponModScript_FanFire::RotationOffset' has a wrong offset!");

// Function RGame.RGWeaponModScript.FireProjectile
// 0x0050 (0x0050 - 0x0000)
struct RGWeaponModScript_FireProjectile final
{
public:
	int32                                         AmmoCost;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BarrelIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARProjectileBase>           ProjectileClass;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseWeaponDamage;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ROFOverride;                                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipRecoil;                                       // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunFanFireBehavior;                               // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponModScript_FireProjectile) == 0x000008, "Wrong alignment on RGWeaponModScript_FireProjectile");
static_assert(sizeof(RGWeaponModScript_FireProjectile) == 0x000050, "Wrong size on RGWeaponModScript_FireProjectile");
static_assert(offsetof(RGWeaponModScript_FireProjectile, AmmoCost) == 0x000000, "Member 'RGWeaponModScript_FireProjectile::AmmoCost' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, BarrelIndex) == 0x000004, "Member 'RGWeaponModScript_FireProjectile::BarrelIndex' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, ProjectileClass) == 0x000008, "Member 'RGWeaponModScript_FireProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, SpawnOffset) == 0x000010, "Member 'RGWeaponModScript_FireProjectile::SpawnOffset' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, RotationOffset) == 0x000028, "Member 'RGWeaponModScript_FireProjectile::RotationOffset' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, bUseWeaponDamage) == 0x000040, "Member 'RGWeaponModScript_FireProjectile::bUseWeaponDamage' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, ROFOverride) == 0x000044, "Member 'RGWeaponModScript_FireProjectile::ROFOverride' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, bSkipRecoil) == 0x000048, "Member 'RGWeaponModScript_FireProjectile::bSkipRecoil' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_FireProjectile, bRunFanFireBehavior) == 0x000049, "Member 'RGWeaponModScript_FireProjectile::bRunFanFireBehavior' has a wrong offset!");

// Function RGame.RGWeaponModScript.NativeSpawnBulletline
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponModScript_NativeSpawnBulletline final
{
public:
	struct FVector                                Forward;                                           // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_NativeSpawnBulletline) == 0x000008, "Wrong alignment on RGWeaponModScript_NativeSpawnBulletline");
static_assert(sizeof(RGWeaponModScript_NativeSpawnBulletline) == 0x000018, "Wrong size on RGWeaponModScript_NativeSpawnBulletline");
static_assert(offsetof(RGWeaponModScript_NativeSpawnBulletline, Forward) == 0x000000, "Member 'RGWeaponModScript_NativeSpawnBulletline::Forward' has a wrong offset!");

// Function RGame.RGWeaponModScript.RetryFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponModScript_RetryFire final
{
public:
	bool                                          bSkipFireSequenceCheck;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_RetryFire) == 0x000001, "Wrong alignment on RGWeaponModScript_RetryFire");
static_assert(sizeof(RGWeaponModScript_RetryFire) == 0x000001, "Wrong size on RGWeaponModScript_RetryFire");
static_assert(offsetof(RGWeaponModScript_RetryFire, bSkipFireSequenceCheck) == 0x000000, "Member 'RGWeaponModScript_RetryFire::bSkipFireSequenceCheck' has a wrong offset!");

// Function RGame.RGWeaponModScript.SetModScriptLastTimeFired
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponModScript_SetModScriptLastTimeFired final
{
public:
	float                                         LastTimeFired;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_SetModScriptLastTimeFired) == 0x000004, "Wrong alignment on RGWeaponModScript_SetModScriptLastTimeFired");
static_assert(sizeof(RGWeaponModScript_SetModScriptLastTimeFired) == 0x000004, "Wrong size on RGWeaponModScript_SetModScriptLastTimeFired");
static_assert(offsetof(RGWeaponModScript_SetModScriptLastTimeFired, LastTimeFired) == 0x000000, "Member 'RGWeaponModScript_SetModScriptLastTimeFired::LastTimeFired' has a wrong offset!");

// Function RGame.RGWeaponModScript.SpawnFX
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponModScript_SpawnFX final
{
public:
	TSubclassOf<class URNiagaraComponent>         RNiagaraComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundTemplate;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           CameraShakeTemplate;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_SpawnFX) == 0x000008, "Wrong alignment on RGWeaponModScript_SpawnFX");
static_assert(sizeof(RGWeaponModScript_SpawnFX) == 0x000018, "Wrong size on RGWeaponModScript_SpawnFX");
static_assert(offsetof(RGWeaponModScript_SpawnFX, RNiagaraComponent) == 0x000000, "Member 'RGWeaponModScript_SpawnFX::RNiagaraComponent' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_SpawnFX, SoundTemplate) == 0x000008, "Member 'RGWeaponModScript_SpawnFX::SoundTemplate' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_SpawnFX, CameraShakeTemplate) == 0x000010, "Member 'RGWeaponModScript_SpawnFX::CameraShakeTemplate' has a wrong offset!");

// Function RGame.RGWeaponModScript.SpawnWeaponFireCameraShake
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponModScript_SpawnWeaponFireCameraShake final
{
public:
	TSubclassOf<class UCameraShakeBase>           CameraShakeTemplate;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_SpawnWeaponFireCameraShake) == 0x000008, "Wrong alignment on RGWeaponModScript_SpawnWeaponFireCameraShake");
static_assert(sizeof(RGWeaponModScript_SpawnWeaponFireCameraShake) == 0x000008, "Wrong size on RGWeaponModScript_SpawnWeaponFireCameraShake");
static_assert(offsetof(RGWeaponModScript_SpawnWeaponFireCameraShake, CameraShakeTemplate) == 0x000000, "Member 'RGWeaponModScript_SpawnWeaponFireCameraShake::CameraShakeTemplate' has a wrong offset!");

// Function RGame.RGWeaponModScript.SpawnWeaponFireFX
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponModScript_SpawnWeaponFireFX final
{
public:
	TSubclassOf<class URNiagaraComponent>         RNiagaraComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_SpawnWeaponFireFX) == 0x000008, "Wrong alignment on RGWeaponModScript_SpawnWeaponFireFX");
static_assert(sizeof(RGWeaponModScript_SpawnWeaponFireFX) == 0x000008, "Wrong size on RGWeaponModScript_SpawnWeaponFireFX");
static_assert(offsetof(RGWeaponModScript_SpawnWeaponFireFX, RNiagaraComponent) == 0x000000, "Member 'RGWeaponModScript_SpawnWeaponFireFX::RNiagaraComponent' has a wrong offset!");

// Function RGame.RGWeaponModScript.SpawnWeaponFireSFX
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponModScript_SpawnWeaponFireSFX final
{
public:
	class USoundBase*                             SoundTemplate;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_SpawnWeaponFireSFX) == 0x000008, "Wrong alignment on RGWeaponModScript_SpawnWeaponFireSFX");
static_assert(sizeof(RGWeaponModScript_SpawnWeaponFireSFX) == 0x000008, "Wrong size on RGWeaponModScript_SpawnWeaponFireSFX");
static_assert(offsetof(RGWeaponModScript_SpawnWeaponFireSFX, SoundTemplate) == 0x000000, "Member 'RGWeaponModScript_SpawnWeaponFireSFX::SoundTemplate' has a wrong offset!");

// Function RGame.RGWeaponModScript.GetFloatWeaponModCurrentStat
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponModScript_GetFloatWeaponModCurrentStat final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_GetFloatWeaponModCurrentStat) == 0x000004, "Wrong alignment on RGWeaponModScript_GetFloatWeaponModCurrentStat");
static_assert(sizeof(RGWeaponModScript_GetFloatWeaponModCurrentStat) == 0x000008, "Wrong size on RGWeaponModScript_GetFloatWeaponModCurrentStat");
static_assert(offsetof(RGWeaponModScript_GetFloatWeaponModCurrentStat, Stat) == 0x000000, "Member 'RGWeaponModScript_GetFloatWeaponModCurrentStat::Stat' has a wrong offset!");
static_assert(offsetof(RGWeaponModScript_GetFloatWeaponModCurrentStat, ReturnValue) == 0x000004, "Member 'RGWeaponModScript_GetFloatWeaponModCurrentStat::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponModScript.GetRemainingCooldown
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponModScript_GetRemainingCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_GetRemainingCooldown) == 0x000004, "Wrong alignment on RGWeaponModScript_GetRemainingCooldown");
static_assert(sizeof(RGWeaponModScript_GetRemainingCooldown) == 0x000004, "Wrong size on RGWeaponModScript_GetRemainingCooldown");
static_assert(offsetof(RGWeaponModScript_GetRemainingCooldown, ReturnValue) == 0x000000, "Member 'RGWeaponModScript_GetRemainingCooldown::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponModScript.GetRemainingCooldownPercentage
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponModScript_GetRemainingCooldownPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_GetRemainingCooldownPercentage) == 0x000004, "Wrong alignment on RGWeaponModScript_GetRemainingCooldownPercentage");
static_assert(sizeof(RGWeaponModScript_GetRemainingCooldownPercentage) == 0x000004, "Wrong size on RGWeaponModScript_GetRemainingCooldownPercentage");
static_assert(offsetof(RGWeaponModScript_GetRemainingCooldownPercentage, ReturnValue) == 0x000000, "Member 'RGWeaponModScript_GetRemainingCooldownPercentage::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponModScript.IsPrimaryFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponModScript_IsPrimaryFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_IsPrimaryFire) == 0x000001, "Wrong alignment on RGWeaponModScript_IsPrimaryFire");
static_assert(sizeof(RGWeaponModScript_IsPrimaryFire) == 0x000001, "Wrong size on RGWeaponModScript_IsPrimaryFire");
static_assert(offsetof(RGWeaponModScript_IsPrimaryFire, ReturnValue) == 0x000000, "Member 'RGWeaponModScript_IsPrimaryFire::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponModScript.IsSecondaryFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponModScript_IsSecondaryFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_IsSecondaryFire) == 0x000001, "Wrong alignment on RGWeaponModScript_IsSecondaryFire");
static_assert(sizeof(RGWeaponModScript_IsSecondaryFire) == 0x000001, "Wrong size on RGWeaponModScript_IsSecondaryFire");
static_assert(offsetof(RGWeaponModScript_IsSecondaryFire, ReturnValue) == 0x000000, "Member 'RGWeaponModScript_IsSecondaryFire::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponModScript.IsWeaponHoldingFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponModScript_IsWeaponHoldingFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponModScript_IsWeaponHoldingFire) == 0x000001, "Wrong alignment on RGWeaponModScript_IsWeaponHoldingFire");
static_assert(sizeof(RGWeaponModScript_IsWeaponHoldingFire) == 0x000001, "Wrong size on RGWeaponModScript_IsWeaponHoldingFire");
static_assert(offsetof(RGWeaponModScript_IsWeaponHoldingFire, ReturnValue) == 0x000000, "Member 'RGWeaponModScript_IsWeaponHoldingFire::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.ExecuteWeaponScriptFunction
// 0x0002 (0x0002 - 0x0000)
struct RGWeaponScript_ExecuteWeaponScriptFunction final
{
public:
	ERGScriptFunction                             FunctionName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_ExecuteWeaponScriptFunction) == 0x000001, "Wrong alignment on RGWeaponScript_ExecuteWeaponScriptFunction");
static_assert(sizeof(RGWeaponScript_ExecuteWeaponScriptFunction) == 0x000002, "Wrong size on RGWeaponScript_ExecuteWeaponScriptFunction");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunction, FunctionName) == 0x000000, "Member 'RGWeaponScript_ExecuteWeaponScriptFunction::FunctionName' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunction, Replication) == 0x000001, "Member 'RGWeaponScript_ExecuteWeaponScriptFunction::Replication' has a wrong offset!");

// Function RGame.RGWeaponScript.ExecuteWeaponScriptFunctionWithActorRef
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef final
{
public:
	ERGScriptFunction                             FunctionName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef) == 0x000008, "Wrong alignment on RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef");
static_assert(sizeof(RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef) == 0x000018, "Wrong size on RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef, FunctionName) == 0x000000, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef::FunctionName' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef, Actor) == 0x000008, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef::Actor' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef, Replication) == 0x000010, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithActorRef::Replication' has a wrong offset!");

// Function RGame.RGWeaponScript.ExecuteWeaponScriptFunctionWithInt
// 0x000C (0x000C - 0x0000)
struct RGWeaponScript_ExecuteWeaponScriptFunctionWithInt final
{
public:
	ERGScriptFunction                             FunctionName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponScript_ExecuteWeaponScriptFunctionWithInt) == 0x000004, "Wrong alignment on RGWeaponScript_ExecuteWeaponScriptFunctionWithInt");
static_assert(sizeof(RGWeaponScript_ExecuteWeaponScriptFunctionWithInt) == 0x00000C, "Wrong size on RGWeaponScript_ExecuteWeaponScriptFunctionWithInt");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithInt, FunctionName) == 0x000000, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithInt::FunctionName' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithInt, Value) == 0x000004, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithInt::Value' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithInt, Replication) == 0x000008, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithInt::Replication' has a wrong offset!");

// Function RGame.RGWeaponScript.ExecuteWeaponScriptFunctionWithVector
// 0x0028 (0x0028 - 0x0000)
struct RGWeaponScript_ExecuteWeaponScriptFunctionWithVector final
{
public:
	ERGScriptFunction                             FunctionName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGScriptFunctionReplication                   Replication;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponScript_ExecuteWeaponScriptFunctionWithVector) == 0x000008, "Wrong alignment on RGWeaponScript_ExecuteWeaponScriptFunctionWithVector");
static_assert(sizeof(RGWeaponScript_ExecuteWeaponScriptFunctionWithVector) == 0x000028, "Wrong size on RGWeaponScript_ExecuteWeaponScriptFunctionWithVector");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithVector, FunctionName) == 0x000000, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithVector::FunctionName' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithVector, Value) == 0x000008, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithVector::Value' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_ExecuteWeaponScriptFunctionWithVector, Replication) == 0x000020, "Member 'RGWeaponScript_ExecuteWeaponScriptFunctionWithVector::Replication' has a wrong offset!");

// Function RGame.RGWeaponScript.GetIsScoped
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_GetIsScoped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetIsScoped) == 0x000001, "Wrong alignment on RGWeaponScript_GetIsScoped");
static_assert(sizeof(RGWeaponScript_GetIsScoped) == 0x000001, "Wrong size on RGWeaponScript_GetIsScoped");
static_assert(offsetof(RGWeaponScript_GetIsScoped, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetIsScoped::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.K2_OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_K2_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_K2_OnEnemyKilled) == 0x000008, "Wrong alignment on RGWeaponScript_K2_OnEnemyKilled");
static_assert(sizeof(RGWeaponScript_K2_OnEnemyKilled) == 0x000008, "Wrong size on RGWeaponScript_K2_OnEnemyKilled");
static_assert(offsetof(RGWeaponScript_K2_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGWeaponScript_K2_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGWeaponScript.K2_OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_K2_OnProjectileSpawned final
{
public:
	class ARProjectileBase*                       SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_K2_OnProjectileSpawned) == 0x000008, "Wrong alignment on RGWeaponScript_K2_OnProjectileSpawned");
static_assert(sizeof(RGWeaponScript_K2_OnProjectileSpawned) == 0x000008, "Wrong size on RGWeaponScript_K2_OnProjectileSpawned");
static_assert(offsetof(RGWeaponScript_K2_OnProjectileSpawned, SpawnedProjectile) == 0x000000, "Member 'RGWeaponScript_K2_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function RGame.RGWeaponScript.K2_OnProjectileSpawnedClientDummy
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponScript_K2_OnProjectileSpawnedClientDummy final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_K2_OnProjectileSpawnedClientDummy) == 0x000008, "Wrong alignment on RGWeaponScript_K2_OnProjectileSpawnedClientDummy");
static_assert(sizeof(RGWeaponScript_K2_OnProjectileSpawnedClientDummy) == 0x000018, "Wrong size on RGWeaponScript_K2_OnProjectileSpawnedClientDummy");
static_assert(offsetof(RGWeaponScript_K2_OnProjectileSpawnedClientDummy, Direction) == 0x000000, "Member 'RGWeaponScript_K2_OnProjectileSpawnedClientDummy::Direction' has a wrong offset!");

// Function RGame.RGWeaponScript.MulticastSetAmmoInClip
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_MulticastSetAmmoInClip final
{
public:
	int32                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_MulticastSetAmmoInClip) == 0x000004, "Wrong alignment on RGWeaponScript_MulticastSetAmmoInClip");
static_assert(sizeof(RGWeaponScript_MulticastSetAmmoInClip) == 0x000004, "Wrong size on RGWeaponScript_MulticastSetAmmoInClip");
static_assert(offsetof(RGWeaponScript_MulticastSetAmmoInClip, NewAmmo) == 0x000000, "Member 'RGWeaponScript_MulticastSetAmmoInClip::NewAmmo' has a wrong offset!");

// Function RGame.RGWeaponScript.OnBeginFire
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_OnBeginFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_OnBeginFire) == 0x000004, "Wrong alignment on RGWeaponScript_OnBeginFire");
static_assert(sizeof(RGWeaponScript_OnBeginFire) == 0x000004, "Wrong size on RGWeaponScript_OnBeginFire");
static_assert(offsetof(RGWeaponScript_OnBeginFire, CurrentAmmo) == 0x000000, "Member 'RGWeaponScript_OnBeginFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RGWeaponScript.OnBeginSecondaryFire
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_OnBeginSecondaryFire final
{
public:
	int32                                         CurrentAmmo;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_OnBeginSecondaryFire) == 0x000004, "Wrong alignment on RGWeaponScript_OnBeginSecondaryFire");
static_assert(sizeof(RGWeaponScript_OnBeginSecondaryFire) == 0x000004, "Wrong size on RGWeaponScript_OnBeginSecondaryFire");
static_assert(offsetof(RGWeaponScript_OnBeginSecondaryFire, CurrentAmmo) == 0x000000, "Member 'RGWeaponScript_OnBeginSecondaryFire::CurrentAmmo' has a wrong offset!");

// Function RGame.RGWeaponScript.OnEnemyKilled
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_OnEnemyKilled final
{
public:
	class AActor*                                 KilledActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_OnEnemyKilled) == 0x000008, "Wrong alignment on RGWeaponScript_OnEnemyKilled");
static_assert(sizeof(RGWeaponScript_OnEnemyKilled) == 0x000008, "Wrong size on RGWeaponScript_OnEnemyKilled");
static_assert(offsetof(RGWeaponScript_OnEnemyKilled, KilledActor) == 0x000000, "Member 'RGWeaponScript_OnEnemyKilled::KilledActor' has a wrong offset!");

// Function RGame.RGWeaponScript.OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_OnProjectileSpawned final
{
public:
	class ARProjectileBase*                       SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_OnProjectileSpawned) == 0x000008, "Wrong alignment on RGWeaponScript_OnProjectileSpawned");
static_assert(sizeof(RGWeaponScript_OnProjectileSpawned) == 0x000008, "Wrong size on RGWeaponScript_OnProjectileSpawned");
static_assert(offsetof(RGWeaponScript_OnProjectileSpawned, SpawnedProjectile) == 0x000000, "Member 'RGWeaponScript_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function RGame.RGWeaponScript.OnProjectileSpawnedClientDummy
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponScript_OnProjectileSpawnedClientDummy final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_OnProjectileSpawnedClientDummy) == 0x000008, "Wrong alignment on RGWeaponScript_OnProjectileSpawnedClientDummy");
static_assert(sizeof(RGWeaponScript_OnProjectileSpawnedClientDummy) == 0x000018, "Wrong size on RGWeaponScript_OnProjectileSpawnedClientDummy");
static_assert(offsetof(RGWeaponScript_OnProjectileSpawnedClientDummy, Direction) == 0x000000, "Member 'RGWeaponScript_OnProjectileSpawnedClientDummy::Direction' has a wrong offset!");

// Function RGame.RGWeaponScript.SetBaseWeaponSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_SetBaseWeaponSettings final
{
public:
	class URBaseWeaponSettings*                   BaseSettings;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_SetBaseWeaponSettings) == 0x000008, "Wrong alignment on RGWeaponScript_SetBaseWeaponSettings");
static_assert(sizeof(RGWeaponScript_SetBaseWeaponSettings) == 0x000008, "Wrong size on RGWeaponScript_SetBaseWeaponSettings");
static_assert(offsetof(RGWeaponScript_SetBaseWeaponSettings, BaseSettings) == 0x000000, "Member 'RGWeaponScript_SetBaseWeaponSettings::BaseSettings' has a wrong offset!");

// Function RGame.RGWeaponScript.SetHasSingleShotReload
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_SetHasSingleShotReload final
{
public:
	bool                                          bSingleShotReload;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_SetHasSingleShotReload) == 0x000001, "Wrong alignment on RGWeaponScript_SetHasSingleShotReload");
static_assert(sizeof(RGWeaponScript_SetHasSingleShotReload) == 0x000001, "Wrong size on RGWeaponScript_SetHasSingleShotReload");
static_assert(offsetof(RGWeaponScript_SetHasSingleShotReload, bSingleShotReload) == 0x000000, "Member 'RGWeaponScript_SetHasSingleShotReload::bSingleShotReload' has a wrong offset!");

// Function RGame.RGWeaponScript.SetIsAiming
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_SetIsAiming final
{
public:
	bool                                          bAiming;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_SetIsAiming) == 0x000001, "Wrong alignment on RGWeaponScript_SetIsAiming");
static_assert(sizeof(RGWeaponScript_SetIsAiming) == 0x000001, "Wrong size on RGWeaponScript_SetIsAiming");
static_assert(offsetof(RGWeaponScript_SetIsAiming, bAiming) == 0x000000, "Member 'RGWeaponScript_SetIsAiming::bAiming' has a wrong offset!");

// Function RGame.RGWeaponScript.SetIsScoped
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_SetIsScoped final
{
public:
	bool                                          bScoped;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_SetIsScoped) == 0x000001, "Wrong alignment on RGWeaponScript_SetIsScoped");
static_assert(sizeof(RGWeaponScript_SetIsScoped) == 0x000001, "Wrong size on RGWeaponScript_SetIsScoped");
static_assert(offsetof(RGWeaponScript_SetIsScoped, bScoped) == 0x000000, "Member 'RGWeaponScript_SetIsScoped::bScoped' has a wrong offset!");

// Function RGame.RGWeaponScript.CalculateAilmentProcChance
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_CalculateAilmentProcChance final
{
public:
	EFloatWeaponStat                              ChanceStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_CalculateAilmentProcChance) == 0x000004, "Wrong alignment on RGWeaponScript_CalculateAilmentProcChance");
static_assert(sizeof(RGWeaponScript_CalculateAilmentProcChance) == 0x000008, "Wrong size on RGWeaponScript_CalculateAilmentProcChance");
static_assert(offsetof(RGWeaponScript_CalculateAilmentProcChance, ChanceStat) == 0x000000, "Member 'RGWeaponScript_CalculateAilmentProcChance::ChanceStat' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_CalculateAilmentProcChance, ReturnValue) == 0x000004, "Member 'RGWeaponScript_CalculateAilmentProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.CalculateProcChance
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_CalculateProcChance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_CalculateProcChance) == 0x000004, "Wrong alignment on RGWeaponScript_CalculateProcChance");
static_assert(sizeof(RGWeaponScript_CalculateProcChance) == 0x000004, "Wrong size on RGWeaponScript_CalculateProcChance");
static_assert(offsetof(RGWeaponScript_CalculateProcChance, ReturnValue) == 0x000000, "Member 'RGWeaponScript_CalculateProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetAmmoInClip
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetAmmoInClip final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetAmmoInClip) == 0x000004, "Wrong alignment on RGWeaponScript_GetAmmoInClip");
static_assert(sizeof(RGWeaponScript_GetAmmoInClip) == 0x000004, "Wrong size on RGWeaponScript_GetAmmoInClip");
static_assert(offsetof(RGWeaponScript_GetAmmoInClip, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetAmmoInClip::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetBaseWeaponSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetBaseWeaponSettings final
{
public:
	class URBaseWeaponSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetBaseWeaponSettings) == 0x000008, "Wrong alignment on RGWeaponScript_GetBaseWeaponSettings");
static_assert(sizeof(RGWeaponScript_GetBaseWeaponSettings) == 0x000008, "Wrong size on RGWeaponScript_GetBaseWeaponSettings");
static_assert(offsetof(RGWeaponScript_GetBaseWeaponSettings, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetBaseWeaponSettings::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetFloatWeaponStat
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetFloatWeaponStat final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetFloatWeaponStat) == 0x000004, "Wrong alignment on RGWeaponScript_GetFloatWeaponStat");
static_assert(sizeof(RGWeaponScript_GetFloatWeaponStat) == 0x000008, "Wrong size on RGWeaponScript_GetFloatWeaponStat");
static_assert(offsetof(RGWeaponScript_GetFloatWeaponStat, Stat) == 0x000000, "Member 'RGWeaponScript_GetFloatWeaponStat::Stat' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_GetFloatWeaponStat, ReturnValue) == 0x000004, "Member 'RGWeaponScript_GetFloatWeaponStat::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetGlobalWeaponModifiers
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetGlobalWeaponModifiers final
{
public:
	class URGlobalWeaponModifiers*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetGlobalWeaponModifiers) == 0x000008, "Wrong alignment on RGWeaponScript_GetGlobalWeaponModifiers");
static_assert(sizeof(RGWeaponScript_GetGlobalWeaponModifiers) == 0x000008, "Wrong size on RGWeaponScript_GetGlobalWeaponModifiers");
static_assert(offsetof(RGWeaponScript_GetGlobalWeaponModifiers, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetGlobalWeaponModifiers::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetInputHoldingFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_GetInputHoldingFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetInputHoldingFire) == 0x000001, "Wrong alignment on RGWeaponScript_GetInputHoldingFire");
static_assert(sizeof(RGWeaponScript_GetInputHoldingFire) == 0x000001, "Wrong size on RGWeaponScript_GetInputHoldingFire");
static_assert(offsetof(RGWeaponScript_GetInputHoldingFire, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetInputHoldingFire::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetInputHoldingSecondaryFire
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponScript_GetInputHoldingSecondaryFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetInputHoldingSecondaryFire) == 0x000001, "Wrong alignment on RGWeaponScript_GetInputHoldingSecondaryFire");
static_assert(sizeof(RGWeaponScript_GetInputHoldingSecondaryFire) == 0x000001, "Wrong size on RGWeaponScript_GetInputHoldingSecondaryFire");
static_assert(offsetof(RGWeaponScript_GetInputHoldingSecondaryFire, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetInputHoldingSecondaryFire::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetIntegerWeaponStat
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetIntegerWeaponStat final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetIntegerWeaponStat) == 0x000004, "Wrong alignment on RGWeaponScript_GetIntegerWeaponStat");
static_assert(sizeof(RGWeaponScript_GetIntegerWeaponStat) == 0x000008, "Wrong size on RGWeaponScript_GetIntegerWeaponStat");
static_assert(offsetof(RGWeaponScript_GetIntegerWeaponStat, Stat) == 0x000000, "Member 'RGWeaponScript_GetIntegerWeaponStat::Stat' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_GetIntegerWeaponStat, ReturnValue) == 0x000004, "Member 'RGWeaponScript_GetIntegerWeaponStat::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetLastTimeFired
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetLastTimeFired final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetLastTimeFired) == 0x000004, "Wrong alignment on RGWeaponScript_GetLastTimeFired");
static_assert(sizeof(RGWeaponScript_GetLastTimeFired) == 0x000004, "Wrong size on RGWeaponScript_GetLastTimeFired");
static_assert(offsetof(RGWeaponScript_GetLastTimeFired, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetLastTimeFired::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetMutableWeaponSettings
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetMutableWeaponSettings final
{
public:
	class URMutableWeaponSettings*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetMutableWeaponSettings) == 0x000008, "Wrong alignment on RGWeaponScript_GetMutableWeaponSettings");
static_assert(sizeof(RGWeaponScript_GetMutableWeaponSettings) == 0x000008, "Wrong size on RGWeaponScript_GetMutableWeaponSettings");
static_assert(offsetof(RGWeaponScript_GetMutableWeaponSettings, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetMutableWeaponSettings::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetMuzzleSocketName
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetMuzzleSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetMuzzleSocketName) == 0x000004, "Wrong alignment on RGWeaponScript_GetMuzzleSocketName");
static_assert(sizeof(RGWeaponScript_GetMuzzleSocketName) == 0x000008, "Wrong size on RGWeaponScript_GetMuzzleSocketName");
static_assert(offsetof(RGWeaponScript_GetMuzzleSocketName, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetMuzzleSocketName::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetProjectileClass final
{
public:
	TSubclassOf<class ARProjectileBase>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetProjectileClass) == 0x000008, "Wrong alignment on RGWeaponScript_GetProjectileClass");
static_assert(sizeof(RGWeaponScript_GetProjectileClass) == 0x000008, "Wrong size on RGWeaponScript_GetProjectileClass");
static_assert(offsetof(RGWeaponScript_GetProjectileClass, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetProjectileClass::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetProjectileDummyClass
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetProjectileDummyClass final
{
public:
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetProjectileDummyClass) == 0x000008, "Wrong alignment on RGWeaponScript_GetProjectileDummyClass");
static_assert(sizeof(RGWeaponScript_GetProjectileDummyClass) == 0x000008, "Wrong size on RGWeaponScript_GetProjectileDummyClass");
static_assert(offsetof(RGWeaponScript_GetProjectileDummyClass, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetProjectileDummyClass::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetRandomSpreadNormalDistribution
// 0x0018 (0x0018 - 0x0000)
struct RGWeaponScript_GetRandomSpreadNormalDistribution final
{
public:
	struct FVector2D                              SpreadError;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponScript_GetRandomSpreadNormalDistribution) == 0x000008, "Wrong alignment on RGWeaponScript_GetRandomSpreadNormalDistribution");
static_assert(sizeof(RGWeaponScript_GetRandomSpreadNormalDistribution) == 0x000018, "Wrong size on RGWeaponScript_GetRandomSpreadNormalDistribution");
static_assert(offsetof(RGWeaponScript_GetRandomSpreadNormalDistribution, SpreadError) == 0x000000, "Member 'RGWeaponScript_GetRandomSpreadNormalDistribution::SpreadError' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_GetRandomSpreadNormalDistribution, ReturnValue) == 0x000010, "Member 'RGWeaponScript_GetRandomSpreadNormalDistribution::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetROFTime
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetROFTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetROFTime) == 0x000004, "Wrong alignment on RGWeaponScript_GetROFTime");
static_assert(sizeof(RGWeaponScript_GetROFTime) == 0x000004, "Wrong size on RGWeaponScript_GetROFTime");
static_assert(offsetof(RGWeaponScript_GetROFTime, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetROFTime::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetROFWaitTime
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetROFWaitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetROFWaitTime) == 0x000004, "Wrong alignment on RGWeaponScript_GetROFWaitTime");
static_assert(sizeof(RGWeaponScript_GetROFWaitTime) == 0x000004, "Wrong size on RGWeaponScript_GetROFWaitTime");
static_assert(offsetof(RGWeaponScript_GetROFWaitTime, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetROFWaitTime::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetSpread
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetSpread final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetSpread) == 0x000004, "Wrong alignment on RGWeaponScript_GetSpread");
static_assert(sizeof(RGWeaponScript_GetSpread) == 0x000004, "Wrong size on RGWeaponScript_GetSpread");
static_assert(offsetof(RGWeaponScript_GetSpread, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetSpread::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetSpreadMultiplier
// 0x0004 (0x0004 - 0x0000)
struct RGWeaponScript_GetSpreadMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetSpreadMultiplier) == 0x000004, "Wrong alignment on RGWeaponScript_GetSpreadMultiplier");
static_assert(sizeof(RGWeaponScript_GetSpreadMultiplier) == 0x000004, "Wrong size on RGWeaponScript_GetSpreadMultiplier");
static_assert(offsetof(RGWeaponScript_GetSpreadMultiplier, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetSpreadMultiplier::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.GetWeaponActor
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_GetWeaponActor final
{
public:
	class ARWeapon*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_GetWeaponActor) == 0x000008, "Wrong alignment on RGWeaponScript_GetWeaponActor");
static_assert(sizeof(RGWeaponScript_GetWeaponActor) == 0x000008, "Wrong size on RGWeaponScript_GetWeaponActor");
static_assert(offsetof(RGWeaponScript_GetWeaponActor, ReturnValue) == 0x000000, "Member 'RGWeaponScript_GetWeaponActor::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.RollAilmentProcChance
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_RollAilmentProcChance final
{
public:
	EFloatWeaponStat                              ChanceStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponScript_RollAilmentProcChance) == 0x000004, "Wrong alignment on RGWeaponScript_RollAilmentProcChance");
static_assert(sizeof(RGWeaponScript_RollAilmentProcChance) == 0x000008, "Wrong size on RGWeaponScript_RollAilmentProcChance");
static_assert(offsetof(RGWeaponScript_RollAilmentProcChance, ChanceStat) == 0x000000, "Member 'RGWeaponScript_RollAilmentProcChance::ChanceStat' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_RollAilmentProcChance, ReturnValue) == 0x000004, "Member 'RGWeaponScript_RollAilmentProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponScript.RollProcChance
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponScript_RollProcChance final
{
public:
	float                                         Chance;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RGWeaponScript_RollProcChance) == 0x000004, "Wrong alignment on RGWeaponScript_RollProcChance");
static_assert(sizeof(RGWeaponScript_RollProcChance) == 0x000008, "Wrong size on RGWeaponScript_RollProcChance");
static_assert(offsetof(RGWeaponScript_RollProcChance, Chance) == 0x000000, "Member 'RGWeaponScript_RollProcChance::Chance' has a wrong offset!");
static_assert(offsetof(RGWeaponScript_RollProcChance, ReturnValue) == 0x000004, "Member 'RGWeaponScript_RollProcChance::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.AddWeaponModCosmeticEditorOnly
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_AddWeaponModCosmeticEditorOnly final
{
public:
	class URWeaponModPrimaryAsset*                WeaponMod;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_AddWeaponModCosmeticEditorOnly) == 0x000008, "Wrong alignment on RWeapon_AddWeaponModCosmeticEditorOnly");
static_assert(sizeof(RWeapon_AddWeaponModCosmeticEditorOnly) == 0x000008, "Wrong size on RWeapon_AddWeaponModCosmeticEditorOnly");
static_assert(offsetof(RWeapon_AddWeaponModCosmeticEditorOnly, WeaponMod) == 0x000000, "Member 'RWeapon_AddWeaponModCosmeticEditorOnly::WeaponMod' has a wrong offset!");

// Function RGame.RWeapon.AttachWeaponModCosmeticMesh
// 0x0018 (0x0018 - 0x0000)
struct RWeapon_AttachWeaponModCosmeticMesh final
{
public:
	const class URWeaponModPrimaryAsset*          WeaponMod;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URStaticMeshComponent*>          ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_AttachWeaponModCosmeticMesh) == 0x000008, "Wrong alignment on RWeapon_AttachWeaponModCosmeticMesh");
static_assert(sizeof(RWeapon_AttachWeaponModCosmeticMesh) == 0x000018, "Wrong size on RWeapon_AttachWeaponModCosmeticMesh");
static_assert(offsetof(RWeapon_AttachWeaponModCosmeticMesh, WeaponMod) == 0x000000, "Member 'RWeapon_AttachWeaponModCosmeticMesh::WeaponMod' has a wrong offset!");
static_assert(offsetof(RWeapon_AttachWeaponModCosmeticMesh, ReturnValue) == 0x000008, "Member 'RWeapon_AttachWeaponModCosmeticMesh::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.DestroyWeaponModCosmeticMesh
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_DestroyWeaponModCosmeticMesh final
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_DestroyWeaponModCosmeticMesh) == 0x000008, "Wrong alignment on RWeapon_DestroyWeaponModCosmeticMesh");
static_assert(sizeof(RWeapon_DestroyWeaponModCosmeticMesh) == 0x000008, "Wrong size on RWeapon_DestroyWeaponModCosmeticMesh");
static_assert(offsetof(RWeapon_DestroyWeaponModCosmeticMesh, Mesh) == 0x000000, "Member 'RWeapon_DestroyWeaponModCosmeticMesh::Mesh' has a wrong offset!");

// Function RGame.RWeapon.GetEjectionPortTransform
// 0x0060 (0x0060 - 0x0000)
struct RWeapon_GetEjectionPortTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetEjectionPortTransform) == 0x000010, "Wrong alignment on RWeapon_GetEjectionPortTransform");
static_assert(sizeof(RWeapon_GetEjectionPortTransform) == 0x000060, "Wrong size on RWeapon_GetEjectionPortTransform");
static_assert(offsetof(RWeapon_GetEjectionPortTransform, ReturnValue) == 0x000000, "Member 'RWeapon_GetEjectionPortTransform::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.GetGunMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_GetGunMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetGunMeshComponent) == 0x000008, "Wrong alignment on RWeapon_GetGunMeshComponent");
static_assert(sizeof(RWeapon_GetGunMeshComponent) == 0x000008, "Wrong size on RWeapon_GetGunMeshComponent");
static_assert(offsetof(RWeapon_GetGunMeshComponent, ReturnValue) == 0x000000, "Member 'RWeapon_GetGunMeshComponent::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.GetMuzzleTransforms
// 0x0010 (0x0010 - 0x0000)
struct RWeapon_GetMuzzleTransforms final
{
public:
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetMuzzleTransforms) == 0x000008, "Wrong alignment on RWeapon_GetMuzzleTransforms");
static_assert(sizeof(RWeapon_GetMuzzleTransforms) == 0x000010, "Wrong size on RWeapon_GetMuzzleTransforms");
static_assert(offsetof(RWeapon_GetMuzzleTransforms, ReturnValue) == 0x000000, "Member 'RWeapon_GetMuzzleTransforms::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.GetWeaponModPrimaryAssets
// 0x0010 (0x0010 - 0x0000)
struct RWeapon_GetWeaponModPrimaryAssets final
{
public:
	TArray<class URWeaponModPrimaryAsset*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetWeaponModPrimaryAssets) == 0x000008, "Wrong alignment on RWeapon_GetWeaponModPrimaryAssets");
static_assert(sizeof(RWeapon_GetWeaponModPrimaryAssets) == 0x000010, "Wrong size on RWeapon_GetWeaponModPrimaryAssets");
static_assert(offsetof(RWeapon_GetWeaponModPrimaryAssets, ReturnValue) == 0x000000, "Member 'RWeapon_GetWeaponModPrimaryAssets::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.GetWeaponPrimaryAsset
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_GetWeaponPrimaryAsset final
{
public:
	class URWeaponPrimaryAsset*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetWeaponPrimaryAsset) == 0x000008, "Wrong alignment on RWeapon_GetWeaponPrimaryAsset");
static_assert(sizeof(RWeapon_GetWeaponPrimaryAsset) == 0x000008, "Wrong size on RWeapon_GetWeaponPrimaryAsset");
static_assert(offsetof(RWeapon_GetWeaponPrimaryAsset, ReturnValue) == 0x000000, "Member 'RWeapon_GetWeaponPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.IsDefaultWeaponMod
// 0x0010 (0x0010 - 0x0000)
struct RWeapon_IsDefaultWeaponMod final
{
public:
	class URWeaponModPrimaryAsset*                Mod;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RWeapon_IsDefaultWeaponMod) == 0x000008, "Wrong alignment on RWeapon_IsDefaultWeaponMod");
static_assert(sizeof(RWeapon_IsDefaultWeaponMod) == 0x000010, "Wrong size on RWeapon_IsDefaultWeaponMod");
static_assert(offsetof(RWeapon_IsDefaultWeaponMod, Mod) == 0x000000, "Member 'RWeapon_IsDefaultWeaponMod::Mod' has a wrong offset!");
static_assert(offsetof(RWeapon_IsDefaultWeaponMod, ReturnValue) == 0x000008, "Member 'RWeapon_IsDefaultWeaponMod::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.K2_OnWeaponModCosmeticAttached
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_K2_OnWeaponModCosmeticAttached final
{
public:
	const class URWeaponModPrimaryAsset*          WeaponMod;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_K2_OnWeaponModCosmeticAttached) == 0x000008, "Wrong alignment on RWeapon_K2_OnWeaponModCosmeticAttached");
static_assert(sizeof(RWeapon_K2_OnWeaponModCosmeticAttached) == 0x000008, "Wrong size on RWeapon_K2_OnWeaponModCosmeticAttached");
static_assert(offsetof(RWeapon_K2_OnWeaponModCosmeticAttached, WeaponMod) == 0x000000, "Member 'RWeapon_K2_OnWeaponModCosmeticAttached::WeaponMod' has a wrong offset!");

// Function RGame.RWeapon.K2_OnWeaponModCosmeticRemoved
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_K2_OnWeaponModCosmeticRemoved final
{
public:
	const class URWeaponModPrimaryAsset*          WeaponMod;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_K2_OnWeaponModCosmeticRemoved) == 0x000008, "Wrong alignment on RWeapon_K2_OnWeaponModCosmeticRemoved");
static_assert(sizeof(RWeapon_K2_OnWeaponModCosmeticRemoved) == 0x000008, "Wrong size on RWeapon_K2_OnWeaponModCosmeticRemoved");
static_assert(offsetof(RWeapon_K2_OnWeaponModCosmeticRemoved, WeaponMod) == 0x000000, "Member 'RWeapon_K2_OnWeaponModCosmeticRemoved::WeaponMod' has a wrong offset!");

// Function RGame.RWeapon.OnWeaponFired
// 0x0001 (0x0001 - 0x0000)
struct RWeapon_OnWeaponFired final
{
public:
	bool                                          IsPrimaryMod;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_OnWeaponFired) == 0x000001, "Wrong alignment on RWeapon_OnWeaponFired");
static_assert(sizeof(RWeapon_OnWeaponFired) == 0x000001, "Wrong size on RWeapon_OnWeaponFired");
static_assert(offsetof(RWeapon_OnWeaponFired, IsPrimaryMod) == 0x000000, "Member 'RWeapon_OnWeaponFired::IsPrimaryMod' has a wrong offset!");

// Function RGame.RWeapon.SetWeaponVisibility
// 0x0001 (0x0001 - 0x0000)
struct RWeapon_SetWeaponVisibility final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_SetWeaponVisibility) == 0x000001, "Wrong alignment on RWeapon_SetWeaponVisibility");
static_assert(sizeof(RWeapon_SetWeaponVisibility) == 0x000001, "Wrong size on RWeapon_SetWeaponVisibility");
static_assert(offsetof(RWeapon_SetWeaponVisibility, bNewVisible) == 0x000000, "Member 'RWeapon_SetWeaponVisibility::bNewVisible' has a wrong offset!");

// Function RGame.RWeapon.SetWeaponVisible
// 0x0001 (0x0001 - 0x0000)
struct RWeapon_SetWeaponVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_SetWeaponVisible) == 0x000001, "Wrong alignment on RWeapon_SetWeaponVisible");
static_assert(sizeof(RWeapon_SetWeaponVisible) == 0x000001, "Wrong size on RWeapon_SetWeaponVisible");
static_assert(offsetof(RWeapon_SetWeaponVisible, bVisible) == 0x000000, "Member 'RWeapon_SetWeaponVisible::bVisible' has a wrong offset!");

// Function RGame.RWeapon.UpdateFOVValues
// 0x0004 (0x0004 - 0x0000)
struct RWeapon_UpdateFOVValues final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_UpdateFOVValues) == 0x000004, "Wrong alignment on RWeapon_UpdateFOVValues");
static_assert(sizeof(RWeapon_UpdateFOVValues) == 0x000004, "Wrong size on RWeapon_UpdateFOVValues");
static_assert(offsetof(RWeapon_UpdateFOVValues, FOV) == 0x000000, "Member 'RWeapon_UpdateFOVValues::FOV' has a wrong offset!");

// Function RGame.RWeapon.GetEquippedWeaponModPrimaryAsset
// 0x0010 (0x0010 - 0x0000)
struct RWeapon_GetEquippedWeaponModPrimaryAsset final
{
public:
	EWeaponModType                                WeaponModType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URWeaponModPrimaryAsset*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetEquippedWeaponModPrimaryAsset) == 0x000008, "Wrong alignment on RWeapon_GetEquippedWeaponModPrimaryAsset");
static_assert(sizeof(RWeapon_GetEquippedWeaponModPrimaryAsset) == 0x000010, "Wrong size on RWeapon_GetEquippedWeaponModPrimaryAsset");
static_assert(offsetof(RWeapon_GetEquippedWeaponModPrimaryAsset, WeaponModType) == 0x000000, "Member 'RWeapon_GetEquippedWeaponModPrimaryAsset::WeaponModType' has a wrong offset!");
static_assert(offsetof(RWeapon_GetEquippedWeaponModPrimaryAsset, ReturnValue) == 0x000008, "Member 'RWeapon_GetEquippedWeaponModPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon.GetEquippedWeaponModRank
// 0x0008 (0x0008 - 0x0000)
struct RWeapon_GetEquippedWeaponModRank final
{
public:
	EWeaponModType                                WeaponModType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_GetEquippedWeaponModRank) == 0x000004, "Wrong alignment on RWeapon_GetEquippedWeaponModRank");
static_assert(sizeof(RWeapon_GetEquippedWeaponModRank) == 0x000008, "Wrong size on RWeapon_GetEquippedWeaponModRank");
static_assert(offsetof(RWeapon_GetEquippedWeaponModRank, WeaponModType) == 0x000000, "Member 'RWeapon_GetEquippedWeaponModRank::WeaponModType' has a wrong offset!");
static_assert(offsetof(RWeapon_GetEquippedWeaponModRank, ReturnValue) == 0x000004, "Member 'RWeapon_GetEquippedWeaponModRank::ReturnValue' has a wrong offset!");

// Function RGame.RGWeaponSkillTreeMutatorScript.OnPlayerEquippedWeapon
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon final
{
public:
	class ARWeapon*                               RWeapon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon) == 0x000008, "Wrong alignment on RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon");
static_assert(sizeof(RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon) == 0x000008, "Wrong size on RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon");
static_assert(offsetof(RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon, RWeapon) == 0x000000, "Member 'RGWeaponSkillTreeMutatorScript_OnPlayerEquippedWeapon::RWeapon' has a wrong offset!");

// Function RGame.RGWeaponSkillTreeMutatorScript.AddMutableWeaponFloatCoefficient
// 0x0008 (0x0008 - 0x0000)
struct RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient final
{
public:
	EFloatWeaponStat                              FloatWeaponStat;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient) == 0x000004, "Wrong alignment on RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient");
static_assert(sizeof(RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient) == 0x000008, "Wrong size on RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient");
static_assert(offsetof(RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient, FloatWeaponStat) == 0x000000, "Member 'RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient::FloatWeaponStat' has a wrong offset!");
static_assert(offsetof(RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient, Value) == 0x000004, "Member 'RGWeaponSkillTreeMutatorScript_AddMutableWeaponFloatCoefficient::Value' has a wrong offset!");

// Function RGame.RGWeaponSkillTreeMutatorScript.RemoveMutableWeaponFloatCoefficient
// 0x0001 (0x0001 - 0x0000)
struct RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient final
{
public:
	EFloatWeaponStat                              FloatWeaponStat;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient) == 0x000001, "Wrong alignment on RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient");
static_assert(sizeof(RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient) == 0x000001, "Wrong size on RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient");
static_assert(offsetof(RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient, FloatWeaponStat) == 0x000000, "Member 'RGWeaponSkillTreeMutatorScript_RemoveMutableWeaponFloatCoefficient::FloatWeaponStat' has a wrong offset!");

// Function RGame.RHealAltar.AddHealAltarSelectionForController
// 0x0010 (0x0010 - 0x0000)
struct RHealAltar_AddHealAltarSelectionForController final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsumed;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHealAltar_AddHealAltarSelectionForController) == 0x000008, "Wrong alignment on RHealAltar_AddHealAltarSelectionForController");
static_assert(sizeof(RHealAltar_AddHealAltarSelectionForController) == 0x000010, "Wrong size on RHealAltar_AddHealAltarSelectionForController");
static_assert(offsetof(RHealAltar_AddHealAltarSelectionForController, PlayerController) == 0x000000, "Member 'RHealAltar_AddHealAltarSelectionForController::PlayerController' has a wrong offset!");
static_assert(offsetof(RHealAltar_AddHealAltarSelectionForController, bConsumed) == 0x000008, "Member 'RHealAltar_AddHealAltarSelectionForController::bConsumed' has a wrong offset!");

// Function RGame.RHealthComponent.ApplyHealthDamage
// 0x0120 (0x0120 - 0x0000)
struct RHealthComponent_ApplyHealthDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSources;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0038(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCritical;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageCausedBy;                                    // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKilled;                                      // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageClientPrediction;                           // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRLightningDamageCombatEventData       LightningDamageCombatEventData;                    // 0x0070(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDamageModifiers;                            // 0x0088(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AvatarActor;                                       // 0x0090(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLastDamageEventData                   ReturnValue;                                       // 0x0098(0x0088)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_ApplyHealthDamage) == 0x000008, "Wrong alignment on RHealthComponent_ApplyHealthDamage");
static_assert(sizeof(RHealthComponent_ApplyHealthDamage) == 0x000120, "Wrong size on RHealthComponent_ApplyHealthDamage");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, DamagedActor) == 0x000000, "Member 'RHealthComponent_ApplyHealthDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, Instigator) == 0x000008, "Member 'RHealthComponent_ApplyHealthDamage::Instigator' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, DamageCauser) == 0x000010, "Member 'RHealthComponent_ApplyHealthDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, Damage) == 0x000018, "Member 'RHealthComponent_ApplyHealthDamage::Damage' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, DamageSources) == 0x00001C, "Member 'RHealthComponent_ApplyHealthDamage::DamageSources' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, HitLocation) == 0x000020, "Member 'RHealthComponent_ApplyHealthDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, ShotFromDirection) == 0x000038, "Member 'RHealthComponent_ApplyHealthDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, HitComponent) == 0x000050, "Member 'RHealthComponent_ApplyHealthDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, bWasCritical) == 0x000058, "Member 'RHealthComponent_ApplyHealthDamage::bWasCritical' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, DamageCausedBy) == 0x000060, "Member 'RHealthComponent_ApplyHealthDamage::DamageCausedBy' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, bForceKilled) == 0x000068, "Member 'RHealthComponent_ApplyHealthDamage::bForceKilled' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, bDamageClientPrediction) == 0x000069, "Member 'RHealthComponent_ApplyHealthDamage::bDamageClientPrediction' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, LightningDamageCombatEventData) == 0x000070, "Member 'RHealthComponent_ApplyHealthDamage::LightningDamageCombatEventData' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, bIgnoreDamageModifiers) == 0x000088, "Member 'RHealthComponent_ApplyHealthDamage::bIgnoreDamageModifiers' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, AvatarActor) == 0x000090, "Member 'RHealthComponent_ApplyHealthDamage::AvatarActor' has a wrong offset!");
static_assert(offsetof(RHealthComponent_ApplyHealthDamage, ReturnValue) == 0x000098, "Member 'RHealthComponent_ApplyHealthDamage::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.CanTakeDamageFromInstigator
// 0x0018 (0x0018 - 0x0000)
struct RHealthComponent_CanTakeDamageFromInstigator final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamagedActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHealthComponent_CanTakeDamageFromInstigator) == 0x000008, "Wrong alignment on RHealthComponent_CanTakeDamageFromInstigator");
static_assert(sizeof(RHealthComponent_CanTakeDamageFromInstigator) == 0x000018, "Wrong size on RHealthComponent_CanTakeDamageFromInstigator");
static_assert(offsetof(RHealthComponent_CanTakeDamageFromInstigator, Instigator) == 0x000000, "Member 'RHealthComponent_CanTakeDamageFromInstigator::Instigator' has a wrong offset!");
static_assert(offsetof(RHealthComponent_CanTakeDamageFromInstigator, DamagedActor) == 0x000008, "Member 'RHealthComponent_CanTakeDamageFromInstigator::DamagedActor' has a wrong offset!");
static_assert(offsetof(RHealthComponent_CanTakeDamageFromInstigator, ReturnValue) == 0x000010, "Member 'RHealthComponent_CanTakeDamageFromInstigator::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetHealthComponent
// 0x0010 (0x0010 - 0x0000)
struct RHealthComponent_GetHealthComponent final
{
public:
	const class AActor*                           OwningActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHealthComponent*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetHealthComponent) == 0x000008, "Wrong alignment on RHealthComponent_GetHealthComponent");
static_assert(sizeof(RHealthComponent_GetHealthComponent) == 0x000010, "Wrong size on RHealthComponent_GetHealthComponent");
static_assert(offsetof(RHealthComponent_GetHealthComponent, OwningActor) == 0x000000, "Member 'RHealthComponent_GetHealthComponent::OwningActor' has a wrong offset!");
static_assert(offsetof(RHealthComponent_GetHealthComponent, ReturnValue) == 0x000008, "Member 'RHealthComponent_GetHealthComponent::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.HealActor
// 0x0020 (0x0020 - 0x0000)
struct RHealthComponent_HealActor final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToHeal;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealType                                     HealType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHealIfDead;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHealthComponent_HealActor) == 0x000008, "Wrong alignment on RHealthComponent_HealActor");
static_assert(sizeof(RHealthComponent_HealActor) == 0x000020, "Wrong size on RHealthComponent_HealActor");
static_assert(offsetof(RHealthComponent_HealActor, Instigator) == 0x000000, "Member 'RHealthComponent_HealActor::Instigator' has a wrong offset!");
static_assert(offsetof(RHealthComponent_HealActor, ActorToHeal) == 0x000008, "Member 'RHealthComponent_HealActor::ActorToHeal' has a wrong offset!");
static_assert(offsetof(RHealthComponent_HealActor, HealType) == 0x000010, "Member 'RHealthComponent_HealActor::HealType' has a wrong offset!");
static_assert(offsetof(RHealthComponent_HealActor, Value) == 0x000014, "Member 'RHealthComponent_HealActor::Value' has a wrong offset!");
static_assert(offsetof(RHealthComponent_HealActor, bHealIfDead) == 0x000018, "Member 'RHealthComponent_HealActor::bHealIfDead' has a wrong offset!");

// Function RGame.RHealthComponent.KillActor
// 0x0008 (0x0008 - 0x0000)
struct RHealthComponent_KillActor final
{
public:
	class AActor*                                 ActorToKill;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_KillActor) == 0x000008, "Wrong alignment on RHealthComponent_KillActor");
static_assert(sizeof(RHealthComponent_KillActor) == 0x000008, "Wrong size on RHealthComponent_KillActor");
static_assert(offsetof(RHealthComponent_KillActor, ActorToKill) == 0x000000, "Member 'RHealthComponent_KillActor::ActorToKill' has a wrong offset!");

// Function RGame.RHealthComponent.AddDamageSourceMaskImmunity
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_AddDamageSourceMaskImmunity final
{
public:
	int32                                         NewImmunity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_AddDamageSourceMaskImmunity) == 0x000004, "Wrong alignment on RHealthComponent_AddDamageSourceMaskImmunity");
static_assert(sizeof(RHealthComponent_AddDamageSourceMaskImmunity) == 0x000004, "Wrong size on RHealthComponent_AddDamageSourceMaskImmunity");
static_assert(offsetof(RHealthComponent_AddDamageSourceMaskImmunity, NewImmunity) == 0x000000, "Member 'RHealthComponent_AddDamageSourceMaskImmunity::NewImmunity' has a wrong offset!");

// Function RGame.RHealthComponent.GetDamageMultiplier
// 0x0128 (0x0128 - 0x0000)
struct RHealthComponent_GetDamageMultiplier final
{
public:
	struct FRMutableFloat                         ReturnValue;                                       // 0x0000(0x0128)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetDamageMultiplier) == 0x000008, "Wrong alignment on RHealthComponent_GetDamageMultiplier");
static_assert(sizeof(RHealthComponent_GetDamageMultiplier) == 0x000128, "Wrong size on RHealthComponent_GetDamageMultiplier");
static_assert(offsetof(RHealthComponent_GetDamageMultiplier, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetDamageMultiplier::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetIsDamaged
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetIsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetIsDamaged) == 0x000001, "Wrong alignment on RHealthComponent_GetIsDamaged");
static_assert(sizeof(RHealthComponent_GetIsDamaged) == 0x000001, "Wrong size on RHealthComponent_GetIsDamaged");
static_assert(offsetof(RHealthComponent_GetIsDamaged, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetIsDamaged::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetMaxArmor
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetMaxArmor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetMaxArmor) == 0x000004, "Wrong alignment on RHealthComponent_GetMaxArmor");
static_assert(sizeof(RHealthComponent_GetMaxArmor) == 0x000004, "Wrong size on RHealthComponent_GetMaxArmor");
static_assert(offsetof(RHealthComponent_GetMaxArmor, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetMaxArmor::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetMaxBarrier
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetMaxBarrier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetMaxBarrier) == 0x000004, "Wrong alignment on RHealthComponent_GetMaxBarrier");
static_assert(sizeof(RHealthComponent_GetMaxBarrier) == 0x000004, "Wrong size on RHealthComponent_GetMaxBarrier");
static_assert(offsetof(RHealthComponent_GetMaxBarrier, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetMaxBarrier::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetMaxHealth) == 0x000004, "Wrong alignment on RHealthComponent_GetMaxHealth");
static_assert(sizeof(RHealthComponent_GetMaxHealth) == 0x000004, "Wrong size on RHealthComponent_GetMaxHealth");
static_assert(offsetof(RHealthComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetMaxPlatings
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetMaxPlatings final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetMaxPlatings) == 0x000004, "Wrong alignment on RHealthComponent_GetMaxPlatings");
static_assert(sizeof(RHealthComponent_GetMaxPlatings) == 0x000004, "Wrong size on RHealthComponent_GetMaxPlatings");
static_assert(offsetof(RHealthComponent_GetMaxPlatings, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetMaxPlatings::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetMissingHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetMissingHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetMissingHealthPercentage) == 0x000004, "Wrong alignment on RHealthComponent_GetMissingHealthPercentage");
static_assert(sizeof(RHealthComponent_GetMissingHealthPercentage) == 0x000004, "Wrong size on RHealthComponent_GetMissingHealthPercentage");
static_assert(offsetof(RHealthComponent_GetMissingHealthPercentage, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetMissingHealthPercentage::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetRemainingBarrierTimer
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetRemainingBarrierTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetRemainingBarrierTimer) == 0x000004, "Wrong alignment on RHealthComponent_GetRemainingBarrierTimer");
static_assert(sizeof(RHealthComponent_GetRemainingBarrierTimer) == 0x000004, "Wrong size on RHealthComponent_GetRemainingBarrierTimer");
static_assert(offsetof(RHealthComponent_GetRemainingBarrierTimer, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetRemainingBarrierTimer::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.OnDamageCombatEvent
// 0x00C0 (0x00C0 - 0x0000)
struct RHealthComponent_OnDamageCombatEvent final
{
public:
	struct FDamageCombatEvent                     EventData;                                         // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnDamageCombatEvent) == 0x000008, "Wrong alignment on RHealthComponent_OnDamageCombatEvent");
static_assert(sizeof(RHealthComponent_OnDamageCombatEvent) == 0x0000C0, "Wrong size on RHealthComponent_OnDamageCombatEvent");
static_assert(offsetof(RHealthComponent_OnDamageCombatEvent, EventData) == 0x000000, "Member 'RHealthComponent_OnDamageCombatEvent::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.OnDamageCombatEventServerValidated
// 0x00C0 (0x00C0 - 0x0000)
struct RHealthComponent_OnDamageCombatEventServerValidated final
{
public:
	struct FDamageCombatEvent                     EventData;                                         // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnDamageCombatEventServerValidated) == 0x000008, "Wrong alignment on RHealthComponent_OnDamageCombatEventServerValidated");
static_assert(sizeof(RHealthComponent_OnDamageCombatEventServerValidated) == 0x0000C0, "Wrong size on RHealthComponent_OnDamageCombatEventServerValidated");
static_assert(offsetof(RHealthComponent_OnDamageCombatEventServerValidated, EventData) == 0x000000, "Member 'RHealthComponent_OnDamageCombatEventServerValidated::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.OnHealCombatEvent
// 0x0038 (0x0038 - 0x0000)
struct RHealthComponent_OnHealCombatEvent final
{
public:
	struct FHealCombatEvent                       EventData;                                         // 0x0000(0x0038)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnHealCombatEvent) == 0x000008, "Wrong alignment on RHealthComponent_OnHealCombatEvent");
static_assert(sizeof(RHealthComponent_OnHealCombatEvent) == 0x000038, "Wrong size on RHealthComponent_OnHealCombatEvent");
static_assert(offsetof(RHealthComponent_OnHealCombatEvent, EventData) == 0x000000, "Member 'RHealthComponent_OnHealCombatEvent::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.OnSetArmorCombatEvent
// 0x0028 (0x0028 - 0x0000)
struct RHealthComponent_OnSetArmorCombatEvent final
{
public:
	struct FSetArmorCombatEvent                   EventData;                                         // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnSetArmorCombatEvent) == 0x000008, "Wrong alignment on RHealthComponent_OnSetArmorCombatEvent");
static_assert(sizeof(RHealthComponent_OnSetArmorCombatEvent) == 0x000028, "Wrong size on RHealthComponent_OnSetArmorCombatEvent");
static_assert(offsetof(RHealthComponent_OnSetArmorCombatEvent, EventData) == 0x000000, "Member 'RHealthComponent_OnSetArmorCombatEvent::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.OnSetBarrierCombatEvent
// 0x0028 (0x0028 - 0x0000)
struct RHealthComponent_OnSetBarrierCombatEvent final
{
public:
	struct FSetBarrierCombatEvent                 EventData;                                         // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnSetBarrierCombatEvent) == 0x000008, "Wrong alignment on RHealthComponent_OnSetBarrierCombatEvent");
static_assert(sizeof(RHealthComponent_OnSetBarrierCombatEvent) == 0x000028, "Wrong size on RHealthComponent_OnSetBarrierCombatEvent");
static_assert(offsetof(RHealthComponent_OnSetBarrierCombatEvent, EventData) == 0x000000, "Member 'RHealthComponent_OnSetBarrierCombatEvent::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.OnSetHealthCombatEvent
// 0x0028 (0x0028 - 0x0000)
struct RHealthComponent_OnSetHealthCombatEvent final
{
public:
	struct FSetHealthCombatEvent                  EventData;                                         // 0x0000(0x0028)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_OnSetHealthCombatEvent) == 0x000008, "Wrong alignment on RHealthComponent_OnSetHealthCombatEvent");
static_assert(sizeof(RHealthComponent_OnSetHealthCombatEvent) == 0x000028, "Wrong size on RHealthComponent_OnSetHealthCombatEvent");
static_assert(offsetof(RHealthComponent_OnSetHealthCombatEvent, EventData) == 0x000000, "Member 'RHealthComponent_OnSetHealthCombatEvent::EventData' has a wrong offset!");

// Function RGame.RHealthComponent.PushStatusText_Multicast
// 0x0040 (0x0040 - 0x0000)
struct RHealthComponent_PushStatusText_Multicast final
{
public:
	class AController*                            Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHealthComponent*                      HealthComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0028(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	ERFloatingTextType                            Type;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipDelay;                                        // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHealthComponent_PushStatusText_Multicast) == 0x000008, "Wrong alignment on RHealthComponent_PushStatusText_Multicast");
static_assert(sizeof(RHealthComponent_PushStatusText_Multicast) == 0x000040, "Wrong size on RHealthComponent_PushStatusText_Multicast");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, Instigator) == 0x000000, "Member 'RHealthComponent_PushStatusText_Multicast::Instigator' has a wrong offset!");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, HealthComponent) == 0x000008, "Member 'RHealthComponent_PushStatusText_Multicast::HealthComponent' has a wrong offset!");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, Location) == 0x000010, "Member 'RHealthComponent_PushStatusText_Multicast::Location' has a wrong offset!");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, Text) == 0x000028, "Member 'RHealthComponent_PushStatusText_Multicast::Text' has a wrong offset!");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, Type) == 0x000038, "Member 'RHealthComponent_PushStatusText_Multicast::Type' has a wrong offset!");
static_assert(offsetof(RHealthComponent_PushStatusText_Multicast, bSkipDelay) == 0x000039, "Member 'RHealthComponent_PushStatusText_Multicast::bSkipDelay' has a wrong offset!");

// Function RGame.RHealthComponent.RemoveDamageSourceMaskImmunity
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_RemoveDamageSourceMaskImmunity final
{
public:
	int32                                         RemovedImmunity;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_RemoveDamageSourceMaskImmunity) == 0x000004, "Wrong alignment on RHealthComponent_RemoveDamageSourceMaskImmunity");
static_assert(sizeof(RHealthComponent_RemoveDamageSourceMaskImmunity) == 0x000004, "Wrong size on RHealthComponent_RemoveDamageSourceMaskImmunity");
static_assert(offsetof(RHealthComponent_RemoveDamageSourceMaskImmunity, RemovedImmunity) == 0x000000, "Member 'RHealthComponent_RemoveDamageSourceMaskImmunity::RemovedImmunity' has a wrong offset!");

// Function RGame.RHealthComponent.SetCurrentArmor
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_SetCurrentArmor final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetCurrentArmor) == 0x000004, "Wrong alignment on RHealthComponent_SetCurrentArmor");
static_assert(sizeof(RHealthComponent_SetCurrentArmor) == 0x000004, "Wrong size on RHealthComponent_SetCurrentArmor");
static_assert(offsetof(RHealthComponent_SetCurrentArmor, Value) == 0x000000, "Member 'RHealthComponent_SetCurrentArmor::Value' has a wrong offset!");

// Function RGame.RHealthComponent.SetCurrentBarrier
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_SetCurrentBarrier final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetCurrentBarrier) == 0x000004, "Wrong alignment on RHealthComponent_SetCurrentBarrier");
static_assert(sizeof(RHealthComponent_SetCurrentBarrier) == 0x000004, "Wrong size on RHealthComponent_SetCurrentBarrier");
static_assert(offsetof(RHealthComponent_SetCurrentBarrier, Value) == 0x000000, "Member 'RHealthComponent_SetCurrentBarrier::Value' has a wrong offset!");

// Function RGame.RHealthComponent.SetCurrentHealth
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_SetCurrentHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetCurrentHealth) == 0x000004, "Wrong alignment on RHealthComponent_SetCurrentHealth");
static_assert(sizeof(RHealthComponent_SetCurrentHealth) == 0x000004, "Wrong size on RHealthComponent_SetCurrentHealth");
static_assert(offsetof(RHealthComponent_SetCurrentHealth, Value) == 0x000000, "Member 'RHealthComponent_SetCurrentHealth::Value' has a wrong offset!");

// Function RGame.RHealthComponent.SetCurrentHealth_Server
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_SetCurrentHealth_Server final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetCurrentHealth_Server) == 0x000004, "Wrong alignment on RHealthComponent_SetCurrentHealth_Server");
static_assert(sizeof(RHealthComponent_SetCurrentHealth_Server) == 0x000004, "Wrong size on RHealthComponent_SetCurrentHealth_Server");
static_assert(offsetof(RHealthComponent_SetCurrentHealth_Server, Value) == 0x000000, "Member 'RHealthComponent_SetCurrentHealth_Server::Value' has a wrong offset!");

// Function RGame.RHealthComponent.SetDamageFlag
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_SetDamageFlag final
{
public:
	ERDamageFlag                                  NewDamageFlag;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetDamageFlag) == 0x000001, "Wrong alignment on RHealthComponent_SetDamageFlag");
static_assert(sizeof(RHealthComponent_SetDamageFlag) == 0x000001, "Wrong size on RHealthComponent_SetDamageFlag");
static_assert(offsetof(RHealthComponent_SetDamageFlag, NewDamageFlag) == 0x000000, "Member 'RHealthComponent_SetDamageFlag::NewDamageFlag' has a wrong offset!");

// Function RGame.RHealthComponent.SetInvulnerable
// 0x0010 (0x0010 - 0x0000)
struct RHealthComponent_SetInvulnerable final
{
public:
	bool                                          bNewInvulnerable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetInvulnerability;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHealthComponent_SetInvulnerable) == 0x000004, "Wrong alignment on RHealthComponent_SetInvulnerable");
static_assert(sizeof(RHealthComponent_SetInvulnerable) == 0x000010, "Wrong size on RHealthComponent_SetInvulnerable");
static_assert(offsetof(RHealthComponent_SetInvulnerable, bNewInvulnerable) == 0x000000, "Member 'RHealthComponent_SetInvulnerable::bNewInvulnerable' has a wrong offset!");
static_assert(offsetof(RHealthComponent_SetInvulnerable, Key) == 0x000004, "Member 'RHealthComponent_SetInvulnerable::Key' has a wrong offset!");
static_assert(offsetof(RHealthComponent_SetInvulnerable, ResetInvulnerability) == 0x00000C, "Member 'RHealthComponent_SetInvulnerable::ResetInvulnerability' has a wrong offset!");

// Function RGame.RHealthComponent.SetPreventBarrierOverkill
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_SetPreventBarrierOverkill final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_SetPreventBarrierOverkill) == 0x000001, "Wrong alignment on RHealthComponent_SetPreventBarrierOverkill");
static_assert(sizeof(RHealthComponent_SetPreventBarrierOverkill) == 0x000001, "Wrong size on RHealthComponent_SetPreventBarrierOverkill");
static_assert(offsetof(RHealthComponent_SetPreventBarrierOverkill, bNewValue) == 0x000000, "Member 'RHealthComponent_SetPreventBarrierOverkill::bNewValue' has a wrong offset!");

// Function RGame.RHealthComponent.StartBarrierTimer_Multicast
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_StartBarrierTimer_Multicast final
{
public:
	float                                         RemoveDelay;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_StartBarrierTimer_Multicast) == 0x000004, "Wrong alignment on RHealthComponent_StartBarrierTimer_Multicast");
static_assert(sizeof(RHealthComponent_StartBarrierTimer_Multicast) == 0x000004, "Wrong size on RHealthComponent_StartBarrierTimer_Multicast");
static_assert(offsetof(RHealthComponent_StartBarrierTimer_Multicast, RemoveDelay) == 0x000000, "Member 'RHealthComponent_StartBarrierTimer_Multicast::RemoveDelay' has a wrong offset!");

// Function RGame.RHealthComponent.GetCanNotBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetCanNotBeDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetCanNotBeDamaged) == 0x000001, "Wrong alignment on RHealthComponent_GetCanNotBeDamaged");
static_assert(sizeof(RHealthComponent_GetCanNotBeDamaged) == 0x000001, "Wrong size on RHealthComponent_GetCanNotBeDamaged");
static_assert(offsetof(RHealthComponent_GetCanNotBeDamaged, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetCanNotBeDamaged::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetCurrentBarrier
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetCurrentBarrier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetCurrentBarrier) == 0x000004, "Wrong alignment on RHealthComponent_GetCurrentBarrier");
static_assert(sizeof(RHealthComponent_GetCurrentBarrier) == 0x000004, "Wrong size on RHealthComponent_GetCurrentBarrier");
static_assert(offsetof(RHealthComponent_GetCurrentBarrier, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetCurrentBarrier::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetCurrentHealth
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetCurrentHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetCurrentHealth) == 0x000004, "Wrong alignment on RHealthComponent_GetCurrentHealth");
static_assert(sizeof(RHealthComponent_GetCurrentHealth) == 0x000004, "Wrong size on RHealthComponent_GetCurrentHealth");
static_assert(offsetof(RHealthComponent_GetCurrentHealth, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetCurrentHealth::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetCurrentPlatings
// 0x0004 (0x0004 - 0x0000)
struct RHealthComponent_GetCurrentPlatings final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetCurrentPlatings) == 0x000004, "Wrong alignment on RHealthComponent_GetCurrentPlatings");
static_assert(sizeof(RHealthComponent_GetCurrentPlatings) == 0x000004, "Wrong size on RHealthComponent_GetCurrentPlatings");
static_assert(offsetof(RHealthComponent_GetCurrentPlatings, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetCurrentPlatings::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetDamageFlag
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetDamageFlag final
{
public:
	ERDamageFlag                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetDamageFlag) == 0x000001, "Wrong alignment on RHealthComponent_GetDamageFlag");
static_assert(sizeof(RHealthComponent_GetDamageFlag) == 0x000001, "Wrong size on RHealthComponent_GetDamageFlag");
static_assert(offsetof(RHealthComponent_GetDamageFlag, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetDamageFlag::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetIgnoreExecutionerModifier
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetIgnoreExecutionerModifier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetIgnoreExecutionerModifier) == 0x000001, "Wrong alignment on RHealthComponent_GetIgnoreExecutionerModifier");
static_assert(sizeof(RHealthComponent_GetIgnoreExecutionerModifier) == 0x000001, "Wrong size on RHealthComponent_GetIgnoreExecutionerModifier");
static_assert(offsetof(RHealthComponent_GetIgnoreExecutionerModifier, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetIgnoreExecutionerModifier::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetInstigatorFromLastDamageEvent
// 0x0008 (0x0008 - 0x0000)
struct RHealthComponent_GetInstigatorFromLastDamageEvent final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetInstigatorFromLastDamageEvent) == 0x000008, "Wrong alignment on RHealthComponent_GetInstigatorFromLastDamageEvent");
static_assert(sizeof(RHealthComponent_GetInstigatorFromLastDamageEvent) == 0x000008, "Wrong size on RHealthComponent_GetInstigatorFromLastDamageEvent");
static_assert(offsetof(RHealthComponent_GetInstigatorFromLastDamageEvent, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetInstigatorFromLastDamageEvent::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetInvulnerable
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetInvulnerable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetInvulnerable) == 0x000001, "Wrong alignment on RHealthComponent_GetInvulnerable");
static_assert(sizeof(RHealthComponent_GetInvulnerable) == 0x000001, "Wrong size on RHealthComponent_GetInvulnerable");
static_assert(offsetof(RHealthComponent_GetInvulnerable, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetInvulnerable::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetIsAlive
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetIsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetIsAlive) == 0x000001, "Wrong alignment on RHealthComponent_GetIsAlive");
static_assert(sizeof(RHealthComponent_GetIsAlive) == 0x000001, "Wrong size on RHealthComponent_GetIsAlive");
static_assert(offsetof(RHealthComponent_GetIsAlive, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetIsAlive::ReturnValue' has a wrong offset!");

// Function RGame.RHealthComponent.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct RHealthComponent_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHealthComponent_GetIsDead) == 0x000001, "Wrong alignment on RHealthComponent_GetIsDead");
static_assert(sizeof(RHealthComponent_GetIsDead) == 0x000001, "Wrong size on RHealthComponent_GetIsDead");
static_assert(offsetof(RHealthComponent_GetIsDead, ReturnValue) == 0x000000, "Member 'RHealthComponent_GetIsDead::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_CanInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RInteractableInterface_CanInteract) == 0x000008, "Wrong alignment on RInteractableInterface_CanInteract");
static_assert(sizeof(RInteractableInterface_CanInteract) == 0x000010, "Wrong size on RInteractableInterface_CanInteract");
static_assert(offsetof(RInteractableInterface_CanInteract, Controller) == 0x000000, "Member 'RInteractableInterface_CanInteract::Controller' has a wrong offset!");
static_assert(offsetof(RInteractableInterface_CanInteract, ReturnValue) == 0x000008, "Member 'RInteractableInterface_CanInteract::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.OnFocus
// 0x0008 (0x0008 - 0x0000)
struct RInteractableInterface_OnFocus final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_OnFocus) == 0x000008, "Wrong alignment on RInteractableInterface_OnFocus");
static_assert(sizeof(RInteractableInterface_OnFocus) == 0x000008, "Wrong size on RInteractableInterface_OnFocus");
static_assert(offsetof(RInteractableInterface_OnFocus, Controller) == 0x000000, "Member 'RInteractableInterface_OnFocus::Controller' has a wrong offset!");

// Function RGame.RInteractableInterface.OnFocusGone
// 0x0008 (0x0008 - 0x0000)
struct RInteractableInterface_OnFocusGone final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_OnFocusGone) == 0x000008, "Wrong alignment on RInteractableInterface_OnFocusGone");
static_assert(sizeof(RInteractableInterface_OnFocusGone) == 0x000008, "Wrong size on RInteractableInterface_OnFocusGone");
static_assert(offsetof(RInteractableInterface_OnFocusGone, Controller) == 0x000000, "Member 'RInteractableInterface_OnFocusGone::Controller' has a wrong offset!");

// Function RGame.RInteractableInterface.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct RInteractableInterface_OnInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_OnInteract) == 0x000008, "Wrong alignment on RInteractableInterface_OnInteract");
static_assert(sizeof(RInteractableInterface_OnInteract) == 0x000008, "Wrong size on RInteractableInterface_OnInteract");
static_assert(offsetof(RInteractableInterface_OnInteract, Controller) == 0x000000, "Member 'RInteractableInterface_OnInteract::Controller' has a wrong offset!");

// Function RGame.RInteractableInterface.ToggleInteractionIndicatorVisibility
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_ToggleInteractionIndicatorVisibility final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewVisible;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RInteractableInterface_ToggleInteractionIndicatorVisibility) == 0x000008, "Wrong alignment on RInteractableInterface_ToggleInteractionIndicatorVisibility");
static_assert(sizeof(RInteractableInterface_ToggleInteractionIndicatorVisibility) == 0x000010, "Wrong size on RInteractableInterface_ToggleInteractionIndicatorVisibility");
static_assert(offsetof(RInteractableInterface_ToggleInteractionIndicatorVisibility, InteractingActor) == 0x000000, "Member 'RInteractableInterface_ToggleInteractionIndicatorVisibility::InteractingActor' has a wrong offset!");
static_assert(offsetof(RInteractableInterface_ToggleInteractionIndicatorVisibility, NewVisible) == 0x000008, "Member 'RInteractableInterface_ToggleInteractionIndicatorVisibility::NewVisible' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableAlternativeDescription
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_GetInteractableAlternativeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableAlternativeDescription) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractableAlternativeDescription");
static_assert(sizeof(RInteractableInterface_GetInteractableAlternativeDescription) == 0x000010, "Wrong size on RInteractableInterface_GetInteractableAlternativeDescription");
static_assert(offsetof(RInteractableInterface_GetInteractableAlternativeDescription, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableAlternativeDescription::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableCost
// 0x0004 (0x0004 - 0x0000)
struct RInteractableInterface_GetInteractableCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableCost) == 0x000004, "Wrong alignment on RInteractableInterface_GetInteractableCost");
static_assert(sizeof(RInteractableInterface_GetInteractableCost) == 0x000004, "Wrong size on RInteractableInterface_GetInteractableCost");
static_assert(offsetof(RInteractableInterface_GetInteractableCost, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableCost::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableCostCurrencyType
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_GetInteractableCostCurrencyType final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableCostCurrencyType) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractableCostCurrencyType");
static_assert(sizeof(RInteractableInterface_GetInteractableCostCurrencyType) == 0x000010, "Wrong size on RInteractableInterface_GetInteractableCostCurrencyType");
static_assert(offsetof(RInteractableInterface_GetInteractableCostCurrencyType, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableCostCurrencyType::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableDescription
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_GetInteractableDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableDescription) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractableDescription");
static_assert(sizeof(RInteractableInterface_GetInteractableDescription) == 0x000010, "Wrong size on RInteractableInterface_GetInteractableDescription");
static_assert(offsetof(RInteractableInterface_GetInteractableDescription, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableDescription::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableName
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_GetInteractableName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableName) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractableName");
static_assert(sizeof(RInteractableInterface_GetInteractableName) == 0x000010, "Wrong size on RInteractableInterface_GetInteractableName");
static_assert(offsetof(RInteractableInterface_GetInteractableName, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableName::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractableSubHeader
// 0x0010 (0x0010 - 0x0000)
struct RInteractableInterface_GetInteractableSubHeader final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractableSubHeader) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractableSubHeader");
static_assert(sizeof(RInteractableInterface_GetInteractableSubHeader) == 0x000010, "Wrong size on RInteractableInterface_GetInteractableSubHeader");
static_assert(offsetof(RInteractableInterface_GetInteractableSubHeader, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractableSubHeader::ReturnValue' has a wrong offset!");

// Function RGame.RInteractableInterface.GetInteractionIndicatorWidget
// 0x0008 (0x0008 - 0x0000)
struct RInteractableInterface_GetInteractionIndicatorWidget final
{
public:
	class UWidgetComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RInteractableInterface_GetInteractionIndicatorWidget) == 0x000008, "Wrong alignment on RInteractableInterface_GetInteractionIndicatorWidget");
static_assert(sizeof(RInteractableInterface_GetInteractionIndicatorWidget) == 0x000008, "Wrong size on RInteractableInterface_GetInteractionIndicatorWidget");
static_assert(offsetof(RInteractableInterface_GetInteractionIndicatorWidget, ReturnValue) == 0x000000, "Member 'RInteractableInterface_GetInteractionIndicatorWidget::ReturnValue' has a wrong offset!");

// Function RGame.RKillPlayerVolume.OnActorEnterArea
// 0x0008 (0x0008 - 0x0000)
struct RKillPlayerVolume_OnActorEnterArea final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RKillPlayerVolume_OnActorEnterArea) == 0x000008, "Wrong alignment on RKillPlayerVolume_OnActorEnterArea");
static_assert(sizeof(RKillPlayerVolume_OnActorEnterArea) == 0x000008, "Wrong size on RKillPlayerVolume_OnActorEnterArea");
static_assert(offsetof(RKillPlayerVolume_OnActorEnterArea, OtherActor) == 0x000000, "Member 'RKillPlayerVolume_OnActorEnterArea::OtherActor' has a wrong offset!");

// Function RGame.RLevelGenerationInterface.ShouldClearFromScene
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerationInterface_ShouldClearFromScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerationInterface_ShouldClearFromScene) == 0x000001, "Wrong alignment on RLevelGenerationInterface_ShouldClearFromScene");
static_assert(sizeof(RLevelGenerationInterface_ShouldClearFromScene) == 0x000001, "Wrong size on RLevelGenerationInterface_ShouldClearFromScene");
static_assert(offsetof(RLevelGenerationInterface_ShouldClearFromScene, ReturnValue) == 0x000000, "Member 'RLevelGenerationInterface_ShouldClearFromScene::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetLevelManager
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_GetLevelManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARLevelGenerator*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetLevelManager) == 0x000008, "Wrong alignment on RLevelGenerator_GetLevelManager");
static_assert(sizeof(RLevelGenerator_GetLevelManager) == 0x000010, "Wrong size on RLevelGenerator_GetLevelManager");
static_assert(offsetof(RLevelGenerator_GetLevelManager, WorldContextObject) == 0x000000, "Member 'RLevelGenerator_GetLevelManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_GetLevelManager, ReturnValue) == 0x000008, "Member 'RLevelGenerator_GetLevelManager::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCurrentLevelSettings
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_GetCurrentLevelSettings final
{
public:
	TArray<struct FLevelGenerationSettings>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCurrentLevelSettings) == 0x000008, "Wrong alignment on RLevelGenerator_GetCurrentLevelSettings");
static_assert(sizeof(RLevelGenerator_GetCurrentLevelSettings) == 0x000010, "Wrong size on RLevelGenerator_GetCurrentLevelSettings");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelSettings, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetCurrentLevelSettings::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCurrentLevelSettingsWithLevelAttributeTags
// 0x0030 (0x0030 - 0x0000)
struct RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags final
{
public:
	struct FGameplayTagContainer                  LevelTags;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FLevelGenerationSettings>       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags) == 0x000008, "Wrong alignment on RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags");
static_assert(sizeof(RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags) == 0x000030, "Wrong size on RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags, LevelTags) == 0x000000, "Member 'RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags::LevelTags' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags, ReturnValue) == 0x000020, "Member 'RLevelGenerator_GetCurrentLevelSettingsWithLevelAttributeTags::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCurrentLevelSettingsWithLevelTags
// 0x0030 (0x0030 - 0x0000)
struct RLevelGenerator_GetCurrentLevelSettingsWithLevelTags final
{
public:
	struct FGameplayTagContainer                  LevelTags;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FLevelGenerationSettings>       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCurrentLevelSettingsWithLevelTags) == 0x000008, "Wrong alignment on RLevelGenerator_GetCurrentLevelSettingsWithLevelTags");
static_assert(sizeof(RLevelGenerator_GetCurrentLevelSettingsWithLevelTags) == 0x000030, "Wrong size on RLevelGenerator_GetCurrentLevelSettingsWithLevelTags");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelSettingsWithLevelTags, LevelTags) == 0x000000, "Member 'RLevelGenerator_GetCurrentLevelSettingsWithLevelTags::LevelTags' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelSettingsWithLevelTags, ReturnValue) == 0x000020, "Member 'RLevelGenerator_GetCurrentLevelSettingsWithLevelTags::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCurrentLoadingLevelsCount
// 0x0004 (0x0004 - 0x0000)
struct RLevelGenerator_GetCurrentLoadingLevelsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCurrentLoadingLevelsCount) == 0x000004, "Wrong alignment on RLevelGenerator_GetCurrentLoadingLevelsCount");
static_assert(sizeof(RLevelGenerator_GetCurrentLoadingLevelsCount) == 0x000004, "Wrong size on RLevelGenerator_GetCurrentLoadingLevelsCount");
static_assert(offsetof(RLevelGenerator_GetCurrentLoadingLevelsCount, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetCurrentLoadingLevelsCount::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetEncounterRoomPositionOfActor
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_GetEncounterRoomPositionOfActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLevelGenerator_GetEncounterRoomPositionOfActor) == 0x000008, "Wrong alignment on RLevelGenerator_GetEncounterRoomPositionOfActor");
static_assert(sizeof(RLevelGenerator_GetEncounterRoomPositionOfActor) == 0x000010, "Wrong size on RLevelGenerator_GetEncounterRoomPositionOfActor");
static_assert(offsetof(RLevelGenerator_GetEncounterRoomPositionOfActor, Actor) == 0x000000, "Member 'RLevelGenerator_GetEncounterRoomPositionOfActor::Actor' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_GetEncounterRoomPositionOfActor, ReturnValue) == 0x000008, "Member 'RLevelGenerator_GetEncounterRoomPositionOfActor::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetIsInLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_GetIsInLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetIsInLoadingScreen) == 0x000001, "Wrong alignment on RLevelGenerator_GetIsInLoadingScreen");
static_assert(sizeof(RLevelGenerator_GetIsInLoadingScreen) == 0x000001, "Wrong size on RLevelGenerator_GetIsInLoadingScreen");
static_assert(offsetof(RLevelGenerator_GetIsInLoadingScreen, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetIsInLoadingScreen::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetLobbyElevatorSequenceActive
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_GetLobbyElevatorSequenceActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetLobbyElevatorSequenceActive) == 0x000001, "Wrong alignment on RLevelGenerator_GetLobbyElevatorSequenceActive");
static_assert(sizeof(RLevelGenerator_GetLobbyElevatorSequenceActive) == 0x000001, "Wrong size on RLevelGenerator_GetLobbyElevatorSequenceActive");
static_assert(offsetof(RLevelGenerator_GetLobbyElevatorSequenceActive, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetLobbyElevatorSequenceActive::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetUngluTeleportSequenceActive
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_GetUngluTeleportSequenceActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetUngluTeleportSequenceActive) == 0x000001, "Wrong alignment on RLevelGenerator_GetUngluTeleportSequenceActive");
static_assert(sizeof(RLevelGenerator_GetUngluTeleportSequenceActive) == 0x000001, "Wrong size on RLevelGenerator_GetUngluTeleportSequenceActive");
static_assert(offsetof(RLevelGenerator_GetUngluTeleportSequenceActive, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetUngluTeleportSequenceActive::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.IsActorInLastEncounterRoom
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_IsActorInLastEncounterRoom final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutEncounterRoomPosition;                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLevelGenerator_IsActorInLastEncounterRoom) == 0x000008, "Wrong alignment on RLevelGenerator_IsActorInLastEncounterRoom");
static_assert(sizeof(RLevelGenerator_IsActorInLastEncounterRoom) == 0x000010, "Wrong size on RLevelGenerator_IsActorInLastEncounterRoom");
static_assert(offsetof(RLevelGenerator_IsActorInLastEncounterRoom, Actor) == 0x000000, "Member 'RLevelGenerator_IsActorInLastEncounterRoom::Actor' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_IsActorInLastEncounterRoom, OutEncounterRoomPosition) == 0x000008, "Member 'RLevelGenerator_IsActorInLastEncounterRoom::OutEncounterRoomPosition' has a wrong offset!");
static_assert(offsetof(RLevelGenerator_IsActorInLastEncounterRoom, ReturnValue) == 0x00000C, "Member 'RLevelGenerator_IsActorInLastEncounterRoom::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.LoadLevelInstance
// 0x01B0 (0x01B0 - 0x0000)
struct RLevelGenerator_LoadLevelInstance final
{
public:
	struct FLevelGenerationSettings               LevelGenerationSettings;                           // 0x0000(0x01B0)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_LoadLevelInstance) == 0x000010, "Wrong alignment on RLevelGenerator_LoadLevelInstance");
static_assert(sizeof(RLevelGenerator_LoadLevelInstance) == 0x0001B0, "Wrong size on RLevelGenerator_LoadLevelInstance");
static_assert(offsetof(RLevelGenerator_LoadLevelInstance, LevelGenerationSettings) == 0x000000, "Member 'RLevelGenerator_LoadLevelInstance::LevelGenerationSettings' has a wrong offset!");

// Function RGame.RLevelGenerator.PruneEventRoomChests
// 0x0008 (0x0008 - 0x0000)
struct RLevelGenerator_PruneEventRoomChests final
{
public:
	class AActor*                                 LastCreatedChest;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_PruneEventRoomChests) == 0x000008, "Wrong alignment on RLevelGenerator_PruneEventRoomChests");
static_assert(sizeof(RLevelGenerator_PruneEventRoomChests) == 0x000008, "Wrong size on RLevelGenerator_PruneEventRoomChests");
static_assert(offsetof(RLevelGenerator_PruneEventRoomChests, LastCreatedChest) == 0x000000, "Member 'RLevelGenerator_PruneEventRoomChests::LastCreatedChest' has a wrong offset!");

// Function RGame.RLevelGenerator.PruneNodeChoiceChests
// 0x0008 (0x0008 - 0x0000)
struct RLevelGenerator_PruneNodeChoiceChests final
{
public:
	class AActor*                                 LastCreatedChest;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_PruneNodeChoiceChests) == 0x000008, "Wrong alignment on RLevelGenerator_PruneNodeChoiceChests");
static_assert(sizeof(RLevelGenerator_PruneNodeChoiceChests) == 0x000008, "Wrong size on RLevelGenerator_PruneNodeChoiceChests");
static_assert(offsetof(RLevelGenerator_PruneNodeChoiceChests, LastCreatedChest) == 0x000000, "Member 'RLevelGenerator_PruneNodeChoiceChests::LastCreatedChest' has a wrong offset!");

// Function RGame.RLevelGenerator.RegisterPersistentActor
// 0x0008 (0x0008 - 0x0000)
struct RLevelGenerator_RegisterPersistentActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_RegisterPersistentActor) == 0x000008, "Wrong alignment on RLevelGenerator_RegisterPersistentActor");
static_assert(sizeof(RLevelGenerator_RegisterPersistentActor) == 0x000008, "Wrong size on RLevelGenerator_RegisterPersistentActor");
static_assert(offsetof(RLevelGenerator_RegisterPersistentActor, Actor) == 0x000000, "Member 'RLevelGenerator_RegisterPersistentActor::Actor' has a wrong offset!");

// Function RGame.RLevelGenerator.RegisterPersistentActorIfReplicated
// 0x0008 (0x0008 - 0x0000)
struct RLevelGenerator_RegisterPersistentActorIfReplicated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_RegisterPersistentActorIfReplicated) == 0x000008, "Wrong alignment on RLevelGenerator_RegisterPersistentActorIfReplicated");
static_assert(sizeof(RLevelGenerator_RegisterPersistentActorIfReplicated) == 0x000008, "Wrong size on RLevelGenerator_RegisterPersistentActorIfReplicated");
static_assert(offsetof(RLevelGenerator_RegisterPersistentActorIfReplicated, Actor) == 0x000000, "Member 'RLevelGenerator_RegisterPersistentActorIfReplicated::Actor' has a wrong offset!");

// Function RGame.RLevelGenerator.SetLobbyElevatorSequenceActive
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_SetLobbyElevatorSequenceActive final
{
public:
	bool                                          NewLobbyElevatorSequenceActive;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_SetLobbyElevatorSequenceActive) == 0x000001, "Wrong alignment on RLevelGenerator_SetLobbyElevatorSequenceActive");
static_assert(sizeof(RLevelGenerator_SetLobbyElevatorSequenceActive) == 0x000001, "Wrong size on RLevelGenerator_SetLobbyElevatorSequenceActive");
static_assert(offsetof(RLevelGenerator_SetLobbyElevatorSequenceActive, NewLobbyElevatorSequenceActive) == 0x000000, "Member 'RLevelGenerator_SetLobbyElevatorSequenceActive::NewLobbyElevatorSequenceActive' has a wrong offset!");

// Function RGame.RLevelGenerator.SetUngluTeleportSequenceActive
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_SetUngluTeleportSequenceActive final
{
public:
	bool                                          NewUngluTeleportSequenceActive;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_SetUngluTeleportSequenceActive) == 0x000001, "Wrong alignment on RLevelGenerator_SetUngluTeleportSequenceActive");
static_assert(sizeof(RLevelGenerator_SetUngluTeleportSequenceActive) == 0x000001, "Wrong size on RLevelGenerator_SetUngluTeleportSequenceActive");
static_assert(offsetof(RLevelGenerator_SetUngluTeleportSequenceActive, NewUngluTeleportSequenceActive) == 0x000000, "Member 'RLevelGenerator_SetUngluTeleportSequenceActive::NewUngluTeleportSequenceActive' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCameFromMainMenu
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_GetCameFromMainMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCameFromMainMenu) == 0x000001, "Wrong alignment on RLevelGenerator_GetCameFromMainMenu");
static_assert(sizeof(RLevelGenerator_GetCameFromMainMenu) == 0x000001, "Wrong size on RLevelGenerator_GetCameFromMainMenu");
static_assert(offsetof(RLevelGenerator_GetCameFromMainMenu, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetCameFromMainMenu::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCameFromTutorial
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_GetCameFromTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCameFromTutorial) == 0x000001, "Wrong alignment on RLevelGenerator_GetCameFromTutorial");
static_assert(sizeof(RLevelGenerator_GetCameFromTutorial) == 0x000001, "Wrong size on RLevelGenerator_GetCameFromTutorial");
static_assert(offsetof(RLevelGenerator_GetCameFromTutorial, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetCameFromTutorial::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetCurrentLevelIds
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_GetCurrentLevelIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetCurrentLevelIds) == 0x000008, "Wrong alignment on RLevelGenerator_GetCurrentLevelIds");
static_assert(sizeof(RLevelGenerator_GetCurrentLevelIds) == 0x000010, "Wrong size on RLevelGenerator_GetCurrentLevelIds");
static_assert(offsetof(RLevelGenerator_GetCurrentLevelIds, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetCurrentLevelIds::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.GetLastLevelIds
// 0x0010 (0x0010 - 0x0000)
struct RLevelGenerator_GetLastLevelIds final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_GetLastLevelIds) == 0x000008, "Wrong alignment on RLevelGenerator_GetLastLevelIds");
static_assert(sizeof(RLevelGenerator_GetLastLevelIds) == 0x000010, "Wrong size on RLevelGenerator_GetLastLevelIds");
static_assert(offsetof(RLevelGenerator_GetLastLevelIds, ReturnValue) == 0x000000, "Member 'RLevelGenerator_GetLastLevelIds::ReturnValue' has a wrong offset!");

// Function RGame.RLevelGenerator.ShouldToggleLevelVisibilities
// 0x0001 (0x0001 - 0x0000)
struct RLevelGenerator_ShouldToggleLevelVisibilities final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLevelGenerator_ShouldToggleLevelVisibilities) == 0x000001, "Wrong alignment on RLevelGenerator_ShouldToggleLevelVisibilities");
static_assert(sizeof(RLevelGenerator_ShouldToggleLevelVisibilities) == 0x000001, "Wrong size on RLevelGenerator_ShouldToggleLevelVisibilities");
static_assert(offsetof(RLevelGenerator_ShouldToggleLevelVisibilities, ReturnValue) == 0x000000, "Member 'RLevelGenerator_ShouldToggleLevelVisibilities::ReturnValue' has a wrong offset!");

// Function RGame.RLootableActor.GetNumMutatorsSpawnedInCategory
// 0x0010 (0x0010 - 0x0000)
struct RLootableActor_GetNumMutatorsSpawnedInCategory final
{
public:
	struct FGameplayTag                           CategoryTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTriggers;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_GetNumMutatorsSpawnedInCategory) == 0x000004, "Wrong alignment on RLootableActor_GetNumMutatorsSpawnedInCategory");
static_assert(sizeof(RLootableActor_GetNumMutatorsSpawnedInCategory) == 0x000010, "Wrong size on RLootableActor_GetNumMutatorsSpawnedInCategory");
static_assert(offsetof(RLootableActor_GetNumMutatorsSpawnedInCategory, CategoryTag) == 0x000000, "Member 'RLootableActor_GetNumMutatorsSpawnedInCategory::CategoryTag' has a wrong offset!");
static_assert(offsetof(RLootableActor_GetNumMutatorsSpawnedInCategory, bIncludeTriggers) == 0x000008, "Member 'RLootableActor_GetNumMutatorsSpawnedInCategory::bIncludeTriggers' has a wrong offset!");
static_assert(offsetof(RLootableActor_GetNumMutatorsSpawnedInCategory, ReturnValue) == 0x00000C, "Member 'RLootableActor_GetNumMutatorsSpawnedInCategory::ReturnValue' has a wrong offset!");

// Function RGame.RLootableActor.GetSpawnedItems
// 0x0010 (0x0010 - 0x0000)
struct RLootableActor_GetSpawnedItems final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_GetSpawnedItems) == 0x000008, "Wrong alignment on RLootableActor_GetSpawnedItems");
static_assert(sizeof(RLootableActor_GetSpawnedItems) == 0x000010, "Wrong size on RLootableActor_GetSpawnedItems");
static_assert(offsetof(RLootableActor_GetSpawnedItems, ReturnValue) == 0x000000, "Member 'RLootableActor_GetSpawnedItems::ReturnValue' has a wrong offset!");

// Function RGame.RLootableActor.HasRequiredMutatorPA
// 0x0010 (0x0010 - 0x0000)
struct RLootableActor_HasRequiredMutatorPA final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLootableActor_HasRequiredMutatorPA) == 0x000008, "Wrong alignment on RLootableActor_HasRequiredMutatorPA");
static_assert(sizeof(RLootableActor_HasRequiredMutatorPA) == 0x000010, "Wrong size on RLootableActor_HasRequiredMutatorPA");
static_assert(offsetof(RLootableActor_HasRequiredMutatorPA, PlayerController) == 0x000000, "Member 'RLootableActor_HasRequiredMutatorPA::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootableActor_HasRequiredMutatorPA, ReturnValue) == 0x000008, "Member 'RLootableActor_HasRequiredMutatorPA::ReturnValue' has a wrong offset!");

// Function RGame.RLootableActor.SetAssociatedSpawnAreaSegment
// 0x0008 (0x0008 - 0x0000)
struct RLootableActor_SetAssociatedSpawnAreaSegment final
{
public:
	class AREnemySpawnAreaSegment*                Segment;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_SetAssociatedSpawnAreaSegment) == 0x000008, "Wrong alignment on RLootableActor_SetAssociatedSpawnAreaSegment");
static_assert(sizeof(RLootableActor_SetAssociatedSpawnAreaSegment) == 0x000008, "Wrong size on RLootableActor_SetAssociatedSpawnAreaSegment");
static_assert(offsetof(RLootableActor_SetAssociatedSpawnAreaSegment, Segment) == 0x000000, "Member 'RLootableActor_SetAssociatedSpawnAreaSegment::Segment' has a wrong offset!");

// Function RGame.RLootableActor.SetAvailableMutators
// 0x0001 (0x0001 - 0x0000)
struct RLootableActor_SetAvailableMutators final
{
public:
	EMutatorRarity                                MutatorRarity;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_SetAvailableMutators) == 0x000001, "Wrong alignment on RLootableActor_SetAvailableMutators");
static_assert(sizeof(RLootableActor_SetAvailableMutators) == 0x000001, "Wrong size on RLootableActor_SetAvailableMutators");
static_assert(offsetof(RLootableActor_SetAvailableMutators, MutatorRarity) == 0x000000, "Member 'RLootableActor_SetAvailableMutators::MutatorRarity' has a wrong offset!");

// Function RGame.RLootableActor.ShouldShowOnRadarBase
// 0x0001 (0x0001 - 0x0000)
struct RLootableActor_ShouldShowOnRadarBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_ShouldShowOnRadarBase) == 0x000001, "Wrong alignment on RLootableActor_ShouldShowOnRadarBase");
static_assert(sizeof(RLootableActor_ShouldShowOnRadarBase) == 0x000001, "Wrong size on RLootableActor_ShouldShowOnRadarBase");
static_assert(offsetof(RLootableActor_ShouldShowOnRadarBase, ReturnValue) == 0x000000, "Member 'RLootableActor_ShouldShowOnRadarBase::ReturnValue' has a wrong offset!");

// Function RGame.RLootableActor.IsAssociatedSpawnAreaSegmentCompleted
// 0x0001 (0x0001 - 0x0000)
struct RLootableActor_IsAssociatedSpawnAreaSegmentCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableActor_IsAssociatedSpawnAreaSegmentCompleted) == 0x000001, "Wrong alignment on RLootableActor_IsAssociatedSpawnAreaSegmentCompleted");
static_assert(sizeof(RLootableActor_IsAssociatedSpawnAreaSegmentCompleted) == 0x000001, "Wrong size on RLootableActor_IsAssociatedSpawnAreaSegmentCompleted");
static_assert(offsetof(RLootableActor_IsAssociatedSpawnAreaSegmentCompleted, ReturnValue) == 0x000000, "Member 'RLootableActor_IsAssociatedSpawnAreaSegmentCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RLootableContainer.AddGeneratedLootOptionForController
// 0x0020 (0x0020 - 0x0000)
struct RLootableContainer_AddGeneratedLootOptionForController final
{
public:
	TArray<struct FRLootSelectionOption>          LootOption;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasChosenLoot;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLootableContainer_AddGeneratedLootOptionForController) == 0x000008, "Wrong alignment on RLootableContainer_AddGeneratedLootOptionForController");
static_assert(sizeof(RLootableContainer_AddGeneratedLootOptionForController) == 0x000020, "Wrong size on RLootableContainer_AddGeneratedLootOptionForController");
static_assert(offsetof(RLootableContainer_AddGeneratedLootOptionForController, LootOption) == 0x000000, "Member 'RLootableContainer_AddGeneratedLootOptionForController::LootOption' has a wrong offset!");
static_assert(offsetof(RLootableContainer_AddGeneratedLootOptionForController, PlayerController) == 0x000010, "Member 'RLootableContainer_AddGeneratedLootOptionForController::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootableContainer_AddGeneratedLootOptionForController, bHasChosenLoot) == 0x000018, "Member 'RLootableContainer_AddGeneratedLootOptionForController::bHasChosenLoot' has a wrong offset!");

// Function RGame.RLootableContainer.AddSacrificeCostForController
// 0x0010 (0x0010 - 0x0000)
struct RLootableContainer_AddSacrificeCostForController final
{
public:
	int32                                         NewInteractionCost;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_AddSacrificeCostForController) == 0x000008, "Wrong alignment on RLootableContainer_AddSacrificeCostForController");
static_assert(sizeof(RLootableContainer_AddSacrificeCostForController) == 0x000010, "Wrong size on RLootableContainer_AddSacrificeCostForController");
static_assert(offsetof(RLootableContainer_AddSacrificeCostForController, NewInteractionCost) == 0x000000, "Member 'RLootableContainer_AddSacrificeCostForController::NewInteractionCost' has a wrong offset!");
static_assert(offsetof(RLootableContainer_AddSacrificeCostForController, PlayerController) == 0x000008, "Member 'RLootableContainer_AddSacrificeCostForController::PlayerController' has a wrong offset!");

// Function RGame.RLootableContainer.AddWishingWellCostForController
// 0x0010 (0x0010 - 0x0000)
struct RLootableContainer_AddWishingWellCostForController final
{
public:
	int32                                         NewInteractionCost;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UsesLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_AddWishingWellCostForController) == 0x000008, "Wrong alignment on RLootableContainer_AddWishingWellCostForController");
static_assert(sizeof(RLootableContainer_AddWishingWellCostForController) == 0x000010, "Wrong size on RLootableContainer_AddWishingWellCostForController");
static_assert(offsetof(RLootableContainer_AddWishingWellCostForController, NewInteractionCost) == 0x000000, "Member 'RLootableContainer_AddWishingWellCostForController::NewInteractionCost' has a wrong offset!");
static_assert(offsetof(RLootableContainer_AddWishingWellCostForController, UsesLeft) == 0x000004, "Member 'RLootableContainer_AddWishingWellCostForController::UsesLeft' has a wrong offset!");
static_assert(offsetof(RLootableContainer_AddWishingWellCostForController, PlayerController) == 0x000008, "Member 'RLootableContainer_AddWishingWellCostForController::PlayerController' has a wrong offset!");

// Function RGame.RLootableContainer.OnRewardsHasBeenSpawned
// 0x0008 (0x0008 - 0x0000)
struct RLootableContainer_OnRewardsHasBeenSpawned final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_OnRewardsHasBeenSpawned) == 0x000008, "Wrong alignment on RLootableContainer_OnRewardsHasBeenSpawned");
static_assert(sizeof(RLootableContainer_OnRewardsHasBeenSpawned) == 0x000008, "Wrong size on RLootableContainer_OnRewardsHasBeenSpawned");
static_assert(offsetof(RLootableContainer_OnRewardsHasBeenSpawned, PlayerController) == 0x000000, "Member 'RLootableContainer_OnRewardsHasBeenSpawned::PlayerController' has a wrong offset!");

// Function RGame.RLootableContainer.OnSpawnedItemPickedUp
// 0x0018 (0x0018 - 0x0000)
struct RLootableContainer_OnSpawnedItemPickedUp final
{
public:
	class ARPickupableItem*                       PickedUpItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PickupCost;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_OnSpawnedItemPickedUp) == 0x000008, "Wrong alignment on RLootableContainer_OnSpawnedItemPickedUp");
static_assert(sizeof(RLootableContainer_OnSpawnedItemPickedUp) == 0x000018, "Wrong size on RLootableContainer_OnSpawnedItemPickedUp");
static_assert(offsetof(RLootableContainer_OnSpawnedItemPickedUp, PickedUpItem) == 0x000000, "Member 'RLootableContainer_OnSpawnedItemPickedUp::PickedUpItem' has a wrong offset!");
static_assert(offsetof(RLootableContainer_OnSpawnedItemPickedUp, PickupCost) == 0x000008, "Member 'RLootableContainer_OnSpawnedItemPickedUp::PickupCost' has a wrong offset!");
static_assert(offsetof(RLootableContainer_OnSpawnedItemPickedUp, PlayerController) == 0x000010, "Member 'RLootableContainer_OnSpawnedItemPickedUp::PlayerController' has a wrong offset!");

// Function RGame.RLootableContainer.OnSpawnTrigBoxCompEntered
// 0x0008 (0x0008 - 0x0000)
struct RLootableContainer_OnSpawnTrigBoxCompEntered final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_OnSpawnTrigBoxCompEntered) == 0x000008, "Wrong alignment on RLootableContainer_OnSpawnTrigBoxCompEntered");
static_assert(sizeof(RLootableContainer_OnSpawnTrigBoxCompEntered) == 0x000008, "Wrong size on RLootableContainer_OnSpawnTrigBoxCompEntered");
static_assert(offsetof(RLootableContainer_OnSpawnTrigBoxCompEntered, OtherActor) == 0x000000, "Member 'RLootableContainer_OnSpawnTrigBoxCompEntered::OtherActor' has a wrong offset!");

// Function RGame.RLootableContainer.OnVoiceTrigBoxCompEntered
// 0x0008 (0x0008 - 0x0000)
struct RLootableContainer_OnVoiceTrigBoxCompEntered final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_OnVoiceTrigBoxCompEntered) == 0x000008, "Wrong alignment on RLootableContainer_OnVoiceTrigBoxCompEntered");
static_assert(sizeof(RLootableContainer_OnVoiceTrigBoxCompEntered) == 0x000008, "Wrong size on RLootableContainer_OnVoiceTrigBoxCompEntered");
static_assert(offsetof(RLootableContainer_OnVoiceTrigBoxCompEntered, OtherActor) == 0x000000, "Member 'RLootableContainer_OnVoiceTrigBoxCompEntered::OtherActor' has a wrong offset!");

// Function RGame.RLootableContainer.SetChestStateForController
// 0x0010 (0x0010 - 0x0000)
struct RLootableContainer_SetChestStateForController final
{
public:
	EChestState                                   NewChestState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_SetChestStateForController) == 0x000008, "Wrong alignment on RLootableContainer_SetChestStateForController");
static_assert(sizeof(RLootableContainer_SetChestStateForController) == 0x000010, "Wrong size on RLootableContainer_SetChestStateForController");
static_assert(offsetof(RLootableContainer_SetChestStateForController, NewChestState) == 0x000000, "Member 'RLootableContainer_SetChestStateForController::NewChestState' has a wrong offset!");
static_assert(offsetof(RLootableContainer_SetChestStateForController, PlayerController) == 0x000008, "Member 'RLootableContainer_SetChestStateForController::PlayerController' has a wrong offset!");

// Function RGame.RLootableContainer.SetRewardSpawnPosition
// 0x0018 (0x0018 - 0x0000)
struct RLootableContainer_SetRewardSpawnPosition final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_SetRewardSpawnPosition) == 0x000008, "Wrong alignment on RLootableContainer_SetRewardSpawnPosition");
static_assert(sizeof(RLootableContainer_SetRewardSpawnPosition) == 0x000018, "Wrong size on RLootableContainer_SetRewardSpawnPosition");
static_assert(offsetof(RLootableContainer_SetRewardSpawnPosition, Origin) == 0x000000, "Member 'RLootableContainer_SetRewardSpawnPosition::Origin' has a wrong offset!");

// Function RGame.RLootableContainer.SpawnReplicatedReward_Multicast
// 0x0098 (0x0098 - 0x0000)
struct RLootableContainer_SpawnReplicatedReward_Multicast final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRewardTableRow                        RewardRow;                                         // 0x0008(0x0078)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                SpawnPosition;                                     // 0x0080(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_SpawnReplicatedReward_Multicast) == 0x000008, "Wrong alignment on RLootableContainer_SpawnReplicatedReward_Multicast");
static_assert(sizeof(RLootableContainer_SpawnReplicatedReward_Multicast) == 0x000098, "Wrong size on RLootableContainer_SpawnReplicatedReward_Multicast");
static_assert(offsetof(RLootableContainer_SpawnReplicatedReward_Multicast, PlayerController) == 0x000000, "Member 'RLootableContainer_SpawnReplicatedReward_Multicast::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootableContainer_SpawnReplicatedReward_Multicast, RewardRow) == 0x000008, "Member 'RLootableContainer_SpawnReplicatedReward_Multicast::RewardRow' has a wrong offset!");
static_assert(offsetof(RLootableContainer_SpawnReplicatedReward_Multicast, SpawnPosition) == 0x000080, "Member 'RLootableContainer_SpawnReplicatedReward_Multicast::SpawnPosition' has a wrong offset!");

// Function RGame.RLootableContainer.SpawnRewards
// 0x0020 (0x0020 - 0x0000)
struct RLootableContainer_SpawnRewards final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootableContainer_SpawnRewards) == 0x000008, "Wrong alignment on RLootableContainer_SpawnRewards");
static_assert(sizeof(RLootableContainer_SpawnRewards) == 0x000020, "Wrong size on RLootableContainer_SpawnRewards");
static_assert(offsetof(RLootableContainer_SpawnRewards, PlayerController) == 0x000000, "Member 'RLootableContainer_SpawnRewards::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootableContainer_SpawnRewards, SpawnOffset) == 0x000008, "Member 'RLootableContainer_SpawnRewards::SpawnOffset' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddFloatCoefficient
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddFloatCoefficient final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddFloatCoefficient) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddFloatCoefficient");
static_assert(sizeof(RGlobalWeaponModifiers_AddFloatCoefficient) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddFloatCoefficient");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatCoefficient, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddFloatCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatCoefficient, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddFloatCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatCoefficient, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddFloatCoefficient::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddFloatPostAdditive
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddFloatPostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddFloatPostAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddFloatPostAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_AddFloatPostAdditive) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddFloatPostAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPostAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddFloatPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPostAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddFloatPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPostAdditive, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddFloatPostAdditive::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddFloatPreAdditive
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddFloatPreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddFloatPreAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddFloatPreAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_AddFloatPreAdditive) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddFloatPreAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPreAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddFloatPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPreAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddFloatPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddFloatPreAdditive, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddFloatPreAdditive::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddIntegerCoefficient
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddIntegerCoefficient final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddIntegerCoefficient) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddIntegerCoefficient");
static_assert(sizeof(RGlobalWeaponModifiers_AddIntegerCoefficient) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddIntegerCoefficient");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerCoefficient, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddIntegerCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerCoefficient, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddIntegerCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerCoefficient, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddIntegerCoefficient::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddIntegerPostAdditive
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddIntegerPostAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddIntegerPostAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddIntegerPostAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_AddIntegerPostAdditive) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddIntegerPostAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPostAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddIntegerPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPostAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddIntegerPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPostAdditive, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddIntegerPostAdditive::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.AddIntegerPreAdditive
// 0x0010 (0x0010 - 0x0000)
struct RGlobalWeaponModifiers_AddIntegerPreAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_AddIntegerPreAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_AddIntegerPreAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_AddIntegerPreAdditive) == 0x000010, "Wrong size on RGlobalWeaponModifiers_AddIntegerPreAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPreAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_AddIntegerPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPreAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_AddIntegerPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_AddIntegerPreAdditive, Value) == 0x00000C, "Member 'RGlobalWeaponModifiers_AddIntegerPreAdditive::Value' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.GetFloatTotalPositiveCoefficients
// 0x0008 (0x0008 - 0x0000)
struct RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients");
static_assert(sizeof(RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients) == 0x000008, "Wrong size on RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients, ReturnValue) == 0x000004, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositiveCoefficients::ReturnValue' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.GetFloatTotalPositivePostAdditive
// 0x0008 (0x0008 - 0x0000)
struct RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive) == 0x000008, "Wrong size on RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive, ReturnValue) == 0x000004, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositivePostAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.GetFloatTotalPositivePreAdditive
// 0x0008 (0x0008 - 0x0000)
struct RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive) == 0x000008, "Wrong size on RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive, ReturnValue) == 0x000004, "Member 'RGlobalWeaponModifiers_GetFloatTotalPositivePreAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveFloatCoefficient
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveFloatCoefficient final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveFloatCoefficient) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveFloatCoefficient");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveFloatCoefficient) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveFloatCoefficient");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatCoefficient, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveFloatCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatCoefficient, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveFloatCoefficient::Key' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveFloatPostAdditive
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveFloatPostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveFloatPostAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveFloatPostAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveFloatPostAdditive) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveFloatPostAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatPostAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveFloatPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatPostAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveFloatPostAdditive::Key' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveFloatPreAdditive
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveFloatPreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveFloatPreAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveFloatPreAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveFloatPreAdditive) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveFloatPreAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatPreAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveFloatPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveFloatPreAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveFloatPreAdditive::Key' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveIntegerCoefficient
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveIntegerCoefficient final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveIntegerCoefficient) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveIntegerCoefficient");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveIntegerCoefficient) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveIntegerCoefficient");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerCoefficient, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveIntegerCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerCoefficient, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveIntegerCoefficient::Key' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveIntegerPostAdditive
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveIntegerPostAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveIntegerPostAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveIntegerPostAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveIntegerPostAdditive) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveIntegerPostAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerPostAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveIntegerPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerPostAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveIntegerPostAdditive::Key' has a wrong offset!");

// Function RGame.RGlobalWeaponModifiers.RemoveIntegerPreAdditive
// 0x000C (0x000C - 0x0000)
struct RGlobalWeaponModifiers_RemoveIntegerPreAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RGlobalWeaponModifiers_RemoveIntegerPreAdditive) == 0x000004, "Wrong alignment on RGlobalWeaponModifiers_RemoveIntegerPreAdditive");
static_assert(sizeof(RGlobalWeaponModifiers_RemoveIntegerPreAdditive) == 0x00000C, "Wrong size on RGlobalWeaponModifiers_RemoveIntegerPreAdditive");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerPreAdditive, Stat) == 0x000000, "Member 'RGlobalWeaponModifiers_RemoveIntegerPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RGlobalWeaponModifiers_RemoveIntegerPreAdditive, Key) == 0x000004, "Member 'RGlobalWeaponModifiers_RemoveIntegerPreAdditive::Key' has a wrong offset!");

// Function RGame.RLootTableManager.CanMutatorBeDropped
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_CanMutatorBeDropped final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URMutatorPrimaryAsset*            Mutator;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLootTableManager_CanMutatorBeDropped) == 0x000008, "Wrong alignment on RLootTableManager_CanMutatorBeDropped");
static_assert(sizeof(RLootTableManager_CanMutatorBeDropped) == 0x000018, "Wrong size on RLootTableManager_CanMutatorBeDropped");
static_assert(offsetof(RLootTableManager_CanMutatorBeDropped, PlayerController) == 0x000000, "Member 'RLootTableManager_CanMutatorBeDropped::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_CanMutatorBeDropped, Mutator) == 0x000008, "Member 'RLootTableManager_CanMutatorBeDropped::Mutator' has a wrong offset!");
static_assert(offsetof(RLootTableManager_CanMutatorBeDropped, ReturnValue) == 0x000010, "Member 'RLootTableManager_CanMutatorBeDropped::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsBasedOnRewardTag
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterMutatorRowsBasedOnRewardTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           InRows;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsBasedOnRewardTag) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsBasedOnRewardTag");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsBasedOnRewardTag) == 0x000028, "Wrong size on RLootTableManager_FilterMutatorRowsBasedOnRewardTag");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsBasedOnRewardTag, InTag) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsBasedOnRewardTag::InTag' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsBasedOnRewardTag, InRows) == 0x000008, "Member 'RLootTableManager_FilterMutatorRowsBasedOnRewardTag::InRows' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsBasedOnRewardTag, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterMutatorRowsBasedOnRewardTag::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByFirstRandomAmount
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByFirstRandomAmount final
{
public:
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinAmount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmount;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByFirstRandomAmount");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount) == 0x000028, "Wrong size on RLootTableManager_FilterMutatorRowsByFirstRandomAmount");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount, UnfilteredMutators) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByFirstRandomAmount::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount, MinAmount) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByFirstRandomAmount::MinAmount' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount, MaxAmount) == 0x000014, "Member 'RLootTableManager_FilterMutatorRowsByFirstRandomAmount::MaxAmount' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByFirstRandomAmount, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterMutatorRowsByFirstRandomAmount::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByLootability
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByLootability final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByLootability) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByLootability");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByLootability) == 0x000028, "Wrong size on RLootTableManager_FilterMutatorRowsByLootability");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByLootability, PlayerController) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByLootability::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByLootability, UnfilteredMutators) == 0x000008, "Member 'RLootTableManager_FilterMutatorRowsByLootability::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByLootability, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterMutatorRowsByLootability::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByRarity
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByRarity final
{
public:
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EMutatorRarity                                Rarity;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByRarity) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByRarity");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByRarity) == 0x000028, "Wrong size on RLootTableManager_FilterMutatorRowsByRarity");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByRarity, UnfilteredMutators) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByRarity::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByRarity, Rarity) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByRarity::Rarity' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByRarity, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterMutatorRowsByRarity::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByTags
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByTags final
{
public:
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByTags) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByTags");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByTags) == 0x000020, "Wrong size on RLootTableManager_FilterMutatorRowsByTags");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByTags, UnfilteredMutators) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByTags::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByTags, ReturnValue) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByTags::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByTriggersAndPassivesWeighting
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting final
{
public:
	TArray<struct FMutatorLootTableRow>           InRows;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting) == 0x000028, "Wrong size on RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting, InRows) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting::InRows' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting, PlayerController) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterMutatorRowsByTriggersAndPassivesWeighting::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByWeightedRandomRarity
// 0x0070 (0x0070 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByWeightedRandomRarity final
{
public:
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EMutatorRarity, float>                   MutatorChances;                                    // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByWeightedRandomRarity) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByWeightedRandomRarity");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByWeightedRandomRarity) == 0x000070, "Wrong size on RLootTableManager_FilterMutatorRowsByWeightedRandomRarity");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByWeightedRandomRarity, UnfilteredMutators) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByWeightedRandomRarity::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByWeightedRandomRarity, MutatorChances) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByWeightedRandomRarity::MutatorChances' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByWeightedRandomRarity, ReturnValue) == 0x000060, "Member 'RLootTableManager_FilterMutatorRowsByWeightedRandomRarity::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterRewardCategoryRowsContainedInParentTag
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_FilterRewardCategoryRowsContainedInParentTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRewardTableRow>                InRows;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardTableRow>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterRewardCategoryRowsContainedInParentTag) == 0x000008, "Wrong alignment on RLootTableManager_FilterRewardCategoryRowsContainedInParentTag");
static_assert(sizeof(RLootTableManager_FilterRewardCategoryRowsContainedInParentTag) == 0x000028, "Wrong size on RLootTableManager_FilterRewardCategoryRowsContainedInParentTag");
static_assert(offsetof(RLootTableManager_FilterRewardCategoryRowsContainedInParentTag, InTag) == 0x000000, "Member 'RLootTableManager_FilterRewardCategoryRowsContainedInParentTag::InTag' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterRewardCategoryRowsContainedInParentTag, InRows) == 0x000008, "Member 'RLootTableManager_FilterRewardCategoryRowsContainedInParentTag::InRows' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterRewardCategoryRowsContainedInParentTag, ReturnValue) == 0x000018, "Member 'RLootTableManager_FilterRewardCategoryRowsContainedInParentTag::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetAbilitySpecificCharacterMutatorLootTableRows
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  AbilitySpecificMutatorPrimaryAsset;                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows) == 0x000008, "Wrong alignment on RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows");
static_assert(sizeof(RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows) == 0x000020, "Wrong size on RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows");
static_assert(offsetof(RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows, PlayerController) == 0x000000, "Member 'RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows, AbilitySpecificMutatorPrimaryAsset) == 0x000008, "Member 'RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows::AbilitySpecificMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetAbilitySpecificCharacterMutatorLootTableRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetAllLogbookBlessings
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetAllLogbookBlessings final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetAllLogbookBlessings) == 0x000008, "Wrong alignment on RLootTableManager_GetAllLogbookBlessings");
static_assert(sizeof(RLootTableManager_GetAllLogbookBlessings) == 0x000018, "Wrong size on RLootTableManager_GetAllLogbookBlessings");
static_assert(offsetof(RLootTableManager_GetAllLogbookBlessings, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetAllLogbookBlessings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetAllLogbookBlessings, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetAllLogbookBlessings::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetAllLogbookCharms
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetAllLogbookCharms final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetAllLogbookCharms) == 0x000008, "Wrong alignment on RLootTableManager_GetAllLogbookCharms");
static_assert(sizeof(RLootTableManager_GetAllLogbookCharms) == 0x000018, "Wrong size on RLootTableManager_GetAllLogbookCharms");
static_assert(offsetof(RLootTableManager_GetAllLogbookCharms, PlayerController) == 0x000000, "Member 'RLootTableManager_GetAllLogbookCharms::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetAllLogbookCharms, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetAllLogbookCharms::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetCharmLootSettings
// 0x0068 (0x0068 - 0x0000)
struct RLootTableManager_GetCharmLootSettings final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  CharmMutatorPA;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutatorLootSettings                   ReturnValue;                                       // 0x0010(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetCharmLootSettings) == 0x000008, "Wrong alignment on RLootTableManager_GetCharmLootSettings");
static_assert(sizeof(RLootTableManager_GetCharmLootSettings) == 0x000068, "Wrong size on RLootTableManager_GetCharmLootSettings");
static_assert(offsetof(RLootTableManager_GetCharmLootSettings, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetCharmLootSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetCharmLootSettings, CharmMutatorPA) == 0x000008, "Member 'RLootTableManager_GetCharmLootSettings::CharmMutatorPA' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetCharmLootSettings, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetCharmLootSettings::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootableOptionsByMutatorRewardCategory
// 0x0028 (0x0028 - 0x0000)
struct RLootTableManager_GetLootableOptionsByMutatorRewardCategory final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorRewardCategoryDataAsset*       RMutatorRewardCategoryDataAsset;                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumOptions;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilterByLootableActorBlacklist;                   // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRLootSelectionOption>          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory) == 0x000008, "Wrong alignment on RLootTableManager_GetLootableOptionsByMutatorRewardCategory");
static_assert(sizeof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory) == 0x000028, "Wrong size on RLootTableManager_GetLootableOptionsByMutatorRewardCategory");
static_assert(offsetof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetLootableOptionsByMutatorRewardCategory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory, RMutatorRewardCategoryDataAsset) == 0x000008, "Member 'RLootTableManager_GetLootableOptionsByMutatorRewardCategory::RMutatorRewardCategoryDataAsset' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory, NumOptions) == 0x000010, "Member 'RLootTableManager_GetLootableOptionsByMutatorRewardCategory::NumOptions' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory, bFilterByLootableActorBlacklist) == 0x000014, "Member 'RLootTableManager_GetLootableOptionsByMutatorRewardCategory::bFilterByLootableActorBlacklist' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableOptionsByMutatorRewardCategory, ReturnValue) == 0x000018, "Member 'RLootTableManager_GetLootableOptionsByMutatorRewardCategory::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootTableAbilityMutatorRows
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetLootTableAbilityMutatorRows final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootTableAbilityMutatorRows) == 0x000008, "Wrong alignment on RLootTableManager_GetLootTableAbilityMutatorRows");
static_assert(sizeof(RLootTableManager_GetLootTableAbilityMutatorRows) == 0x000018, "Wrong size on RLootTableManager_GetLootTableAbilityMutatorRows");
static_assert(offsetof(RLootTableManager_GetLootTableAbilityMutatorRows, PlayerController) == 0x000000, "Member 'RLootTableManager_GetLootTableAbilityMutatorRows::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootTableAbilityMutatorRows, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetLootTableAbilityMutatorRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootTableCharmRows
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_GetLootTableCharmRows final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMutatorRarity                                Rarity;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootTableCharmRows) == 0x000008, "Wrong alignment on RLootTableManager_GetLootTableCharmRows");
static_assert(sizeof(RLootTableManager_GetLootTableCharmRows) == 0x000020, "Wrong size on RLootTableManager_GetLootTableCharmRows");
static_assert(offsetof(RLootTableManager_GetLootTableCharmRows, PlayerController) == 0x000000, "Member 'RLootTableManager_GetLootTableCharmRows::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootTableCharmRows, Rarity) == 0x000008, "Member 'RLootTableManager_GetLootTableCharmRows::Rarity' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootTableCharmRows, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetLootTableCharmRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootTableManager
// 0x0010 (0x0010 - 0x0000)
struct RLootTableManager_GetLootTableManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARLootTableManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootTableManager) == 0x000008, "Wrong alignment on RLootTableManager_GetLootTableManager");
static_assert(sizeof(RLootTableManager_GetLootTableManager) == 0x000010, "Wrong size on RLootTableManager_GetLootTableManager");
static_assert(offsetof(RLootTableManager_GetLootTableManager, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetLootTableManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootTableManager, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetLootTableManager::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLoottableMutatorRowsWithStandardFilters
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_GetLoottableMutatorRowsWithStandardFilters final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMutatorRarity                                Rarity;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLoottableMutatorRowsWithStandardFilters) == 0x000008, "Wrong alignment on RLootTableManager_GetLoottableMutatorRowsWithStandardFilters");
static_assert(sizeof(RLootTableManager_GetLoottableMutatorRowsWithStandardFilters) == 0x000020, "Wrong size on RLootTableManager_GetLoottableMutatorRowsWithStandardFilters");
static_assert(offsetof(RLootTableManager_GetLoottableMutatorRowsWithStandardFilters, PlayerController) == 0x000000, "Member 'RLootTableManager_GetLoottableMutatorRowsWithStandardFilters::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLoottableMutatorRowsWithStandardFilters, Rarity) == 0x000008, "Member 'RLootTableManager_GetLoottableMutatorRowsWithStandardFilters::Rarity' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLoottableMutatorRowsWithStandardFilters, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetLoottableMutatorRowsWithStandardFilters::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorCategoryDataAssetByMutatorPrimaryAsset
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorRewardCategoryDataAsset*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset");
static_assert(sizeof(RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset) == 0x000018, "Wrong size on RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset");
static_assert(offsetof(RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset, RMutatorPrimaryAsset) == 0x000008, "Member 'RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetMutatorCategoryDataAssetByMutatorPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorPrimaryAssetsFromRows
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_GetMutatorPrimaryAssetsFromRows final
{
public:
	TArray<struct FMutatorLootTableRow>           MutatorRows;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorPrimaryAssetsFromRows) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorPrimaryAssetsFromRows");
static_assert(sizeof(RLootTableManager_GetMutatorPrimaryAssetsFromRows) == 0x000020, "Wrong size on RLootTableManager_GetMutatorPrimaryAssetsFromRows");
static_assert(offsetof(RLootTableManager_GetMutatorPrimaryAssetsFromRows, MutatorRows) == 0x000000, "Member 'RLootTableManager_GetMutatorPrimaryAssetsFromRows::MutatorRows' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorPrimaryAssetsFromRows, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetMutatorPrimaryAssetsFromRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorRewardCategoryDataAssets
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetMutatorRewardCategoryDataAssets final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URMutatorRewardCategoryDataAsset*> ReturnValue;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorRewardCategoryDataAssets) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorRewardCategoryDataAssets");
static_assert(sizeof(RLootTableManager_GetMutatorRewardCategoryDataAssets) == 0x000018, "Wrong size on RLootTableManager_GetMutatorRewardCategoryDataAssets");
static_assert(offsetof(RLootTableManager_GetMutatorRewardCategoryDataAssets, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetMutatorRewardCategoryDataAssets::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorRewardCategoryDataAssets, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetMutatorRewardCategoryDataAssets::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorRewardCategoryDataAssetsByTags
// 0x0038 (0x0038 - 0x0000)
struct RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InTags;                                            // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class URMutatorRewardCategoryDataAsset*> ReturnValue;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags");
static_assert(sizeof(RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags) == 0x000038, "Wrong size on RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags");
static_assert(offsetof(RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags, InTags) == 0x000008, "Member 'RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags::InTags' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags, ReturnValue) == 0x000028, "Member 'RLootTableManager_GetMutatorRewardCategoryDataAssetsByTags::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetNumLootableMutatorsInCategory
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetNumLootableMutatorsInCategory final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CategoryTag;                                       // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeTriggers;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetNumLootableMutatorsInCategory) == 0x000008, "Wrong alignment on RLootTableManager_GetNumLootableMutatorsInCategory");
static_assert(sizeof(RLootTableManager_GetNumLootableMutatorsInCategory) == 0x000018, "Wrong size on RLootTableManager_GetNumLootableMutatorsInCategory");
static_assert(offsetof(RLootTableManager_GetNumLootableMutatorsInCategory, PlayerController) == 0x000000, "Member 'RLootTableManager_GetNumLootableMutatorsInCategory::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetNumLootableMutatorsInCategory, CategoryTag) == 0x000008, "Member 'RLootTableManager_GetNumLootableMutatorsInCategory::CategoryTag' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetNumLootableMutatorsInCategory, bIncludeTriggers) == 0x000010, "Member 'RLootTableManager_GetNumLootableMutatorsInCategory::bIncludeTriggers' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetNumLootableMutatorsInCategory, ReturnValue) == 0x000014, "Member 'RLootTableManager_GetNumLootableMutatorsInCategory::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetRankColor
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_GetRankColor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLootTableManager_GetRankColor) == 0x000008, "Wrong alignment on RLootTableManager_GetRankColor");
static_assert(sizeof(RLootTableManager_GetRankColor) == 0x000020, "Wrong size on RLootTableManager_GetRankColor");
static_assert(offsetof(RLootTableManager_GetRankColor, WorldContextObject) == 0x000000, "Member 'RLootTableManager_GetRankColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetRankColor, Rank) == 0x000008, "Member 'RLootTableManager_GetRankColor::Rank' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetRankColor, ReturnValue) == 0x00000C, "Member 'RLootTableManager_GetRankColor::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetUniqueRewardCategoriesFromRewardCategryoDataAssets
// 0x0030 (0x0030 - 0x0000)
struct RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets final
{
public:
	TArray<class URMutatorRewardCategoryDataAsset*> DataAssets;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets) == 0x000008, "Wrong alignment on RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets");
static_assert(sizeof(RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets) == 0x000030, "Wrong size on RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets");
static_assert(offsetof(RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets, DataAssets) == 0x000000, "Member 'RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets::DataAssets' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets, ReturnValue) == 0x000010, "Member 'RLootTableManager_GetUniqueRewardCategoriesFromRewardCategryoDataAssets::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetWeightedRarity
// 0x0058 (0x0058 - 0x0000)
struct RLootTableManager_GetWeightedRarity final
{
public:
	TMap<EMutatorRarity, float>                   MutatorChances;                                    // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	EMutatorRarity                                ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RLootTableManager_GetWeightedRarity) == 0x000008, "Wrong alignment on RLootTableManager_GetWeightedRarity");
static_assert(sizeof(RLootTableManager_GetWeightedRarity) == 0x000058, "Wrong size on RLootTableManager_GetWeightedRarity");
static_assert(offsetof(RLootTableManager_GetWeightedRarity, MutatorChances) == 0x000000, "Member 'RLootTableManager_GetWeightedRarity::MutatorChances' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetWeightedRarity, ReturnValue) == 0x000050, "Member 'RLootTableManager_GetWeightedRarity::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.ShuffleMutatorRows
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_ShuffleMutatorRows final
{
public:
	TArray<struct FMutatorLootTableRow>           MutatorRows;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_ShuffleMutatorRows) == 0x000008, "Wrong alignment on RLootTableManager_ShuffleMutatorRows");
static_assert(sizeof(RLootTableManager_ShuffleMutatorRows) == 0x000020, "Wrong size on RLootTableManager_ShuffleMutatorRows");
static_assert(offsetof(RLootTableManager_ShuffleMutatorRows, MutatorRows) == 0x000000, "Member 'RLootTableManager_ShuffleMutatorRows::MutatorRows' has a wrong offset!");
static_assert(offsetof(RLootTableManager_ShuffleMutatorRows, ReturnValue) == 0x000010, "Member 'RLootTableManager_ShuffleMutatorRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.FilterMutatorRowsByChallengeCompletion
// 0x0020 (0x0020 - 0x0000)
struct RLootTableManager_FilterMutatorRowsByChallengeCompletion final
{
public:
	TArray<struct FMutatorLootTableRow>           UnfilteredMutators;                                // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_FilterMutatorRowsByChallengeCompletion) == 0x000008, "Wrong alignment on RLootTableManager_FilterMutatorRowsByChallengeCompletion");
static_assert(sizeof(RLootTableManager_FilterMutatorRowsByChallengeCompletion) == 0x000020, "Wrong size on RLootTableManager_FilterMutatorRowsByChallengeCompletion");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByChallengeCompletion, UnfilteredMutators) == 0x000000, "Member 'RLootTableManager_FilterMutatorRowsByChallengeCompletion::UnfilteredMutators' has a wrong offset!");
static_assert(offsetof(RLootTableManager_FilterMutatorRowsByChallengeCompletion, ReturnValue) == 0x000010, "Member 'RLootTableManager_FilterMutatorRowsByChallengeCompletion::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetAllEnabledMutatorRows
// 0x0010 (0x0010 - 0x0000)
struct RLootTableManager_GetAllEnabledMutatorRows final
{
public:
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetAllEnabledMutatorRows) == 0x000008, "Wrong alignment on RLootTableManager_GetAllEnabledMutatorRows");
static_assert(sizeof(RLootTableManager_GetAllEnabledMutatorRows) == 0x000010, "Wrong size on RLootTableManager_GetAllEnabledMutatorRows");
static_assert(offsetof(RLootTableManager_GetAllEnabledMutatorRows, ReturnValue) == 0x000000, "Member 'RLootTableManager_GetAllEnabledMutatorRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetEnabledMutatorRowsByCategory
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetEnabledMutatorRowsByCategory final
{
public:
	struct FGameplayTag                           CategoryTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetEnabledMutatorRowsByCategory) == 0x000008, "Wrong alignment on RLootTableManager_GetEnabledMutatorRowsByCategory");
static_assert(sizeof(RLootTableManager_GetEnabledMutatorRowsByCategory) == 0x000018, "Wrong size on RLootTableManager_GetEnabledMutatorRowsByCategory");
static_assert(offsetof(RLootTableManager_GetEnabledMutatorRowsByCategory, CategoryTag) == 0x000000, "Member 'RLootTableManager_GetEnabledMutatorRowsByCategory::CategoryTag' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetEnabledMutatorRowsByCategory, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetEnabledMutatorRowsByCategory::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootableCharmRows
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetLootableCharmRows final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootableCharmRows) == 0x000008, "Wrong alignment on RLootTableManager_GetLootableCharmRows");
static_assert(sizeof(RLootTableManager_GetLootableCharmRows) == 0x000018, "Wrong size on RLootTableManager_GetLootableCharmRows");
static_assert(offsetof(RLootTableManager_GetLootableCharmRows, PlayerController) == 0x000000, "Member 'RLootTableManager_GetLootableCharmRows::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableCharmRows, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetLootableCharmRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetLootableMutatorRows
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetLootableMutatorRows final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetLootableMutatorRows) == 0x000008, "Wrong alignment on RLootTableManager_GetLootableMutatorRows");
static_assert(sizeof(RLootTableManager_GetLootableMutatorRows) == 0x000018, "Wrong size on RLootTableManager_GetLootableMutatorRows");
static_assert(offsetof(RLootTableManager_GetLootableMutatorRows, PlayerController) == 0x000000, "Member 'RLootTableManager_GetLootableMutatorRows::PlayerController' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetLootableMutatorRows, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetLootableMutatorRows::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorLootSettingsFromPrimaryAsset
// 0x0060 (0x0060 - 0x0000)
struct RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset final
{
public:
	class URMutatorPrimaryAsset*                  MutatorPrimaryAsset;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMutatorLootSettings                   ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset");
static_assert(sizeof(RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset) == 0x000060, "Wrong size on RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset");
static_assert(offsetof(RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset, MutatorPrimaryAsset) == 0x000000, "Member 'RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetMutatorLootSettingsFromPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RLootTableManager.GetMutatorRowsFromTable
// 0x0018 (0x0018 - 0x0000)
struct RLootTableManager_GetMutatorRowsFromTable final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMutatorLootTableRow>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RLootTableManager_GetMutatorRowsFromTable) == 0x000008, "Wrong alignment on RLootTableManager_GetMutatorRowsFromTable");
static_assert(sizeof(RLootTableManager_GetMutatorRowsFromTable) == 0x000018, "Wrong size on RLootTableManager_GetMutatorRowsFromTable");
static_assert(offsetof(RLootTableManager_GetMutatorRowsFromTable, Table) == 0x000000, "Member 'RLootTableManager_GetMutatorRowsFromTable::Table' has a wrong offset!");
static_assert(offsetof(RLootTableManager_GetMutatorRowsFromTable, ReturnValue) == 0x000008, "Member 'RLootTableManager_GetMutatorRowsFromTable::ReturnValue' has a wrong offset!");

// Function RGame.RMerchant.ClearSpawnedItems
// 0x0008 (0x0008 - 0x0000)
struct RMerchant_ClearSpawnedItems final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchant_ClearSpawnedItems) == 0x000008, "Wrong alignment on RMerchant_ClearSpawnedItems");
static_assert(sizeof(RMerchant_ClearSpawnedItems) == 0x000008, "Wrong size on RMerchant_ClearSpawnedItems");
static_assert(offsetof(RMerchant_ClearSpawnedItems, PlayerController) == 0x000000, "Member 'RMerchant_ClearSpawnedItems::PlayerController' has a wrong offset!");

// Function RGame.RMerchant.GetNumUniqueGeneratedMutatorCategories
// 0x0004 (0x0004 - 0x0000)
struct RMerchant_GetNumUniqueGeneratedMutatorCategories final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchant_GetNumUniqueGeneratedMutatorCategories) == 0x000004, "Wrong alignment on RMerchant_GetNumUniqueGeneratedMutatorCategories");
static_assert(sizeof(RMerchant_GetNumUniqueGeneratedMutatorCategories) == 0x000004, "Wrong size on RMerchant_GetNumUniqueGeneratedMutatorCategories");
static_assert(offsetof(RMerchant_GetNumUniqueGeneratedMutatorCategories, ReturnValue) == 0x000000, "Member 'RMerchant_GetNumUniqueGeneratedMutatorCategories::ReturnValue' has a wrong offset!");

// Function RGame.RMerchant.OnItemSold
// 0x0018 (0x0018 - 0x0000)
struct RMerchant_OnItemSold final
{
public:
	class ARPickupableItem*                       PickedUpItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchant_OnItemSold) == 0x000008, "Wrong alignment on RMerchant_OnItemSold");
static_assert(sizeof(RMerchant_OnItemSold) == 0x000018, "Wrong size on RMerchant_OnItemSold");
static_assert(offsetof(RMerchant_OnItemSold, PickedUpItem) == 0x000000, "Member 'RMerchant_OnItemSold::PickedUpItem' has a wrong offset!");
static_assert(offsetof(RMerchant_OnItemSold, Cost) == 0x000008, "Member 'RMerchant_OnItemSold::Cost' has a wrong offset!");
static_assert(offsetof(RMerchant_OnItemSold, PlayerController) == 0x000010, "Member 'RMerchant_OnItemSold::PlayerController' has a wrong offset!");

// Function RGame.RMerchant.OnSpawnTrigBoxCompEntered
// 0x0008 (0x0008 - 0x0000)
struct RMerchant_OnSpawnTrigBoxCompEntered final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchant_OnSpawnTrigBoxCompEntered) == 0x000008, "Wrong alignment on RMerchant_OnSpawnTrigBoxCompEntered");
static_assert(sizeof(RMerchant_OnSpawnTrigBoxCompEntered) == 0x000008, "Wrong size on RMerchant_OnSpawnTrigBoxCompEntered");
static_assert(offsetof(RMerchant_OnSpawnTrigBoxCompEntered, OtherActor) == 0x000000, "Member 'RMerchant_OnSpawnTrigBoxCompEntered::OtherActor' has a wrong offset!");

// Function RGame.RMerchant.SpawnItems
// 0x0008 (0x0008 - 0x0000)
struct RMerchant_SpawnItems final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchant_SpawnItems) == 0x000008, "Wrong alignment on RMerchant_SpawnItems");
static_assert(sizeof(RMerchant_SpawnItems) == 0x000008, "Wrong size on RMerchant_SpawnItems");
static_assert(offsetof(RMerchant_SpawnItems, PlayerController) == 0x000000, "Member 'RMerchant_SpawnItems::PlayerController' has a wrong offset!");

// Function RGame.RMerchantPlinth.CheckAndUpdateLootForController
// 0x0008 (0x0008 - 0x0000)
struct RMerchantPlinth_CheckAndUpdateLootForController final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchantPlinth_CheckAndUpdateLootForController) == 0x000008, "Wrong alignment on RMerchantPlinth_CheckAndUpdateLootForController");
static_assert(sizeof(RMerchantPlinth_CheckAndUpdateLootForController) == 0x000008, "Wrong size on RMerchantPlinth_CheckAndUpdateLootForController");
static_assert(offsetof(RMerchantPlinth_CheckAndUpdateLootForController, PlayerController) == 0x000000, "Member 'RMerchantPlinth_CheckAndUpdateLootForController::PlayerController' has a wrong offset!");

// Function RGame.RMerchantPlinth.ClearSpawnedItem
// 0x0008 (0x0008 - 0x0000)
struct RMerchantPlinth_ClearSpawnedItem final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchantPlinth_ClearSpawnedItem) == 0x000008, "Wrong alignment on RMerchantPlinth_ClearSpawnedItem");
static_assert(sizeof(RMerchantPlinth_ClearSpawnedItem) == 0x000008, "Wrong size on RMerchantPlinth_ClearSpawnedItem");
static_assert(offsetof(RMerchantPlinth_ClearSpawnedItem, PlayerController) == 0x000000, "Member 'RMerchantPlinth_ClearSpawnedItem::PlayerController' has a wrong offset!");

// Function RGame.RMerchantPlinth.OnItemSold
// 0x0018 (0x0018 - 0x0000)
struct RMerchantPlinth_OnItemSold final
{
public:
	class ARPickupableItem*                       PickedUpItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchantPlinth_OnItemSold) == 0x000008, "Wrong alignment on RMerchantPlinth_OnItemSold");
static_assert(sizeof(RMerchantPlinth_OnItemSold) == 0x000018, "Wrong size on RMerchantPlinth_OnItemSold");
static_assert(offsetof(RMerchantPlinth_OnItemSold, PickedUpItem) == 0x000000, "Member 'RMerchantPlinth_OnItemSold::PickedUpItem' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_OnItemSold, Cost) == 0x000008, "Member 'RMerchantPlinth_OnItemSold::Cost' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_OnItemSold, PlayerController) == 0x000010, "Member 'RMerchantPlinth_OnItemSold::PlayerController' has a wrong offset!");

// Function RGame.RMerchantPlinth.OnMutatorPASet
// 0x0008 (0x0008 - 0x0000)
struct RMerchantPlinth_OnMutatorPASet final
{
public:
	class URMutatorPrimaryAsset*                  NewPrimaryAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchantPlinth_OnMutatorPASet) == 0x000008, "Wrong alignment on RMerchantPlinth_OnMutatorPASet");
static_assert(sizeof(RMerchantPlinth_OnMutatorPASet) == 0x000008, "Wrong size on RMerchantPlinth_OnMutatorPASet");
static_assert(offsetof(RMerchantPlinth_OnMutatorPASet, NewPrimaryAsset) == 0x000000, "Member 'RMerchantPlinth_OnMutatorPASet::NewPrimaryAsset' has a wrong offset!");

// Function RGame.RMerchantPlinth.SetLootOptionForController
// 0x0038 (0x0038 - 0x0000)
struct RMerchantPlinth_SetLootOptionForController final
{
public:
	TArray<struct FRLootSelectionOption>          NewMutatorLootSelection;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPlinthRewardType                             NewPlinthRewardType;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMutatorPrimaryAsset*                  NewPrimaryAsset;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooted;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URMutatorRewardCategoryDataAsset*       NewGodCategory;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMerchantPlinth_SetLootOptionForController) == 0x000008, "Wrong alignment on RMerchantPlinth_SetLootOptionForController");
static_assert(sizeof(RMerchantPlinth_SetLootOptionForController) == 0x000038, "Wrong size on RMerchantPlinth_SetLootOptionForController");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, NewMutatorLootSelection) == 0x000000, "Member 'RMerchantPlinth_SetLootOptionForController::NewMutatorLootSelection' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, NewPlinthRewardType) == 0x000010, "Member 'RMerchantPlinth_SetLootOptionForController::NewPlinthRewardType' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, NewPrimaryAsset) == 0x000018, "Member 'RMerchantPlinth_SetLootOptionForController::NewPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, bLooted) == 0x000020, "Member 'RMerchantPlinth_SetLootOptionForController::bLooted' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, NewGodCategory) == 0x000028, "Member 'RMerchantPlinth_SetLootOptionForController::NewGodCategory' has a wrong offset!");
static_assert(offsetof(RMerchantPlinth_SetLootOptionForController, PlayerController) == 0x000030, "Member 'RMerchantPlinth_SetLootOptionForController::PlayerController' has a wrong offset!");

// Function RGame.RMusicManager.GetMusicManager
// 0x0010 (0x0010 - 0x0000)
struct RMusicManager_GetMusicManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARMusicManager*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_GetMusicManager) == 0x000008, "Wrong alignment on RMusicManager_GetMusicManager");
static_assert(sizeof(RMusicManager_GetMusicManager) == 0x000010, "Wrong size on RMusicManager_GetMusicManager");
static_assert(offsetof(RMusicManager_GetMusicManager, WorldContextObject) == 0x000000, "Member 'RMusicManager_GetMusicManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RMusicManager_GetMusicManager, ReturnValue) == 0x000008, "Member 'RMusicManager_GetMusicManager::ReturnValue' has a wrong offset!");

// Function RGame.RMusicManager.GetDurationFromWaveInCue
// 0x0010 (0x0010 - 0x0000)
struct RMusicManager_GetDurationFromWaveInCue final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_GetDurationFromWaveInCue) == 0x000008, "Wrong alignment on RMusicManager_GetDurationFromWaveInCue");
static_assert(sizeof(RMusicManager_GetDurationFromWaveInCue) == 0x000010, "Wrong size on RMusicManager_GetDurationFromWaveInCue");
static_assert(offsetof(RMusicManager_GetDurationFromWaveInCue, SoundCue) == 0x000000, "Member 'RMusicManager_GetDurationFromWaveInCue::SoundCue' has a wrong offset!");
static_assert(offsetof(RMusicManager_GetDurationFromWaveInCue, WaveIndex) == 0x000008, "Member 'RMusicManager_GetDurationFromWaveInCue::WaveIndex' has a wrong offset!");
static_assert(offsetof(RMusicManager_GetDurationFromWaveInCue, ReturnValue) == 0x00000C, "Member 'RMusicManager_GetDurationFromWaveInCue::ReturnValue' has a wrong offset!");

// Function RGame.RMusicManager.GetLevelHasMusic
// 0x0001 (0x0001 - 0x0000)
struct RMusicManager_GetLevelHasMusic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_GetLevelHasMusic) == 0x000001, "Wrong alignment on RMusicManager_GetLevelHasMusic");
static_assert(sizeof(RMusicManager_GetLevelHasMusic) == 0x000001, "Wrong size on RMusicManager_GetLevelHasMusic");
static_assert(offsetof(RMusicManager_GetLevelHasMusic, ReturnValue) == 0x000000, "Member 'RMusicManager_GetLevelHasMusic::ReturnValue' has a wrong offset!");

// Function RGame.RMusicManager.OnBossPhaseStarted
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnBossPhaseStarted final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnBossPhaseStarted) == 0x000004, "Wrong alignment on RMusicManager_OnBossPhaseStarted");
static_assert(sizeof(RMusicManager_OnBossPhaseStarted) == 0x000008, "Wrong size on RMusicManager_OnBossPhaseStarted");
static_assert(offsetof(RMusicManager_OnBossPhaseStarted, NewState) == 0x000000, "Member 'RMusicManager_OnBossPhaseStarted::NewState' has a wrong offset!");

// Function RGame.RMusicManager.OnBossPhaseStarted_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnBossPhaseStarted_Multicast final
{
public:
	class FName                                   NewState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnBossPhaseStarted_Multicast) == 0x000004, "Wrong alignment on RMusicManager_OnBossPhaseStarted_Multicast");
static_assert(sizeof(RMusicManager_OnBossPhaseStarted_Multicast) == 0x000008, "Wrong size on RMusicManager_OnBossPhaseStarted_Multicast");
static_assert(offsetof(RMusicManager_OnBossPhaseStarted_Multicast, NewState) == 0x000000, "Member 'RMusicManager_OnBossPhaseStarted_Multicast::NewState' has a wrong offset!");

// Function RGame.RMusicManager.OnPlayerAlive
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnPlayerAlive final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnPlayerAlive) == 0x000008, "Wrong alignment on RMusicManager_OnPlayerAlive");
static_assert(sizeof(RMusicManager_OnPlayerAlive) == 0x000008, "Wrong size on RMusicManager_OnPlayerAlive");
static_assert(offsetof(RMusicManager_OnPlayerAlive, Player) == 0x000000, "Member 'RMusicManager_OnPlayerAlive::Player' has a wrong offset!");

// Function RGame.RMusicManager.OnPlayerAlive_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnPlayerAlive_Multicast final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnPlayerAlive_Multicast) == 0x000008, "Wrong alignment on RMusicManager_OnPlayerAlive_Multicast");
static_assert(sizeof(RMusicManager_OnPlayerAlive_Multicast) == 0x000008, "Wrong size on RMusicManager_OnPlayerAlive_Multicast");
static_assert(offsetof(RMusicManager_OnPlayerAlive_Multicast, Player) == 0x000000, "Member 'RMusicManager_OnPlayerAlive_Multicast::Player' has a wrong offset!");

// Function RGame.RMusicManager.OnPlayerDowned
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnPlayerDowned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnPlayerDowned) == 0x000008, "Wrong alignment on RMusicManager_OnPlayerDowned");
static_assert(sizeof(RMusicManager_OnPlayerDowned) == 0x000008, "Wrong size on RMusicManager_OnPlayerDowned");
static_assert(offsetof(RMusicManager_OnPlayerDowned, Player) == 0x000000, "Member 'RMusicManager_OnPlayerDowned::Player' has a wrong offset!");

// Function RGame.RMusicManager.OnPlayerDowned_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnPlayerDowned_Multicast final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnPlayerDowned_Multicast) == 0x000008, "Wrong alignment on RMusicManager_OnPlayerDowned_Multicast");
static_assert(sizeof(RMusicManager_OnPlayerDowned_Multicast) == 0x000008, "Wrong size on RMusicManager_OnPlayerDowned_Multicast");
static_assert(offsetof(RMusicManager_OnPlayerDowned_Multicast, Player) == 0x000000, "Member 'RMusicManager_OnPlayerDowned_Multicast::Player' has a wrong offset!");

// Function RGame.RMusicManager.OnSegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnSegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnSegmentCompleted) == 0x000008, "Wrong alignment on RMusicManager_OnSegmentCompleted");
static_assert(sizeof(RMusicManager_OnSegmentCompleted) == 0x000008, "Wrong size on RMusicManager_OnSegmentCompleted");
static_assert(offsetof(RMusicManager_OnSegmentCompleted, EnemySpawnAreaSegment) == 0x000000, "Member 'RMusicManager_OnSegmentCompleted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RMusicManager.OnSegmentCompleted_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnSegmentCompleted_Multicast final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnSegmentCompleted_Multicast) == 0x000008, "Wrong alignment on RMusicManager_OnSegmentCompleted_Multicast");
static_assert(sizeof(RMusicManager_OnSegmentCompleted_Multicast) == 0x000008, "Wrong size on RMusicManager_OnSegmentCompleted_Multicast");
static_assert(offsetof(RMusicManager_OnSegmentCompleted_Multicast, EnemySpawnAreaSegment) == 0x000000, "Member 'RMusicManager_OnSegmentCompleted_Multicast::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RMusicManager.OnSegmentStarted
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnSegmentStarted final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnSegmentStarted) == 0x000008, "Wrong alignment on RMusicManager_OnSegmentStarted");
static_assert(sizeof(RMusicManager_OnSegmentStarted) == 0x000008, "Wrong size on RMusicManager_OnSegmentStarted");
static_assert(offsetof(RMusicManager_OnSegmentStarted, EnemySpawnAreaSegment) == 0x000000, "Member 'RMusicManager_OnSegmentStarted::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RMusicManager.OnSegmentStarted_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_OnSegmentStarted_Multicast final
{
public:
	class AREnemySpawnAreaSegment*                EnemySpawnAreaSegment;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_OnSegmentStarted_Multicast) == 0x000008, "Wrong alignment on RMusicManager_OnSegmentStarted_Multicast");
static_assert(sizeof(RMusicManager_OnSegmentStarted_Multicast) == 0x000008, "Wrong size on RMusicManager_OnSegmentStarted_Multicast");
static_assert(offsetof(RMusicManager_OnSegmentStarted_Multicast, EnemySpawnAreaSegment) == 0x000000, "Member 'RMusicManager_OnSegmentStarted_Multicast::EnemySpawnAreaSegment' has a wrong offset!");

// Function RGame.RMusicManager.PlayEmoteSong
// 0x0010 (0x0010 - 0x0000)
struct RMusicManager_PlayEmoteSong final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARPawnBase*                       RequestingPlayer;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_PlayEmoteSong) == 0x000008, "Wrong alignment on RMusicManager_PlayEmoteSong");
static_assert(sizeof(RMusicManager_PlayEmoteSong) == 0x000010, "Wrong size on RMusicManager_PlayEmoteSong");
static_assert(offsetof(RMusicManager_PlayEmoteSong, EmoteSong) == 0x000000, "Member 'RMusicManager_PlayEmoteSong::EmoteSong' has a wrong offset!");
static_assert(offsetof(RMusicManager_PlayEmoteSong, RequestingPlayer) == 0x000008, "Member 'RMusicManager_PlayEmoteSong::RequestingPlayer' has a wrong offset!");

// Function RGame.RMusicManager.PlayEmoteSong_Multicast
// 0x0010 (0x0010 - 0x0000)
struct RMusicManager_PlayEmoteSong_Multicast final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARPawnBase*                       RequestingPlayer;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_PlayEmoteSong_Multicast) == 0x000008, "Wrong alignment on RMusicManager_PlayEmoteSong_Multicast");
static_assert(sizeof(RMusicManager_PlayEmoteSong_Multicast) == 0x000010, "Wrong size on RMusicManager_PlayEmoteSong_Multicast");
static_assert(offsetof(RMusicManager_PlayEmoteSong_Multicast, EmoteSong) == 0x000000, "Member 'RMusicManager_PlayEmoteSong_Multicast::EmoteSong' has a wrong offset!");
static_assert(offsetof(RMusicManager_PlayEmoteSong_Multicast, RequestingPlayer) == 0x000008, "Member 'RMusicManager_PlayEmoteSong_Multicast::RequestingPlayer' has a wrong offset!");

// Function RGame.RMusicManager.PlayEmoteSongImplementation
// 0x0010 (0x0010 - 0x0000)
struct RMusicManager_PlayEmoteSongImplementation final
{
public:
	const class USoundBase*                       EmoteSong;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARPawnBase*                       RequestingPlayer;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_PlayEmoteSongImplementation) == 0x000008, "Wrong alignment on RMusicManager_PlayEmoteSongImplementation");
static_assert(sizeof(RMusicManager_PlayEmoteSongImplementation) == 0x000010, "Wrong size on RMusicManager_PlayEmoteSongImplementation");
static_assert(offsetof(RMusicManager_PlayEmoteSongImplementation, EmoteSong) == 0x000000, "Member 'RMusicManager_PlayEmoteSongImplementation::EmoteSong' has a wrong offset!");
static_assert(offsetof(RMusicManager_PlayEmoteSongImplementation, RequestingPlayer) == 0x000008, "Member 'RMusicManager_PlayEmoteSongImplementation::RequestingPlayer' has a wrong offset!");

// Function RGame.RMusicManager.PlayEventMusic
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_PlayEventMusic final
{
public:
	class FName                                   Event;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_PlayEventMusic) == 0x000004, "Wrong alignment on RMusicManager_PlayEventMusic");
static_assert(sizeof(RMusicManager_PlayEventMusic) == 0x000008, "Wrong size on RMusicManager_PlayEventMusic");
static_assert(offsetof(RMusicManager_PlayEventMusic, Event) == 0x000000, "Member 'RMusicManager_PlayEventMusic::Event' has a wrong offset!");

// Function RGame.RMusicManager.SetCurrentLevelMusicData
// 0x0040 (0x0040 - 0x0000)
struct RMusicManager_SetCurrentLevelMusicData final
{
public:
	struct FRLevelMusicData                       NewLevelMusicData;                                 // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_SetCurrentLevelMusicData) == 0x000008, "Wrong alignment on RMusicManager_SetCurrentLevelMusicData");
static_assert(sizeof(RMusicManager_SetCurrentLevelMusicData) == 0x000040, "Wrong size on RMusicManager_SetCurrentLevelMusicData");
static_assert(offsetof(RMusicManager_SetCurrentLevelMusicData, NewLevelMusicData) == 0x000000, "Member 'RMusicManager_SetCurrentLevelMusicData::NewLevelMusicData' has a wrong offset!");

// Function RGame.RMusicManager.SetMusicData
// 0x0008 (0x0008 - 0x0000)
struct RMusicManager_SetMusicData final
{
public:
	class URMusicData*                            NewMusicData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMusicManager_SetMusicData) == 0x000008, "Wrong alignment on RMusicManager_SetMusicData");
static_assert(sizeof(RMusicManager_SetMusicData) == 0x000008, "Wrong size on RMusicManager_SetMusicData");
static_assert(offsetof(RMusicManager_SetMusicData, NewMusicData) == 0x000000, "Member 'RMusicManager_SetMusicData::NewMusicData' has a wrong offset!");

// Function RGame.RMusicManager.UpdateLevelMusicData
// 0x0030 (0x0030 - 0x0000)
struct RMusicManager_UpdateLevelMusicData final
{
public:
	struct FGameplayTagContainer                  LevelTagIDContainer;                               // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class URAreaData*                             AreaData;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMusicManager_UpdateLevelMusicData) == 0x000008, "Wrong alignment on RMusicManager_UpdateLevelMusicData");
static_assert(sizeof(RMusicManager_UpdateLevelMusicData) == 0x000030, "Wrong size on RMusicManager_UpdateLevelMusicData");
static_assert(offsetof(RMusicManager_UpdateLevelMusicData, LevelTagIDContainer) == 0x000000, "Member 'RMusicManager_UpdateLevelMusicData::LevelTagIDContainer' has a wrong offset!");
static_assert(offsetof(RMusicManager_UpdateLevelMusicData, AreaData) == 0x000020, "Member 'RMusicManager_UpdateLevelMusicData::AreaData' has a wrong offset!");
static_assert(offsetof(RMusicManager_UpdateLevelMusicData, ReturnValue) == 0x000028, "Member 'RMusicManager_UpdateLevelMusicData::ReturnValue' has a wrong offset!");

// Function RGame.RMutatorLog.GetMutatorTiles
// 0x0008 (0x0008 - 0x0000)
struct RMutatorLog_GetMutatorTiles final
{
public:
	class UTileView*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutatorLog_GetMutatorTiles) == 0x000008, "Wrong alignment on RMutatorLog_GetMutatorTiles");
static_assert(sizeof(RMutatorLog_GetMutatorTiles) == 0x000008, "Wrong size on RMutatorLog_GetMutatorTiles");
static_assert(offsetof(RMutatorLog_GetMutatorTiles, ReturnValue) == 0x000000, "Member 'RMutatorLog_GetMutatorTiles::ReturnValue' has a wrong offset!");

// Function RGame.RMutatorLog.NativeFillGridByCategory
// 0x000C (0x000C - 0x0000)
struct RMutatorLog_NativeFillGridByCategory final
{
public:
	struct FGameplayTag                           CategoryTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearFirst;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMutatorLog_NativeFillGridByCategory) == 0x000004, "Wrong alignment on RMutatorLog_NativeFillGridByCategory");
static_assert(sizeof(RMutatorLog_NativeFillGridByCategory) == 0x00000C, "Wrong size on RMutatorLog_NativeFillGridByCategory");
static_assert(offsetof(RMutatorLog_NativeFillGridByCategory, CategoryTag) == 0x000000, "Member 'RMutatorLog_NativeFillGridByCategory::CategoryTag' has a wrong offset!");
static_assert(offsetof(RMutatorLog_NativeFillGridByCategory, bClearFirst) == 0x000008, "Member 'RMutatorLog_NativeFillGridByCategory::bClearFirst' has a wrong offset!");

// Function RGame.RMutatorLog.NativeFillGridByCharms
// 0x0001 (0x0001 - 0x0000)
struct RMutatorLog_NativeFillGridByCharms final
{
public:
	bool                                          bClearFirst;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutatorLog_NativeFillGridByCharms) == 0x000001, "Wrong alignment on RMutatorLog_NativeFillGridByCharms");
static_assert(sizeof(RMutatorLog_NativeFillGridByCharms) == 0x000001, "Wrong size on RMutatorLog_NativeFillGridByCharms");
static_assert(offsetof(RMutatorLog_NativeFillGridByCharms, bClearFirst) == 0x000000, "Member 'RMutatorLog_NativeFillGridByCharms::bClearFirst' has a wrong offset!");

// Function RGame.RMutatorLog.NativeFillGridByMutatorTable
// 0x0010 (0x0010 - 0x0000)
struct RMutatorLog_NativeFillGridByMutatorTable final
{
public:
	class UDataTable*                             MutatorTable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearFirst;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RMutatorLog_NativeFillGridByMutatorTable) == 0x000008, "Wrong alignment on RMutatorLog_NativeFillGridByMutatorTable");
static_assert(sizeof(RMutatorLog_NativeFillGridByMutatorTable) == 0x000010, "Wrong size on RMutatorLog_NativeFillGridByMutatorTable");
static_assert(offsetof(RMutatorLog_NativeFillGridByMutatorTable, MutatorTable) == 0x000000, "Member 'RMutatorLog_NativeFillGridByMutatorTable::MutatorTable' has a wrong offset!");
static_assert(offsetof(RMutatorLog_NativeFillGridByMutatorTable, bClearFirst) == 0x000008, "Member 'RMutatorLog_NativeFillGridByMutatorTable::bClearFirst' has a wrong offset!");

// Function RGame.RNavigationManager.AbortPathfindingTask
// 0x0008 (0x0008 - 0x0000)
struct RNavigationManager_AbortPathfindingTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_AbortPathfindingTask) == 0x000008, "Wrong alignment on RNavigationManager_AbortPathfindingTask");
static_assert(sizeof(RNavigationManager_AbortPathfindingTask) == 0x000008, "Wrong size on RNavigationManager_AbortPathfindingTask");
static_assert(offsetof(RNavigationManager_AbortPathfindingTask, Actor) == 0x000000, "Member 'RNavigationManager_AbortPathfindingTask::Actor' has a wrong offset!");

// Function RGame.RNavigationManager.CanNavigate
// 0x0020 (0x0020 - 0x0000)
struct RNavigationManager_CanNavigate final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_CanNavigate) == 0x000008, "Wrong alignment on RNavigationManager_CanNavigate");
static_assert(sizeof(RNavigationManager_CanNavigate) == 0x000020, "Wrong size on RNavigationManager_CanNavigate");
static_assert(offsetof(RNavigationManager_CanNavigate, Location) == 0x000000, "Member 'RNavigationManager_CanNavigate::Location' has a wrong offset!");
static_assert(offsetof(RNavigationManager_CanNavigate, NavigationType) == 0x000018, "Member 'RNavigationManager_CanNavigate::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_CanNavigate, ReturnValue) == 0x000019, "Member 'RNavigationManager_CanNavigate::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.ClampLocationToNavigableWorld
// 0x0030 (0x0030 - 0x0000)
struct RNavigationManager_ClampLocationToNavigableWorld final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_ClampLocationToNavigableWorld) == 0x000008, "Wrong alignment on RNavigationManager_ClampLocationToNavigableWorld");
static_assert(sizeof(RNavigationManager_ClampLocationToNavigableWorld) == 0x000030, "Wrong size on RNavigationManager_ClampLocationToNavigableWorld");
static_assert(offsetof(RNavigationManager_ClampLocationToNavigableWorld, DesiredLocation) == 0x000000, "Member 'RNavigationManager_ClampLocationToNavigableWorld::DesiredLocation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ClampLocationToNavigableWorld, ReturnValue) == 0x000018, "Member 'RNavigationManager_ClampLocationToNavigableWorld::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.Debug_DrawAllVolumes
// 0x0004 (0x0004 - 0x0000)
struct RNavigationManager_Debug_DrawAllVolumes final
{
public:
	float                                         LineThickness;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_Debug_DrawAllVolumes) == 0x000004, "Wrong alignment on RNavigationManager_Debug_DrawAllVolumes");
static_assert(sizeof(RNavigationManager_Debug_DrawAllVolumes) == 0x000004, "Wrong size on RNavigationManager_Debug_DrawAllVolumes");
static_assert(offsetof(RNavigationManager_Debug_DrawAllVolumes, LineThickness) == 0x000000, "Member 'RNavigationManager_Debug_DrawAllVolumes::LineThickness' has a wrong offset!");

// Function RGame.RNavigationManager.Debug_DrawVolumesAroundPoint
// 0x0030 (0x0030 - 0x0000)
struct RNavigationManager_Debug_DrawVolumesAroundPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CubeSize;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawPersistentLines;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoInitializeVolumes;                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_Debug_DrawVolumesAroundPoint) == 0x000008, "Wrong alignment on RNavigationManager_Debug_DrawVolumesAroundPoint");
static_assert(sizeof(RNavigationManager_Debug_DrawVolumesAroundPoint) == 0x000030, "Wrong size on RNavigationManager_Debug_DrawVolumesAroundPoint");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, Location) == 0x000000, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::Location' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, CubeSize) == 0x000018, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::CubeSize' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, DrawPersistentLines) == 0x00001C, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::DrawPersistentLines' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, Duration) == 0x000020, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::Duration' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, LineThickness) == 0x000024, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::LineThickness' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVolumesAroundPoint, bAutoInitializeVolumes) == 0x000028, "Member 'RNavigationManager_Debug_DrawVolumesAroundPoint::bAutoInitializeVolumes' has a wrong offset!");

// Function RGame.RNavigationManager.Debug_DrawVoxelCollisionProfile
// 0x0028 (0x0028 - 0x0000)
struct RNavigationManager_Debug_DrawVoxelCollisionProfile final
{
public:
	class UPrimitiveComponent*                    MeshOrPrimitive;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginLocation;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPersistent;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_Debug_DrawVoxelCollisionProfile) == 0x000008, "Wrong alignment on RNavigationManager_Debug_DrawVoxelCollisionProfile");
static_assert(sizeof(RNavigationManager_Debug_DrawVoxelCollisionProfile) == 0x000028, "Wrong size on RNavigationManager_Debug_DrawVoxelCollisionProfile");
static_assert(offsetof(RNavigationManager_Debug_DrawVoxelCollisionProfile, MeshOrPrimitive) == 0x000000, "Member 'RNavigationManager_Debug_DrawVoxelCollisionProfile::MeshOrPrimitive' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVoxelCollisionProfile, OriginLocation) == 0x000008, "Member 'RNavigationManager_Debug_DrawVoxelCollisionProfile::OriginLocation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVoxelCollisionProfile, bDrawPersistent) == 0x000020, "Member 'RNavigationManager_Debug_DrawVoxelCollisionProfile::bDrawPersistent' has a wrong offset!");
static_assert(offsetof(RNavigationManager_Debug_DrawVoxelCollisionProfile, Duration) == 0x000024, "Member 'RNavigationManager_Debug_DrawVoxelCollisionProfile::Duration' has a wrong offset!");

// Function RGame.RNavigationManager.FindPathSolution
// 0x0060 (0x0060 - 0x0000)
struct RNavigationManager_FindPathSolution final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRNavigationQueryParams                QueryParams;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRNavigationDebugParams                DebugParams;                                       // 0x0040(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJump;                                        // 0x004D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxJumpDistance;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFlightHeight;                                   // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlightHeight;                                   // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_FindPathSolution) == 0x000008, "Wrong alignment on RNavigationManager_FindPathSolution");
static_assert(sizeof(RNavigationManager_FindPathSolution) == 0x000060, "Wrong size on RNavigationManager_FindPathSolution");
static_assert(offsetof(RNavigationManager_FindPathSolution, Actor) == 0x000000, "Member 'RNavigationManager_FindPathSolution::Actor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, Destination) == 0x000008, "Member 'RNavigationManager_FindPathSolution::Destination' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, QueryParams) == 0x000020, "Member 'RNavigationManager_FindPathSolution::QueryParams' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, DebugParams) == 0x000040, "Member 'RNavigationManager_FindPathSolution::DebugParams' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, NavigationType) == 0x00004C, "Member 'RNavigationManager_FindPathSolution::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, bAllowJump) == 0x00004D, "Member 'RNavigationManager_FindPathSolution::bAllowJump' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, MaxJumpDistance) == 0x000050, "Member 'RNavigationManager_FindPathSolution::MaxJumpDistance' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, MinFlightHeight) == 0x000054, "Member 'RNavigationManager_FindPathSolution::MinFlightHeight' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, MaxFlightHeight) == 0x000058, "Member 'RNavigationManager_FindPathSolution::MaxFlightHeight' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindPathSolution, ReturnValue) == 0x00005C, "Member 'RNavigationManager_FindPathSolution::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.FindRandomPointAroundOriginInNavWorld
// 0x0050 (0x0050 - 0x0000)
struct RNavigationManager_FindRandomPointAroundOriginInNavWorld final
{
public:
	class AActor*                                 NavigationActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundValidResult;                                 // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDesiredAltitude;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZAngularDispacement;                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttempts;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_FindRandomPointAroundOriginInNavWorld) == 0x000008, "Wrong alignment on RNavigationManager_FindRandomPointAroundOriginInNavWorld");
static_assert(sizeof(RNavigationManager_FindRandomPointAroundOriginInNavWorld) == 0x000050, "Wrong size on RNavigationManager_FindRandomPointAroundOriginInNavWorld");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, NavigationActor) == 0x000000, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::NavigationActor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, Origin) == 0x000008, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::Origin' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, Distance) == 0x000020, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::Distance' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, bFoundValidResult) == 0x000024, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::bFoundValidResult' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxDesiredAltitude) == 0x000028, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxDesiredAltitude' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxZAngularDispacement) == 0x00002C, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxZAngularDispacement' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, MaxAttempts) == 0x000030, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::MaxAttempts' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, NavigationType) == 0x000034, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointAroundOriginInNavWorld, ReturnValue) == 0x000038, "Member 'RNavigationManager_FindRandomPointAroundOriginInNavWorld::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.FindRandomPointFromActorInNavWorld
// 0x0038 (0x0038 - 0x0000)
struct RNavigationManager_FindRandomPointFromActorInNavWorld final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFoundValidResult;                                 // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDesiredAltitude;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZAngularDispacement;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAttempts;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_FindRandomPointFromActorInNavWorld) == 0x000008, "Wrong alignment on RNavigationManager_FindRandomPointFromActorInNavWorld");
static_assert(sizeof(RNavigationManager_FindRandomPointFromActorInNavWorld) == 0x000038, "Wrong size on RNavigationManager_FindRandomPointFromActorInNavWorld");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, Actor) == 0x000000, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::Actor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, Distance) == 0x000008, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::Distance' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, bFoundValidResult) == 0x00000C, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::bFoundValidResult' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, MaxDesiredAltitude) == 0x000010, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::MaxDesiredAltitude' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, MaxZAngularDispacement) == 0x000014, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::MaxZAngularDispacement' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, MaxAttempts) == 0x000018, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::MaxAttempts' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, NavigationType) == 0x00001C, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_FindRandomPointFromActorInNavWorld, ReturnValue) == 0x000020, "Member 'RNavigationManager_FindRandomPointFromActorInNavWorld::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.GetClosestNavigableLocation
// 0x0040 (0x0040 - 0x0000)
struct RNavigationManager_GetClosestNavigableLocation final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NeighborSearchMaxDepthOverride;                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowClimbable;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_GetClosestNavigableLocation) == 0x000008, "Wrong alignment on RNavigationManager_GetClosestNavigableLocation");
static_assert(sizeof(RNavigationManager_GetClosestNavigableLocation) == 0x000040, "Wrong size on RNavigationManager_GetClosestNavigableLocation");
static_assert(offsetof(RNavigationManager_GetClosestNavigableLocation, DesiredLocation) == 0x000000, "Member 'RNavigationManager_GetClosestNavigableLocation::DesiredLocation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_GetClosestNavigableLocation, NavigationType) == 0x000018, "Member 'RNavigationManager_GetClosestNavigableLocation::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_GetClosestNavigableLocation, NeighborSearchMaxDepthOverride) == 0x00001C, "Member 'RNavigationManager_GetClosestNavigableLocation::NeighborSearchMaxDepthOverride' has a wrong offset!");
static_assert(offsetof(RNavigationManager_GetClosestNavigableLocation, bAllowClimbable) == 0x000020, "Member 'RNavigationManager_GetClosestNavigableLocation::bAllowClimbable' has a wrong offset!");
static_assert(offsetof(RNavigationManager_GetClosestNavigableLocation, ReturnValue) == 0x000028, "Member 'RNavigationManager_GetClosestNavigableLocation::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.HasTask
// 0x0010 (0x0010 - 0x0000)
struct RNavigationManager_HasTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_HasTask) == 0x000008, "Wrong alignment on RNavigationManager_HasTask");
static_assert(sizeof(RNavigationManager_HasTask) == 0x000010, "Wrong size on RNavigationManager_HasTask");
static_assert(offsetof(RNavigationManager_HasTask, Actor) == 0x000000, "Member 'RNavigationManager_HasTask::Actor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_HasTask, ReturnValue) == 0x000008, "Member 'RNavigationManager_HasTask::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.IsDirectPathLineSweep
// 0x0148 (0x0148 - 0x0000)
struct RNavigationManager_IsDirectPathLineSweep final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0038(0x0100)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFindInitialOverlaps;                              // 0x0138(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionShapeInflation;                           // 0x013C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_IsDirectPathLineSweep) == 0x000008, "Wrong alignment on RNavigationManager_IsDirectPathLineSweep");
static_assert(sizeof(RNavigationManager_IsDirectPathLineSweep) == 0x000148, "Wrong size on RNavigationManager_IsDirectPathLineSweep");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, CollisionComponent) == 0x000000, "Member 'RNavigationManager_IsDirectPathLineSweep::CollisionComponent' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, Start) == 0x000008, "Member 'RNavigationManager_IsDirectPathLineSweep::Start' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, End) == 0x000020, "Member 'RNavigationManager_IsDirectPathLineSweep::End' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, OutHit) == 0x000038, "Member 'RNavigationManager_IsDirectPathLineSweep::OutHit' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, bFindInitialOverlaps) == 0x000138, "Member 'RNavigationManager_IsDirectPathLineSweep::bFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, CollisionShapeInflation) == 0x00013C, "Member 'RNavigationManager_IsDirectPathLineSweep::CollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathLineSweep, ReturnValue) == 0x000140, "Member 'RNavigationManager_IsDirectPathLineSweep::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.IsDirectPathSweep
// 0x0148 (0x0148 - 0x0000)
struct RNavigationManager_IsDirectPathSweep final
{
public:
	class UPrimitiveComponent*                    CollisionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0038(0x0100)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bFindInitialOverlaps;                              // 0x0138(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionShapeInflation;                           // 0x013C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0140(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_IsDirectPathSweep) == 0x000008, "Wrong alignment on RNavigationManager_IsDirectPathSweep");
static_assert(sizeof(RNavigationManager_IsDirectPathSweep) == 0x000148, "Wrong size on RNavigationManager_IsDirectPathSweep");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, CollisionComponent) == 0x000000, "Member 'RNavigationManager_IsDirectPathSweep::CollisionComponent' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, Start) == 0x000008, "Member 'RNavigationManager_IsDirectPathSweep::Start' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, End) == 0x000020, "Member 'RNavigationManager_IsDirectPathSweep::End' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, OutHit) == 0x000038, "Member 'RNavigationManager_IsDirectPathSweep::OutHit' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, bFindInitialOverlaps) == 0x000138, "Member 'RNavigationManager_IsDirectPathSweep::bFindInitialOverlaps' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, CollisionShapeInflation) == 0x00013C, "Member 'RNavigationManager_IsDirectPathSweep::CollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsDirectPathSweep, ReturnValue) == 0x000140, "Member 'RNavigationManager_IsDirectPathSweep::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.IsLocationBeneathLandscape
// 0x0020 (0x0020 - 0x0000)
struct RNavigationManager_IsLocationBeneathLandscape final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineTraceHeight;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_IsLocationBeneathLandscape) == 0x000008, "Wrong alignment on RNavigationManager_IsLocationBeneathLandscape");
static_assert(sizeof(RNavigationManager_IsLocationBeneathLandscape) == 0x000020, "Wrong size on RNavigationManager_IsLocationBeneathLandscape");
static_assert(offsetof(RNavigationManager_IsLocationBeneathLandscape, Location) == 0x000000, "Member 'RNavigationManager_IsLocationBeneathLandscape::Location' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsLocationBeneathLandscape, LineTraceHeight) == 0x000018, "Member 'RNavigationManager_IsLocationBeneathLandscape::LineTraceHeight' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsLocationBeneathLandscape, ReturnValue) == 0x00001C, "Member 'RNavigationManager_IsLocationBeneathLandscape::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.IsLocationWithinNavigableWorld
// 0x0020 (0x0020 - 0x0000)
struct RNavigationManager_IsLocationWithinNavigableWorld final
{
public:
	struct FVector                                DesiredLocation;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_IsLocationWithinNavigableWorld) == 0x000008, "Wrong alignment on RNavigationManager_IsLocationWithinNavigableWorld");
static_assert(sizeof(RNavigationManager_IsLocationWithinNavigableWorld) == 0x000020, "Wrong size on RNavigationManager_IsLocationWithinNavigableWorld");
static_assert(offsetof(RNavigationManager_IsLocationWithinNavigableWorld, DesiredLocation) == 0x000000, "Member 'RNavigationManager_IsLocationWithinNavigableWorld::DesiredLocation' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsLocationWithinNavigableWorld, ReturnValue) == 0x000018, "Member 'RNavigationManager_IsLocationWithinNavigableWorld::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.IsMeshBoundsWithinNavigableWorld
// 0x0010 (0x0010 - 0x0000)
struct RNavigationManager_IsMeshBoundsWithinNavigableWorld final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundsScaleFactor;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_IsMeshBoundsWithinNavigableWorld) == 0x000008, "Wrong alignment on RNavigationManager_IsMeshBoundsWithinNavigableWorld");
static_assert(sizeof(RNavigationManager_IsMeshBoundsWithinNavigableWorld) == 0x000010, "Wrong size on RNavigationManager_IsMeshBoundsWithinNavigableWorld");
static_assert(offsetof(RNavigationManager_IsMeshBoundsWithinNavigableWorld, Mesh) == 0x000000, "Member 'RNavigationManager_IsMeshBoundsWithinNavigableWorld::Mesh' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsMeshBoundsWithinNavigableWorld, BoundsScaleFactor) == 0x000008, "Member 'RNavigationManager_IsMeshBoundsWithinNavigableWorld::BoundsScaleFactor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_IsMeshBoundsWithinNavigableWorld, ReturnValue) == 0x00000C, "Member 'RNavigationManager_IsMeshBoundsWithinNavigableWorld::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.ScheduleDynamicCollisionUpdate
// 0x0030 (0x0030 - 0x0000)
struct RNavigationManager_ScheduleDynamicCollisionUpdate final
{
public:
	class UPrimitiveComponent*                    Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bTaskSuccessful)>         ResultHandler;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomCacheIdentifier;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplaceExistingTask;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableCacheUsage;                                // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadCollisionCache;                             // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCheapBoundsCollision;                          // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundsScaleFactor;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSynchronousExecution;                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_ScheduleDynamicCollisionUpdate) == 0x000008, "Wrong alignment on RNavigationManager_ScheduleDynamicCollisionUpdate");
static_assert(sizeof(RNavigationManager_ScheduleDynamicCollisionUpdate) == 0x000030, "Wrong size on RNavigationManager_ScheduleDynamicCollisionUpdate");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, Mesh) == 0x000000, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::Mesh' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, ResultHandler) == 0x000008, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::ResultHandler' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, CustomCacheIdentifier) == 0x000018, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::CustomCacheIdentifier' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bReplaceExistingTask) == 0x000020, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bReplaceExistingTask' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bDisableCacheUsage) == 0x000021, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bDisableCacheUsage' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bReloadCollisionCache) == 0x000022, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bReloadCollisionCache' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bUseCheapBoundsCollision) == 0x000023, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bUseCheapBoundsCollision' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, BoundsScaleFactor) == 0x000024, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::BoundsScaleFactor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bForceSynchronousExecution) == 0x000028, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bForceSynchronousExecution' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, bDrawDebug) == 0x000029, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::bDrawDebug' has a wrong offset!");
static_assert(offsetof(RNavigationManager_ScheduleDynamicCollisionUpdate, ReturnValue) == 0x00002A, "Member 'RNavigationManager_ScheduleDynamicCollisionUpdate::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.SchedulePathfindingTask
// 0x0080 (0x0080 - 0x0000)
struct RNavigationManager_SchedulePathfindingTask final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRNavigationQueryParams                QueryParams;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRNavigationDebugParams                DebugParams;                                       // 0x0040(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRNavigationQueryData& Data)> ResultHandlerDelegate;                 // 0x004C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRNavigationDynamicCollisionPayload& Data)> DynamicCollisionListener; // 0x005C(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERVoxelNavigationType                         NavigationType;                                    // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJump;                                        // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxJumpDistance;                                   // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFlightHeight;                                   // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlightHeight;                                   // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x007C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_SchedulePathfindingTask) == 0x000008, "Wrong alignment on RNavigationManager_SchedulePathfindingTask");
static_assert(sizeof(RNavigationManager_SchedulePathfindingTask) == 0x000080, "Wrong size on RNavigationManager_SchedulePathfindingTask");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, Actor) == 0x000000, "Member 'RNavigationManager_SchedulePathfindingTask::Actor' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, Destination) == 0x000008, "Member 'RNavigationManager_SchedulePathfindingTask::Destination' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, QueryParams) == 0x000020, "Member 'RNavigationManager_SchedulePathfindingTask::QueryParams' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, DebugParams) == 0x000040, "Member 'RNavigationManager_SchedulePathfindingTask::DebugParams' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, ResultHandlerDelegate) == 0x00004C, "Member 'RNavigationManager_SchedulePathfindingTask::ResultHandlerDelegate' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, DynamicCollisionListener) == 0x00005C, "Member 'RNavigationManager_SchedulePathfindingTask::DynamicCollisionListener' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, NavigationType) == 0x00006C, "Member 'RNavigationManager_SchedulePathfindingTask::NavigationType' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, bAllowJump) == 0x00006D, "Member 'RNavigationManager_SchedulePathfindingTask::bAllowJump' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, MaxJumpDistance) == 0x000070, "Member 'RNavigationManager_SchedulePathfindingTask::MaxJumpDistance' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, MinFlightHeight) == 0x000074, "Member 'RNavigationManager_SchedulePathfindingTask::MinFlightHeight' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, MaxFlightHeight) == 0x000078, "Member 'RNavigationManager_SchedulePathfindingTask::MaxFlightHeight' has a wrong offset!");
static_assert(offsetof(RNavigationManager_SchedulePathfindingTask, ReturnValue) == 0x00007C, "Member 'RNavigationManager_SchedulePathfindingTask::ReturnValue' has a wrong offset!");

// Function RGame.RNavigationManager.StopListeningToDynamicCollisionsForPath
// 0x0198 (0x0198 - 0x0000)
struct RNavigationManager_StopListeningToDynamicCollisionsForPath final
{
public:
	TDelegate<void(const struct FRNavigationDynamicCollisionPayload& Data)> ListenerToClear;         // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRNavigationQueryData                  QueryData;                                         // 0x0010(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_StopListeningToDynamicCollisionsForPath) == 0x000008, "Wrong alignment on RNavigationManager_StopListeningToDynamicCollisionsForPath");
static_assert(sizeof(RNavigationManager_StopListeningToDynamicCollisionsForPath) == 0x000198, "Wrong size on RNavigationManager_StopListeningToDynamicCollisionsForPath");
static_assert(offsetof(RNavigationManager_StopListeningToDynamicCollisionsForPath, ListenerToClear) == 0x000000, "Member 'RNavigationManager_StopListeningToDynamicCollisionsForPath::ListenerToClear' has a wrong offset!");
static_assert(offsetof(RNavigationManager_StopListeningToDynamicCollisionsForPath, QueryData) == 0x000010, "Member 'RNavigationManager_StopListeningToDynamicCollisionsForPath::QueryData' has a wrong offset!");

// Function RGame.RNavigationManager.StopListeningToDynamicCollisionsForPathIndex
// 0x01A0 (0x01A0 - 0x0000)
struct RNavigationManager_StopListeningToDynamicCollisionsForPathIndex final
{
public:
	TDelegate<void(const struct FRNavigationDynamicCollisionPayload& Data)> ListenerToClear;         // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRNavigationQueryData                  QueryData;                                         // 0x0010(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         VolumeIndex;                                       // 0x0198(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_StopListeningToDynamicCollisionsForPathIndex) == 0x000008, "Wrong alignment on RNavigationManager_StopListeningToDynamicCollisionsForPathIndex");
static_assert(sizeof(RNavigationManager_StopListeningToDynamicCollisionsForPathIndex) == 0x0001A0, "Wrong size on RNavigationManager_StopListeningToDynamicCollisionsForPathIndex");
static_assert(offsetof(RNavigationManager_StopListeningToDynamicCollisionsForPathIndex, ListenerToClear) == 0x000000, "Member 'RNavigationManager_StopListeningToDynamicCollisionsForPathIndex::ListenerToClear' has a wrong offset!");
static_assert(offsetof(RNavigationManager_StopListeningToDynamicCollisionsForPathIndex, QueryData) == 0x000010, "Member 'RNavigationManager_StopListeningToDynamicCollisionsForPathIndex::QueryData' has a wrong offset!");
static_assert(offsetof(RNavigationManager_StopListeningToDynamicCollisionsForPathIndex, VolumeIndex) == 0x000198, "Member 'RNavigationManager_StopListeningToDynamicCollisionsForPathIndex::VolumeIndex' has a wrong offset!");

// Function RGame.RNavigationManager.VisualizeDynamicCollisionListeners
// 0x0198 (0x0198 - 0x0000)
struct RNavigationManager_VisualizeDynamicCollisionListeners final
{
public:
	TDelegate<void(const struct FRNavigationDynamicCollisionPayload& Data)> Listener;                // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRNavigationQueryData                  QueryData;                                         // 0x0010(0x0188)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNavigationManager_VisualizeDynamicCollisionListeners) == 0x000008, "Wrong alignment on RNavigationManager_VisualizeDynamicCollisionListeners");
static_assert(sizeof(RNavigationManager_VisualizeDynamicCollisionListeners) == 0x000198, "Wrong size on RNavigationManager_VisualizeDynamicCollisionListeners");
static_assert(offsetof(RNavigationManager_VisualizeDynamicCollisionListeners, Listener) == 0x000000, "Member 'RNavigationManager_VisualizeDynamicCollisionListeners::Listener' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeDynamicCollisionListeners, QueryData) == 0x000010, "Member 'RNavigationManager_VisualizeDynamicCollisionListeners::QueryData' has a wrong offset!");

// Function RGame.RNavigationManager.VisualizeNAVResult
// 0x0058 (0x0058 - 0x0000)
struct RNavigationManager_VisualizeNAVResult final
{
public:
	TArray<struct FVector>                        PathSolution;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Source;                                            // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRNavigationDebugParams                DebugParams;                                       // 0x0044(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 LineColor;                                         // 0x0050(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNavigationManager_VisualizeNAVResult) == 0x000008, "Wrong alignment on RNavigationManager_VisualizeNAVResult");
static_assert(sizeof(RNavigationManager_VisualizeNAVResult) == 0x000058, "Wrong size on RNavigationManager_VisualizeNAVResult");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, PathSolution) == 0x000000, "Member 'RNavigationManager_VisualizeNAVResult::PathSolution' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, Source) == 0x000010, "Member 'RNavigationManager_VisualizeNAVResult::Source' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, Destination) == 0x000028, "Member 'RNavigationManager_VisualizeNAVResult::Destination' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, Reset) == 0x000040, "Member 'RNavigationManager_VisualizeNAVResult::Reset' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, DebugParams) == 0x000044, "Member 'RNavigationManager_VisualizeNAVResult::DebugParams' has a wrong offset!");
static_assert(offsetof(RNavigationManager_VisualizeNAVResult, LineColor) == 0x000050, "Member 'RNavigationManager_VisualizeNAVResult::LineColor' has a wrong offset!");

// Function RGame.RNodeRewardSpawnPoint.SetCharmForController
// 0x0018 (0x0018 - 0x0000)
struct RNodeRewardSpawnPoint_SetCharmForController final
{
public:
	class URMutatorPrimaryAsset*                  CharmPrimaryAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharmPickedUp;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RNodeRewardSpawnPoint_SetCharmForController) == 0x000008, "Wrong alignment on RNodeRewardSpawnPoint_SetCharmForController");
static_assert(sizeof(RNodeRewardSpawnPoint_SetCharmForController) == 0x000018, "Wrong size on RNodeRewardSpawnPoint_SetCharmForController");
static_assert(offsetof(RNodeRewardSpawnPoint_SetCharmForController, CharmPrimaryAsset) == 0x000000, "Member 'RNodeRewardSpawnPoint_SetCharmForController::CharmPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RNodeRewardSpawnPoint_SetCharmForController, bCharmPickedUp) == 0x000008, "Member 'RNodeRewardSpawnPoint_SetCharmForController::bCharmPickedUp' has a wrong offset!");
static_assert(offsetof(RNodeRewardSpawnPoint_SetCharmForController, PlayerController) == 0x000010, "Member 'RNodeRewardSpawnPoint_SetCharmForController::PlayerController' has a wrong offset!");

// Function RGame.RNotificationScreenWidget.PushNotification
// 0x0020 (0x0020 - 0x0000)
struct RNotificationScreenWidget_PushNotification final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	ERNotificationSeverity                        Severity;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNotificationScreenWidget_PushNotification) == 0x000008, "Wrong alignment on RNotificationScreenWidget_PushNotification");
static_assert(sizeof(RNotificationScreenWidget_PushNotification) == 0x000020, "Wrong size on RNotificationScreenWidget_PushNotification");
static_assert(offsetof(RNotificationScreenWidget_PushNotification, PlayerController) == 0x000000, "Member 'RNotificationScreenWidget_PushNotification::PlayerController' has a wrong offset!");
static_assert(offsetof(RNotificationScreenWidget_PushNotification, Message) == 0x000008, "Member 'RNotificationScreenWidget_PushNotification::Message' has a wrong offset!");
static_assert(offsetof(RNotificationScreenWidget_PushNotification, Severity) == 0x000018, "Member 'RNotificationScreenWidget_PushNotification::Severity' has a wrong offset!");

// Function RGame.RNotificationScreenWidget.PushPickupNotification
// 0x0020 (0x0020 - 0x0000)
struct RNotificationScreenWidget_PushPickupNotification final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0010)(Parm, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RNotificationScreenWidget_PushPickupNotification) == 0x000008, "Wrong alignment on RNotificationScreenWidget_PushPickupNotification");
static_assert(sizeof(RNotificationScreenWidget_PushPickupNotification) == 0x000020, "Wrong size on RNotificationScreenWidget_PushPickupNotification");
static_assert(offsetof(RNotificationScreenWidget_PushPickupNotification, PlayerController) == 0x000000, "Member 'RNotificationScreenWidget_PushPickupNotification::PlayerController' has a wrong offset!");
static_assert(offsetof(RNotificationScreenWidget_PushPickupNotification, Message) == 0x000008, "Member 'RNotificationScreenWidget_PushPickupNotification::Message' has a wrong offset!");
static_assert(offsetof(RNotificationScreenWidget_PushPickupNotification, Amount) == 0x000018, "Member 'RNotificationScreenWidget_PushPickupNotification::Amount' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddControlInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_AddControlInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_AddControlInputBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_AddControlInputBlock");
static_assert(sizeof(RPawnMovementComponent_AddControlInputBlock) == 0x000008, "Wrong size on RPawnMovementComponent_AddControlInputBlock");
static_assert(offsetof(RPawnMovementComponent_AddControlInputBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_AddControlInputBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddDashBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_AddDashBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_AddDashBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_AddDashBlock");
static_assert(sizeof(RPawnMovementComponent_AddDashBlock) == 0x000008, "Wrong size on RPawnMovementComponent_AddDashBlock");
static_assert(offsetof(RPawnMovementComponent_AddDashBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_AddDashBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddForce
// 0x0018 (0x0018 - 0x0000)
struct RPawnMovementComponent_AddForce final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_AddForce) == 0x000008, "Wrong alignment on RPawnMovementComponent_AddForce");
static_assert(sizeof(RPawnMovementComponent_AddForce) == 0x000018, "Wrong size on RPawnMovementComponent_AddForce");
static_assert(offsetof(RPawnMovementComponent_AddForce, Force) == 0x000000, "Member 'RPawnMovementComponent_AddForce::Force' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddImpulse
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_AddImpulse final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityChange;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_AddImpulse) == 0x000008, "Wrong alignment on RPawnMovementComponent_AddImpulse");
static_assert(sizeof(RPawnMovementComponent_AddImpulse) == 0x000020, "Wrong size on RPawnMovementComponent_AddImpulse");
static_assert(offsetof(RPawnMovementComponent_AddImpulse, Impulse) == 0x000000, "Member 'RPawnMovementComponent_AddImpulse::Impulse' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_AddImpulse, bVelocityChange) == 0x000018, "Member 'RPawnMovementComponent_AddImpulse::bVelocityChange' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddInputPhysicsBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_AddInputPhysicsBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_AddInputPhysicsBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_AddInputPhysicsBlock");
static_assert(sizeof(RPawnMovementComponent_AddInputPhysicsBlock) == 0x000008, "Wrong size on RPawnMovementComponent_AddInputPhysicsBlock");
static_assert(offsetof(RPawnMovementComponent_AddInputPhysicsBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_AddInputPhysicsBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.AddJumpBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_AddJumpBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_AddJumpBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_AddJumpBlock");
static_assert(sizeof(RPawnMovementComponent_AddJumpBlock) == 0x000008, "Wrong size on RPawnMovementComponent_AddJumpBlock");
static_assert(offsetof(RPawnMovementComponent_AddJumpBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_AddJumpBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.EndCharge
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_EndCharge final
{
public:
	EChargeEndedReason                            Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_EndCharge) == 0x000001, "Wrong alignment on RPawnMovementComponent_EndCharge");
static_assert(sizeof(RPawnMovementComponent_EndCharge) == 0x000001, "Wrong size on RPawnMovementComponent_EndCharge");
static_assert(offsetof(RPawnMovementComponent_EndCharge, Reason) == 0x000000, "Member 'RPawnMovementComponent_EndCharge::Reason' has a wrong offset!");

// Function RGame.RPawnMovementComponent.Knockback
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_Knockback final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityChange;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_Knockback) == 0x000008, "Wrong alignment on RPawnMovementComponent_Knockback");
static_assert(sizeof(RPawnMovementComponent_Knockback) == 0x000020, "Wrong size on RPawnMovementComponent_Knockback");
static_assert(offsetof(RPawnMovementComponent_Knockback, Impulse) == 0x000000, "Member 'RPawnMovementComponent_Knockback::Impulse' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_Knockback, bVelocityChange) == 0x000018, "Member 'RPawnMovementComponent_Knockback::bVelocityChange' has a wrong offset!");

// Function RGame.RPawnMovementComponent.Launch
// 0x0018 (0x0018 - 0x0000)
struct RPawnMovementComponent_Launch final
{
public:
	struct FVector                                LaunchVelocity;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_Launch) == 0x000008, "Wrong alignment on RPawnMovementComponent_Launch");
static_assert(sizeof(RPawnMovementComponent_Launch) == 0x000018, "Wrong size on RPawnMovementComponent_Launch");
static_assert(offsetof(RPawnMovementComponent_Launch, LaunchVelocity) == 0x000000, "Member 'RPawnMovementComponent_Launch::LaunchVelocity' has a wrong offset!");

// Function RGame.RPawnMovementComponent.OnRep_PawnMovementState
// 0x0080 (0x0080 - 0x0000)
struct RPawnMovementComponent_OnRep_PawnMovementState final
{
public:
	struct FRPawnMovementState                    OldState;                                          // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_OnRep_PawnMovementState) == 0x000008, "Wrong alignment on RPawnMovementComponent_OnRep_PawnMovementState");
static_assert(sizeof(RPawnMovementComponent_OnRep_PawnMovementState) == 0x000080, "Wrong size on RPawnMovementComponent_OnRep_PawnMovementState");
static_assert(offsetof(RPawnMovementComponent_OnRep_PawnMovementState, OldState) == 0x000000, "Member 'RPawnMovementComponent_OnRep_PawnMovementState::OldState' has a wrong offset!");

// Function RGame.RPawnMovementComponent.RemoveControlInputBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_RemoveControlInputBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_RemoveControlInputBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_RemoveControlInputBlock");
static_assert(sizeof(RPawnMovementComponent_RemoveControlInputBlock) == 0x000008, "Wrong size on RPawnMovementComponent_RemoveControlInputBlock");
static_assert(offsetof(RPawnMovementComponent_RemoveControlInputBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_RemoveControlInputBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.RemoveDashBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_RemoveDashBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_RemoveDashBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_RemoveDashBlock");
static_assert(sizeof(RPawnMovementComponent_RemoveDashBlock) == 0x000008, "Wrong size on RPawnMovementComponent_RemoveDashBlock");
static_assert(offsetof(RPawnMovementComponent_RemoveDashBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_RemoveDashBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.RemoveInputPhysicsBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_RemoveInputPhysicsBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_RemoveInputPhysicsBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_RemoveInputPhysicsBlock");
static_assert(sizeof(RPawnMovementComponent_RemoveInputPhysicsBlock) == 0x000008, "Wrong size on RPawnMovementComponent_RemoveInputPhysicsBlock");
static_assert(offsetof(RPawnMovementComponent_RemoveInputPhysicsBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_RemoveInputPhysicsBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.RemoveJumpBlock
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_RemoveJumpBlock final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_RemoveJumpBlock) == 0x000004, "Wrong alignment on RPawnMovementComponent_RemoveJumpBlock");
static_assert(sizeof(RPawnMovementComponent_RemoveJumpBlock) == 0x000008, "Wrong size on RPawnMovementComponent_RemoveJumpBlock");
static_assert(offsetof(RPawnMovementComponent_RemoveJumpBlock, Key) == 0x000000, "Member 'RPawnMovementComponent_RemoveJumpBlock::Key' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SendStateAndInput_Server
// 0x0118 (0x0118 - 0x0000)
struct RPawnMovementComponent_SendStateAndInput_Server final
{
public:
	struct FRPawnMovementState                    NewState;                                          // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FRPawnMovementInput                    NewInput;                                          // 0x0080(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_SendStateAndInput_Server) == 0x000008, "Wrong alignment on RPawnMovementComponent_SendStateAndInput_Server");
static_assert(sizeof(RPawnMovementComponent_SendStateAndInput_Server) == 0x000118, "Wrong size on RPawnMovementComponent_SendStateAndInput_Server");
static_assert(offsetof(RPawnMovementComponent_SendStateAndInput_Server, NewState) == 0x000000, "Member 'RPawnMovementComponent_SendStateAndInput_Server::NewState' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_SendStateAndInput_Server, NewInput) == 0x000080, "Member 'RPawnMovementComponent_SendStateAndInput_Server::NewInput' has a wrong offset!");

// Function RGame.RPawnMovementComponent.ServerDoJump
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_ServerDoJump final
{
public:
	uint32                                        EventId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpHeightMultiplier;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_ServerDoJump) == 0x000004, "Wrong alignment on RPawnMovementComponent_ServerDoJump");
static_assert(sizeof(RPawnMovementComponent_ServerDoJump) == 0x000008, "Wrong size on RPawnMovementComponent_ServerDoJump");
static_assert(offsetof(RPawnMovementComponent_ServerDoJump, EventId) == 0x000000, "Member 'RPawnMovementComponent_ServerDoJump::EventId' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_ServerDoJump, JumpHeightMultiplier) == 0x000004, "Member 'RPawnMovementComponent_ServerDoJump::JumpHeightMultiplier' has a wrong offset!");

// Function RGame.RPawnMovementComponent.ServerSetInput
// 0x0098 (0x0098 - 0x0000)
struct RPawnMovementComponent_ServerSetInput final
{
public:
	struct FRPawnMovementInput                    NewInput;                                          // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_ServerSetInput) == 0x000008, "Wrong alignment on RPawnMovementComponent_ServerSetInput");
static_assert(sizeof(RPawnMovementComponent_ServerSetInput) == 0x000098, "Wrong size on RPawnMovementComponent_ServerSetInput");
static_assert(offsetof(RPawnMovementComponent_ServerSetInput, NewInput) == 0x000000, "Member 'RPawnMovementComponent_ServerSetInput::NewInput' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetFrozenBounceOnWalls
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_SetFrozenBounceOnWalls final
{
public:
	bool                                          bNewFrozenBounceOnWalls;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_SetFrozenBounceOnWalls) == 0x000001, "Wrong alignment on RPawnMovementComponent_SetFrozenBounceOnWalls");
static_assert(sizeof(RPawnMovementComponent_SetFrozenBounceOnWalls) == 0x000001, "Wrong size on RPawnMovementComponent_SetFrozenBounceOnWalls");
static_assert(offsetof(RPawnMovementComponent_SetFrozenBounceOnWalls, bNewFrozenBounceOnWalls) == 0x000000, "Member 'RPawnMovementComponent_SetFrozenBounceOnWalls::bNewFrozenBounceOnWalls' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetLastWalkingLocation
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_SetLastWalkingLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideFailsafeTeleportLocation;                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_SetLastWalkingLocation) == 0x000008, "Wrong alignment on RPawnMovementComponent_SetLastWalkingLocation");
static_assert(sizeof(RPawnMovementComponent_SetLastWalkingLocation) == 0x000020, "Wrong size on RPawnMovementComponent_SetLastWalkingLocation");
static_assert(offsetof(RPawnMovementComponent_SetLastWalkingLocation, Location) == 0x000000, "Member 'RPawnMovementComponent_SetLastWalkingLocation::Location' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_SetLastWalkingLocation, bOverrideFailsafeTeleportLocation) == 0x000018, "Member 'RPawnMovementComponent_SetLastWalkingLocation::bOverrideFailsafeTeleportLocation' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetMovementInput
// 0x0010 (0x0010 - 0x0000)
struct RPawnMovementComponent_SetMovementInput final
{
public:
	struct FVector2D                              NewMovementInput;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_SetMovementInput) == 0x000008, "Wrong alignment on RPawnMovementComponent_SetMovementInput");
static_assert(sizeof(RPawnMovementComponent_SetMovementInput) == 0x000010, "Wrong size on RPawnMovementComponent_SetMovementInput");
static_assert(offsetof(RPawnMovementComponent_SetMovementInput, NewMovementInput) == 0x000000, "Member 'RPawnMovementComponent_SetMovementInput::NewMovementInput' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetMovementTargetActor
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_SetMovementTargetActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_SetMovementTargetActor) == 0x000008, "Wrong alignment on RPawnMovementComponent_SetMovementTargetActor");
static_assert(sizeof(RPawnMovementComponent_SetMovementTargetActor) == 0x000008, "Wrong size on RPawnMovementComponent_SetMovementTargetActor");
static_assert(offsetof(RPawnMovementComponent_SetMovementTargetActor, Actor) == 0x000000, "Member 'RPawnMovementComponent_SetMovementTargetActor::Actor' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetRotationTargetActor
// 0x0010 (0x0010 - 0x0000)
struct RPawnMovementComponent_SetRotationTargetActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideVectorRotationLock;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_SetRotationTargetActor) == 0x000008, "Wrong alignment on RPawnMovementComponent_SetRotationTargetActor");
static_assert(sizeof(RPawnMovementComponent_SetRotationTargetActor) == 0x000010, "Wrong size on RPawnMovementComponent_SetRotationTargetActor");
static_assert(offsetof(RPawnMovementComponent_SetRotationTargetActor, Actor) == 0x000000, "Member 'RPawnMovementComponent_SetRotationTargetActor::Actor' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_SetRotationTargetActor, bOverrideVectorRotationLock) == 0x000008, "Member 'RPawnMovementComponent_SetRotationTargetActor::bOverrideVectorRotationLock' has a wrong offset!");

// Function RGame.RPawnMovementComponent.SetRotationTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_SetRotationTargetLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewLockRotationToVector;                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_SetRotationTargetLocation) == 0x000008, "Wrong alignment on RPawnMovementComponent_SetRotationTargetLocation");
static_assert(sizeof(RPawnMovementComponent_SetRotationTargetLocation) == 0x000020, "Wrong size on RPawnMovementComponent_SetRotationTargetLocation");
static_assert(offsetof(RPawnMovementComponent_SetRotationTargetLocation, Location) == 0x000000, "Member 'RPawnMovementComponent_SetRotationTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_SetRotationTargetLocation, bNewLockRotationToVector) == 0x000018, "Member 'RPawnMovementComponent_SetRotationTargetLocation::bNewLockRotationToVector' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartChargeActor
// 0x0018 (0x0018 - 0x0000)
struct RPawnMovementComponent_StartChargeActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetReachedTolerance;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndOnTargetReached;                               // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_StartChargeActor) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartChargeActor");
static_assert(sizeof(RPawnMovementComponent_StartChargeActor) == 0x000018, "Wrong size on RPawnMovementComponent_StartChargeActor");
static_assert(offsetof(RPawnMovementComponent_StartChargeActor, Actor) == 0x000000, "Member 'RPawnMovementComponent_StartChargeActor::Actor' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeActor, TargetReachedTolerance) == 0x000008, "Member 'RPawnMovementComponent_StartChargeActor::TargetReachedTolerance' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeActor, SpeedMultiplier) == 0x00000C, "Member 'RPawnMovementComponent_StartChargeActor::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeActor, TimeLimit) == 0x000010, "Member 'RPawnMovementComponent_StartChargeActor::TimeLimit' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeActor, bEndOnTargetReached) == 0x000014, "Member 'RPawnMovementComponent_StartChargeActor::bEndOnTargetReached' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartChargeDirection
// 0x0028 (0x0028 - 0x0000)
struct RPawnMovementComponent_StartChargeDirection final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBounceOnWalls;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnWalls;                                      // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBounceOnPits;                                     // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopOnPits;                                       // 0x0023(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_StartChargeDirection) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartChargeDirection");
static_assert(sizeof(RPawnMovementComponent_StartChargeDirection) == 0x000028, "Wrong size on RPawnMovementComponent_StartChargeDirection");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, Direction) == 0x000000, "Member 'RPawnMovementComponent_StartChargeDirection::Direction' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, SpeedMultiplier) == 0x000018, "Member 'RPawnMovementComponent_StartChargeDirection::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, TimeLimit) == 0x00001C, "Member 'RPawnMovementComponent_StartChargeDirection::TimeLimit' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, bBounceOnWalls) == 0x000020, "Member 'RPawnMovementComponent_StartChargeDirection::bBounceOnWalls' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, bStopOnWalls) == 0x000021, "Member 'RPawnMovementComponent_StartChargeDirection::bStopOnWalls' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, bBounceOnPits) == 0x000022, "Member 'RPawnMovementComponent_StartChargeDirection::bBounceOnPits' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeDirection, bStopOnPits) == 0x000023, "Member 'RPawnMovementComponent_StartChargeDirection::bStopOnPits' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartChargeLocation
// 0x0028 (0x0028 - 0x0000)
struct RPawnMovementComponent_StartChargeLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetReachedTolerance;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLimit;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndOnTargetReached;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_StartChargeLocation) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartChargeLocation");
static_assert(sizeof(RPawnMovementComponent_StartChargeLocation) == 0x000028, "Wrong size on RPawnMovementComponent_StartChargeLocation");
static_assert(offsetof(RPawnMovementComponent_StartChargeLocation, Location) == 0x000000, "Member 'RPawnMovementComponent_StartChargeLocation::Location' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeLocation, TargetReachedTolerance) == 0x000018, "Member 'RPawnMovementComponent_StartChargeLocation::TargetReachedTolerance' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeLocation, SpeedMultiplier) == 0x00001C, "Member 'RPawnMovementComponent_StartChargeLocation::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeLocation, TimeLimit) == 0x000020, "Member 'RPawnMovementComponent_StartChargeLocation::TimeLimit' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartChargeLocation, bEndOnTargetReached) == 0x000024, "Member 'RPawnMovementComponent_StartChargeLocation::bEndOnTargetReached' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartDash
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_StartDash final
{
public:
	struct FVector                                WorldDirection;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedMultiplier;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceMultiplier;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_StartDash) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartDash");
static_assert(sizeof(RPawnMovementComponent_StartDash) == 0x000020, "Wrong size on RPawnMovementComponent_StartDash");
static_assert(offsetof(RPawnMovementComponent_StartDash, WorldDirection) == 0x000000, "Member 'RPawnMovementComponent_StartDash::WorldDirection' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartDash, SpeedMultiplier) == 0x000018, "Member 'RPawnMovementComponent_StartDash::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartDash, DistanceMultiplier) == 0x00001C, "Member 'RPawnMovementComponent_StartDash::DistanceMultiplier' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartDirectLerp
// 0x0020 (0x0020 - 0x0000)
struct RPawnMovementComponent_StartDirectLerp final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpDuration;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_StartDirectLerp) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartDirectLerp");
static_assert(sizeof(RPawnMovementComponent_StartDirectLerp) == 0x000020, "Wrong size on RPawnMovementComponent_StartDirectLerp");
static_assert(offsetof(RPawnMovementComponent_StartDirectLerp, TargetLocation) == 0x000000, "Member 'RPawnMovementComponent_StartDirectLerp::TargetLocation' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartDirectLerp, LerpDuration) == 0x000018, "Member 'RPawnMovementComponent_StartDirectLerp::LerpDuration' has a wrong offset!");

// Function RGame.RPawnMovementComponent.StartFixedCurve
// 0x0030 (0x0030 - 0x0000)
struct RPawnMovementComponent_StartFixedCurve final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndWorldLocation;                                  // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TimeModifier;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_StartFixedCurve) == 0x000008, "Wrong alignment on RPawnMovementComponent_StartFixedCurve");
static_assert(sizeof(RPawnMovementComponent_StartFixedCurve) == 0x000030, "Wrong size on RPawnMovementComponent_StartFixedCurve");
static_assert(offsetof(RPawnMovementComponent_StartFixedCurve, Curve) == 0x000000, "Member 'RPawnMovementComponent_StartFixedCurve::Curve' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartFixedCurve, EndWorldLocation) == 0x000008, "Member 'RPawnMovementComponent_StartFixedCurve::EndWorldLocation' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartFixedCurve, BaseTime) == 0x000020, "Member 'RPawnMovementComponent_StartFixedCurve::BaseTime' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_StartFixedCurve, TimeModifier) == 0x000028, "Member 'RPawnMovementComponent_StartFixedCurve::TimeModifier' has a wrong offset!");

// Function RGame.RPawnMovementComponent.TeleportActor
// 0x0018 (0x0018 - 0x0000)
struct RPawnMovementComponent_TeleportActor final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_TeleportActor) == 0x000008, "Wrong alignment on RPawnMovementComponent_TeleportActor");
static_assert(sizeof(RPawnMovementComponent_TeleportActor) == 0x000018, "Wrong size on RPawnMovementComponent_TeleportActor");
static_assert(offsetof(RPawnMovementComponent_TeleportActor, NewLocation) == 0x000000, "Member 'RPawnMovementComponent_TeleportActor::NewLocation' has a wrong offset!");

// Function RGame.RPawnMovementComponent.TryJump
// 0x0008 (0x0008 - 0x0000)
struct RPawnMovementComponent_TryJump final
{
public:
	float                                         JumpHeightMultiplier;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_TryJump) == 0x000004, "Wrong alignment on RPawnMovementComponent_TryJump");
static_assert(sizeof(RPawnMovementComponent_TryJump) == 0x000008, "Wrong size on RPawnMovementComponent_TryJump");
static_assert(offsetof(RPawnMovementComponent_TryJump, JumpHeightMultiplier) == 0x000000, "Member 'RPawnMovementComponent_TryJump::JumpHeightMultiplier' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_TryJump, ReturnValue) == 0x000004, "Member 'RPawnMovementComponent_TryJump::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.GetSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_GetSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_GetSurfaceType) == 0x000001, "Wrong alignment on RPawnMovementComponent_GetSurfaceType");
static_assert(sizeof(RPawnMovementComponent_GetSurfaceType) == 0x000001, "Wrong size on RPawnMovementComponent_GetSurfaceType");
static_assert(offsetof(RPawnMovementComponent_GetSurfaceType, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_GetSurfaceType::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.GetWorldInputVector
// 0x0018 (0x0018 - 0x0000)
struct RPawnMovementComponent_GetWorldInputVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_GetWorldInputVector) == 0x000008, "Wrong alignment on RPawnMovementComponent_GetWorldInputVector");
static_assert(sizeof(RPawnMovementComponent_GetWorldInputVector) == 0x000018, "Wrong size on RPawnMovementComponent_GetWorldInputVector");
static_assert(offsetof(RPawnMovementComponent_GetWorldInputVector, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_GetWorldInputVector::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.IsControlInputBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_IsControlInputBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_IsControlInputBlocked) == 0x000001, "Wrong alignment on RPawnMovementComponent_IsControlInputBlocked");
static_assert(sizeof(RPawnMovementComponent_IsControlInputBlocked) == 0x000001, "Wrong size on RPawnMovementComponent_IsControlInputBlocked");
static_assert(offsetof(RPawnMovementComponent_IsControlInputBlocked, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_IsControlInputBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.IsDashingBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_IsDashingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_IsDashingBlocked) == 0x000001, "Wrong alignment on RPawnMovementComponent_IsDashingBlocked");
static_assert(sizeof(RPawnMovementComponent_IsDashingBlocked) == 0x000001, "Wrong size on RPawnMovementComponent_IsDashingBlocked");
static_assert(offsetof(RPawnMovementComponent_IsDashingBlocked, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_IsDashingBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.IsInputPhysicsBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_IsInputPhysicsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_IsInputPhysicsBlocked) == 0x000001, "Wrong alignment on RPawnMovementComponent_IsInputPhysicsBlocked");
static_assert(sizeof(RPawnMovementComponent_IsInputPhysicsBlocked) == 0x000001, "Wrong size on RPawnMovementComponent_IsInputPhysicsBlocked");
static_assert(offsetof(RPawnMovementComponent_IsInputPhysicsBlocked, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_IsInputPhysicsBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.IsJumpingBlocked
// 0x0001 (0x0001 - 0x0000)
struct RPawnMovementComponent_IsJumpingBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_IsJumpingBlocked) == 0x000001, "Wrong alignment on RPawnMovementComponent_IsJumpingBlocked");
static_assert(sizeof(RPawnMovementComponent_IsJumpingBlocked) == 0x000001, "Wrong size on RPawnMovementComponent_IsJumpingBlocked");
static_assert(offsetof(RPawnMovementComponent_IsJumpingBlocked, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_IsJumpingBlocked::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.IsWalkableAngle
// 0x0108 (0x0108 - 0x0000)
struct RPawnMovementComponent_IsWalkableAngle final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPawnMovementComponent_IsWalkableAngle) == 0x000008, "Wrong alignment on RPawnMovementComponent_IsWalkableAngle");
static_assert(sizeof(RPawnMovementComponent_IsWalkableAngle) == 0x000108, "Wrong size on RPawnMovementComponent_IsWalkableAngle");
static_assert(offsetof(RPawnMovementComponent_IsWalkableAngle, Hit) == 0x000000, "Member 'RPawnMovementComponent_IsWalkableAngle::Hit' has a wrong offset!");
static_assert(offsetof(RPawnMovementComponent_IsWalkableAngle, ReturnValue) == 0x000100, "Member 'RPawnMovementComponent_IsWalkableAngle::ReturnValue' has a wrong offset!");

// Function RGame.RPawnMovementComponent.MovementInput
// 0x0010 (0x0010 - 0x0000)
struct RPawnMovementComponent_MovementInput final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPawnMovementComponent_MovementInput) == 0x000008, "Wrong alignment on RPawnMovementComponent_MovementInput");
static_assert(sizeof(RPawnMovementComponent_MovementInput) == 0x000010, "Wrong size on RPawnMovementComponent_MovementInput");
static_assert(offsetof(RPawnMovementComponent_MovementInput, ReturnValue) == 0x000000, "Member 'RPawnMovementComponent_MovementInput::ReturnValue' has a wrong offset!");

// Function RGame.RObjectHighlightWidget.SetInfo
// 0x0020 (0x0020 - 0x0000)
struct RObjectHighlightWidget_SetInfo final
{
public:
	class FText                                   ObjectName;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Info;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RObjectHighlightWidget_SetInfo) == 0x000008, "Wrong alignment on RObjectHighlightWidget_SetInfo");
static_assert(sizeof(RObjectHighlightWidget_SetInfo) == 0x000020, "Wrong size on RObjectHighlightWidget_SetInfo");
static_assert(offsetof(RObjectHighlightWidget_SetInfo, ObjectName) == 0x000000, "Member 'RObjectHighlightWidget_SetInfo::ObjectName' has a wrong offset!");
static_assert(offsetof(RObjectHighlightWidget_SetInfo, Info) == 0x000010, "Member 'RObjectHighlightWidget_SetInfo::Info' has a wrong offset!");

// Function RGame.ROffScreenIndicatorWidget.GetDirectionImage
// 0x0008 (0x0008 - 0x0000)
struct ROffScreenIndicatorWidget_GetDirectionImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROffScreenIndicatorWidget_GetDirectionImage) == 0x000008, "Wrong alignment on ROffScreenIndicatorWidget_GetDirectionImage");
static_assert(sizeof(ROffScreenIndicatorWidget_GetDirectionImage) == 0x000008, "Wrong size on ROffScreenIndicatorWidget_GetDirectionImage");
static_assert(offsetof(ROffScreenIndicatorWidget_GetDirectionImage, ReturnValue) == 0x000000, "Member 'ROffScreenIndicatorWidget_GetDirectionImage::ReturnValue' has a wrong offset!");

// Function RGame.ROffScreenIndicatorWidget.Setup
// 0x0010 (0x0010 - 0x0000)
struct ROffScreenIndicatorWidget_Setup final
{
public:
	class UCanvasPanel*                           CanvasPanel;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROffScreenIndicatorWidget_Setup) == 0x000008, "Wrong alignment on ROffScreenIndicatorWidget_Setup");
static_assert(sizeof(ROffScreenIndicatorWidget_Setup) == 0x000010, "Wrong size on ROffScreenIndicatorWidget_Setup");
static_assert(offsetof(ROffScreenIndicatorWidget_Setup, CanvasPanel) == 0x000000, "Member 'ROffScreenIndicatorWidget_Setup::CanvasPanel' has a wrong offset!");
static_assert(offsetof(ROffScreenIndicatorWidget_Setup, TargetActor) == 0x000008, "Member 'ROffScreenIndicatorWidget_Setup::TargetActor' has a wrong offset!");

// Function RGame.ROnlineSubsystem.KickPlayer
// 0x0008 (0x0008 - 0x0000)
struct ROnlineSubsystem_KickPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROnlineSubsystem_KickPlayer) == 0x000008, "Wrong alignment on ROnlineSubsystem_KickPlayer");
static_assert(sizeof(ROnlineSubsystem_KickPlayer) == 0x000008, "Wrong size on ROnlineSubsystem_KickPlayer");
static_assert(offsetof(ROnlineSubsystem_KickPlayer, PlayerController) == 0x000000, "Member 'ROnlineSubsystem_KickPlayer::PlayerController' has a wrong offset!");

// Function RGame.ROnlineSubsystem.HasNetworkFailure
// 0x0001 (0x0001 - 0x0000)
struct ROnlineSubsystem_HasNetworkFailure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROnlineSubsystem_HasNetworkFailure) == 0x000001, "Wrong alignment on ROnlineSubsystem_HasNetworkFailure");
static_assert(sizeof(ROnlineSubsystem_HasNetworkFailure) == 0x000001, "Wrong size on ROnlineSubsystem_HasNetworkFailure");
static_assert(offsetof(ROnlineSubsystem_HasNetworkFailure, ReturnValue) == 0x000000, "Member 'ROnlineSubsystem_HasNetworkFailure::ReturnValue' has a wrong offset!");

// Function RGame.ROnlineSubsystem.IsDLCInstalled
// 0x0018 (0x0018 - 0x0000)
struct ROnlineSubsystem_IsDLCInstalled final
{
public:
	class FString                                 DLCId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROnlineSubsystem_IsDLCInstalled) == 0x000008, "Wrong alignment on ROnlineSubsystem_IsDLCInstalled");
static_assert(sizeof(ROnlineSubsystem_IsDLCInstalled) == 0x000018, "Wrong size on ROnlineSubsystem_IsDLCInstalled");
static_assert(offsetof(ROnlineSubsystem_IsDLCInstalled, DLCId) == 0x000000, "Member 'ROnlineSubsystem_IsDLCInstalled::DLCId' has a wrong offset!");
static_assert(offsetof(ROnlineSubsystem_IsDLCInstalled, ReturnValue) == 0x000010, "Member 'ROnlineSubsystem_IsDLCInstalled::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetOverworldManager
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_GetOverworldManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AROverworldManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetOverworldManager) == 0x000008, "Wrong alignment on ROverworldManager_GetOverworldManager");
static_assert(sizeof(ROverworldManager_GetOverworldManager) == 0x000010, "Wrong size on ROverworldManager_GetOverworldManager");
static_assert(offsetof(ROverworldManager_GetOverworldManager, WorldContextObject) == 0x000000, "Member 'ROverworldManager_GetOverworldManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetOverworldManager, ReturnValue) == 0x000008, "Member 'ROverworldManager_GetOverworldManager::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.AddEncounterExtraRewardData
// 0x0050 (0x0050 - 0x0000)
struct ROverworldManager_AddEncounterExtraRewardData final
{
public:
	TSoftClassPtr<class UClass>                   SoftRewardClass;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class URAreaData>              SoftFixedAreaData;                                 // 0x0028(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_AddEncounterExtraRewardData) == 0x000008, "Wrong alignment on ROverworldManager_AddEncounterExtraRewardData");
static_assert(sizeof(ROverworldManager_AddEncounterExtraRewardData) == 0x000050, "Wrong size on ROverworldManager_AddEncounterExtraRewardData");
static_assert(offsetof(ROverworldManager_AddEncounterExtraRewardData, SoftRewardClass) == 0x000000, "Member 'ROverworldManager_AddEncounterExtraRewardData::SoftRewardClass' has a wrong offset!");
static_assert(offsetof(ROverworldManager_AddEncounterExtraRewardData, SoftFixedAreaData) == 0x000028, "Member 'ROverworldManager_AddEncounterExtraRewardData::SoftFixedAreaData' has a wrong offset!");

// Function RGame.ROverworldManager.AddExtraLevelEntryToArea
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_AddExtraLevelEntryToArea final
{
public:
	class URAreaData*                             AreaData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRExtraLevelEntry                      NewExtraLevelEntry;                                // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_AddExtraLevelEntryToArea) == 0x000008, "Wrong alignment on ROverworldManager_AddExtraLevelEntryToArea");
static_assert(sizeof(ROverworldManager_AddExtraLevelEntryToArea) == 0x000018, "Wrong size on ROverworldManager_AddExtraLevelEntryToArea");
static_assert(offsetof(ROverworldManager_AddExtraLevelEntryToArea, AreaData) == 0x000000, "Member 'ROverworldManager_AddExtraLevelEntryToArea::AreaData' has a wrong offset!");
static_assert(offsetof(ROverworldManager_AddExtraLevelEntryToArea, NewExtraLevelEntry) == 0x000008, "Member 'ROverworldManager_AddExtraLevelEntryToArea::NewExtraLevelEntry' has a wrong offset!");

// Function RGame.ROverworldManager.GetAreaIndex
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetAreaIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetAreaIndex) == 0x000004, "Wrong alignment on ROverworldManager_GetAreaIndex");
static_assert(sizeof(ROverworldManager_GetAreaIndex) == 0x000004, "Wrong size on ROverworldManager_GetAreaIndex");
static_assert(offsetof(ROverworldManager_GetAreaIndex, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetAreaIndex::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetCompletedNodeIds
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_GetCompletedNodeIds final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetCompletedNodeIds) == 0x000008, "Wrong alignment on ROverworldManager_GetCompletedNodeIds");
static_assert(sizeof(ROverworldManager_GetCompletedNodeIds) == 0x000010, "Wrong size on ROverworldManager_GetCompletedNodeIds");
static_assert(offsetof(ROverworldManager_GetCompletedNodeIds, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetCompletedNodeIds::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetCurrentAreaBossNodeId
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetCurrentAreaBossNodeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetCurrentAreaBossNodeId) == 0x000004, "Wrong alignment on ROverworldManager_GetCurrentAreaBossNodeId");
static_assert(sizeof(ROverworldManager_GetCurrentAreaBossNodeId) == 0x000004, "Wrong size on ROverworldManager_GetCurrentAreaBossNodeId");
static_assert(offsetof(ROverworldManager_GetCurrentAreaBossNodeId, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetCurrentAreaBossNodeId::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetCurrentNodeData
// 0x0008 (0x0008 - 0x0000)
struct ROverworldManager_GetCurrentNodeData final
{
public:
	class URNodeData*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetCurrentNodeData) == 0x000008, "Wrong alignment on ROverworldManager_GetCurrentNodeData");
static_assert(sizeof(ROverworldManager_GetCurrentNodeData) == 0x000008, "Wrong size on ROverworldManager_GetCurrentNodeData");
static_assert(offsetof(ROverworldManager_GetCurrentNodeData, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetCurrentNodeData::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetCurrentNodeId
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetCurrentNodeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetCurrentNodeId) == 0x000004, "Wrong alignment on ROverworldManager_GetCurrentNodeId");
static_assert(sizeof(ROverworldManager_GetCurrentNodeId) == 0x000004, "Wrong size on ROverworldManager_GetCurrentNodeId");
static_assert(offsetof(ROverworldManager_GetCurrentNodeId, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetCurrentNodeId::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetCurrentOverworldArea
// 0x0028 (0x0028 - 0x0000)
struct ROverworldManager_GetCurrentOverworldArea final
{
public:
	struct FROverworldArea                        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetCurrentOverworldArea) == 0x000008, "Wrong alignment on ROverworldManager_GetCurrentOverworldArea");
static_assert(sizeof(ROverworldManager_GetCurrentOverworldArea) == 0x000028, "Wrong size on ROverworldManager_GetCurrentOverworldArea");
static_assert(offsetof(ROverworldManager_GetCurrentOverworldArea, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetCurrentOverworldArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetDepth
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetDepth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetDepth) == 0x000004, "Wrong alignment on ROverworldManager_GetDepth");
static_assert(sizeof(ROverworldManager_GetDepth) == 0x000004, "Wrong size on ROverworldManager_GetDepth");
static_assert(offsetof(ROverworldManager_GetDepth, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetDepth::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetDepthInCurrentArea
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetDepthInCurrentArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetDepthInCurrentArea) == 0x000004, "Wrong alignment on ROverworldManager_GetDepthInCurrentArea");
static_assert(sizeof(ROverworldManager_GetDepthInCurrentArea) == 0x000004, "Wrong size on ROverworldManager_GetDepthInCurrentArea");
static_assert(offsetof(ROverworldManager_GetDepthInCurrentArea, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetDepthInCurrentArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetEncounterRoomPositionOfActorInOverworld
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_GetEncounterRoomPositionOfActorInOverworld final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_GetEncounterRoomPositionOfActorInOverworld) == 0x000008, "Wrong alignment on ROverworldManager_GetEncounterRoomPositionOfActorInOverworld");
static_assert(sizeof(ROverworldManager_GetEncounterRoomPositionOfActorInOverworld) == 0x000010, "Wrong size on ROverworldManager_GetEncounterRoomPositionOfActorInOverworld");
static_assert(offsetof(ROverworldManager_GetEncounterRoomPositionOfActorInOverworld, Actor) == 0x000000, "Member 'ROverworldManager_GetEncounterRoomPositionOfActorInOverworld::Actor' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetEncounterRoomPositionOfActorInOverworld, ReturnValue) == 0x000008, "Member 'ROverworldManager_GetEncounterRoomPositionOfActorInOverworld::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetLevelIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetLevelIndex) == 0x000004, "Wrong alignment on ROverworldManager_GetLevelIndex");
static_assert(sizeof(ROverworldManager_GetLevelIndex) == 0x000004, "Wrong size on ROverworldManager_GetLevelIndex");
static_assert(offsetof(ROverworldManager_GetLevelIndex, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetLevelIndex::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetNextNodeId
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetNextNodeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetNextNodeId) == 0x000004, "Wrong alignment on ROverworldManager_GetNextNodeId");
static_assert(sizeof(ROverworldManager_GetNextNodeId) == 0x000004, "Wrong size on ROverworldManager_GetNextNodeId");
static_assert(offsetof(ROverworldManager_GetNextNodeId, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetNextNodeId::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetNextOverworldArea
// 0x0028 (0x0028 - 0x0000)
struct ROverworldManager_GetNextOverworldArea final
{
public:
	struct FROverworldArea                        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetNextOverworldArea) == 0x000008, "Wrong alignment on ROverworldManager_GetNextOverworldArea");
static_assert(sizeof(ROverworldManager_GetNextOverworldArea) == 0x000028, "Wrong size on ROverworldManager_GetNextOverworldArea");
static_assert(offsetof(ROverworldManager_GetNextOverworldArea, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetNextOverworldArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetNodeChoicePAWithHighestVote
// 0x0020 (0x0020 - 0x0000)
struct ROverworldManager_GetNodeChoicePAWithHighestVote final
{
public:
	TArray<struct FRNodeChoiceVoteData>           NodeChoiceDataVotes;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bGetRewardPA;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URNodeChoicePrimaryAsset*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetNodeChoicePAWithHighestVote) == 0x000008, "Wrong alignment on ROverworldManager_GetNodeChoicePAWithHighestVote");
static_assert(sizeof(ROverworldManager_GetNodeChoicePAWithHighestVote) == 0x000020, "Wrong size on ROverworldManager_GetNodeChoicePAWithHighestVote");
static_assert(offsetof(ROverworldManager_GetNodeChoicePAWithHighestVote, NodeChoiceDataVotes) == 0x000000, "Member 'ROverworldManager_GetNodeChoicePAWithHighestVote::NodeChoiceDataVotes' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetNodeChoicePAWithHighestVote, bGetRewardPA) == 0x000010, "Member 'ROverworldManager_GetNodeChoicePAWithHighestVote::bGetRewardPA' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetNodeChoicePAWithHighestVote, ReturnValue) == 0x000018, "Member 'ROverworldManager_GetNodeChoicePAWithHighestVote::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetNumCompletedNodesInCurrentArea
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetNumCompletedNodesInCurrentArea final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetNumCompletedNodesInCurrentArea) == 0x000004, "Wrong alignment on ROverworldManager_GetNumCompletedNodesInCurrentArea");
static_assert(sizeof(ROverworldManager_GetNumCompletedNodesInCurrentArea) == 0x000004, "Wrong size on ROverworldManager_GetNumCompletedNodesInCurrentArea");
static_assert(offsetof(ROverworldManager_GetNumCompletedNodesInCurrentArea, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetNumCompletedNodesInCurrentArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetNumTotalCompletedNodes
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_GetNumTotalCompletedNodes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetNumTotalCompletedNodes) == 0x000004, "Wrong alignment on ROverworldManager_GetNumTotalCompletedNodes");
static_assert(sizeof(ROverworldManager_GetNumTotalCompletedNodes) == 0x000004, "Wrong size on ROverworldManager_GetNumTotalCompletedNodes");
static_assert(offsetof(ROverworldManager_GetNumTotalCompletedNodes, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetNumTotalCompletedNodes::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetOverworldAreas
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_GetOverworldAreas final
{
public:
	TArray<struct FROverworldArea>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetOverworldAreas) == 0x000008, "Wrong alignment on ROverworldManager_GetOverworldAreas");
static_assert(sizeof(ROverworldManager_GetOverworldAreas) == 0x000010, "Wrong size on ROverworldManager_GetOverworldAreas");
static_assert(offsetof(ROverworldManager_GetOverworldAreas, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetOverworldAreas::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetOverworldAreasInGameLoop
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_GetOverworldAreasInGameLoop final
{
public:
	TArray<struct FROverworldArea>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetOverworldAreasInGameLoop) == 0x000008, "Wrong alignment on ROverworldManager_GetOverworldAreasInGameLoop");
static_assert(sizeof(ROverworldManager_GetOverworldAreasInGameLoop) == 0x000010, "Wrong size on ROverworldManager_GetOverworldAreasInGameLoop");
static_assert(offsetof(ROverworldManager_GetOverworldAreasInGameLoop, ReturnValue) == 0x000000, "Member 'ROverworldManager_GetOverworldAreasInGameLoop::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetOverworldNodeById
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_GetOverworldNodeById final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FROverworldNode                        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetOverworldNodeById) == 0x000008, "Wrong alignment on ROverworldManager_GetOverworldNodeById");
static_assert(sizeof(ROverworldManager_GetOverworldNodeById) == 0x000018, "Wrong size on ROverworldManager_GetOverworldNodeById");
static_assert(offsetof(ROverworldManager_GetOverworldNodeById, ID) == 0x000000, "Member 'ROverworldManager_GetOverworldNodeById::ID' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetOverworldNodeById, ReturnValue) == 0x000008, "Member 'ROverworldManager_GetOverworldNodeById::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetRowIndexByNodeId
// 0x0008 (0x0008 - 0x0000)
struct ROverworldManager_GetRowIndexByNodeId final
{
public:
	int32                                         NodeID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetRowIndexByNodeId) == 0x000004, "Wrong alignment on ROverworldManager_GetRowIndexByNodeId");
static_assert(sizeof(ROverworldManager_GetRowIndexByNodeId) == 0x000008, "Wrong size on ROverworldManager_GetRowIndexByNodeId");
static_assert(offsetof(ROverworldManager_GetRowIndexByNodeId, NodeID) == 0x000000, "Member 'ROverworldManager_GetRowIndexByNodeId::NodeID' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetRowIndexByNodeId, ReturnValue) == 0x000004, "Member 'ROverworldManager_GetRowIndexByNodeId::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.GetRowOfNode
// 0x0008 (0x0008 - 0x0000)
struct ROverworldManager_GetRowOfNode final
{
public:
	int32                                         NodeID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_GetRowOfNode) == 0x000004, "Wrong alignment on ROverworldManager_GetRowOfNode");
static_assert(sizeof(ROverworldManager_GetRowOfNode) == 0x000008, "Wrong size on ROverworldManager_GetRowOfNode");
static_assert(offsetof(ROverworldManager_GetRowOfNode, NodeID) == 0x000000, "Member 'ROverworldManager_GetRowOfNode::NodeID' has a wrong offset!");
static_assert(offsetof(ROverworldManager_GetRowOfNode, ReturnValue) == 0x000004, "Member 'ROverworldManager_GetRowOfNode::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.HasPlayerVotedForCorruptedNode
// 0x0010 (0x0010 - 0x0000)
struct ROverworldManager_HasPlayerVotedForCorruptedNode final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_HasPlayerVotedForCorruptedNode) == 0x000008, "Wrong alignment on ROverworldManager_HasPlayerVotedForCorruptedNode");
static_assert(sizeof(ROverworldManager_HasPlayerVotedForCorruptedNode) == 0x000010, "Wrong size on ROverworldManager_HasPlayerVotedForCorruptedNode");
static_assert(offsetof(ROverworldManager_HasPlayerVotedForCorruptedNode, PlayerController) == 0x000000, "Member 'ROverworldManager_HasPlayerVotedForCorruptedNode::PlayerController' has a wrong offset!");
static_assert(offsetof(ROverworldManager_HasPlayerVotedForCorruptedNode, ReturnValue) == 0x000008, "Member 'ROverworldManager_HasPlayerVotedForCorruptedNode::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsCurrentPortalCorrupted
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsCurrentPortalCorrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsCurrentPortalCorrupted) == 0x000001, "Wrong alignment on ROverworldManager_IsCurrentPortalCorrupted");
static_assert(sizeof(ROverworldManager_IsCurrentPortalCorrupted) == 0x000001, "Wrong size on ROverworldManager_IsCurrentPortalCorrupted");
static_assert(offsetof(ROverworldManager_IsCurrentPortalCorrupted, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsCurrentPortalCorrupted::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsInLastArea
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsInLastArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsInLastArea) == 0x000001, "Wrong alignment on ROverworldManager_IsInLastArea");
static_assert(sizeof(ROverworldManager_IsInLastArea) == 0x000001, "Wrong size on ROverworldManager_IsInLastArea");
static_assert(offsetof(ROverworldManager_IsInLastArea, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsInLastArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsNodeIdInCurrentArea
// 0x0008 (0x0008 - 0x0000)
struct ROverworldManager_IsNodeIdInCurrentArea final
{
public:
	int32                                         NodeID;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_IsNodeIdInCurrentArea) == 0x000004, "Wrong alignment on ROverworldManager_IsNodeIdInCurrentArea");
static_assert(sizeof(ROverworldManager_IsNodeIdInCurrentArea) == 0x000008, "Wrong size on ROverworldManager_IsNodeIdInCurrentArea");
static_assert(offsetof(ROverworldManager_IsNodeIdInCurrentArea, NodeID) == 0x000000, "Member 'ROverworldManager_IsNodeIdInCurrentArea::NodeID' has a wrong offset!");
static_assert(offsetof(ROverworldManager_IsNodeIdInCurrentArea, ReturnValue) == 0x000004, "Member 'ROverworldManager_IsNodeIdInCurrentArea::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsNodePlayable
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_IsNodePlayable final
{
public:
	struct FROverworldNode                        Node;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_IsNodePlayable) == 0x000008, "Wrong alignment on ROverworldManager_IsNodePlayable");
static_assert(sizeof(ROverworldManager_IsNodePlayable) == 0x000018, "Wrong size on ROverworldManager_IsNodePlayable");
static_assert(offsetof(ROverworldManager_IsNodePlayable, Node) == 0x000000, "Member 'ROverworldManager_IsNodePlayable::Node' has a wrong offset!");
static_assert(offsetof(ROverworldManager_IsNodePlayable, ReturnValue) == 0x000010, "Member 'ROverworldManager_IsNodePlayable::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsOnLastNode
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsOnLastNode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsOnLastNode) == 0x000001, "Wrong alignment on ROverworldManager_IsOnLastNode");
static_assert(sizeof(ROverworldManager_IsOnLastNode) == 0x000001, "Wrong size on ROverworldManager_IsOnLastNode");
static_assert(offsetof(ROverworldManager_IsOnLastNode, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsOnLastNode::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.NodeSelected
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_NodeSelected final
{
public:
	int32                                         SelectedNodeId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_NodeSelected) == 0x000004, "Wrong alignment on ROverworldManager_NodeSelected");
static_assert(sizeof(ROverworldManager_NodeSelected) == 0x000018, "Wrong size on ROverworldManager_NodeSelected");
static_assert(offsetof(ROverworldManager_NodeSelected, SelectedNodeId) == 0x000000, "Member 'ROverworldManager_NodeSelected::SelectedNodeId' has a wrong offset!");
static_assert(offsetof(ROverworldManager_NodeSelected, PlayerId) == 0x000004, "Member 'ROverworldManager_NodeSelected::PlayerId' has a wrong offset!");
static_assert(offsetof(ROverworldManager_NodeSelected, Color) == 0x000008, "Member 'ROverworldManager_NodeSelected::Color' has a wrong offset!");

// Function RGame.ROverworldManager.RemoveEncounterExtraRewardData
// 0x0050 (0x0050 - 0x0000)
struct ROverworldManager_RemoveEncounterExtraRewardData final
{
public:
	TSoftClassPtr<class UClass>                   SoftRewardClass;                                   // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class URAreaData>              SoftFixedAreaData;                                 // 0x0028(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_RemoveEncounterExtraRewardData) == 0x000008, "Wrong alignment on ROverworldManager_RemoveEncounterExtraRewardData");
static_assert(sizeof(ROverworldManager_RemoveEncounterExtraRewardData) == 0x000050, "Wrong size on ROverworldManager_RemoveEncounterExtraRewardData");
static_assert(offsetof(ROverworldManager_RemoveEncounterExtraRewardData, SoftRewardClass) == 0x000000, "Member 'ROverworldManager_RemoveEncounterExtraRewardData::SoftRewardClass' has a wrong offset!");
static_assert(offsetof(ROverworldManager_RemoveEncounterExtraRewardData, SoftFixedAreaData) == 0x000028, "Member 'ROverworldManager_RemoveEncounterExtraRewardData::SoftFixedAreaData' has a wrong offset!");

// Function RGame.ROverworldManager.RemoveExtraLevelEntryToArea
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_RemoveExtraLevelEntryToArea final
{
public:
	class URAreaData*                             AreaData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRExtraLevelEntry                      NewExtraLevelEntry;                                // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_RemoveExtraLevelEntryToArea) == 0x000008, "Wrong alignment on ROverworldManager_RemoveExtraLevelEntryToArea");
static_assert(sizeof(ROverworldManager_RemoveExtraLevelEntryToArea) == 0x000018, "Wrong size on ROverworldManager_RemoveExtraLevelEntryToArea");
static_assert(offsetof(ROverworldManager_RemoveExtraLevelEntryToArea, AreaData) == 0x000000, "Member 'ROverworldManager_RemoveExtraLevelEntryToArea::AreaData' has a wrong offset!");
static_assert(offsetof(ROverworldManager_RemoveExtraLevelEntryToArea, NewExtraLevelEntry) == 0x000008, "Member 'ROverworldManager_RemoveExtraLevelEntryToArea::NewExtraLevelEntry' has a wrong offset!");

// Function RGame.ROverworldManager.SetAreaIndex
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_SetAreaIndex final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_SetAreaIndex) == 0x000004, "Wrong alignment on ROverworldManager_SetAreaIndex");
static_assert(sizeof(ROverworldManager_SetAreaIndex) == 0x000004, "Wrong size on ROverworldManager_SetAreaIndex");
static_assert(offsetof(ROverworldManager_SetAreaIndex, NewIndex) == 0x000000, "Member 'ROverworldManager_SetAreaIndex::NewIndex' has a wrong offset!");

// Function RGame.ROverworldManager.SetAreaNodeDataAtIndex
// 0x0038 (0x0038 - 0x0000)
struct ROverworldManager_SetAreaNodeDataAtIndex final
{
public:
	struct FROverworldArea                        Area;                                              // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	class URNodeData*                             NodeData;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ROverworldManager_SetAreaNodeDataAtIndex) == 0x000008, "Wrong alignment on ROverworldManager_SetAreaNodeDataAtIndex");
static_assert(sizeof(ROverworldManager_SetAreaNodeDataAtIndex) == 0x000038, "Wrong size on ROverworldManager_SetAreaNodeDataAtIndex");
static_assert(offsetof(ROverworldManager_SetAreaNodeDataAtIndex, Area) == 0x000000, "Member 'ROverworldManager_SetAreaNodeDataAtIndex::Area' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SetAreaNodeDataAtIndex, NodeData) == 0x000028, "Member 'ROverworldManager_SetAreaNodeDataAtIndex::NodeData' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SetAreaNodeDataAtIndex, Index_0) == 0x000030, "Member 'ROverworldManager_SetAreaNodeDataAtIndex::Index_0' has a wrong offset!");

// Function RGame.ROverworldManager.SetCurrentNodeId
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_SetCurrentNodeId final
{
public:
	int32                                         NewNodeId;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_SetCurrentNodeId) == 0x000004, "Wrong alignment on ROverworldManager_SetCurrentNodeId");
static_assert(sizeof(ROverworldManager_SetCurrentNodeId) == 0x000004, "Wrong size on ROverworldManager_SetCurrentNodeId");
static_assert(offsetof(ROverworldManager_SetCurrentNodeId, NewNodeId) == 0x000000, "Member 'ROverworldManager_SetCurrentNodeId::NewNodeId' has a wrong offset!");

// Function RGame.ROverworldManager.SetLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct ROverworldManager_SetLevelIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_SetLevelIndex) == 0x000004, "Wrong alignment on ROverworldManager_SetLevelIndex");
static_assert(sizeof(ROverworldManager_SetLevelIndex) == 0x000004, "Wrong size on ROverworldManager_SetLevelIndex");
static_assert(offsetof(ROverworldManager_SetLevelIndex, Index_0) == 0x000000, "Member 'ROverworldManager_SetLevelIndex::Index_0' has a wrong offset!");

// Function RGame.ROverworldManager.SetPlayerCorruptedNodeChoiceVote_Server
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URNodeChoicePrimaryAsset*               VotedNodeChoicePA;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URNodeChoicePrimaryAsset*               VotedNodeChoiceRewardPA;                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server) == 0x000008, "Wrong alignment on ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server");
static_assert(sizeof(ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server) == 0x000018, "Wrong size on ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server");
static_assert(offsetof(ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server, PlayerState) == 0x000000, "Member 'ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server::PlayerState' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server, VotedNodeChoicePA) == 0x000008, "Member 'ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server::VotedNodeChoicePA' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server, VotedNodeChoiceRewardPA) == 0x000010, "Member 'ROverworldManager_SetPlayerCorruptedNodeChoiceVote_Server::VotedNodeChoiceRewardPA' has a wrong offset!");

// Function RGame.ROverworldManager.SpawnNodeRewardActor
// 0x0018 (0x0018 - 0x0000)
struct ROverworldManager_SpawnNodeRewardActor final
{
public:
	class AActor*                                 SpawnPointActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     RewardClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URNodeData*                             NodeData;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_SpawnNodeRewardActor) == 0x000008, "Wrong alignment on ROverworldManager_SpawnNodeRewardActor");
static_assert(sizeof(ROverworldManager_SpawnNodeRewardActor) == 0x000018, "Wrong size on ROverworldManager_SpawnNodeRewardActor");
static_assert(offsetof(ROverworldManager_SpawnNodeRewardActor, SpawnPointActor) == 0x000000, "Member 'ROverworldManager_SpawnNodeRewardActor::SpawnPointActor' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SpawnNodeRewardActor, RewardClass) == 0x000008, "Member 'ROverworldManager_SpawnNodeRewardActor::RewardClass' has a wrong offset!");
static_assert(offsetof(ROverworldManager_SpawnNodeRewardActor, NodeData) == 0x000010, "Member 'ROverworldManager_SpawnNodeRewardActor::NodeData' has a wrong offset!");

// Function RGame.ROverworldManager.IsInLobby
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsInLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsInLobby) == 0x000001, "Wrong alignment on ROverworldManager_IsInLobby");
static_assert(sizeof(ROverworldManager_IsInLobby) == 0x000001, "Wrong size on ROverworldManager_IsInLobby");
static_assert(offsetof(ROverworldManager_IsInLobby, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsInLobby::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsInTutorial
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsInTutorial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsInTutorial) == 0x000001, "Wrong alignment on ROverworldManager_IsInTutorial");
static_assert(sizeof(ROverworldManager_IsInTutorial) == 0x000001, "Wrong size on ROverworldManager_IsInTutorial");
static_assert(offsetof(ROverworldManager_IsInTutorial, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsInTutorial::ReturnValue' has a wrong offset!");

// Function RGame.ROverworldManager.IsInUngluArena
// 0x0001 (0x0001 - 0x0000)
struct ROverworldManager_IsInUngluArena final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ROverworldManager_IsInUngluArena) == 0x000001, "Wrong alignment on ROverworldManager_IsInUngluArena");
static_assert(sizeof(ROverworldManager_IsInUngluArena) == 0x000001, "Wrong size on ROverworldManager_IsInUngluArena");
static_assert(offsetof(ROverworldManager_IsInUngluArena, ReturnValue) == 0x000000, "Member 'ROverworldManager_IsInUngluArena::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.GetBaseCost
// 0x0004 (0x0004 - 0x0000)
struct RPickupableItem_GetBaseCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_GetBaseCost) == 0x000004, "Wrong alignment on RPickupableItem_GetBaseCost");
static_assert(sizeof(RPickupableItem_GetBaseCost) == 0x000004, "Wrong size on RPickupableItem_GetBaseCost");
static_assert(offsetof(RPickupableItem_GetBaseCost, ReturnValue) == 0x000000, "Member 'RPickupableItem_GetBaseCost::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.GetPickupCost
// 0x0010 (0x0010 - 0x0000)
struct RPickupableItem_GetPickupCost final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableItem_GetPickupCost) == 0x000008, "Wrong alignment on RPickupableItem_GetPickupCost");
static_assert(sizeof(RPickupableItem_GetPickupCost) == 0x000010, "Wrong size on RPickupableItem_GetPickupCost");
static_assert(offsetof(RPickupableItem_GetPickupCost, PlayerController) == 0x000000, "Member 'RPickupableItem_GetPickupCost::PlayerController' has a wrong offset!");
static_assert(offsetof(RPickupableItem_GetPickupCost, ReturnValue) == 0x000008, "Member 'RPickupableItem_GetPickupCost::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.GetQuantity
// 0x0004 (0x0004 - 0x0000)
struct RPickupableItem_GetQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_GetQuantity) == 0x000004, "Wrong alignment on RPickupableItem_GetQuantity");
static_assert(sizeof(RPickupableItem_GetQuantity) == 0x000004, "Wrong size on RPickupableItem_GetQuantity");
static_assert(offsetof(RPickupableItem_GetQuantity, ReturnValue) == 0x000000, "Member 'RPickupableItem_GetQuantity::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.HasEnoughCurrencyForPickup
// 0x0010 (0x0010 - 0x0000)
struct RPickupableItem_HasEnoughCurrencyForPickup final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableItem_HasEnoughCurrencyForPickup) == 0x000008, "Wrong alignment on RPickupableItem_HasEnoughCurrencyForPickup");
static_assert(sizeof(RPickupableItem_HasEnoughCurrencyForPickup) == 0x000010, "Wrong size on RPickupableItem_HasEnoughCurrencyForPickup");
static_assert(offsetof(RPickupableItem_HasEnoughCurrencyForPickup, PlayerController) == 0x000000, "Member 'RPickupableItem_HasEnoughCurrencyForPickup::PlayerController' has a wrong offset!");
static_assert(offsetof(RPickupableItem_HasEnoughCurrencyForPickup, ReturnValue) == 0x000008, "Member 'RPickupableItem_HasEnoughCurrencyForPickup::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.MakeItemInformationObscured
// 0x0020 (0x0020 - 0x0000)
struct RPickupableItem_MakeItemInformationObscured final
{
public:
	class FText                                   Name_0;                                            // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_MakeItemInformationObscured) == 0x000008, "Wrong alignment on RPickupableItem_MakeItemInformationObscured");
static_assert(sizeof(RPickupableItem_MakeItemInformationObscured) == 0x000020, "Wrong size on RPickupableItem_MakeItemInformationObscured");
static_assert(offsetof(RPickupableItem_MakeItemInformationObscured, Name_0) == 0x000000, "Member 'RPickupableItem_MakeItemInformationObscured::Name_0' has a wrong offset!");
static_assert(offsetof(RPickupableItem_MakeItemInformationObscured, Description) == 0x000010, "Member 'RPickupableItem_MakeItemInformationObscured::Description' has a wrong offset!");

// Function RGame.RPickupableItem.Pickup
// 0x0010 (0x0010 - 0x0000)
struct RPickupableItem_Pickup final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableItem_Pickup) == 0x000008, "Wrong alignment on RPickupableItem_Pickup");
static_assert(sizeof(RPickupableItem_Pickup) == 0x000010, "Wrong size on RPickupableItem_Pickup");
static_assert(offsetof(RPickupableItem_Pickup, PlayerController) == 0x000000, "Member 'RPickupableItem_Pickup::PlayerController' has a wrong offset!");
static_assert(offsetof(RPickupableItem_Pickup, ReturnValue) == 0x000008, "Member 'RPickupableItem_Pickup::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.SetPickupCost
// 0x0004 (0x0004 - 0x0000)
struct RPickupableItem_SetPickupCost final
{
public:
	int32                                         NewCost;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_SetPickupCost) == 0x000004, "Wrong alignment on RPickupableItem_SetPickupCost");
static_assert(sizeof(RPickupableItem_SetPickupCost) == 0x000004, "Wrong size on RPickupableItem_SetPickupCost");
static_assert(offsetof(RPickupableItem_SetPickupCost, NewCost) == 0x000000, "Member 'RPickupableItem_SetPickupCost::NewCost' has a wrong offset!");

// Function RGame.RPickupableItem.SetQuantity
// 0x0004 (0x0004 - 0x0000)
struct RPickupableItem_SetQuantity final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_SetQuantity) == 0x000004, "Wrong alignment on RPickupableItem_SetQuantity");
static_assert(sizeof(RPickupableItem_SetQuantity) == 0x000004, "Wrong size on RPickupableItem_SetQuantity");
static_assert(offsetof(RPickupableItem_SetQuantity, Amount) == 0x000000, "Member 'RPickupableItem_SetQuantity::Amount' has a wrong offset!");

// Function RGame.RPickupableItem.SimulateLootPhysics
// 0x0010 (0x0010 - 0x0000)
struct RPickupableItem_SimulateLootPhysics final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableItem_SimulateLootPhysics) == 0x000008, "Wrong alignment on RPickupableItem_SimulateLootPhysics");
static_assert(sizeof(RPickupableItem_SimulateLootPhysics) == 0x000010, "Wrong size on RPickupableItem_SimulateLootPhysics");
static_assert(offsetof(RPickupableItem_SimulateLootPhysics, Component) == 0x000000, "Member 'RPickupableItem_SimulateLootPhysics::Component' has a wrong offset!");
static_assert(offsetof(RPickupableItem_SimulateLootPhysics, ReturnValue) == 0x000008, "Member 'RPickupableItem_SimulateLootPhysics::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableItem.TriggerPickup
// 0x0008 (0x0008 - 0x0000)
struct RPickupableItem_TriggerPickup final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableItem_TriggerPickup) == 0x000008, "Wrong alignment on RPickupableItem_TriggerPickup");
static_assert(sizeof(RPickupableItem_TriggerPickup) == 0x000008, "Wrong size on RPickupableItem_TriggerPickup");
static_assert(offsetof(RPickupableItem_TriggerPickup, PlayerController) == 0x000000, "Member 'RPickupableItem_TriggerPickup::PlayerController' has a wrong offset!");

// Function RGame.RPickupableMutator.GetGeneratedGodCategoryDataAsset
// 0x0008 (0x0008 - 0x0000)
struct RPickupableMutator_GetGeneratedGodCategoryDataAsset final
{
public:
	class UDataAsset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_GetGeneratedGodCategoryDataAsset) == 0x000008, "Wrong alignment on RPickupableMutator_GetGeneratedGodCategoryDataAsset");
static_assert(sizeof(RPickupableMutator_GetGeneratedGodCategoryDataAsset) == 0x000008, "Wrong size on RPickupableMutator_GetGeneratedGodCategoryDataAsset");
static_assert(offsetof(RPickupableMutator_GetGeneratedGodCategoryDataAsset, ReturnValue) == 0x000000, "Member 'RPickupableMutator_GetGeneratedGodCategoryDataAsset::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableMutator.PickupMutator
// 0x0010 (0x0010 - 0x0000)
struct RPickupableMutator_PickupMutator final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableMutator_PickupMutator) == 0x000008, "Wrong alignment on RPickupableMutator_PickupMutator");
static_assert(sizeof(RPickupableMutator_PickupMutator) == 0x000010, "Wrong size on RPickupableMutator_PickupMutator");
static_assert(offsetof(RPickupableMutator_PickupMutator, PlayerController) == 0x000000, "Member 'RPickupableMutator_PickupMutator::PlayerController' has a wrong offset!");
static_assert(offsetof(RPickupableMutator_PickupMutator, MutatorRank) == 0x000008, "Member 'RPickupableMutator_PickupMutator::MutatorRank' has a wrong offset!");
static_assert(offsetof(RPickupableMutator_PickupMutator, ReturnValue) == 0x00000C, "Member 'RPickupableMutator_PickupMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableMutator.SetMutatorPrimaryAsset
// 0x0008 (0x0008 - 0x0000)
struct RPickupableMutator_SetMutatorPrimaryAsset final
{
public:
	class URMutatorPrimaryAsset*                  MutatorAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_SetMutatorPrimaryAsset) == 0x000008, "Wrong alignment on RPickupableMutator_SetMutatorPrimaryAsset");
static_assert(sizeof(RPickupableMutator_SetMutatorPrimaryAsset) == 0x000008, "Wrong size on RPickupableMutator_SetMutatorPrimaryAsset");
static_assert(offsetof(RPickupableMutator_SetMutatorPrimaryAsset, MutatorAsset) == 0x000000, "Member 'RPickupableMutator_SetMutatorPrimaryAsset::MutatorAsset' has a wrong offset!");

// Function RGame.RPickupableMutator.SetMutatorPrimaryAssetFromTable
// 0x0018 (0x0018 - 0x0000)
struct RPickupableMutator_SetMutatorPrimaryAssetFromTable final
{
public:
	struct FGameplayTag                           InRewardTableType;                                 // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMutatorRarity                                Rarity;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPickupableMutator_SetMutatorPrimaryAssetFromTable) == 0x000008, "Wrong alignment on RPickupableMutator_SetMutatorPrimaryAssetFromTable");
static_assert(sizeof(RPickupableMutator_SetMutatorPrimaryAssetFromTable) == 0x000018, "Wrong size on RPickupableMutator_SetMutatorPrimaryAssetFromTable");
static_assert(offsetof(RPickupableMutator_SetMutatorPrimaryAssetFromTable, InRewardTableType) == 0x000000, "Member 'RPickupableMutator_SetMutatorPrimaryAssetFromTable::InRewardTableType' has a wrong offset!");
static_assert(offsetof(RPickupableMutator_SetMutatorPrimaryAssetFromTable, PlayerController) == 0x000008, "Member 'RPickupableMutator_SetMutatorPrimaryAssetFromTable::PlayerController' has a wrong offset!");
static_assert(offsetof(RPickupableMutator_SetMutatorPrimaryAssetFromTable, Rarity) == 0x000010, "Member 'RPickupableMutator_SetMutatorPrimaryAssetFromTable::Rarity' has a wrong offset!");

// Function RGame.RPickupableMutator.UpdateGeneratedGodCategory
// 0x0008 (0x0008 - 0x0000)
struct RPickupableMutator_UpdateGeneratedGodCategory final
{
public:
	class URMutatorRewardCategoryDataAsset*       NewGodCategory;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_UpdateGeneratedGodCategory) == 0x000008, "Wrong alignment on RPickupableMutator_UpdateGeneratedGodCategory");
static_assert(sizeof(RPickupableMutator_UpdateGeneratedGodCategory) == 0x000008, "Wrong size on RPickupableMutator_UpdateGeneratedGodCategory");
static_assert(offsetof(RPickupableMutator_UpdateGeneratedGodCategory, NewGodCategory) == 0x000000, "Member 'RPickupableMutator_UpdateGeneratedGodCategory::NewGodCategory' has a wrong offset!");

// Function RGame.RPickupableMutator.UpdateGeneratedMutatorOptions
// 0x0010 (0x0010 - 0x0000)
struct RPickupableMutator_UpdateGeneratedMutatorOptions final
{
public:
	TArray<struct FRLootSelectionOption>          NewLootOptions;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_UpdateGeneratedMutatorOptions) == 0x000008, "Wrong alignment on RPickupableMutator_UpdateGeneratedMutatorOptions");
static_assert(sizeof(RPickupableMutator_UpdateGeneratedMutatorOptions) == 0x000010, "Wrong size on RPickupableMutator_UpdateGeneratedMutatorOptions");
static_assert(offsetof(RPickupableMutator_UpdateGeneratedMutatorOptions, NewLootOptions) == 0x000000, "Member 'RPickupableMutator_UpdateGeneratedMutatorOptions::NewLootOptions' has a wrong offset!");

// Function RGame.RPickupableMutator.GetContextMessage
// 0x0010 (0x0010 - 0x0000)
struct RPickupableMutator_GetContextMessage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_GetContextMessage) == 0x000008, "Wrong alignment on RPickupableMutator_GetContextMessage");
static_assert(sizeof(RPickupableMutator_GetContextMessage) == 0x000010, "Wrong size on RPickupableMutator_GetContextMessage");
static_assert(offsetof(RPickupableMutator_GetContextMessage, ReturnValue) == 0x000000, "Member 'RPickupableMutator_GetContextMessage::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableMutator.GetMutatorPrimaryAsset
// 0x0008 (0x0008 - 0x0000)
struct RPickupableMutator_GetMutatorPrimaryAsset final
{
public:
	class URMutatorPrimaryAsset*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableMutator_GetMutatorPrimaryAsset) == 0x000008, "Wrong alignment on RPickupableMutator_GetMutatorPrimaryAsset");
static_assert(sizeof(RPickupableMutator_GetMutatorPrimaryAsset) == 0x000008, "Wrong size on RPickupableMutator_GetMutatorPrimaryAsset");
static_assert(offsetof(RPickupableMutator_GetMutatorPrimaryAsset, ReturnValue) == 0x000000, "Member 'RPickupableMutator_GetMutatorPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RPickupableCharm.BreakCharm
// 0x0008 (0x0008 - 0x0000)
struct RPickupableCharm_BreakCharm final
{
public:
	class ARPlayerController*                     BrokenBy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableCharm_BreakCharm) == 0x000008, "Wrong alignment on RPickupableCharm_BreakCharm");
static_assert(sizeof(RPickupableCharm_BreakCharm) == 0x000008, "Wrong size on RPickupableCharm_BreakCharm");
static_assert(offsetof(RPickupableCharm_BreakCharm, BrokenBy) == 0x000000, "Member 'RPickupableCharm_BreakCharm::BrokenBy' has a wrong offset!");

// Function RGame.RPickupableCharm.CallOnOnMutatorPaSet
// 0x0008 (0x0008 - 0x0000)
struct RPickupableCharm_CallOnOnMutatorPaSet final
{
public:
	class URMutatorPrimaryAsset*                  NewPrimaryAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableCharm_CallOnOnMutatorPaSet) == 0x000008, "Wrong alignment on RPickupableCharm_CallOnOnMutatorPaSet");
static_assert(sizeof(RPickupableCharm_CallOnOnMutatorPaSet) == 0x000008, "Wrong size on RPickupableCharm_CallOnOnMutatorPaSet");
static_assert(offsetof(RPickupableCharm_CallOnOnMutatorPaSet, NewPrimaryAsset) == 0x000000, "Member 'RPickupableCharm_CallOnOnMutatorPaSet::NewPrimaryAsset' has a wrong offset!");

// Function RGame.RPickupableCharm.GetCharmLootSettings
// 0x0058 (0x0058 - 0x0000)
struct RPickupableCharm_GetCharmLootSettings final
{
public:
	struct FMutatorLootSettings                   ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPickupableCharm_GetCharmLootSettings) == 0x000008, "Wrong alignment on RPickupableCharm_GetCharmLootSettings");
static_assert(sizeof(RPickupableCharm_GetCharmLootSettings) == 0x000058, "Wrong size on RPickupableCharm_GetCharmLootSettings");
static_assert(offsetof(RPickupableCharm_GetCharmLootSettings, ReturnValue) == 0x000000, "Member 'RPickupableCharm_GetCharmLootSettings::ReturnValue' has a wrong offset!");

// Function RGame.RPingableInterface.GetPingableIconTexture
// 0x0008 (0x0008 - 0x0000)
struct RPingableInterface_GetPingableIconTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingableInterface_GetPingableIconTexture) == 0x000008, "Wrong alignment on RPingableInterface_GetPingableIconTexture");
static_assert(sizeof(RPingableInterface_GetPingableIconTexture) == 0x000008, "Wrong size on RPingableInterface_GetPingableIconTexture");
static_assert(offsetof(RPingableInterface_GetPingableIconTexture, ReturnValue) == 0x000000, "Member 'RPingableInterface_GetPingableIconTexture::ReturnValue' has a wrong offset!");

// Function RGame.RPingableInterface.GetPingableName
// 0x0010 (0x0010 - 0x0000)
struct RPingableInterface_GetPingableName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingableInterface_GetPingableName) == 0x000008, "Wrong alignment on RPingableInterface_GetPingableName");
static_assert(sizeof(RPingableInterface_GetPingableName) == 0x000010, "Wrong size on RPingableInterface_GetPingableName");
static_assert(offsetof(RPingableInterface_GetPingableName, ReturnValue) == 0x000000, "Member 'RPingableInterface_GetPingableName::ReturnValue' has a wrong offset!");

// Function RGame.RPingableInterface.IsCurrentlyPinged
// 0x0001 (0x0001 - 0x0000)
struct RPingableInterface_IsCurrentlyPinged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingableInterface_IsCurrentlyPinged) == 0x000001, "Wrong alignment on RPingableInterface_IsCurrentlyPinged");
static_assert(sizeof(RPingableInterface_IsCurrentlyPinged) == 0x000001, "Wrong size on RPingableInterface_IsCurrentlyPinged");
static_assert(offsetof(RPingableInterface_IsCurrentlyPinged, ReturnValue) == 0x000000, "Member 'RPingableInterface_IsCurrentlyPinged::ReturnValue' has a wrong offset!");

// Function RGame.RPingBeaconManager.GetPingBeaconManager
// 0x0010 (0x0010 - 0x0000)
struct RPingBeaconManager_GetPingBeaconManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARPingBeaconManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingBeaconManager_GetPingBeaconManager) == 0x000008, "Wrong alignment on RPingBeaconManager_GetPingBeaconManager");
static_assert(sizeof(RPingBeaconManager_GetPingBeaconManager) == 0x000010, "Wrong size on RPingBeaconManager_GetPingBeaconManager");
static_assert(offsetof(RPingBeaconManager_GetPingBeaconManager, WorldContextObject) == 0x000000, "Member 'RPingBeaconManager_GetPingBeaconManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RPingBeaconManager_GetPingBeaconManager, ReturnValue) == 0x000008, "Member 'RPingBeaconManager_GetPingBeaconManager::ReturnValue' has a wrong offset!");

// Function RGame.RPingBeaconManager.QueuePingRequest
// 0x0130 (0x0130 - 0x0000)
struct RPingBeaconManager_QueuePingRequest final
{
public:
	struct FBlueprintSessionResult                Session;                                           // 0x0000(0x0120)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Latency)>                Callback;                                          // 0x0120(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingBeaconManager_QueuePingRequest) == 0x000008, "Wrong alignment on RPingBeaconManager_QueuePingRequest");
static_assert(sizeof(RPingBeaconManager_QueuePingRequest) == 0x000130, "Wrong size on RPingBeaconManager_QueuePingRequest");
static_assert(offsetof(RPingBeaconManager_QueuePingRequest, Session) == 0x000000, "Member 'RPingBeaconManager_QueuePingRequest::Session' has a wrong offset!");
static_assert(offsetof(RPingBeaconManager_QueuePingRequest, Callback) == 0x000120, "Member 'RPingBeaconManager_QueuePingRequest::Callback' has a wrong offset!");

// Function RGame.RPingHost.InitializeHost
// 0x0001 (0x0001 - 0x0000)
struct RPingHost_InitializeHost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingHost_InitializeHost) == 0x000001, "Wrong alignment on RPingHost_InitializeHost");
static_assert(sizeof(RPingHost_InitializeHost) == 0x000001, "Wrong size on RPingHost_InitializeHost");
static_assert(offsetof(RPingHost_InitializeHost, ReturnValue) == 0x000000, "Member 'RPingHost_InitializeHost::ReturnValue' has a wrong offset!");

// Function RGame.RPingHost.RegisterHostObject
// 0x0008 (0x0008 - 0x0000)
struct RPingHost_RegisterHostObject final
{
public:
	class AOnlineBeaconHostObject*                HostObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingHost_RegisterHostObject) == 0x000008, "Wrong alignment on RPingHost_RegisterHostObject");
static_assert(sizeof(RPingHost_RegisterHostObject) == 0x000008, "Wrong size on RPingHost_RegisterHostObject");
static_assert(offsetof(RPingHost_RegisterHostObject, HostObject) == 0x000000, "Member 'RPingHost_RegisterHostObject::HostObject' has a wrong offset!");

// Function RGame.RPingIndicator.SetDefaultLifespan
// 0x0004 (0x0004 - 0x0000)
struct RPingIndicator_SetDefaultLifespan final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingIndicator_SetDefaultLifespan) == 0x000004, "Wrong alignment on RPingIndicator_SetDefaultLifespan");
static_assert(sizeof(RPingIndicator_SetDefaultLifespan) == 0x000004, "Wrong size on RPingIndicator_SetDefaultLifespan");
static_assert(offsetof(RPingIndicator_SetDefaultLifespan, Duration) == 0x000000, "Member 'RPingIndicator_SetDefaultLifespan::Duration' has a wrong offset!");

// Function RGame.RPingIndicator.SetIndicatorIcon
// 0x0008 (0x0008 - 0x0000)
struct RPingIndicator_SetIndicatorIcon final
{
public:
	const class UTexture2D*                       IconTexture;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPingIndicator_SetIndicatorIcon) == 0x000008, "Wrong alignment on RPingIndicator_SetIndicatorIcon");
static_assert(sizeof(RPingIndicator_SetIndicatorIcon) == 0x000008, "Wrong size on RPingIndicator_SetIndicatorIcon");
static_assert(offsetof(RPingIndicator_SetIndicatorIcon, IconTexture) == 0x000000, "Member 'RPingIndicator_SetIndicatorIcon::IconTexture' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.AddCharacterMutator
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_AddCharacterMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCharacterMutatorPrimaryAsset*         Mutator;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_AddCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_AddCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_AddCharacterMutator) == 0x000018, "Wrong size on RPlayerGScriptComponent_AddCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_AddCharacterMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_AddCharacterMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddCharacterMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_AddCharacterMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddCharacterMutator, MutatorRank) == 0x000010, "Member 'RPlayerGScriptComponent_AddCharacterMutator::MutatorRank' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddCharacterMutator, ReturnValue) == 0x000014, "Member 'RPlayerGScriptComponent_AddCharacterMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.AddMutator
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_AddMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  Mutator;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_AddMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_AddMutator");
static_assert(sizeof(RPlayerGScriptComponent_AddMutator) == 0x000018, "Wrong size on RPlayerGScriptComponent_AddMutator");
static_assert(offsetof(RPlayerGScriptComponent_AddMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_AddMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_AddMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddMutator, MutatorRank) == 0x000010, "Member 'RPlayerGScriptComponent_AddMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.AddProjectileMutator
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_AddProjectileMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URProjectileMutatorPrimaryAsset*        Mutator;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_AddProjectileMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_AddProjectileMutator");
static_assert(sizeof(RPlayerGScriptComponent_AddProjectileMutator) == 0x000018, "Wrong size on RPlayerGScriptComponent_AddProjectileMutator");
static_assert(offsetof(RPlayerGScriptComponent_AddProjectileMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_AddProjectileMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddProjectileMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_AddProjectileMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddProjectileMutator, MutatorRank) == 0x000010, "Member 'RPlayerGScriptComponent_AddProjectileMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.AddWeaponMutator
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_AddWeaponMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URWeaponMutatorPrimaryAsset*            Mutator;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_AddWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_AddWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_AddWeaponMutator) == 0x000018, "Wrong size on RPlayerGScriptComponent_AddWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_AddWeaponMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_AddWeaponMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddWeaponMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_AddWeaponMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_AddWeaponMutator, MutatorRank) == 0x000010, "Member 'RPlayerGScriptComponent_AddWeaponMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.CanSelectNewCharacterMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_CanSelectNewCharacterMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_CanSelectNewCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_CanSelectNewCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_CanSelectNewCharacterMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_CanSelectNewCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_CanSelectNewCharacterMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_CanSelectNewCharacterMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_CanSelectNewCharacterMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_CanSelectNewCharacterMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ClearCharacterMutators
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ClearCharacterMutators final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ClearCharacterMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ClearCharacterMutators");
static_assert(sizeof(RPlayerGScriptComponent_ClearCharacterMutators) == 0x000008, "Wrong size on RPlayerGScriptComponent_ClearCharacterMutators");
static_assert(offsetof(RPlayerGScriptComponent_ClearCharacterMutators, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_ClearCharacterMutators::OwningComponent' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ClearProjectileMutators
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ClearProjectileMutators final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ClearProjectileMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ClearProjectileMutators");
static_assert(sizeof(RPlayerGScriptComponent_ClearProjectileMutators) == 0x000008, "Wrong size on RPlayerGScriptComponent_ClearProjectileMutators");
static_assert(offsetof(RPlayerGScriptComponent_ClearProjectileMutators, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_ClearProjectileMutators::OwningComponent' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ClearWeaponMutators
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ClearWeaponMutators final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ClearWeaponMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ClearWeaponMutators");
static_assert(sizeof(RPlayerGScriptComponent_ClearWeaponMutators) == 0x000008, "Wrong size on RPlayerGScriptComponent_ClearWeaponMutators");
static_assert(offsetof(RPlayerGScriptComponent_ClearWeaponMutators, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_ClearWeaponMutators::OwningComponent' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetActivatableAbilityByIndex
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_GetActivatableAbilityByIndex final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityIndex;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGAbilityCharacterMutatorScript*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetActivatableAbilityByIndex) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetActivatableAbilityByIndex");
static_assert(sizeof(RPlayerGScriptComponent_GetActivatableAbilityByIndex) == 0x000018, "Wrong size on RPlayerGScriptComponent_GetActivatableAbilityByIndex");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByIndex, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByIndex::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByIndex, AbilityIndex) == 0x000008, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByIndex::AbilityIndex' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByIndex, ReturnValue) == 0x000010, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByIndex::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetActivatableAbilityByName
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_GetActivatableAbilityByName final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AbilityName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGAbilityCharacterMutatorScript*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetActivatableAbilityByName) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetActivatableAbilityByName");
static_assert(sizeof(RPlayerGScriptComponent_GetActivatableAbilityByName) == 0x000018, "Wrong size on RPlayerGScriptComponent_GetActivatableAbilityByName");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByName, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByName::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByName, AbilityName) == 0x000008, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByName::AbilityName' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetActivatableAbilityByName, ReturnValue) == 0x000010, "Member 'RPlayerGScriptComponent_GetActivatableAbilityByName::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetAllActivatableAbilityScripts
// 0x0020 (0x0020 - 0x0000)
struct RPlayerGScriptComponent_GetAllActivatableAbilityScripts final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeStartEquippedAbilities;                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URGAbilityCharacterMutatorScript*> ReturnValue;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetAllActivatableAbilityScripts) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetAllActivatableAbilityScripts");
static_assert(sizeof(RPlayerGScriptComponent_GetAllActivatableAbilityScripts) == 0x000020, "Wrong size on RPlayerGScriptComponent_GetAllActivatableAbilityScripts");
static_assert(offsetof(RPlayerGScriptComponent_GetAllActivatableAbilityScripts, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetAllActivatableAbilityScripts::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetAllActivatableAbilityScripts, bExcludeStartEquippedAbilities) == 0x000008, "Member 'RPlayerGScriptComponent_GetAllActivatableAbilityScripts::bExcludeStartEquippedAbilities' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetAllActivatableAbilityScripts, ReturnValue) == 0x000010, "Member 'RPlayerGScriptComponent_GetAllActivatableAbilityScripts::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetCurrentResources
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetCurrentResources final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_GetCurrentResources) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetCurrentResources");
static_assert(sizeof(RPlayerGScriptComponent_GetCurrentResources) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetCurrentResources");
static_assert(offsetof(RPlayerGScriptComponent_GetCurrentResources, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetCurrentResources::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetCurrentResources, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetCurrentResources::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetEquippedActivatableAbility
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetEquippedActivatableAbility final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGAbilityCharacterMutatorScript*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetEquippedActivatableAbility) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetEquippedActivatableAbility");
static_assert(sizeof(RPlayerGScriptComponent_GetEquippedActivatableAbility) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetEquippedActivatableAbility");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedActivatableAbility, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetEquippedActivatableAbility::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedActivatableAbility, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetEquippedActivatableAbility::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetEquippedActivatableAbilityPrimaryAsset
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset final
{
public:
	class URGScriptComponent*                     OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCharacterMutatorPrimaryAsset*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset");
static_assert(sizeof(RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetEquippedActivatableAbilityPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetPlayerGScriptComponent
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetPlayerGScriptComponent final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URPlayerGScriptComponent*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetPlayerGScriptComponent) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetPlayerGScriptComponent");
static_assert(sizeof(RPlayerGScriptComponent_GetPlayerGScriptComponent) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetPlayerGScriptComponent");
static_assert(offsetof(RPlayerGScriptComponent_GetPlayerGScriptComponent, Controller) == 0x000000, "Member 'RPlayerGScriptComponent_GetPlayerGScriptComponent::Controller' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetPlayerGScriptComponent, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetPlayerGScriptComponent::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetResourcesRequiredToGainNewMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator");
static_assert(sizeof(RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator");
static_assert(offsetof(RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetResourcesRequiredToGainNewMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.IncrementResources
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_IncrementResources final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delta;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_IncrementResources) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_IncrementResources");
static_assert(sizeof(RPlayerGScriptComponent_IncrementResources) == 0x000010, "Wrong size on RPlayerGScriptComponent_IncrementResources");
static_assert(offsetof(RPlayerGScriptComponent_IncrementResources, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_IncrementResources::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_IncrementResources, Delta) == 0x000008, "Member 'RPlayerGScriptComponent_IncrementResources::Delta' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.RemoveAllStatusEffects
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_RemoveAllStatusEffects final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_RemoveAllStatusEffects) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_RemoveAllStatusEffects");
static_assert(sizeof(RPlayerGScriptComponent_RemoveAllStatusEffects) == 0x000008, "Wrong size on RPlayerGScriptComponent_RemoveAllStatusEffects");
static_assert(offsetof(RPlayerGScriptComponent_RemoveAllStatusEffects, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_RemoveAllStatusEffects::OwningComponent' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.RemoveCharacterMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_RemoveCharacterMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URCharacterMutatorPrimaryAsset*   Mutator;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_RemoveCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_RemoveCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_RemoveCharacterMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_RemoveCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_RemoveCharacterMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_RemoveCharacterMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_RemoveCharacterMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_RemoveCharacterMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.RemoveMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_RemoveMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URMutatorPrimaryAsset*                  Mutator;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_RemoveMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_RemoveMutator");
static_assert(sizeof(RPlayerGScriptComponent_RemoveMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_RemoveMutator");
static_assert(offsetof(RPlayerGScriptComponent_RemoveMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_RemoveMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_RemoveMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_RemoveMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.RemoveProjectileMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_RemoveProjectileMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URProjectileMutatorPrimaryAsset*  Mutator;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_RemoveProjectileMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_RemoveProjectileMutator");
static_assert(sizeof(RPlayerGScriptComponent_RemoveProjectileMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_RemoveProjectileMutator");
static_assert(offsetof(RPlayerGScriptComponent_RemoveProjectileMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_RemoveProjectileMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_RemoveProjectileMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_RemoveProjectileMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.RemoveWeaponMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_RemoveWeaponMutator final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URWeaponMutatorPrimaryAsset*      Mutator;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_RemoveWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_RemoveWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_RemoveWeaponMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_RemoveWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_RemoveWeaponMutator, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_RemoveWeaponMutator::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_RemoveWeaponMutator, Mutator) == 0x000008, "Member 'RPlayerGScriptComponent_RemoveWeaponMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ResetGScriptComponent
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ResetGScriptComponent final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ResetGScriptComponent) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ResetGScriptComponent");
static_assert(sizeof(RPlayerGScriptComponent_ResetGScriptComponent) == 0x000008, "Wrong size on RPlayerGScriptComponent_ResetGScriptComponent");
static_assert(offsetof(RPlayerGScriptComponent_ResetGScriptComponent, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_ResetGScriptComponent::OwningComponent' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SpawnProjectileMutators
// 0x0018 (0x0018 - 0x0000)
struct RPlayerGScriptComponent_SpawnProjectileMutators final
{
public:
	class URPlayerGScriptComponent*               OwningComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Category;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoRep;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_SpawnProjectileMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_SpawnProjectileMutators");
static_assert(sizeof(RPlayerGScriptComponent_SpawnProjectileMutators) == 0x000018, "Wrong size on RPlayerGScriptComponent_SpawnProjectileMutators");
static_assert(offsetof(RPlayerGScriptComponent_SpawnProjectileMutators, OwningComponent) == 0x000000, "Member 'RPlayerGScriptComponent_SpawnProjectileMutators::OwningComponent' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_SpawnProjectileMutators, Category) == 0x000008, "Member 'RPlayerGScriptComponent_SpawnProjectileMutators::Category' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_SpawnProjectileMutators, bNoRep) == 0x000010, "Member 'RPlayerGScriptComponent_SpawnProjectileMutators::bNoRep' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_SpawnProjectileMutators, ReturnValue) == 0x000011, "Member 'RPlayerGScriptComponent_SpawnProjectileMutators::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.CharacterMutators_RepNotify
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_CharacterMutators_RepNotify final
{
public:
	TArray<struct FCharacterMutator>              PreviousValue;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_CharacterMutators_RepNotify) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_CharacterMutators_RepNotify");
static_assert(sizeof(RPlayerGScriptComponent_CharacterMutators_RepNotify) == 0x000010, "Wrong size on RPlayerGScriptComponent_CharacterMutators_RepNotify");
static_assert(offsetof(RPlayerGScriptComponent_CharacterMutators_RepNotify, PreviousValue) == 0x000000, "Member 'RPlayerGScriptComponent_CharacterMutators_RepNotify::PreviousValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_GetMutatorRank) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetMutatorRank");
static_assert(sizeof(RPlayerGScriptComponent_GetMutatorRank) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetMutatorRank");
static_assert(offsetof(RPlayerGScriptComponent_GetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_GetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetMutatorRank, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetMutatorRank::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetNumUniqueEquippedMutatorCategories
// 0x0028 (0x0028 - 0x0000)
struct RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories final
{
public:
	struct FGameplayTagContainer                  Categories;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories");
static_assert(sizeof(RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories) == 0x000028, "Wrong size on RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories");
static_assert(offsetof(RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories, Categories) == 0x000000, "Member 'RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories::Categories' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories, ReturnValue) == 0x000020, "Member 'RPlayerGScriptComponent_GetNumUniqueEquippedMutatorCategories::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.HasCappedMutatorRewardCategories
// 0x0028 (0x0028 - 0x0000)
struct RPlayerGScriptComponent_HasCappedMutatorRewardCategories final
{
public:
	struct FGameplayTagContainer                  Categories;                                        // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_HasCappedMutatorRewardCategories) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_HasCappedMutatorRewardCategories");
static_assert(sizeof(RPlayerGScriptComponent_HasCappedMutatorRewardCategories) == 0x000028, "Wrong size on RPlayerGScriptComponent_HasCappedMutatorRewardCategories");
static_assert(offsetof(RPlayerGScriptComponent_HasCappedMutatorRewardCategories, Categories) == 0x000000, "Member 'RPlayerGScriptComponent_HasCappedMutatorRewardCategories::Categories' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_HasCappedMutatorRewardCategories, ReturnValue) == 0x000020, "Member 'RPlayerGScriptComponent_HasCappedMutatorRewardCategories::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ProjectileMutators_RepNotify
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_ProjectileMutators_RepNotify final
{
public:
	TArray<struct FProjectileMutator>             PreviousValue;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ProjectileMutators_RepNotify) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ProjectileMutators_RepNotify");
static_assert(sizeof(RPlayerGScriptComponent_ProjectileMutators_RepNotify) == 0x000010, "Wrong size on RPlayerGScriptComponent_ProjectileMutators_RepNotify");
static_assert(offsetof(RPlayerGScriptComponent_ProjectileMutators_RepNotify, PreviousValue) == 0x000000, "Member 'RPlayerGScriptComponent_ProjectileMutators_RepNotify::PreviousValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerAddCharacterMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_ServerAddCharacterMutator final
{
public:
	class URCharacterMutatorPrimaryAsset*         Mutator;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_ServerAddCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerAddCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerAddCharacterMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_ServerAddCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddCharacterMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerAddCharacterMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddCharacterMutator, MutatorRank) == 0x000008, "Member 'RPlayerGScriptComponent_ServerAddCharacterMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerAddProjectileMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_ServerAddProjectileMutator final
{
public:
	class URProjectileMutatorPrimaryAsset*        Mutator;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_ServerAddProjectileMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerAddProjectileMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerAddProjectileMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_ServerAddProjectileMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddProjectileMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerAddProjectileMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddProjectileMutator, MutatorRank) == 0x000008, "Member 'RPlayerGScriptComponent_ServerAddProjectileMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerAddWeaponMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_ServerAddWeaponMutator final
{
public:
	class URWeaponMutatorPrimaryAsset*            Mutator;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MutatorRank;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_ServerAddWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerAddWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerAddWeaponMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_ServerAddWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddWeaponMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerAddWeaponMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_ServerAddWeaponMutator, MutatorRank) == 0x000008, "Member 'RPlayerGScriptComponent_ServerAddWeaponMutator::MutatorRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerRemoveCharacterMutator
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ServerRemoveCharacterMutator final
{
public:
	const class URCharacterMutatorPrimaryAsset*   Mutator;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ServerRemoveCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerRemoveCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerRemoveCharacterMutator) == 0x000008, "Wrong size on RPlayerGScriptComponent_ServerRemoveCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerRemoveCharacterMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerRemoveCharacterMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerRemoveProjectileMutator
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ServerRemoveProjectileMutator final
{
public:
	const class URProjectileMutatorPrimaryAsset*  Mutator;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ServerRemoveProjectileMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerRemoveProjectileMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerRemoveProjectileMutator) == 0x000008, "Wrong size on RPlayerGScriptComponent_ServerRemoveProjectileMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerRemoveProjectileMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerRemoveProjectileMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.ServerRemoveWeaponMutator
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_ServerRemoveWeaponMutator final
{
public:
	const class URWeaponMutatorPrimaryAsset*      Mutator;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_ServerRemoveWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_ServerRemoveWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_ServerRemoveWeaponMutator) == 0x000008, "Wrong size on RPlayerGScriptComponent_ServerRemoveWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_ServerRemoveWeaponMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_ServerRemoveWeaponMutator::Mutator' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SetChosenMutatorRewardCategories_Server
// 0x0020 (0x0020 - 0x0000)
struct RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server final
{
public:
	struct FGameplayTagContainer                  NewChosenMutatorRewardCategories;                  // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server");
static_assert(sizeof(RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server) == 0x000020, "Wrong size on RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server");
static_assert(offsetof(RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server, NewChosenMutatorRewardCategories) == 0x000000, "Member 'RPlayerGScriptComponent_SetChosenMutatorRewardCategories_Server::NewChosenMutatorRewardCategories' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SetMutatorRank
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_SetMutatorRank final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewRank;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_SetMutatorRank) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_SetMutatorRank");
static_assert(sizeof(RPlayerGScriptComponent_SetMutatorRank) == 0x000010, "Wrong size on RPlayerGScriptComponent_SetMutatorRank");
static_assert(offsetof(RPlayerGScriptComponent_SetMutatorRank, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_SetMutatorRank::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_SetMutatorRank, NewRank) == 0x000008, "Member 'RPlayerGScriptComponent_SetMutatorRank::NewRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SetMutatorRank_Server
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_SetMutatorRank_Server final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewRank;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_SetMutatorRank_Server) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_SetMutatorRank_Server");
static_assert(sizeof(RPlayerGScriptComponent_SetMutatorRank_Server) == 0x000010, "Wrong size on RPlayerGScriptComponent_SetMutatorRank_Server");
static_assert(offsetof(RPlayerGScriptComponent_SetMutatorRank_Server, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_SetMutatorRank_Server::RMutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_SetMutatorRank_Server, NewRank) == 0x000008, "Member 'RPlayerGScriptComponent_SetMutatorRank_Server::NewRank' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SetNumMutatorCategoryRerolls
// 0x0004 (0x0004 - 0x0000)
struct RPlayerGScriptComponent_SetNumMutatorCategoryRerolls final
{
public:
	int32                                         NewNumMutatorCategoryRerolls;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls) == 0x000004, "Wrong alignment on RPlayerGScriptComponent_SetNumMutatorCategoryRerolls");
static_assert(sizeof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls) == 0x000004, "Wrong size on RPlayerGScriptComponent_SetNumMutatorCategoryRerolls");
static_assert(offsetof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls, NewNumMutatorCategoryRerolls) == 0x000000, "Member 'RPlayerGScriptComponent_SetNumMutatorCategoryRerolls::NewNumMutatorCategoryRerolls' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.SetNumMutatorCategoryRerolls_Server
// 0x0004 (0x0004 - 0x0000)
struct RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server final
{
public:
	int32                                         NewNumMutatorCategoryRerolls;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server) == 0x000004, "Wrong alignment on RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server");
static_assert(sizeof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server) == 0x000004, "Wrong size on RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server");
static_assert(offsetof(RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server, NewNumMutatorCategoryRerolls) == 0x000000, "Member 'RPlayerGScriptComponent_SetNumMutatorCategoryRerolls_Server::NewNumMutatorCategoryRerolls' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.UpdateMutatorRewardCategoryBonusMutators
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators final
{
public:
	class URMutatorPrimaryAsset*                  RMutatorPrimaryAsset;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators");
static_assert(sizeof(RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators) == 0x000008, "Wrong size on RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators");
static_assert(offsetof(RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators, RMutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_UpdateMutatorRewardCategoryBonusMutators::RMutatorPrimaryAsset' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.WeaponMutators_RepNotify
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_WeaponMutators_RepNotify final
{
public:
	TArray<struct FWeaponMutator>                 PreviousValue;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_WeaponMutators_RepNotify) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_WeaponMutators_RepNotify");
static_assert(sizeof(RPlayerGScriptComponent_WeaponMutators_RepNotify) == 0x000010, "Wrong size on RPlayerGScriptComponent_WeaponMutators_RepNotify");
static_assert(offsetof(RPlayerGScriptComponent_WeaponMutators_RepNotify, PreviousValue) == 0x000000, "Member 'RPlayerGScriptComponent_WeaponMutators_RepNotify::PreviousValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetCharacterMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetCharacterMutator final
{
public:
	const class URCharacterMutatorPrimaryAsset*   MutatorPrimaryAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGCharacterMutatorScript*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_GetCharacterMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_GetCharacterMutator, MutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_GetCharacterMutator::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetCharacterMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetCharacterMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetCharacterMutatorPrimaryAsset
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset final
{
public:
	const class URGCharacterMutatorScript*        MutatorScript;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCharacterMutatorPrimaryAsset*         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset");
static_assert(sizeof(RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset");
static_assert(offsetof(RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset, MutatorScript) == 0x000000, "Member 'RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset::MutatorScript' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetCharacterMutatorPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetDisplayEquippedMutators
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetDisplayEquippedMutators final
{
public:
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetDisplayEquippedMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetDisplayEquippedMutators");
static_assert(sizeof(RPlayerGScriptComponent_GetDisplayEquippedMutators) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetDisplayEquippedMutators");
static_assert(offsetof(RPlayerGScriptComponent_GetDisplayEquippedMutators, ReturnValue) == 0x000000, "Member 'RPlayerGScriptComponent_GetDisplayEquippedMutators::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetDisplayEquippedMutatorsWithSlotSpace
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace final
{
public:
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace");
static_assert(sizeof(RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace");
static_assert(offsetof(RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace, ReturnValue) == 0x000000, "Member 'RPlayerGScriptComponent_GetDisplayEquippedMutatorsWithSlotSpace::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetEquippedMutators
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetEquippedMutators final
{
public:
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetEquippedMutators) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetEquippedMutators");
static_assert(sizeof(RPlayerGScriptComponent_GetEquippedMutators) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetEquippedMutators");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutators, ReturnValue) == 0x000000, "Member 'RPlayerGScriptComponent_GetEquippedMutators::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetEquippedMutatorsByGodCategories
// 0x0038 (0x0038 - 0x0000)
struct RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bIncludeTriggers;                                  // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories");
static_assert(sizeof(RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories) == 0x000038, "Wrong size on RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories, Tags) == 0x000000, "Member 'RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories::Tags' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories, bIncludeTriggers) == 0x000020, "Member 'RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories::bIncludeTriggers' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories, ReturnValue) == 0x000028, "Member 'RPlayerGScriptComponent_GetEquippedMutatorsByGodCategories::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetEquippedMutatorsByMutatorTypeTags
// 0x0030 (0x0030 - 0x0000)
struct RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<class URMutatorPrimaryAsset*>          ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags");
static_assert(sizeof(RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags) == 0x000030, "Wrong size on RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags, TagContainer) == 0x000000, "Member 'RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags::TagContainer' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags, ReturnValue) == 0x000020, "Member 'RPlayerGScriptComponent_GetEquippedMutatorsByMutatorTypeTags::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetGlobalWeaponModifiers
// 0x0008 (0x0008 - 0x0000)
struct RPlayerGScriptComponent_GetGlobalWeaponModifiers final
{
public:
	class URGlobalWeaponModifiers*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetGlobalWeaponModifiers) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetGlobalWeaponModifiers");
static_assert(sizeof(RPlayerGScriptComponent_GetGlobalWeaponModifiers) == 0x000008, "Wrong size on RPlayerGScriptComponent_GetGlobalWeaponModifiers");
static_assert(offsetof(RPlayerGScriptComponent_GetGlobalWeaponModifiers, ReturnValue) == 0x000000, "Member 'RPlayerGScriptComponent_GetGlobalWeaponModifiers::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetWeaponMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetWeaponMutator final
{
public:
	const class URWeaponMutatorPrimaryAsset*      MutatorPrimaryAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URGWeaponMutatorScript*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_GetWeaponMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_GetWeaponMutator, MutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_GetWeaponMutator::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetWeaponMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetWeaponMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.GetWeaponMutatorPrimaryAsset
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset final
{
public:
	const class URGWeaponMutatorScript*           MutatorScript;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URWeaponMutatorPrimaryAsset*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset");
static_assert(sizeof(RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset) == 0x000010, "Wrong size on RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset");
static_assert(offsetof(RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset, MutatorScript) == 0x000000, "Member 'RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset::MutatorScript' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_GetWeaponMutatorPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.HasCharacterMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_HasCharacterMutator final
{
public:
	const class URCharacterMutatorPrimaryAsset*   MutatorPrimaryAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_HasCharacterMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_HasCharacterMutator");
static_assert(sizeof(RPlayerGScriptComponent_HasCharacterMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_HasCharacterMutator");
static_assert(offsetof(RPlayerGScriptComponent_HasCharacterMutator, MutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_HasCharacterMutator::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_HasCharacterMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_HasCharacterMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.HasMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_HasMutator final
{
public:
	const class URMutatorPrimaryAsset*            Mutator;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_HasMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_HasMutator");
static_assert(sizeof(RPlayerGScriptComponent_HasMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_HasMutator");
static_assert(offsetof(RPlayerGScriptComponent_HasMutator, Mutator) == 0x000000, "Member 'RPlayerGScriptComponent_HasMutator::Mutator' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_HasMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_HasMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.HasProjectileMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_HasProjectileMutator final
{
public:
	const class URProjectileMutatorPrimaryAsset*  MutatorPrimaryAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_HasProjectileMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_HasProjectileMutator");
static_assert(sizeof(RPlayerGScriptComponent_HasProjectileMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_HasProjectileMutator");
static_assert(offsetof(RPlayerGScriptComponent_HasProjectileMutator, MutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_HasProjectileMutator::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_HasProjectileMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_HasProjectileMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerGScriptComponent.HasWeaponMutator
// 0x0010 (0x0010 - 0x0000)
struct RPlayerGScriptComponent_HasWeaponMutator final
{
public:
	const class URWeaponMutatorPrimaryAsset*      MutatorPrimaryAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerGScriptComponent_HasWeaponMutator) == 0x000008, "Wrong alignment on RPlayerGScriptComponent_HasWeaponMutator");
static_assert(sizeof(RPlayerGScriptComponent_HasWeaponMutator) == 0x000010, "Wrong size on RPlayerGScriptComponent_HasWeaponMutator");
static_assert(offsetof(RPlayerGScriptComponent_HasWeaponMutator, MutatorPrimaryAsset) == 0x000000, "Member 'RPlayerGScriptComponent_HasWeaponMutator::MutatorPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RPlayerGScriptComponent_HasWeaponMutator, ReturnValue) == 0x000008, "Member 'RPlayerGScriptComponent_HasWeaponMutator::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerInteractComponent.GetAndCacheTargetResult
// 0x0010 (0x0010 - 0x0000)
struct RPlayerInteractComponent_GetAndCacheTargetResult final
{
public:
	TDelegate<void(const TArray<struct FHitResult>& HitResults)> Callback;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerInteractComponent_GetAndCacheTargetResult) == 0x000004, "Wrong alignment on RPlayerInteractComponent_GetAndCacheTargetResult");
static_assert(sizeof(RPlayerInteractComponent_GetAndCacheTargetResult) == 0x000010, "Wrong size on RPlayerInteractComponent_GetAndCacheTargetResult");
static_assert(offsetof(RPlayerInteractComponent_GetAndCacheTargetResult, Callback) == 0x000000, "Member 'RPlayerInteractComponent_GetAndCacheTargetResult::Callback' has a wrong offset!");

// Function RGame.RPlayerInteractComponent.HasInteractableTarget
// 0x0001 (0x0001 - 0x0000)
struct RPlayerInteractComponent_HasInteractableTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerInteractComponent_HasInteractableTarget) == 0x000001, "Wrong alignment on RPlayerInteractComponent_HasInteractableTarget");
static_assert(sizeof(RPlayerInteractComponent_HasInteractableTarget) == 0x000001, "Wrong size on RPlayerInteractComponent_HasInteractableTarget");
static_assert(offsetof(RPlayerInteractComponent_HasInteractableTarget, ReturnValue) == 0x000000, "Member 'RPlayerInteractComponent_HasInteractableTarget::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerInteractComponent.OnGetTargetingResult
// 0x0010 (0x0010 - 0x0000)
struct RPlayerInteractComponent_OnGetTargetingResult final
{
public:
	TArray<struct FHitResult>                     HitResults;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerInteractComponent_OnGetTargetingResult) == 0x000008, "Wrong alignment on RPlayerInteractComponent_OnGetTargetingResult");
static_assert(sizeof(RPlayerInteractComponent_OnGetTargetingResult) == 0x000010, "Wrong size on RPlayerInteractComponent_OnGetTargetingResult");
static_assert(offsetof(RPlayerInteractComponent_OnGetTargetingResult, HitResults) == 0x000000, "Member 'RPlayerInteractComponent_OnGetTargetingResult::HitResults' has a wrong offset!");

// Function RGame.RPlayerState.AddGold
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_AddGold final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_AddGold) == 0x000004, "Wrong alignment on RPlayerState_AddGold");
static_assert(sizeof(RPlayerState_AddGold) == 0x000004, "Wrong size on RPlayerState_AddGold");
static_assert(offsetof(RPlayerState_AddGold, Delta) == 0x000000, "Member 'RPlayerState_AddGold::Delta' has a wrong offset!");

// Function RGame.RPlayerState.AddKeys
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_AddKeys final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_AddKeys) == 0x000004, "Wrong alignment on RPlayerState_AddKeys");
static_assert(sizeof(RPlayerState_AddKeys) == 0x000004, "Wrong size on RPlayerState_AddKeys");
static_assert(offsetof(RPlayerState_AddKeys, Value) == 0x000000, "Member 'RPlayerState_AddKeys::Value' has a wrong offset!");

// Function RGame.RPlayerState.GetUniqueNetIdString
// 0x0010 (0x0010 - 0x0000)
struct RPlayerState_GetUniqueNetIdString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_GetUniqueNetIdString) == 0x000008, "Wrong alignment on RPlayerState_GetUniqueNetIdString");
static_assert(sizeof(RPlayerState_GetUniqueNetIdString) == 0x000010, "Wrong size on RPlayerState_GetUniqueNetIdString");
static_assert(offsetof(RPlayerState_GetUniqueNetIdString, ReturnValue) == 0x000000, "Member 'RPlayerState_GetUniqueNetIdString::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerState.GetViolentCommitmentStacks
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_GetViolentCommitmentStacks final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_GetViolentCommitmentStacks) == 0x000004, "Wrong alignment on RPlayerState_GetViolentCommitmentStacks");
static_assert(sizeof(RPlayerState_GetViolentCommitmentStacks) == 0x000004, "Wrong size on RPlayerState_GetViolentCommitmentStacks");
static_assert(offsetof(RPlayerState_GetViolentCommitmentStacks, ReturnValue) == 0x000000, "Member 'RPlayerState_GetViolentCommitmentStacks::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerState.HasKeys
// 0x0001 (0x0001 - 0x0000)
struct RPlayerState_HasKeys final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_HasKeys) == 0x000001, "Wrong alignment on RPlayerState_HasKeys");
static_assert(sizeof(RPlayerState_HasKeys) == 0x000001, "Wrong size on RPlayerState_HasKeys");
static_assert(offsetof(RPlayerState_HasKeys, ReturnValue) == 0x000000, "Member 'RPlayerState_HasKeys::ReturnValue' has a wrong offset!");

// Function RGame.RPlayerState.OnChallengeCompleted_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnChallengeCompleted_Multicast final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnChallengeCompleted_Multicast) == 0x000004, "Wrong alignment on RPlayerState_OnChallengeCompleted_Multicast");
static_assert(sizeof(RPlayerState_OnChallengeCompleted_Multicast) == 0x000008, "Wrong size on RPlayerState_OnChallengeCompleted_Multicast");
static_assert(offsetof(RPlayerState_OnChallengeCompleted_Multicast, ChallengeId) == 0x000000, "Member 'RPlayerState_OnChallengeCompleted_Multicast::ChallengeId' has a wrong offset!");

// Function RGame.RPlayerState.OnChallengeCompleted_Server
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnChallengeCompleted_Server final
{
public:
	class FName                                   ChallengeId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnChallengeCompleted_Server) == 0x000004, "Wrong alignment on RPlayerState_OnChallengeCompleted_Server");
static_assert(sizeof(RPlayerState_OnChallengeCompleted_Server) == 0x000008, "Wrong size on RPlayerState_OnChallengeCompleted_Server");
static_assert(offsetof(RPlayerState_OnChallengeCompleted_Server, ChallengeId) == 0x000000, "Member 'RPlayerState_OnChallengeCompleted_Server::ChallengeId' has a wrong offset!");

// Function RGame.RPlayerState.OnDamageDealt
// 0x00C8 (0x00C8 - 0x0000)
struct RPlayerState_OnDamageDealt final
{
public:
	class ARPawnBase*                             InstigatorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnDamageDealt) == 0x000008, "Wrong alignment on RPlayerState_OnDamageDealt");
static_assert(sizeof(RPlayerState_OnDamageDealt) == 0x0000C8, "Wrong size on RPlayerState_OnDamageDealt");
static_assert(offsetof(RPlayerState_OnDamageDealt, InstigatorPawn) == 0x000000, "Member 'RPlayerState_OnDamageDealt::InstigatorPawn' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnDamageDealt, DamageEventData) == 0x000008, "Member 'RPlayerState_OnDamageDealt::DamageEventData' has a wrong offset!");

// Function RGame.RPlayerState.OnDamageTaken
// 0x00C8 (0x00C8 - 0x0000)
struct RPlayerState_OnDamageTaken final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageData;                                        // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnDamageTaken) == 0x000008, "Wrong alignment on RPlayerState_OnDamageTaken");
static_assert(sizeof(RPlayerState_OnDamageTaken) == 0x0000C8, "Wrong size on RPlayerState_OnDamageTaken");
static_assert(offsetof(RPlayerState_OnDamageTaken, Component) == 0x000000, "Member 'RPlayerState_OnDamageTaken::Component' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnDamageTaken, DamageData) == 0x000008, "Member 'RPlayerState_OnDamageTaken::DamageData' has a wrong offset!");

// Function RGame.RPlayerState.OnFinishRun
// 0x0001 (0x0001 - 0x0000)
struct RPlayerState_OnFinishRun final
{
public:
	bool                                          RunFailed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnFinishRun) == 0x000001, "Wrong alignment on RPlayerState_OnFinishRun");
static_assert(sizeof(RPlayerState_OnFinishRun) == 0x000001, "Wrong size on RPlayerState_OnFinishRun");
static_assert(offsetof(RPlayerState_OnFinishRun, RunFailed) == 0x000000, "Member 'RPlayerState_OnFinishRun::RunFailed' has a wrong offset!");

// Function RGame.RPlayerState.OnGoldCollected_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnGoldCollected_Multicast final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewTotal;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnGoldCollected_Multicast) == 0x000004, "Wrong alignment on RPlayerState_OnGoldCollected_Multicast");
static_assert(sizeof(RPlayerState_OnGoldCollected_Multicast) == 0x000008, "Wrong size on RPlayerState_OnGoldCollected_Multicast");
static_assert(offsetof(RPlayerState_OnGoldCollected_Multicast, Delta) == 0x000000, "Member 'RPlayerState_OnGoldCollected_Multicast::Delta' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnGoldCollected_Multicast, NewTotal) == 0x000004, "Member 'RPlayerState_OnGoldCollected_Multicast::NewTotal' has a wrong offset!");

// Function RGame.RPlayerState.OnGoldCollected_Server
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_OnGoldCollected_Server final
{
public:
	float                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnGoldCollected_Server) == 0x000004, "Wrong alignment on RPlayerState_OnGoldCollected_Server");
static_assert(sizeof(RPlayerState_OnGoldCollected_Server) == 0x000004, "Wrong size on RPlayerState_OnGoldCollected_Server");
static_assert(offsetof(RPlayerState_OnGoldCollected_Server, Delta) == 0x000000, "Member 'RPlayerState_OnGoldCollected_Server::Delta' has a wrong offset!");

// Function RGame.RPlayerState.OnHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RPlayerState_OnHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnHealthDepleted) == 0x000008, "Wrong alignment on RPlayerState_OnHealthDepleted");
static_assert(sizeof(RPlayerState_OnHealthDepleted) == 0x0000C8, "Wrong size on RPlayerState_OnHealthDepleted");
static_assert(offsetof(RPlayerState_OnHealthDepleted, Component) == 0x000000, "Member 'RPlayerState_OnHealthDepleted::Component' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnHealthDepleted, DamageEventData) == 0x000008, "Member 'RPlayerState_OnHealthDepleted::DamageEventData' has a wrong offset!");

// Function RGame.RPlayerState.OnKeyCollected
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnKeyCollected final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotal;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnKeyCollected) == 0x000004, "Wrong alignment on RPlayerState_OnKeyCollected");
static_assert(sizeof(RPlayerState_OnKeyCollected) == 0x000008, "Wrong size on RPlayerState_OnKeyCollected");
static_assert(offsetof(RPlayerState_OnKeyCollected, Delta) == 0x000000, "Member 'RPlayerState_OnKeyCollected::Delta' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnKeyCollected, NewTotal) == 0x000004, "Member 'RPlayerState_OnKeyCollected::NewTotal' has a wrong offset!");

// Function RGame.RPlayerState.OnKeyCollected_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnKeyCollected_Multicast final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotal;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnKeyCollected_Multicast) == 0x000004, "Wrong alignment on RPlayerState_OnKeyCollected_Multicast");
static_assert(sizeof(RPlayerState_OnKeyCollected_Multicast) == 0x000008, "Wrong size on RPlayerState_OnKeyCollected_Multicast");
static_assert(offsetof(RPlayerState_OnKeyCollected_Multicast, Delta) == 0x000000, "Member 'RPlayerState_OnKeyCollected_Multicast::Delta' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnKeyCollected_Multicast, NewTotal) == 0x000004, "Member 'RPlayerState_OnKeyCollected_Multicast::NewTotal' has a wrong offset!");

// Function RGame.RPlayerState.OnKeyCollected_Server
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnKeyCollected_Server final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotal;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnKeyCollected_Server) == 0x000004, "Wrong alignment on RPlayerState_OnKeyCollected_Server");
static_assert(sizeof(RPlayerState_OnKeyCollected_Server) == 0x000008, "Wrong size on RPlayerState_OnKeyCollected_Server");
static_assert(offsetof(RPlayerState_OnKeyCollected_Server, Delta) == 0x000000, "Member 'RPlayerState_OnKeyCollected_Server::Delta' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnKeyCollected_Server, NewTotal) == 0x000004, "Member 'RPlayerState_OnKeyCollected_Server::NewTotal' has a wrong offset!");

// Function RGame.RPlayerState.OnMaximumHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct RPlayerState_OnMaximumHealthChanged final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumHealth;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlayerState_OnMaximumHealthChanged) == 0x000008, "Wrong alignment on RPlayerState_OnMaximumHealthChanged");
static_assert(sizeof(RPlayerState_OnMaximumHealthChanged) == 0x000010, "Wrong size on RPlayerState_OnMaximumHealthChanged");
static_assert(offsetof(RPlayerState_OnMaximumHealthChanged, Component) == 0x000000, "Member 'RPlayerState_OnMaximumHealthChanged::Component' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnMaximumHealthChanged, MaximumHealth) == 0x000008, "Member 'RPlayerState_OnMaximumHealthChanged::MaximumHealth' has a wrong offset!");

// Function RGame.RPlayerState.OnMutatorsChanged
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnMutatorsChanged final
{
public:
	class URPlayerGScriptComponent*               OwnerComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnMutatorsChanged) == 0x000008, "Wrong alignment on RPlayerState_OnMutatorsChanged");
static_assert(sizeof(RPlayerState_OnMutatorsChanged) == 0x000008, "Wrong size on RPlayerState_OnMutatorsChanged");
static_assert(offsetof(RPlayerState_OnMutatorsChanged, OwnerComponent) == 0x000000, "Member 'RPlayerState_OnMutatorsChanged::OwnerComponent' has a wrong offset!");

// Function RGame.RPlayerState.OnPlayerPawnDowned
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnPlayerPawnDowned final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnPlayerPawnDowned) == 0x000008, "Wrong alignment on RPlayerState_OnPlayerPawnDowned");
static_assert(sizeof(RPlayerState_OnPlayerPawnDowned) == 0x000008, "Wrong size on RPlayerState_OnPlayerPawnDowned");
static_assert(offsetof(RPlayerState_OnPlayerPawnDowned, RPlayerPawn) == 0x000000, "Member 'RPlayerState_OnPlayerPawnDowned::RPlayerPawn' has a wrong offset!");

// Function RGame.RPlayerState.OnProjectileHit
// 0x0018 (0x0018 - 0x0000)
struct RPlayerState_OnProjectileHit final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARProjectileBase*                       ProjectileActor;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnProjectileHit) == 0x000008, "Wrong alignment on RPlayerState_OnProjectileHit");
static_assert(sizeof(RPlayerState_OnProjectileHit) == 0x000018, "Wrong size on RPlayerState_OnProjectileHit");
static_assert(offsetof(RPlayerState_OnProjectileHit, Player) == 0x000000, "Member 'RPlayerState_OnProjectileHit::Player' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnProjectileHit, HitActor) == 0x000008, "Member 'RPlayerState_OnProjectileHit::HitActor' has a wrong offset!");
static_assert(offsetof(RPlayerState_OnProjectileHit, ProjectileActor) == 0x000010, "Member 'RPlayerState_OnProjectileHit::ProjectileActor' has a wrong offset!");

// Function RGame.RPlayerState.OnRevivedCastFinished
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_OnRevivedCastFinished final
{
public:
	class ARPlayerPawn*                           RevivingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_OnRevivedCastFinished) == 0x000008, "Wrong alignment on RPlayerState_OnRevivedCastFinished");
static_assert(sizeof(RPlayerState_OnRevivedCastFinished) == 0x000008, "Wrong size on RPlayerState_OnRevivedCastFinished");
static_assert(offsetof(RPlayerState_OnRevivedCastFinished, RevivingPlayer) == 0x000000, "Member 'RPlayerState_OnRevivedCastFinished::RevivingPlayer' has a wrong offset!");

// Function RGame.RPlayerState.ReconnectSync_Multicast
// 0x0170 (0x0170 - 0x0000)
struct RPlayerState_ReconnectSync_Multicast final
{
public:
	struct FRDisconnectedPlayerData               PlayerData;                                        // 0x0000(0x0170)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_ReconnectSync_Multicast) == 0x000008, "Wrong alignment on RPlayerState_ReconnectSync_Multicast");
static_assert(sizeof(RPlayerState_ReconnectSync_Multicast) == 0x000170, "Wrong size on RPlayerState_ReconnectSync_Multicast");
static_assert(offsetof(RPlayerState_ReconnectSync_Multicast, PlayerData) == 0x000000, "Member 'RPlayerState_ReconnectSync_Multicast::PlayerData' has a wrong offset!");

// Function RGame.RPlayerState.ResetPlayerStats
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_ResetPlayerStats final
{
public:
	class ARPlayerPawn*                           RPlayerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_ResetPlayerStats) == 0x000008, "Wrong alignment on RPlayerState_ResetPlayerStats");
static_assert(sizeof(RPlayerState_ResetPlayerStats) == 0x000008, "Wrong size on RPlayerState_ResetPlayerStats");
static_assert(offsetof(RPlayerState_ResetPlayerStats, RPlayerPawn) == 0x000000, "Member 'RPlayerState_ResetPlayerStats::RPlayerPawn' has a wrong offset!");

// Function RGame.RPlayerState.SetBloodPassive7Value
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_SetBloodPassive7Value final
{
public:
	float                                         NewBloodPassive7Value;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetBloodPassive7Value) == 0x000004, "Wrong alignment on RPlayerState_SetBloodPassive7Value");
static_assert(sizeof(RPlayerState_SetBloodPassive7Value) == 0x000004, "Wrong size on RPlayerState_SetBloodPassive7Value");
static_assert(offsetof(RPlayerState_SetBloodPassive7Value, NewBloodPassive7Value) == 0x000000, "Member 'RPlayerState_SetBloodPassive7Value::NewBloodPassive7Value' has a wrong offset!");

// Function RGame.RPlayerState.SetEnableGoldGain
// 0x0001 (0x0001 - 0x0000)
struct RPlayerState_SetEnableGoldGain final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetEnableGoldGain) == 0x000001, "Wrong alignment on RPlayerState_SetEnableGoldGain");
static_assert(sizeof(RPlayerState_SetEnableGoldGain) == 0x000001, "Wrong size on RPlayerState_SetEnableGoldGain");
static_assert(offsetof(RPlayerState_SetEnableGoldGain, bNewEnabled) == 0x000000, "Member 'RPlayerState_SetEnableGoldGain::bNewEnabled' has a wrong offset!");

// Function RGame.RPlayerState.SetHealthBonusRank
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_SetHealthBonusRank final
{
public:
	int32                                         NewHealthBonusRank;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetHealthBonusRank) == 0x000004, "Wrong alignment on RPlayerState_SetHealthBonusRank");
static_assert(sizeof(RPlayerState_SetHealthBonusRank) == 0x000004, "Wrong size on RPlayerState_SetHealthBonusRank");
static_assert(offsetof(RPlayerState_SetHealthBonusRank, NewHealthBonusRank) == 0x000000, "Member 'RPlayerState_SetHealthBonusRank::NewHealthBonusRank' has a wrong offset!");

// Function RGame.RPlayerState.SetHealthyCommitmentStacks
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_SetHealthyCommitmentStacks final
{
public:
	int32                                         NewHealthyCommitmentStacks;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetHealthyCommitmentStacks) == 0x000004, "Wrong alignment on RPlayerState_SetHealthyCommitmentStacks");
static_assert(sizeof(RPlayerState_SetHealthyCommitmentStacks) == 0x000004, "Wrong size on RPlayerState_SetHealthyCommitmentStacks");
static_assert(offsetof(RPlayerState_SetHealthyCommitmentStacks, NewHealthyCommitmentStacks) == 0x000000, "Member 'RPlayerState_SetHealthyCommitmentStacks::NewHealthyCommitmentStacks' has a wrong offset!");

// Function RGame.RPlayerState.SetPlayerFrameWidgetClass_Multicast
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_SetPlayerFrameWidgetClass_Multicast final
{
public:
	TSubclassOf<class URPlayerFrameUserWidget>    NewPlayerFrameWidgetClass;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetPlayerFrameWidgetClass_Multicast) == 0x000008, "Wrong alignment on RPlayerState_SetPlayerFrameWidgetClass_Multicast");
static_assert(sizeof(RPlayerState_SetPlayerFrameWidgetClass_Multicast) == 0x000008, "Wrong size on RPlayerState_SetPlayerFrameWidgetClass_Multicast");
static_assert(offsetof(RPlayerState_SetPlayerFrameWidgetClass_Multicast, NewPlayerFrameWidgetClass) == 0x000000, "Member 'RPlayerState_SetPlayerFrameWidgetClass_Multicast::NewPlayerFrameWidgetClass' has a wrong offset!");

// Function RGame.RPlayerState.SetPlayerFrameWidgetClass_Server
// 0x0008 (0x0008 - 0x0000)
struct RPlayerState_SetPlayerFrameWidgetClass_Server final
{
public:
	TSubclassOf<class URPlayerFrameUserWidget>    NewPlayerFrameWidgetClass;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetPlayerFrameWidgetClass_Server) == 0x000008, "Wrong alignment on RPlayerState_SetPlayerFrameWidgetClass_Server");
static_assert(sizeof(RPlayerState_SetPlayerFrameWidgetClass_Server) == 0x000008, "Wrong size on RPlayerState_SetPlayerFrameWidgetClass_Server");
static_assert(offsetof(RPlayerState_SetPlayerFrameWidgetClass_Server, NewPlayerFrameWidgetClass) == 0x000000, "Member 'RPlayerState_SetPlayerFrameWidgetClass_Server::NewPlayerFrameWidgetClass' has a wrong offset!");

// Function RGame.RPlayerState.SetRunStats
// 0x000C (0x000C - 0x0000)
struct RPlayerState_SetRunStats final
{
public:
	struct FRRunStats                             RunStats;                                          // 0x0000(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetRunStats) == 0x000004, "Wrong alignment on RPlayerState_SetRunStats");
static_assert(sizeof(RPlayerState_SetRunStats) == 0x00000C, "Wrong size on RPlayerState_SetRunStats");
static_assert(offsetof(RPlayerState_SetRunStats, RunStats) == 0x000000, "Member 'RPlayerState_SetRunStats::RunStats' has a wrong offset!");

// Function RGame.RPlayerState.SetRunSuccesful
// 0x0001 (0x0001 - 0x0000)
struct RPlayerState_SetRunSuccesful final
{
public:
	bool                                          RunSuccesful;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetRunSuccesful) == 0x000001, "Wrong alignment on RPlayerState_SetRunSuccesful");
static_assert(sizeof(RPlayerState_SetRunSuccesful) == 0x000001, "Wrong size on RPlayerState_SetRunSuccesful");
static_assert(offsetof(RPlayerState_SetRunSuccesful, RunSuccesful) == 0x000000, "Member 'RPlayerState_SetRunSuccesful::RunSuccesful' has a wrong offset!");

// Function RGame.RPlayerState.SetSecondWindUsed
// 0x0001 (0x0001 - 0x0000)
struct RPlayerState_SetSecondWindUsed final
{
public:
	bool                                          bNewSecondWindUsed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetSecondWindUsed) == 0x000001, "Wrong alignment on RPlayerState_SetSecondWindUsed");
static_assert(sizeof(RPlayerState_SetSecondWindUsed) == 0x000001, "Wrong size on RPlayerState_SetSecondWindUsed");
static_assert(offsetof(RPlayerState_SetSecondWindUsed, bNewSecondWindUsed) == 0x000000, "Member 'RPlayerState_SetSecondWindUsed::bNewSecondWindUsed' has a wrong offset!");

// Function RGame.RPlayerState.SetViolentCommitmentStacks
// 0x0004 (0x0004 - 0x0000)
struct RPlayerState_SetViolentCommitmentStacks final
{
public:
	int32                                         NewViolentCommitmentStacks;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlayerState_SetViolentCommitmentStacks) == 0x000004, "Wrong alignment on RPlayerState_SetViolentCommitmentStacks");
static_assert(sizeof(RPlayerState_SetViolentCommitmentStacks) == 0x000004, "Wrong size on RPlayerState_SetViolentCommitmentStacks");
static_assert(offsetof(RPlayerState_SetViolentCommitmentStacks, NewViolentCommitmentStacks) == 0x000000, "Member 'RPlayerState_SetViolentCommitmentStacks::NewViolentCommitmentStacks' has a wrong offset!");

// Function RGame.RPlaySyncedMontageCallbackProxy.CreateProxyObjectForPlayMontage
// 0x0048 (0x0048 - 0x0000)
struct RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage final
{
public:
	TArray<class USkeletalMeshComponent*>         InSkeletalMeshComponents;                          // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ARPlayerPawn*                           PlayerPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   MontagesToPlay;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingSection;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStopAllMontages;                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URPlaySyncedMontageCallbackProxy*       ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000008, "Wrong alignment on RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(sizeof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage) == 0x000048, "Wrong size on RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, InSkeletalMeshComponents) == 0x000000, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::InSkeletalMeshComponents' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, PlayerPawn) == 0x000010, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::PlayerPawn' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, MontagesToPlay) == 0x000018, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::MontagesToPlay' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, PlayRate) == 0x000028, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingPosition) == 0x00002C, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingPosition' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, StartingSection) == 0x000030, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::StartingSection' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, bShouldStopAllMontages) == 0x000038, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::bShouldStopAllMontages' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage, ReturnValue) == 0x000040, "Member 'RPlaySyncedMontageCallbackProxy_CreateProxyObjectForPlayMontage::ReturnValue' has a wrong offset!");

// Function RGame.RPlaySyncedMontageCallbackProxy.OnMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut) == 0x000008, "Wrong alignment on RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut");
static_assert(sizeof(RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut) == 0x000010, "Wrong size on RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut, Montage) == 0x000000, "Member 'RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut::Montage' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut, bInterrupted) == 0x000008, "Member 'RPlaySyncedMontageCallbackProxy_OnMontageBlendingOut::bInterrupted' has a wrong offset!");

// Function RGame.RPlaySyncedMontageCallbackProxy.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct RPlaySyncedMontageCallbackProxy_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RPlaySyncedMontageCallbackProxy_OnMontageEnded) == 0x000008, "Wrong alignment on RPlaySyncedMontageCallbackProxy_OnMontageEnded");
static_assert(sizeof(RPlaySyncedMontageCallbackProxy_OnMontageEnded) == 0x000010, "Wrong size on RPlaySyncedMontageCallbackProxy_OnMontageEnded");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnMontageEnded, Montage) == 0x000000, "Member 'RPlaySyncedMontageCallbackProxy_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnMontageEnded, bInterrupted) == 0x000008, "Member 'RPlaySyncedMontageCallbackProxy_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function RGame.RPlaySyncedMontageCallbackProxy.OnNotifyBeginReceived
// 0x0028 (0x0028 - 0x0000)
struct RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived) == 0x000008, "Wrong alignment on RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(sizeof(RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived) == 0x000028, "Wrong size on RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived, NotifyName) == 0x000000, "Member 'RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'RPlaySyncedMontageCallbackProxy_OnNotifyBeginReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function RGame.RPlaySyncedMontageCallbackProxy.OnNotifyEndReceived
// 0x0028 (0x0028 - 0x0000)
struct RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointNotifyPayload;                       // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived) == 0x000008, "Wrong alignment on RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived");
static_assert(sizeof(RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived) == 0x000028, "Wrong size on RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived, NotifyName) == 0x000000, "Member 'RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived::NotifyName' has a wrong offset!");
static_assert(offsetof(RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived, BranchingPointNotifyPayload) == 0x000008, "Member 'RPlaySyncedMontageCallbackProxy_OnNotifyEndReceived::BranchingPointNotifyPayload' has a wrong offset!");

// Function RGame.RPoolManager.GetPoolManager
// 0x0010 (0x0010 - 0x0000)
struct RPoolManager_GetPoolManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARPoolManager*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPoolManager_GetPoolManager) == 0x000008, "Wrong alignment on RPoolManager_GetPoolManager");
static_assert(sizeof(RPoolManager_GetPoolManager) == 0x000010, "Wrong size on RPoolManager_GetPoolManager");
static_assert(offsetof(RPoolManager_GetPoolManager, WorldContextObject) == 0x000000, "Member 'RPoolManager_GetPoolManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RPoolManager_GetPoolManager, ReturnValue) == 0x000008, "Member 'RPoolManager_GetPoolManager::ReturnValue' has a wrong offset!");

// Function RGame.RPotGeometryCollectionActor.CrumblePot
// 0x0020 (0x0020 - 0x0000)
struct RPotGeometryCollectionActor_CrumblePot final
{
public:
	EBreakType                                    BreakType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RPotGeometryCollectionActor_CrumblePot) == 0x000008, "Wrong alignment on RPotGeometryCollectionActor_CrumblePot");
static_assert(sizeof(RPotGeometryCollectionActor_CrumblePot) == 0x000020, "Wrong size on RPotGeometryCollectionActor_CrumblePot");
static_assert(offsetof(RPotGeometryCollectionActor_CrumblePot, BreakType) == 0x000000, "Member 'RPotGeometryCollectionActor_CrumblePot::BreakType' has a wrong offset!");
static_assert(offsetof(RPotGeometryCollectionActor_CrumblePot, Location) == 0x000008, "Member 'RPotGeometryCollectionActor_CrumblePot::Location' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.MoveInterpolationTarget
// 0x0030 (0x0030 - 0x0000)
struct RProjectileMovementComponent_MoveInterpolationTarget final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_MoveInterpolationTarget) == 0x000008, "Wrong alignment on RProjectileMovementComponent_MoveInterpolationTarget");
static_assert(sizeof(RProjectileMovementComponent_MoveInterpolationTarget) == 0x000030, "Wrong size on RProjectileMovementComponent_MoveInterpolationTarget");
static_assert(offsetof(RProjectileMovementComponent_MoveInterpolationTarget, NewLocation) == 0x000000, "Member 'RProjectileMovementComponent_MoveInterpolationTarget::NewLocation' has a wrong offset!");
static_assert(offsetof(RProjectileMovementComponent_MoveInterpolationTarget, NewRotation) == 0x000018, "Member 'RProjectileMovementComponent_MoveInterpolationTarget::NewRotation' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.OnHomingTargetHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RProjectileMovementComponent_OnHomingTargetHealthDepleted final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_OnHomingTargetHealthDepleted) == 0x000008, "Wrong alignment on RProjectileMovementComponent_OnHomingTargetHealthDepleted");
static_assert(sizeof(RProjectileMovementComponent_OnHomingTargetHealthDepleted) == 0x0000C8, "Wrong size on RProjectileMovementComponent_OnHomingTargetHealthDepleted");
static_assert(offsetof(RProjectileMovementComponent_OnHomingTargetHealthDepleted, Component) == 0x000000, "Member 'RProjectileMovementComponent_OnHomingTargetHealthDepleted::Component' has a wrong offset!");
static_assert(offsetof(RProjectileMovementComponent_OnHomingTargetHealthDepleted, DamageEventData) == 0x000008, "Member 'RProjectileMovementComponent_OnHomingTargetHealthDepleted::DamageEventData' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetBlockMovementTick
// 0x0001 (0x0001 - 0x0000)
struct RProjectileMovementComponent_SetBlockMovementTick final
{
public:
	bool                                          bNewBlockMovementTick;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetBlockMovementTick) == 0x000001, "Wrong alignment on RProjectileMovementComponent_SetBlockMovementTick");
static_assert(sizeof(RProjectileMovementComponent_SetBlockMovementTick) == 0x000001, "Wrong size on RProjectileMovementComponent_SetBlockMovementTick");
static_assert(offsetof(RProjectileMovementComponent_SetBlockMovementTick, bNewBlockMovementTick) == 0x000000, "Member 'RProjectileMovementComponent_SetBlockMovementTick::bNewBlockMovementTick' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetCanBounceOnPawns
// 0x0001 (0x0001 - 0x0000)
struct RProjectileMovementComponent_SetCanBounceOnPawns final
{
public:
	bool                                          bNewCanBounce;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetCanBounceOnPawns) == 0x000001, "Wrong alignment on RProjectileMovementComponent_SetCanBounceOnPawns");
static_assert(sizeof(RProjectileMovementComponent_SetCanBounceOnPawns) == 0x000001, "Wrong size on RProjectileMovementComponent_SetCanBounceOnPawns");
static_assert(offsetof(RProjectileMovementComponent_SetCanBounceOnPawns, bNewCanBounce) == 0x000000, "Member 'RProjectileMovementComponent_SetCanBounceOnPawns::bNewCanBounce' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetHomingSocket
// 0x0008 (0x0008 - 0x0000)
struct RProjectileMovementComponent_SetHomingSocket final
{
public:
	class FName                                   InHomingSocketName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetHomingSocket) == 0x000004, "Wrong alignment on RProjectileMovementComponent_SetHomingSocket");
static_assert(sizeof(RProjectileMovementComponent_SetHomingSocket) == 0x000008, "Wrong size on RProjectileMovementComponent_SetHomingSocket");
static_assert(offsetof(RProjectileMovementComponent_SetHomingSocket, InHomingSocketName) == 0x000000, "Member 'RProjectileMovementComponent_SetHomingSocket::InHomingSocketName' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetHomingTarget
// 0x0008 (0x0008 - 0x0000)
struct RProjectileMovementComponent_SetHomingTarget final
{
public:
	class USceneComponent*                        InHomingTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetHomingTarget) == 0x000008, "Wrong alignment on RProjectileMovementComponent_SetHomingTarget");
static_assert(sizeof(RProjectileMovementComponent_SetHomingTarget) == 0x000008, "Wrong size on RProjectileMovementComponent_SetHomingTarget");
static_assert(offsetof(RProjectileMovementComponent_SetHomingTarget, InHomingTarget) == 0x000000, "Member 'RProjectileMovementComponent_SetHomingTarget::InHomingTarget' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetInterpolatedComponent
// 0x0008 (0x0008 - 0x0000)
struct RProjectileMovementComponent_SetInterpolatedComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetInterpolatedComponent) == 0x000008, "Wrong alignment on RProjectileMovementComponent_SetInterpolatedComponent");
static_assert(sizeof(RProjectileMovementComponent_SetInterpolatedComponent) == 0x000008, "Wrong size on RProjectileMovementComponent_SetInterpolatedComponent");
static_assert(offsetof(RProjectileMovementComponent_SetInterpolatedComponent, Component) == 0x000000, "Member 'RProjectileMovementComponent_SetInterpolatedComponent::Component' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetPiercing
// 0x0001 (0x0001 - 0x0000)
struct RProjectileMovementComponent_SetPiercing final
{
public:
	bool                                          bNewPiercing;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetPiercing) == 0x000001, "Wrong alignment on RProjectileMovementComponent_SetPiercing");
static_assert(sizeof(RProjectileMovementComponent_SetPiercing) == 0x000001, "Wrong size on RProjectileMovementComponent_SetPiercing");
static_assert(offsetof(RProjectileMovementComponent_SetPiercing, bNewPiercing) == 0x000000, "Member 'RProjectileMovementComponent_SetPiercing::bNewPiercing' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetVelocity
// 0x0018 (0x0018 - 0x0000)
struct RProjectileMovementComponent_SetVelocity final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetVelocity) == 0x000008, "Wrong alignment on RProjectileMovementComponent_SetVelocity");
static_assert(sizeof(RProjectileMovementComponent_SetVelocity) == 0x000018, "Wrong size on RProjectileMovementComponent_SetVelocity");
static_assert(offsetof(RProjectileMovementComponent_SetVelocity, NewVelocity) == 0x000000, "Member 'RProjectileMovementComponent_SetVelocity::NewVelocity' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.SetVelocityInLocalSpace
// 0x0018 (0x0018 - 0x0000)
struct RProjectileMovementComponent_SetVelocityInLocalSpace final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_SetVelocityInLocalSpace) == 0x000008, "Wrong alignment on RProjectileMovementComponent_SetVelocityInLocalSpace");
static_assert(sizeof(RProjectileMovementComponent_SetVelocityInLocalSpace) == 0x000018, "Wrong size on RProjectileMovementComponent_SetVelocityInLocalSpace");
static_assert(offsetof(RProjectileMovementComponent_SetVelocityInLocalSpace, NewVelocity) == 0x000000, "Member 'RProjectileMovementComponent_SetVelocityInLocalSpace::NewVelocity' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.StopSimulating
// 0x0100 (0x0100 - 0x0000)
struct RProjectileMovementComponent_StopSimulating final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_StopSimulating) == 0x000008, "Wrong alignment on RProjectileMovementComponent_StopSimulating");
static_assert(sizeof(RProjectileMovementComponent_StopSimulating) == 0x000100, "Wrong size on RProjectileMovementComponent_StopSimulating");
static_assert(offsetof(RProjectileMovementComponent_StopSimulating, HitResult) == 0x000000, "Member 'RProjectileMovementComponent_StopSimulating::HitResult' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.ComputeAcceleration
// 0x0038 (0x0038 - 0x0000)
struct RProjectileMovementComponent_ComputeAcceleration final
{
public:
	struct FVector                                InVelocity;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_ComputeAcceleration) == 0x000008, "Wrong alignment on RProjectileMovementComponent_ComputeAcceleration");
static_assert(sizeof(RProjectileMovementComponent_ComputeAcceleration) == 0x000038, "Wrong size on RProjectileMovementComponent_ComputeAcceleration");
static_assert(offsetof(RProjectileMovementComponent_ComputeAcceleration, InVelocity) == 0x000000, "Member 'RProjectileMovementComponent_ComputeAcceleration::InVelocity' has a wrong offset!");
static_assert(offsetof(RProjectileMovementComponent_ComputeAcceleration, DeltaTime) == 0x000018, "Member 'RProjectileMovementComponent_ComputeAcceleration::DeltaTime' has a wrong offset!");
static_assert(offsetof(RProjectileMovementComponent_ComputeAcceleration, ReturnValue) == 0x000020, "Member 'RProjectileMovementComponent_ComputeAcceleration::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.IsInterpolationComplete
// 0x0001 (0x0001 - 0x0000)
struct RProjectileMovementComponent_IsInterpolationComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_IsInterpolationComplete) == 0x000001, "Wrong alignment on RProjectileMovementComponent_IsInterpolationComplete");
static_assert(sizeof(RProjectileMovementComponent_IsInterpolationComplete) == 0x000001, "Wrong size on RProjectileMovementComponent_IsInterpolationComplete");
static_assert(offsetof(RProjectileMovementComponent_IsInterpolationComplete, ReturnValue) == 0x000000, "Member 'RProjectileMovementComponent_IsInterpolationComplete::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.IsVelocityUnderSimulationThreshold
// 0x0001 (0x0001 - 0x0000)
struct RProjectileMovementComponent_IsVelocityUnderSimulationThreshold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_IsVelocityUnderSimulationThreshold) == 0x000001, "Wrong alignment on RProjectileMovementComponent_IsVelocityUnderSimulationThreshold");
static_assert(sizeof(RProjectileMovementComponent_IsVelocityUnderSimulationThreshold) == 0x000001, "Wrong size on RProjectileMovementComponent_IsVelocityUnderSimulationThreshold");
static_assert(offsetof(RProjectileMovementComponent_IsVelocityUnderSimulationThreshold, ReturnValue) == 0x000000, "Member 'RProjectileMovementComponent_IsVelocityUnderSimulationThreshold::ReturnValue' has a wrong offset!");

// Function RGame.RProjectileMovementComponent.LimitVelocity
// 0x0030 (0x0030 - 0x0000)
struct RProjectileMovementComponent_LimitVelocity final
{
public:
	struct FVector                                NewVelocity;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RProjectileMovementComponent_LimitVelocity) == 0x000008, "Wrong alignment on RProjectileMovementComponent_LimitVelocity");
static_assert(sizeof(RProjectileMovementComponent_LimitVelocity) == 0x000030, "Wrong size on RProjectileMovementComponent_LimitVelocity");
static_assert(offsetof(RProjectileMovementComponent_LimitVelocity, NewVelocity) == 0x000000, "Member 'RProjectileMovementComponent_LimitVelocity::NewVelocity' has a wrong offset!");
static_assert(offsetof(RProjectileMovementComponent_LimitVelocity, ReturnValue) == 0x000018, "Member 'RProjectileMovementComponent_LimitVelocity::ReturnValue' has a wrong offset!");

// Function RGame.RRadarManager.GetRadarManager
// 0x0010 (0x0010 - 0x0000)
struct RRadarManager_GetRadarManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARRadarManager*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarManager_GetRadarManager) == 0x000008, "Wrong alignment on RRadarManager_GetRadarManager");
static_assert(sizeof(RRadarManager_GetRadarManager) == 0x000010, "Wrong size on RRadarManager_GetRadarManager");
static_assert(offsetof(RRadarManager_GetRadarManager, WorldContextObject) == 0x000000, "Member 'RRadarManager_GetRadarManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RRadarManager_GetRadarManager, ReturnValue) == 0x000008, "Member 'RRadarManager_GetRadarManager::ReturnValue' has a wrong offset!");

// Function RGame.RRadarManager.RegisterRadarObject
// 0x0008 (0x0008 - 0x0000)
struct RRadarManager_RegisterRadarObject final
{
public:
	class AActor*                                 RadarObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarManager_RegisterRadarObject) == 0x000008, "Wrong alignment on RRadarManager_RegisterRadarObject");
static_assert(sizeof(RRadarManager_RegisterRadarObject) == 0x000008, "Wrong size on RRadarManager_RegisterRadarObject");
static_assert(offsetof(RRadarManager_RegisterRadarObject, RadarObject) == 0x000000, "Member 'RRadarManager_RegisterRadarObject::RadarObject' has a wrong offset!");

// Function RGame.RRadarManager.UnregisterRadarObject
// 0x0008 (0x0008 - 0x0000)
struct RRadarManager_UnregisterRadarObject final
{
public:
	class AActor*                                 ObjectToUnRegister;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarManager_UnregisterRadarObject) == 0x000008, "Wrong alignment on RRadarManager_UnregisterRadarObject");
static_assert(sizeof(RRadarManager_UnregisterRadarObject) == 0x000008, "Wrong size on RRadarManager_UnregisterRadarObject");
static_assert(offsetof(RRadarManager_UnregisterRadarObject, ObjectToUnRegister) == 0x000000, "Member 'RRadarManager_UnregisterRadarObject::ObjectToUnRegister' has a wrong offset!");

// Function RGame.RRadarObjectInterface.GetRadarIconColor
// 0x0010 (0x0010 - 0x0000)
struct RRadarObjectInterface_GetRadarIconColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarObjectInterface_GetRadarIconColor) == 0x000004, "Wrong alignment on RRadarObjectInterface_GetRadarIconColor");
static_assert(sizeof(RRadarObjectInterface_GetRadarIconColor) == 0x000010, "Wrong size on RRadarObjectInterface_GetRadarIconColor");
static_assert(offsetof(RRadarObjectInterface_GetRadarIconColor, ReturnValue) == 0x000000, "Member 'RRadarObjectInterface_GetRadarIconColor::ReturnValue' has a wrong offset!");

// Function RGame.RRadarObjectInterface.GetRadarIconSize
// 0x0010 (0x0010 - 0x0000)
struct RRadarObjectInterface_GetRadarIconSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarObjectInterface_GetRadarIconSize) == 0x000008, "Wrong alignment on RRadarObjectInterface_GetRadarIconSize");
static_assert(sizeof(RRadarObjectInterface_GetRadarIconSize) == 0x000010, "Wrong size on RRadarObjectInterface_GetRadarIconSize");
static_assert(offsetof(RRadarObjectInterface_GetRadarIconSize, ReturnValue) == 0x000000, "Member 'RRadarObjectInterface_GetRadarIconSize::ReturnValue' has a wrong offset!");

// Function RGame.RRadarObjectInterface.GetRadarObjectIcon
// 0x0008 (0x0008 - 0x0000)
struct RRadarObjectInterface_GetRadarObjectIcon final
{
public:
	class USlateBrushAsset*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarObjectInterface_GetRadarObjectIcon) == 0x000008, "Wrong alignment on RRadarObjectInterface_GetRadarObjectIcon");
static_assert(sizeof(RRadarObjectInterface_GetRadarObjectIcon) == 0x000008, "Wrong size on RRadarObjectInterface_GetRadarObjectIcon");
static_assert(offsetof(RRadarObjectInterface_GetRadarObjectIcon, ReturnValue) == 0x000000, "Member 'RRadarObjectInterface_GetRadarObjectIcon::ReturnValue' has a wrong offset!");

// Function RGame.RRadarObjectInterface.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct RRadarObjectInterface_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRadarObjectInterface_ShouldShowOnRadar) == 0x000001, "Wrong alignment on RRadarObjectInterface_ShouldShowOnRadar");
static_assert(sizeof(RRadarObjectInterface_ShouldShowOnRadar) == 0x000001, "Wrong size on RRadarObjectInterface_ShouldShowOnRadar");
static_assert(offsetof(RRadarObjectInterface_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'RRadarObjectInterface_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

// Function RGame.RRelevancyInterface.NativeOnRelevancyChanged
// 0x0006 (0x0006 - 0x0000)
struct RRelevancyInterface_NativeOnRelevancyChanged final
{
public:
	struct FRRelevancyParams                      ProximityParams;                                   // 0x0000(0x0006)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRelevancyInterface_NativeOnRelevancyChanged) == 0x000001, "Wrong alignment on RRelevancyInterface_NativeOnRelevancyChanged");
static_assert(sizeof(RRelevancyInterface_NativeOnRelevancyChanged) == 0x000006, "Wrong size on RRelevancyInterface_NativeOnRelevancyChanged");
static_assert(offsetof(RRelevancyInterface_NativeOnRelevancyChanged, ProximityParams) == 0x000000, "Member 'RRelevancyInterface_NativeOnRelevancyChanged::ProximityParams' has a wrong offset!");

// Function RGame.RRelevancyInterface.ReceiveOnRelevancyChanged
// 0x0006 (0x0006 - 0x0000)
struct RRelevancyInterface_ReceiveOnRelevancyChanged final
{
public:
	struct FRRelevancyParams                      RelevancyParams;                                   // 0x0000(0x0006)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRelevancyInterface_ReceiveOnRelevancyChanged) == 0x000001, "Wrong alignment on RRelevancyInterface_ReceiveOnRelevancyChanged");
static_assert(sizeof(RRelevancyInterface_ReceiveOnRelevancyChanged) == 0x000006, "Wrong size on RRelevancyInterface_ReceiveOnRelevancyChanged");
static_assert(offsetof(RRelevancyInterface_ReceiveOnRelevancyChanged, RelevancyParams) == 0x000000, "Member 'RRelevancyInterface_ReceiveOnRelevancyChanged::RelevancyParams' has a wrong offset!");

// Function RGame.RRelevancyManager.DumpParams
// 0x0018 (0x0018 - 0x0000)
struct RRelevancyManager_DumpParams final
{
public:
	struct FRRelevancyParams                      Params_0;                                          // 0x0000(0x0006)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRelevancyManager_DumpParams) == 0x000008, "Wrong alignment on RRelevancyManager_DumpParams");
static_assert(sizeof(RRelevancyManager_DumpParams) == 0x000018, "Wrong size on RRelevancyManager_DumpParams");
static_assert(offsetof(RRelevancyManager_DumpParams, Params_0) == 0x000000, "Member 'RRelevancyManager_DumpParams::Params_0' has a wrong offset!");
static_assert(offsetof(RRelevancyManager_DumpParams, ReturnValue) == 0x000008, "Member 'RRelevancyManager_DumpParams::ReturnValue' has a wrong offset!");

// Function RGame.RRelevancyManager.GetRelevancyManager
// 0x0010 (0x0010 - 0x0000)
struct RRelevancyManager_GetRelevancyManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARRelevancyManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRelevancyManager_GetRelevancyManager) == 0x000008, "Wrong alignment on RRelevancyManager_GetRelevancyManager");
static_assert(sizeof(RRelevancyManager_GetRelevancyManager) == 0x000010, "Wrong size on RRelevancyManager_GetRelevancyManager");
static_assert(offsetof(RRelevancyManager_GetRelevancyManager, WorldContextObject) == 0x000000, "Member 'RRelevancyManager_GetRelevancyManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RRelevancyManager_GetRelevancyManager, ReturnValue) == 0x000008, "Member 'RRelevancyManager_GetRelevancyManager::ReturnValue' has a wrong offset!");

// Function RGame.RRelevancyManager.RegisterRelevancyActor
// 0x0038 (0x0038 - 0x0000)
struct RRelevancyManager_RegisterRelevancyActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRRelevancyRegisterParams              Params_0;                                          // 0x0008(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RRelevancyManager_RegisterRelevancyActor) == 0x000008, "Wrong alignment on RRelevancyManager_RegisterRelevancyActor");
static_assert(sizeof(RRelevancyManager_RegisterRelevancyActor) == 0x000038, "Wrong size on RRelevancyManager_RegisterRelevancyActor");
static_assert(offsetof(RRelevancyManager_RegisterRelevancyActor, Actor) == 0x000000, "Member 'RRelevancyManager_RegisterRelevancyActor::Actor' has a wrong offset!");
static_assert(offsetof(RRelevancyManager_RegisterRelevancyActor, Params_0) == 0x000008, "Member 'RRelevancyManager_RegisterRelevancyActor::Params_0' has a wrong offset!");
static_assert(offsetof(RRelevancyManager_RegisterRelevancyActor, ReturnValue) == 0x000030, "Member 'RRelevancyManager_RegisterRelevancyActor::ReturnValue' has a wrong offset!");

// Function RGame.RResource.SetValueAmount
// 0x0004 (0x0004 - 0x0000)
struct RResource_SetValueAmount final
{
public:
	float                                         newAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResource_SetValueAmount) == 0x000004, "Wrong alignment on RResource_SetValueAmount");
static_assert(sizeof(RResource_SetValueAmount) == 0x000004, "Wrong size on RResource_SetValueAmount");
static_assert(offsetof(RResource_SetValueAmount, newAmount) == 0x000000, "Member 'RResource_SetValueAmount::newAmount' has a wrong offset!");

// Function RGame.RResourceProjectile.OnComponentHit
// 0x0130 (0x0130 - 0x0000)
struct RResourceProjectile_OnComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_OnComponentHit) == 0x000008, "Wrong alignment on RResourceProjectile_OnComponentHit");
static_assert(sizeof(RResourceProjectile_OnComponentHit) == 0x000130, "Wrong size on RResourceProjectile_OnComponentHit");
static_assert(offsetof(RResourceProjectile_OnComponentHit, HitComponent) == 0x000000, "Member 'RResourceProjectile_OnComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(RResourceProjectile_OnComponentHit, OtherActor) == 0x000008, "Member 'RResourceProjectile_OnComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RResourceProjectile_OnComponentHit, OtherComp) == 0x000010, "Member 'RResourceProjectile_OnComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(RResourceProjectile_OnComponentHit, NormalImpulse) == 0x000018, "Member 'RResourceProjectile_OnComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(RResourceProjectile_OnComponentHit, Hit) == 0x000030, "Member 'RResourceProjectile_OnComponentHit::Hit' has a wrong offset!");

// Function RGame.RResourceProjectile.OnResourcePickedUp
// 0x0008 (0x0008 - 0x0000)
struct RResourceProjectile_OnResourcePickedUp final
{
public:
	class ARPlayerPawn*                           PickedUpBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_OnResourcePickedUp) == 0x000008, "Wrong alignment on RResourceProjectile_OnResourcePickedUp");
static_assert(sizeof(RResourceProjectile_OnResourcePickedUp) == 0x000008, "Wrong size on RResourceProjectile_OnResourcePickedUp");
static_assert(offsetof(RResourceProjectile_OnResourcePickedUp, PickedUpBy) == 0x000000, "Member 'RResourceProjectile_OnResourcePickedUp::PickedUpBy' has a wrong offset!");

// Function RGame.RResourceProjectile.Pickup
// 0x0008 (0x0008 - 0x0000)
struct RResourceProjectile_Pickup final
{
public:
	class ARPlayerPawn*                           PickedUpBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_Pickup) == 0x000008, "Wrong alignment on RResourceProjectile_Pickup");
static_assert(sizeof(RResourceProjectile_Pickup) == 0x000008, "Wrong size on RResourceProjectile_Pickup");
static_assert(offsetof(RResourceProjectile_Pickup, PickedUpBy) == 0x000000, "Member 'RResourceProjectile_Pickup::PickedUpBy' has a wrong offset!");

// Function RGame.RResourceProjectile.SetResourceAmount
// 0x0004 (0x0004 - 0x0000)
struct RResourceProjectile_SetResourceAmount final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_SetResourceAmount) == 0x000004, "Wrong alignment on RResourceProjectile_SetResourceAmount");
static_assert(sizeof(RResourceProjectile_SetResourceAmount) == 0x000004, "Wrong size on RResourceProjectile_SetResourceAmount");
static_assert(offsetof(RResourceProjectile_SetResourceAmount, Amount) == 0x000000, "Member 'RResourceProjectile_SetResourceAmount::Amount' has a wrong offset!");

// Function RGame.RResourceProjectile.SetTargetPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct RResourceProjectile_SetTargetPlayerPawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_SetTargetPlayerPawn) == 0x000008, "Wrong alignment on RResourceProjectile_SetTargetPlayerPawn");
static_assert(sizeof(RResourceProjectile_SetTargetPlayerPawn) == 0x000008, "Wrong size on RResourceProjectile_SetTargetPlayerPawn");
static_assert(offsetof(RResourceProjectile_SetTargetPlayerPawn, InPawn) == 0x000000, "Member 'RResourceProjectile_SetTargetPlayerPawn::InPawn' has a wrong offset!");

// Function RGame.RResourceProjectile.GetTargetPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct RResourceProjectile_GetTargetPlayerPawn final
{
public:
	class ARPlayerPawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RResourceProjectile_GetTargetPlayerPawn) == 0x000008, "Wrong alignment on RResourceProjectile_GetTargetPlayerPawn");
static_assert(sizeof(RResourceProjectile_GetTargetPlayerPawn) == 0x000008, "Wrong size on RResourceProjectile_GetTargetPlayerPawn");
static_assert(offsetof(RResourceProjectile_GetTargetPlayerPawn, ReturnValue) == 0x000000, "Member 'RResourceProjectile_GetTargetPlayerPawn::ReturnValue' has a wrong offset!");

// Function RGame.RRocket.SetBaseAreaOfEffectSize
// 0x0004 (0x0004 - 0x0000)
struct RRocket_SetBaseAreaOfEffectSize final
{
public:
	float                                         newBaseAreaOfEffectRadius;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRocket_SetBaseAreaOfEffectSize) == 0x000004, "Wrong alignment on RRocket_SetBaseAreaOfEffectSize");
static_assert(sizeof(RRocket_SetBaseAreaOfEffectSize) == 0x000004, "Wrong size on RRocket_SetBaseAreaOfEffectSize");
static_assert(offsetof(RRocket_SetBaseAreaOfEffectSize, newBaseAreaOfEffectRadius) == 0x000000, "Member 'RRocket_SetBaseAreaOfEffectSize::newBaseAreaOfEffectRadius' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.GetCompletionDecrementAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_GetCompletionDecrementAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_GetCompletionDecrementAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_GetCompletionDecrementAmount");
static_assert(sizeof(RRoomObjectiveInterface_GetCompletionDecrementAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_GetCompletionDecrementAmount");
static_assert(offsetof(RRoomObjectiveInterface_GetCompletionDecrementAmount, ReturnValue) == 0x000000, "Member 'RRoomObjectiveInterface_GetCompletionDecrementAmount::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.GetCompletionIncrementAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_GetCompletionIncrementAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_GetCompletionIncrementAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_GetCompletionIncrementAmount");
static_assert(sizeof(RRoomObjectiveInterface_GetCompletionIncrementAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_GetCompletionIncrementAmount");
static_assert(offsetof(RRoomObjectiveInterface_GetCompletionIncrementAmount, ReturnValue) == 0x000000, "Member 'RRoomObjectiveInterface_GetCompletionIncrementAmount::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.GetCurrentCompletionAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_GetCurrentCompletionAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_GetCurrentCompletionAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_GetCurrentCompletionAmount");
static_assert(sizeof(RRoomObjectiveInterface_GetCurrentCompletionAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_GetCurrentCompletionAmount");
static_assert(offsetof(RRoomObjectiveInterface_GetCurrentCompletionAmount, ReturnValue) == 0x000000, "Member 'RRoomObjectiveInterface_GetCurrentCompletionAmount::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.GetRequiredCompletionAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_GetRequiredCompletionAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_GetRequiredCompletionAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_GetRequiredCompletionAmount");
static_assert(sizeof(RRoomObjectiveInterface_GetRequiredCompletionAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_GetRequiredCompletionAmount");
static_assert(offsetof(RRoomObjectiveInterface_GetRequiredCompletionAmount, ReturnValue) == 0x000000, "Member 'RRoomObjectiveInterface_GetRequiredCompletionAmount::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.IsObjectCompleted
// 0x0001 (0x0001 - 0x0000)
struct RRoomObjectiveInterface_IsObjectCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_IsObjectCompleted) == 0x000001, "Wrong alignment on RRoomObjectiveInterface_IsObjectCompleted");
static_assert(sizeof(RRoomObjectiveInterface_IsObjectCompleted) == 0x000001, "Wrong size on RRoomObjectiveInterface_IsObjectCompleted");
static_assert(offsetof(RRoomObjectiveInterface_IsObjectCompleted, ReturnValue) == 0x000000, "Member 'RRoomObjectiveInterface_IsObjectCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.SetCurrentCompletionAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_SetCurrentCompletionAmount final
{
public:
	float                                         newAmount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_SetCurrentCompletionAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_SetCurrentCompletionAmount");
static_assert(sizeof(RRoomObjectiveInterface_SetCurrentCompletionAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_SetCurrentCompletionAmount");
static_assert(offsetof(RRoomObjectiveInterface_SetCurrentCompletionAmount, newAmount) == 0x000000, "Member 'RRoomObjectiveInterface_SetCurrentCompletionAmount::newAmount' has a wrong offset!");

// Function RGame.RRoomObjectiveInterface.SetSharedCompletionAmount
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectiveInterface_SetSharedCompletionAmount final
{
public:
	float                                         newAmount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveInterface_SetSharedCompletionAmount) == 0x000004, "Wrong alignment on RRoomObjectiveInterface_SetSharedCompletionAmount");
static_assert(sizeof(RRoomObjectiveInterface_SetSharedCompletionAmount) == 0x000004, "Wrong size on RRoomObjectiveInterface_SetSharedCompletionAmount");
static_assert(offsetof(RRoomObjectiveInterface_SetSharedCompletionAmount, newAmount) == 0x000000, "Member 'RRoomObjectiveInterface_SetSharedCompletionAmount::newAmount' has a wrong offset!");

// Function RGame.RRoomObjectiveObject.GetChargeValueFromPlayers
// 0x0018 (0x0018 - 0x0000)
struct RRoomObjectiveObject_GetChargeValueFromPlayers final
{
public:
	TArray<class AActor*>                         PlayerActors;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RRoomObjectiveObject_GetChargeValueFromPlayers) == 0x000008, "Wrong alignment on RRoomObjectiveObject_GetChargeValueFromPlayers");
static_assert(sizeof(RRoomObjectiveObject_GetChargeValueFromPlayers) == 0x000018, "Wrong size on RRoomObjectiveObject_GetChargeValueFromPlayers");
static_assert(offsetof(RRoomObjectiveObject_GetChargeValueFromPlayers, PlayerActors) == 0x000000, "Member 'RRoomObjectiveObject_GetChargeValueFromPlayers::PlayerActors' has a wrong offset!");
static_assert(offsetof(RRoomObjectiveObject_GetChargeValueFromPlayers, ReturnValue) == 0x000010, "Member 'RRoomObjectiveObject_GetChargeValueFromPlayers::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveObject.BroadcastOnRoomObjectiveObjectUpdated
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated final
{
public:
	float                                         AmountProgressed;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmountRequired;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated) == 0x000004, "Wrong alignment on RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated");
static_assert(sizeof(RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated) == 0x000008, "Wrong size on RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated");
static_assert(offsetof(RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated, AmountProgressed) == 0x000000, "Member 'RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated::AmountProgressed' has a wrong offset!");
static_assert(offsetof(RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated, AmountRequired) == 0x000004, "Member 'RRoomObjectiveObject_BroadcastOnRoomObjectiveObjectUpdated::AmountRequired' has a wrong offset!");

// Function RGame.RRoomObjectiveObject.IsCurrentSegment
// 0x0010 (0x0010 - 0x0000)
struct RRoomObjectiveObject_IsCurrentSegment final
{
public:
	class AREnemySpawnAreaSegment*                REnemySpawnAreaSegment;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RRoomObjectiveObject_IsCurrentSegment) == 0x000008, "Wrong alignment on RRoomObjectiveObject_IsCurrentSegment");
static_assert(sizeof(RRoomObjectiveObject_IsCurrentSegment) == 0x000010, "Wrong size on RRoomObjectiveObject_IsCurrentSegment");
static_assert(offsetof(RRoomObjectiveObject_IsCurrentSegment, REnemySpawnAreaSegment) == 0x000000, "Member 'RRoomObjectiveObject_IsCurrentSegment::REnemySpawnAreaSegment' has a wrong offset!");
static_assert(offsetof(RRoomObjectiveObject_IsCurrentSegment, ReturnValue) == 0x000008, "Member 'RRoomObjectiveObject_IsCurrentSegment::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectiveObject.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct RRoomObjectiveObject_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectiveObject_ShouldShowOnRadar) == 0x000001, "Wrong alignment on RRoomObjectiveObject_ShouldShowOnRadar");
static_assert(sizeof(RRoomObjectiveObject_ShouldShowOnRadar) == 0x000001, "Wrong size on RRoomObjectiveObject_ShouldShowOnRadar");
static_assert(offsetof(RRoomObjectiveObject_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'RRoomObjectiveObject_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.GetNumCompletedObjectiveObjects
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectivePawn_GetNumCompletedObjectiveObjects final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_GetNumCompletedObjectiveObjects) == 0x000004, "Wrong alignment on RRoomObjectivePawn_GetNumCompletedObjectiveObjects");
static_assert(sizeof(RRoomObjectivePawn_GetNumCompletedObjectiveObjects) == 0x000004, "Wrong size on RRoomObjectivePawn_GetNumCompletedObjectiveObjects");
static_assert(offsetof(RRoomObjectivePawn_GetNumCompletedObjectiveObjects, ReturnValue) == 0x000000, "Member 'RRoomObjectivePawn_GetNumCompletedObjectiveObjects::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.GetNumRemainingObjectiveObjects
// 0x0004 (0x0004 - 0x0000)
struct RRoomObjectivePawn_GetNumRemainingObjectiveObjects final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_GetNumRemainingObjectiveObjects) == 0x000004, "Wrong alignment on RRoomObjectivePawn_GetNumRemainingObjectiveObjects");
static_assert(sizeof(RRoomObjectivePawn_GetNumRemainingObjectiveObjects) == 0x000004, "Wrong size on RRoomObjectivePawn_GetNumRemainingObjectiveObjects");
static_assert(offsetof(RRoomObjectivePawn_GetNumRemainingObjectiveObjects, ReturnValue) == 0x000000, "Member 'RRoomObjectivePawn_GetNumRemainingObjectiveObjects::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.OnHealthDepleted
// 0x00C8 (0x00C8 - 0x0000)
struct RRoomObjectivePawn_OnHealthDepleted final
{
public:
	class URHealthComponent*                      RHealthComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0008(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_OnHealthDepleted) == 0x000008, "Wrong alignment on RRoomObjectivePawn_OnHealthDepleted");
static_assert(sizeof(RRoomObjectivePawn_OnHealthDepleted) == 0x0000C8, "Wrong size on RRoomObjectivePawn_OnHealthDepleted");
static_assert(offsetof(RRoomObjectivePawn_OnHealthDepleted, RHealthComponent) == 0x000000, "Member 'RRoomObjectivePawn_OnHealthDepleted::RHealthComponent' has a wrong offset!");
static_assert(offsetof(RRoomObjectivePawn_OnHealthDepleted, DamageCombatEvent) == 0x000008, "Member 'RRoomObjectivePawn_OnHealthDepleted::DamageCombatEvent' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.OnObjectiveStarted
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectivePawn_OnObjectiveStarted final
{
public:
	class URGObjectiveScript*                     ObjectiveScript;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_OnObjectiveStarted) == 0x000008, "Wrong alignment on RRoomObjectivePawn_OnObjectiveStarted");
static_assert(sizeof(RRoomObjectivePawn_OnObjectiveStarted) == 0x000008, "Wrong size on RRoomObjectivePawn_OnObjectiveStarted");
static_assert(offsetof(RRoomObjectivePawn_OnObjectiveStarted, ObjectiveScript) == 0x000000, "Member 'RRoomObjectivePawn_OnObjectiveStarted::ObjectiveScript' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.OnSegmentCompleted
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectivePawn_OnSegmentCompleted final
{
public:
	class AREnemySpawnAreaSegment*                SegmentCompleted;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_OnSegmentCompleted) == 0x000008, "Wrong alignment on RRoomObjectivePawn_OnSegmentCompleted");
static_assert(sizeof(RRoomObjectivePawn_OnSegmentCompleted) == 0x000008, "Wrong size on RRoomObjectivePawn_OnSegmentCompleted");
static_assert(offsetof(RRoomObjectivePawn_OnSegmentCompleted, SegmentCompleted) == 0x000000, "Member 'RRoomObjectivePawn_OnSegmentCompleted::SegmentCompleted' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.OnSegmentStarted
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectivePawn_OnSegmentStarted final
{
public:
	class AREnemySpawnAreaSegment*                SegmentStarted;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_OnSegmentStarted) == 0x000008, "Wrong alignment on RRoomObjectivePawn_OnSegmentStarted");
static_assert(sizeof(RRoomObjectivePawn_OnSegmentStarted) == 0x000008, "Wrong size on RRoomObjectivePawn_OnSegmentStarted");
static_assert(offsetof(RRoomObjectivePawn_OnSegmentStarted, SegmentStarted) == 0x000000, "Member 'RRoomObjectivePawn_OnSegmentStarted::SegmentStarted' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.OnSpawnedRoomObjectiveObject
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectivePawn_OnSpawnedRoomObjectiveObject final
{
public:
	class AREnemySpawnAreaSegment*                SpawningSegment;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_OnSpawnedRoomObjectiveObject) == 0x000008, "Wrong alignment on RRoomObjectivePawn_OnSpawnedRoomObjectiveObject");
static_assert(sizeof(RRoomObjectivePawn_OnSpawnedRoomObjectiveObject) == 0x000008, "Wrong size on RRoomObjectivePawn_OnSpawnedRoomObjectiveObject");
static_assert(offsetof(RRoomObjectivePawn_OnSpawnedRoomObjectiveObject, SpawningSegment) == 0x000000, "Member 'RRoomObjectivePawn_OnSpawnedRoomObjectiveObject::SpawningSegment' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.UpdateHealthVisuals
// 0x0008 (0x0008 - 0x0000)
struct RRoomObjectivePawn_UpdateHealthVisuals final
{
public:
	float                                         Health;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HueShift;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_UpdateHealthVisuals) == 0x000004, "Wrong alignment on RRoomObjectivePawn_UpdateHealthVisuals");
static_assert(sizeof(RRoomObjectivePawn_UpdateHealthVisuals) == 0x000008, "Wrong size on RRoomObjectivePawn_UpdateHealthVisuals");
static_assert(offsetof(RRoomObjectivePawn_UpdateHealthVisuals, Health) == 0x000000, "Member 'RRoomObjectivePawn_UpdateHealthVisuals::Health' has a wrong offset!");
static_assert(offsetof(RRoomObjectivePawn_UpdateHealthVisuals, HueShift) == 0x000004, "Member 'RRoomObjectivePawn_UpdateHealthVisuals::HueShift' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.IsCurrentSegment
// 0x0010 (0x0010 - 0x0000)
struct RRoomObjectivePawn_IsCurrentSegment final
{
public:
	class AREnemySpawnAreaSegment*                REnemySpawnAreaSegment;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RRoomObjectivePawn_IsCurrentSegment) == 0x000008, "Wrong alignment on RRoomObjectivePawn_IsCurrentSegment");
static_assert(sizeof(RRoomObjectivePawn_IsCurrentSegment) == 0x000010, "Wrong size on RRoomObjectivePawn_IsCurrentSegment");
static_assert(offsetof(RRoomObjectivePawn_IsCurrentSegment, REnemySpawnAreaSegment) == 0x000000, "Member 'RRoomObjectivePawn_IsCurrentSegment::REnemySpawnAreaSegment' has a wrong offset!");
static_assert(offsetof(RRoomObjectivePawn_IsCurrentSegment, ReturnValue) == 0x000008, "Member 'RRoomObjectivePawn_IsCurrentSegment::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.IsObjectCompleted
// 0x0001 (0x0001 - 0x0000)
struct RRoomObjectivePawn_IsObjectCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_IsObjectCompleted) == 0x000001, "Wrong alignment on RRoomObjectivePawn_IsObjectCompleted");
static_assert(sizeof(RRoomObjectivePawn_IsObjectCompleted) == 0x000001, "Wrong size on RRoomObjectivePawn_IsObjectCompleted");
static_assert(offsetof(RRoomObjectivePawn_IsObjectCompleted, ReturnValue) == 0x000000, "Member 'RRoomObjectivePawn_IsObjectCompleted::ReturnValue' has a wrong offset!");

// Function RGame.RRoomObjectivePawn.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct RRoomObjectivePawn_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoomObjectivePawn_ShouldShowOnRadar) == 0x000001, "Wrong alignment on RRoomObjectivePawn_ShouldShowOnRadar");
static_assert(sizeof(RRoomObjectivePawn_ShouldShowOnRadar) == 0x000001, "Wrong size on RRoomObjectivePawn_ShouldShowOnRadar");
static_assert(offsetof(RRoomObjectivePawn_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'RRoomObjectivePawn_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

// Function RGame.RRoutedObjectInterface.RunRoutedObjectBehaviourByName
// 0x0008 (0x0008 - 0x0000)
struct RRoutedObjectInterface_RunRoutedObjectBehaviourByName final
{
public:
	class FName                                   BehaviourName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoutedObjectInterface_RunRoutedObjectBehaviourByName) == 0x000004, "Wrong alignment on RRoutedObjectInterface_RunRoutedObjectBehaviourByName");
static_assert(sizeof(RRoutedObjectInterface_RunRoutedObjectBehaviourByName) == 0x000008, "Wrong size on RRoutedObjectInterface_RunRoutedObjectBehaviourByName");
static_assert(offsetof(RRoutedObjectInterface_RunRoutedObjectBehaviourByName, BehaviourName) == 0x000000, "Member 'RRoutedObjectInterface_RunRoutedObjectBehaviourByName::BehaviourName' has a wrong offset!");

// Function RGame.RRoutedObjectInterface.RunRoutedObjectBehaviourWithData
// 0x0008 (0x0008 - 0x0000)
struct RRoutedObjectInterface_RunRoutedObjectBehaviourWithData final
{
public:
	struct FRoutedObjectData                      RoutedData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRoutedObjectInterface_RunRoutedObjectBehaviourWithData) == 0x000008, "Wrong alignment on RRoutedObjectInterface_RunRoutedObjectBehaviourWithData");
static_assert(sizeof(RRoutedObjectInterface_RunRoutedObjectBehaviourWithData) == 0x000008, "Wrong size on RRoutedObjectInterface_RunRoutedObjectBehaviourWithData");
static_assert(offsetof(RRoutedObjectInterface_RunRoutedObjectBehaviourWithData, RoutedData) == 0x000000, "Member 'RRoutedObjectInterface_RunRoutedObjectBehaviourWithData::RoutedData' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetAreaPreloadTables
// 0x0018 (0x0018 - 0x0000)
struct RRuntimeSettings_GetAreaPreloadTables final
{
public:
	class FName                                   AreaName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UDataTable*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetAreaPreloadTables) == 0x000008, "Wrong alignment on RRuntimeSettings_GetAreaPreloadTables");
static_assert(sizeof(RRuntimeSettings_GetAreaPreloadTables) == 0x000018, "Wrong size on RRuntimeSettings_GetAreaPreloadTables");
static_assert(offsetof(RRuntimeSettings_GetAreaPreloadTables, AreaName) == 0x000000, "Member 'RRuntimeSettings_GetAreaPreloadTables::AreaName' has a wrong offset!");
static_assert(offsetof(RRuntimeSettings_GetAreaPreloadTables, ReturnValue) == 0x000008, "Member 'RRuntimeSettings_GetAreaPreloadTables::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetCharacterMutatorSetTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetCharacterMutatorSetTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetCharacterMutatorSetTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetCharacterMutatorSetTable");
static_assert(sizeof(RRuntimeSettings_GetCharacterMutatorSetTable) == 0x000008, "Wrong size on RRuntimeSettings_GetCharacterMutatorSetTable");
static_assert(offsetof(RRuntimeSettings_GetCharacterMutatorSetTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetCharacterMutatorSetTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetDefaultAreaData
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetDefaultAreaData final
{
public:
	class UDataAsset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetDefaultAreaData) == 0x000008, "Wrong alignment on RRuntimeSettings_GetDefaultAreaData");
static_assert(sizeof(RRuntimeSettings_GetDefaultAreaData) == 0x000008, "Wrong size on RRuntimeSettings_GetDefaultAreaData");
static_assert(offsetof(RRuntimeSettings_GetDefaultAreaData, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetDefaultAreaData::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetDefaultMultiplayerSettings
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetDefaultMultiplayerSettings final
{
public:
	class UDataAsset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetDefaultMultiplayerSettings) == 0x000008, "Wrong alignment on RRuntimeSettings_GetDefaultMultiplayerSettings");
static_assert(sizeof(RRuntimeSettings_GetDefaultMultiplayerSettings) == 0x000008, "Wrong size on RRuntimeSettings_GetDefaultMultiplayerSettings");
static_assert(offsetof(RRuntimeSettings_GetDefaultMultiplayerSettings, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetDefaultMultiplayerSettings::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetEnemyGroupTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetEnemyGroupTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetEnemyGroupTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetEnemyGroupTable");
static_assert(sizeof(RRuntimeSettings_GetEnemyGroupTable) == 0x000008, "Wrong size on RRuntimeSettings_GetEnemyGroupTable");
static_assert(offsetof(RRuntimeSettings_GetEnemyGroupTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetEnemyGroupTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetEnemyMutatorTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetEnemyMutatorTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetEnemyMutatorTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetEnemyMutatorTable");
static_assert(sizeof(RRuntimeSettings_GetEnemyMutatorTable) == 0x000008, "Wrong size on RRuntimeSettings_GetEnemyMutatorTable");
static_assert(offsetof(RRuntimeSettings_GetEnemyMutatorTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetEnemyMutatorTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetEnemyResourceTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetEnemyResourceTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetEnemyResourceTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetEnemyResourceTable");
static_assert(sizeof(RRuntimeSettings_GetEnemyResourceTable) == 0x000008, "Wrong size on RRuntimeSettings_GetEnemyResourceTable");
static_assert(offsetof(RRuntimeSettings_GetEnemyResourceTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetEnemyResourceTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetEnemySpawnSound
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetEnemySpawnSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetEnemySpawnSound) == 0x000008, "Wrong alignment on RRuntimeSettings_GetEnemySpawnSound");
static_assert(sizeof(RRuntimeSettings_GetEnemySpawnSound) == 0x000008, "Wrong size on RRuntimeSettings_GetEnemySpawnSound");
static_assert(offsetof(RRuntimeSettings_GetEnemySpawnSound, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetEnemySpawnSound::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetEnemySpawnTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetEnemySpawnTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetEnemySpawnTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetEnemySpawnTable");
static_assert(sizeof(RRuntimeSettings_GetEnemySpawnTable) == 0x000008, "Wrong size on RRuntimeSettings_GetEnemySpawnTable");
static_assert(offsetof(RRuntimeSettings_GetEnemySpawnTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetEnemySpawnTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetFloatingTextSettings
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetFloatingTextSettings final
{
public:
	class URFloatingTextSettings*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetFloatingTextSettings) == 0x000008, "Wrong alignment on RRuntimeSettings_GetFloatingTextSettings");
static_assert(sizeof(RRuntimeSettings_GetFloatingTextSettings) == 0x000008, "Wrong size on RRuntimeSettings_GetFloatingTextSettings");
static_assert(offsetof(RRuntimeSettings_GetFloatingTextSettings, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetFloatingTextSettings::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetGlobalPreloadTables
// 0x0010 (0x0010 - 0x0000)
struct RRuntimeSettings_GetGlobalPreloadTables final
{
public:
	TArray<class UDataTable*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetGlobalPreloadTables) == 0x000008, "Wrong alignment on RRuntimeSettings_GetGlobalPreloadTables");
static_assert(sizeof(RRuntimeSettings_GetGlobalPreloadTables) == 0x000010, "Wrong size on RRuntimeSettings_GetGlobalPreloadTables");
static_assert(offsetof(RRuntimeSettings_GetGlobalPreloadTables, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetGlobalPreloadTables::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetGoldCoinActorClass
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetGoldCoinActorClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetGoldCoinActorClass) == 0x000008, "Wrong alignment on RRuntimeSettings_GetGoldCoinActorClass");
static_assert(sizeof(RRuntimeSettings_GetGoldCoinActorClass) == 0x000008, "Wrong size on RRuntimeSettings_GetGoldCoinActorClass");
static_assert(offsetof(RRuntimeSettings_GetGoldCoinActorClass, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetGoldCoinActorClass::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetHitEffectSurfaceTypeData
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetHitEffectSurfaceTypeData final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetHitEffectSurfaceTypeData) == 0x000008, "Wrong alignment on RRuntimeSettings_GetHitEffectSurfaceTypeData");
static_assert(sizeof(RRuntimeSettings_GetHitEffectSurfaceTypeData) == 0x000008, "Wrong size on RRuntimeSettings_GetHitEffectSurfaceTypeData");
static_assert(offsetof(RRuntimeSettings_GetHitEffectSurfaceTypeData, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetHitEffectSurfaceTypeData::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetHitSoundSurfaceTypeData
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetHitSoundSurfaceTypeData final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetHitSoundSurfaceTypeData) == 0x000008, "Wrong alignment on RRuntimeSettings_GetHitSoundSurfaceTypeData");
static_assert(sizeof(RRuntimeSettings_GetHitSoundSurfaceTypeData) == 0x000008, "Wrong size on RRuntimeSettings_GetHitSoundSurfaceTypeData");
static_assert(offsetof(RRuntimeSettings_GetHitSoundSurfaceTypeData, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetHitSoundSurfaceTypeData::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetIsDemoBuild
// 0x0001 (0x0001 - 0x0000)
struct RRuntimeSettings_GetIsDemoBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetIsDemoBuild) == 0x000001, "Wrong alignment on RRuntimeSettings_GetIsDemoBuild");
static_assert(sizeof(RRuntimeSettings_GetIsDemoBuild) == 0x000001, "Wrong size on RRuntimeSettings_GetIsDemoBuild");
static_assert(offsetof(RRuntimeSettings_GetIsDemoBuild, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetIsDemoBuild::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetIsPrereleaseBuild
// 0x0001 (0x0001 - 0x0000)
struct RRuntimeSettings_GetIsPrereleaseBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetIsPrereleaseBuild) == 0x000001, "Wrong alignment on RRuntimeSettings_GetIsPrereleaseBuild");
static_assert(sizeof(RRuntimeSettings_GetIsPrereleaseBuild) == 0x000001, "Wrong size on RRuntimeSettings_GetIsPrereleaseBuild");
static_assert(offsetof(RRuntimeSettings_GetIsPrereleaseBuild, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetIsPrereleaseBuild::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetIsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct RRuntimeSettings_GetIsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetIsShippingBuild) == 0x000001, "Wrong alignment on RRuntimeSettings_GetIsShippingBuild");
static_assert(sizeof(RRuntimeSettings_GetIsShippingBuild) == 0x000001, "Wrong size on RRuntimeSettings_GetIsShippingBuild");
static_assert(offsetof(RRuntimeSettings_GetIsShippingBuild, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetIsShippingBuild::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetKeyboardLayoutDataTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetKeyboardLayoutDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetKeyboardLayoutDataTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetKeyboardLayoutDataTable");
static_assert(sizeof(RRuntimeSettings_GetKeyboardLayoutDataTable) == 0x000008, "Wrong size on RRuntimeSettings_GetKeyboardLayoutDataTable");
static_assert(offsetof(RRuntimeSettings_GetKeyboardLayoutDataTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetKeyboardLayoutDataTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetKeywordsDataTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetKeywordsDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetKeywordsDataTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetKeywordsDataTable");
static_assert(sizeof(RRuntimeSettings_GetKeywordsDataTable) == 0x000008, "Wrong size on RRuntimeSettings_GetKeywordsDataTable");
static_assert(offsetof(RRuntimeSettings_GetKeywordsDataTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetKeywordsDataTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetMutatorPreloadTables
// 0x0010 (0x0010 - 0x0000)
struct RRuntimeSettings_GetMutatorPreloadTables final
{
public:
	TArray<class UDataTable*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetMutatorPreloadTables) == 0x000008, "Wrong alignment on RRuntimeSettings_GetMutatorPreloadTables");
static_assert(sizeof(RRuntimeSettings_GetMutatorPreloadTables) == 0x000010, "Wrong size on RRuntimeSettings_GetMutatorPreloadTables");
static_assert(offsetof(RRuntimeSettings_GetMutatorPreloadTables, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetMutatorPreloadTables::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetMutatorScalingTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetMutatorScalingTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetMutatorScalingTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetMutatorScalingTable");
static_assert(sizeof(RRuntimeSettings_GetMutatorScalingTable) == 0x000008, "Wrong size on RRuntimeSettings_GetMutatorScalingTable");
static_assert(offsetof(RRuntimeSettings_GetMutatorScalingTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetMutatorScalingTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetPawnDamageTakenEffectDataTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetPawnDamageTakenEffectDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetPawnDamageTakenEffectDataTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetPawnDamageTakenEffectDataTable");
static_assert(sizeof(RRuntimeSettings_GetPawnDamageTakenEffectDataTable) == 0x000008, "Wrong size on RRuntimeSettings_GetPawnDamageTakenEffectDataTable");
static_assert(offsetof(RRuntimeSettings_GetPawnDamageTakenEffectDataTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetPawnDamageTakenEffectDataTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetProjectileImpactEffectTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetProjectileImpactEffectTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetProjectileImpactEffectTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetProjectileImpactEffectTable");
static_assert(sizeof(RRuntimeSettings_GetProjectileImpactEffectTable) == 0x000008, "Wrong size on RRuntimeSettings_GetProjectileImpactEffectTable");
static_assert(offsetof(RRuntimeSettings_GetProjectileImpactEffectTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetProjectileImpactEffectTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetWeaponDataTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetWeaponDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetWeaponDataTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetWeaponDataTable");
static_assert(sizeof(RRuntimeSettings_GetWeaponDataTable) == 0x000008, "Wrong size on RRuntimeSettings_GetWeaponDataTable");
static_assert(offsetof(RRuntimeSettings_GetWeaponDataTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetWeaponDataTable::ReturnValue' has a wrong offset!");

// Function RGame.RRuntimeSettings.GetWeaponDropTable
// 0x0008 (0x0008 - 0x0000)
struct RRuntimeSettings_GetWeaponDropTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RRuntimeSettings_GetWeaponDropTable) == 0x000008, "Wrong alignment on RRuntimeSettings_GetWeaponDropTable");
static_assert(sizeof(RRuntimeSettings_GetWeaponDropTable) == 0x000008, "Wrong size on RRuntimeSettings_GetWeaponDropTable");
static_assert(offsetof(RRuntimeSettings_GetWeaponDropTable, ReturnValue) == 0x000000, "Member 'RRuntimeSettings_GetWeaponDropTable::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.AddCompletedArea
// 0x0010 (0x0010 - 0x0000)
struct RSaveGame_AddCompletedArea final
{
public:
	class FString                                 AreaName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_AddCompletedArea) == 0x000008, "Wrong alignment on RSaveGame_AddCompletedArea");
static_assert(sizeof(RSaveGame_AddCompletedArea) == 0x000010, "Wrong size on RSaveGame_AddCompletedArea");
static_assert(offsetof(RSaveGame_AddCompletedArea, AreaName) == 0x000000, "Member 'RSaveGame_AddCompletedArea::AreaName' has a wrong offset!");

// Function RGame.RSaveGame.AddDifficultyPoints
// 0x0004 (0x0004 - 0x0000)
struct RSaveGame_AddDifficultyPoints final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_AddDifficultyPoints) == 0x000004, "Wrong alignment on RSaveGame_AddDifficultyPoints");
static_assert(sizeof(RSaveGame_AddDifficultyPoints) == 0x000004, "Wrong size on RSaveGame_AddDifficultyPoints");
static_assert(offsetof(RSaveGame_AddDifficultyPoints, Amount) == 0x000000, "Member 'RSaveGame_AddDifficultyPoints::Amount' has a wrong offset!");

// Function RGame.RSaveGame.DecrementSoulFragments
// 0x0004 (0x0004 - 0x0000)
struct RSaveGame_DecrementSoulFragments final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_DecrementSoulFragments) == 0x000004, "Wrong alignment on RSaveGame_DecrementSoulFragments");
static_assert(sizeof(RSaveGame_DecrementSoulFragments) == 0x000004, "Wrong size on RSaveGame_DecrementSoulFragments");
static_assert(offsetof(RSaveGame_DecrementSoulFragments, Amount) == 0x000000, "Member 'RSaveGame_DecrementSoulFragments::Amount' has a wrong offset!");

// Function RGame.RSaveGame.GetEquippedLoadout
// 0x0048 (0x0048 - 0x0000)
struct RSaveGame_GetEquippedLoadout final
{
public:
	struct FRLoadout                              Loadout;                                           // 0x0000(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetEquippedLoadout) == 0x000008, "Wrong alignment on RSaveGame_GetEquippedLoadout");
static_assert(sizeof(RSaveGame_GetEquippedLoadout) == 0x000048, "Wrong size on RSaveGame_GetEquippedLoadout");
static_assert(offsetof(RSaveGame_GetEquippedLoadout, Loadout) == 0x000000, "Member 'RSaveGame_GetEquippedLoadout::Loadout' has a wrong offset!");
static_assert(offsetof(RSaveGame_GetEquippedLoadout, WorldContextObject) == 0x000040, "Member 'RSaveGame_GetEquippedLoadout::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGame.GetLoadout
// 0x0050 (0x0050 - 0x0000)
struct RSaveGame_GetLoadout final
{
public:
	class URWeaponPrimaryAsset*                   Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRLoadout                              Loadout;                                           // 0x0008(0x0040)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetLoadout) == 0x000008, "Wrong alignment on RSaveGame_GetLoadout");
static_assert(sizeof(RSaveGame_GetLoadout) == 0x000050, "Wrong size on RSaveGame_GetLoadout");
static_assert(offsetof(RSaveGame_GetLoadout, Weapon) == 0x000000, "Member 'RSaveGame_GetLoadout::Weapon' has a wrong offset!");
static_assert(offsetof(RSaveGame_GetLoadout, Loadout) == 0x000008, "Member 'RSaveGame_GetLoadout::Loadout' has a wrong offset!");
static_assert(offsetof(RSaveGame_GetLoadout, WorldContextObject) == 0x000048, "Member 'RSaveGame_GetLoadout::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGame.IncrementSoulFragments
// 0x0004 (0x0004 - 0x0000)
struct RSaveGame_IncrementSoulFragments final
{
public:
	int32                                         Delta;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_IncrementSoulFragments) == 0x000004, "Wrong alignment on RSaveGame_IncrementSoulFragments");
static_assert(sizeof(RSaveGame_IncrementSoulFragments) == 0x000004, "Wrong size on RSaveGame_IncrementSoulFragments");
static_assert(offsetof(RSaveGame_IncrementSoulFragments, Delta) == 0x000000, "Member 'RSaveGame_IncrementSoulFragments::Delta' has a wrong offset!");

// Function RGame.RSaveGame.IsLoadoutOptionUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RSaveGame_IsLoadoutOptionUnlocked final
{
public:
	class URPrimaryDataAsset*                     PrimaryAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGame_IsLoadoutOptionUnlocked) == 0x000008, "Wrong alignment on RSaveGame_IsLoadoutOptionUnlocked");
static_assert(sizeof(RSaveGame_IsLoadoutOptionUnlocked) == 0x000010, "Wrong size on RSaveGame_IsLoadoutOptionUnlocked");
static_assert(offsetof(RSaveGame_IsLoadoutOptionUnlocked, PrimaryAsset) == 0x000000, "Member 'RSaveGame_IsLoadoutOptionUnlocked::PrimaryAsset' has a wrong offset!");
static_assert(offsetof(RSaveGame_IsLoadoutOptionUnlocked, ReturnValue) == 0x000008, "Member 'RSaveGame_IsLoadoutOptionUnlocked::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.SetCosmeticLoadoutOption
// 0x00D0 (0x00D0 - 0x0000)
struct RSaveGame_SetCosmeticLoadoutOption final
{
public:
	struct FPlayerCosmeticOption                  CosmeticOption;                                    // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetCosmeticLoadoutOption) == 0x000008, "Wrong alignment on RSaveGame_SetCosmeticLoadoutOption");
static_assert(sizeof(RSaveGame_SetCosmeticLoadoutOption) == 0x0000D0, "Wrong size on RSaveGame_SetCosmeticLoadoutOption");
static_assert(offsetof(RSaveGame_SetCosmeticLoadoutOption, CosmeticOption) == 0x000000, "Member 'RSaveGame_SetCosmeticLoadoutOption::CosmeticOption' has a wrong offset!");

// Function RGame.RSaveGame.SetDemoDifficultyPointsCapped
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetDemoDifficultyPointsCapped final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetDemoDifficultyPointsCapped) == 0x000001, "Wrong alignment on RSaveGame_SetDemoDifficultyPointsCapped");
static_assert(sizeof(RSaveGame_SetDemoDifficultyPointsCapped) == 0x000001, "Wrong size on RSaveGame_SetDemoDifficultyPointsCapped");
static_assert(offsetof(RSaveGame_SetDemoDifficultyPointsCapped, bNewValue) == 0x000000, "Member 'RSaveGame_SetDemoDifficultyPointsCapped::bNewValue' has a wrong offset!");

// Function RGame.RSaveGame.SetEquippedLoadout
// 0x0040 (0x0040 - 0x0000)
struct RSaveGame_SetEquippedLoadout final
{
public:
	struct FRLoadout                              Loadout;                                           // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetEquippedLoadout) == 0x000008, "Wrong alignment on RSaveGame_SetEquippedLoadout");
static_assert(sizeof(RSaveGame_SetEquippedLoadout) == 0x000040, "Wrong size on RSaveGame_SetEquippedLoadout");
static_assert(offsetof(RSaveGame_SetEquippedLoadout, Loadout) == 0x000000, "Member 'RSaveGame_SetEquippedLoadout::Loadout' has a wrong offset!");

// Function RGame.RSaveGame.SetHasEverSpentDifficultyPoints
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetHasEverSpentDifficultyPoints final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetHasEverSpentDifficultyPoints) == 0x000001, "Wrong alignment on RSaveGame_SetHasEverSpentDifficultyPoints");
static_assert(sizeof(RSaveGame_SetHasEverSpentDifficultyPoints) == 0x000001, "Wrong size on RSaveGame_SetHasEverSpentDifficultyPoints");
static_assert(offsetof(RSaveGame_SetHasEverSpentDifficultyPoints, bNewValue) == 0x000000, "Member 'RSaveGame_SetHasEverSpentDifficultyPoints::bNewValue' has a wrong offset!");

// Function RGame.RSaveGame.SetHasSeenFirstDeathTutorial
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetHasSeenFirstDeathTutorial final
{
public:
	bool                                          bHasSeen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetHasSeenFirstDeathTutorial) == 0x000001, "Wrong alignment on RSaveGame_SetHasSeenFirstDeathTutorial");
static_assert(sizeof(RSaveGame_SetHasSeenFirstDeathTutorial) == 0x000001, "Wrong size on RSaveGame_SetHasSeenFirstDeathTutorial");
static_assert(offsetof(RSaveGame_SetHasSeenFirstDeathTutorial, bHasSeen) == 0x000000, "Member 'RSaveGame_SetHasSeenFirstDeathTutorial::bHasSeen' has a wrong offset!");

// Function RGame.RSaveGame.SetHasSeenInitialTutorial
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetHasSeenInitialTutorial final
{
public:
	bool                                          bHasSeen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetHasSeenInitialTutorial) == 0x000001, "Wrong alignment on RSaveGame_SetHasSeenInitialTutorial");
static_assert(sizeof(RSaveGame_SetHasSeenInitialTutorial) == 0x000001, "Wrong size on RSaveGame_SetHasSeenInitialTutorial");
static_assert(offsetof(RSaveGame_SetHasSeenInitialTutorial, bHasSeen) == 0x000000, "Member 'RSaveGame_SetHasSeenInitialTutorial::bHasSeen' has a wrong offset!");

// Function RGame.RSaveGame.SetHasSeenWorkbenchFirstTime
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetHasSeenWorkbenchFirstTime final
{
public:
	bool                                          bHasSeen;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetHasSeenWorkbenchFirstTime) == 0x000001, "Wrong alignment on RSaveGame_SetHasSeenWorkbenchFirstTime");
static_assert(sizeof(RSaveGame_SetHasSeenWorkbenchFirstTime) == 0x000001, "Wrong size on RSaveGame_SetHasSeenWorkbenchFirstTime");
static_assert(offsetof(RSaveGame_SetHasSeenWorkbenchFirstTime, bHasSeen) == 0x000000, "Member 'RSaveGame_SetHasSeenWorkbenchFirstTime::bHasSeen' has a wrong offset!");

// Function RGame.RSaveGame.SetHiddenCoinsFound
// 0x0018 (0x0018 - 0x0000)
struct RSaveGame_SetHiddenCoinsFound final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGame_SetHiddenCoinsFound) == 0x000008, "Wrong alignment on RSaveGame_SetHiddenCoinsFound");
static_assert(sizeof(RSaveGame_SetHiddenCoinsFound) == 0x000018, "Wrong size on RSaveGame_SetHiddenCoinsFound");
static_assert(offsetof(RSaveGame_SetHiddenCoinsFound, Key) == 0x000000, "Member 'RSaveGame_SetHiddenCoinsFound::Key' has a wrong offset!");
static_assert(offsetof(RSaveGame_SetHiddenCoinsFound, bFound) == 0x000010, "Member 'RSaveGame_SetHiddenCoinsFound::bFound' has a wrong offset!");

// Function RGame.RSaveGame.SetIsTutorialDone
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_SetIsTutorialDone final
{
public:
	bool                                          bNewDone;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetIsTutorialDone) == 0x000001, "Wrong alignment on RSaveGame_SetIsTutorialDone");
static_assert(sizeof(RSaveGame_SetIsTutorialDone) == 0x000001, "Wrong size on RSaveGame_SetIsTutorialDone");
static_assert(offsetof(RSaveGame_SetIsTutorialDone, bNewDone) == 0x000000, "Member 'RSaveGame_SetIsTutorialDone::bNewDone' has a wrong offset!");

// Function RGame.RSaveGame.SetLatestSessionId
// 0x0010 (0x0010 - 0x0000)
struct RSaveGame_SetLatestSessionId final
{
public:
	class FString                                 LatestSessionId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetLatestSessionId) == 0x000008, "Wrong alignment on RSaveGame_SetLatestSessionId");
static_assert(sizeof(RSaveGame_SetLatestSessionId) == 0x000010, "Wrong size on RSaveGame_SetLatestSessionId");
static_assert(offsetof(RSaveGame_SetLatestSessionId, LatestSessionId) == 0x000000, "Member 'RSaveGame_SetLatestSessionId::LatestSessionId' has a wrong offset!");

// Function RGame.RSaveGame.SetLoadout
// 0x0040 (0x0040 - 0x0000)
struct RSaveGame_SetLoadout final
{
public:
	struct FRLoadout                              Loadout;                                           // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetLoadout) == 0x000008, "Wrong alignment on RSaveGame_SetLoadout");
static_assert(sizeof(RSaveGame_SetLoadout) == 0x000040, "Wrong size on RSaveGame_SetLoadout");
static_assert(offsetof(RSaveGame_SetLoadout, Loadout) == 0x000000, "Member 'RSaveGame_SetLoadout::Loadout' has a wrong offset!");

// Function RGame.RSaveGame.SetLoadoutSlot
// 0x0020 (0x0020 - 0x0000)
struct RSaveGame_SetLoadoutSlot final
{
public:
	class URWeaponPrimaryAsset*                   Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  LoadoutSlot;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URPrimaryDataAsset*                     PrimaryAsset;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetLoadoutSlot) == 0x000008, "Wrong alignment on RSaveGame_SetLoadoutSlot");
static_assert(sizeof(RSaveGame_SetLoadoutSlot) == 0x000020, "Wrong size on RSaveGame_SetLoadoutSlot");
static_assert(offsetof(RSaveGame_SetLoadoutSlot, Weapon) == 0x000000, "Member 'RSaveGame_SetLoadoutSlot::Weapon' has a wrong offset!");
static_assert(offsetof(RSaveGame_SetLoadoutSlot, LoadoutSlot) == 0x000008, "Member 'RSaveGame_SetLoadoutSlot::LoadoutSlot' has a wrong offset!");
static_assert(offsetof(RSaveGame_SetLoadoutSlot, PrimaryAsset) == 0x000010, "Member 'RSaveGame_SetLoadoutSlot::PrimaryAsset' has a wrong offset!");
static_assert(offsetof(RSaveGame_SetLoadoutSlot, WorldContextObject) == 0x000018, "Member 'RSaveGame_SetLoadoutSlot::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGame.SetSkillTreeAssignedPoints
// 0x000C (0x000C - 0x0000)
struct RSaveGame_SetSkillTreeAssignedPoints final
{
public:
	class FName                                   SkillKey;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_SetSkillTreeAssignedPoints) == 0x000004, "Wrong alignment on RSaveGame_SetSkillTreeAssignedPoints");
static_assert(sizeof(RSaveGame_SetSkillTreeAssignedPoints) == 0x00000C, "Wrong size on RSaveGame_SetSkillTreeAssignedPoints");
static_assert(offsetof(RSaveGame_SetSkillTreeAssignedPoints, SkillKey) == 0x000000, "Member 'RSaveGame_SetSkillTreeAssignedPoints::SkillKey' has a wrong offset!");
static_assert(offsetof(RSaveGame_SetSkillTreeAssignedPoints, Points) == 0x000008, "Member 'RSaveGame_SetSkillTreeAssignedPoints::Points' has a wrong offset!");

// Function RGame.RSaveGame.UnlockLoadoutOption
// 0x0008 (0x0008 - 0x0000)
struct RSaveGame_UnlockLoadoutOption final
{
public:
	class URPrimaryDataAsset*                     PrimaryAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_UnlockLoadoutOption) == 0x000008, "Wrong alignment on RSaveGame_UnlockLoadoutOption");
static_assert(sizeof(RSaveGame_UnlockLoadoutOption) == 0x000008, "Wrong size on RSaveGame_UnlockLoadoutOption");
static_assert(offsetof(RSaveGame_UnlockLoadoutOption, PrimaryAsset) == 0x000000, "Member 'RSaveGame_UnlockLoadoutOption::PrimaryAsset' has a wrong offset!");

// Function RGame.RSaveGame.UnlockWeaponModLoadoutOption
// 0x0008 (0x0008 - 0x0000)
struct RSaveGame_UnlockWeaponModLoadoutOption final
{
public:
	class URWeaponModPrimaryAsset*                WeaponModPrimaryAsset;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_UnlockWeaponModLoadoutOption) == 0x000008, "Wrong alignment on RSaveGame_UnlockWeaponModLoadoutOption");
static_assert(sizeof(RSaveGame_UnlockWeaponModLoadoutOption) == 0x000008, "Wrong size on RSaveGame_UnlockWeaponModLoadoutOption");
static_assert(offsetof(RSaveGame_UnlockWeaponModLoadoutOption, WeaponModPrimaryAsset) == 0x000000, "Member 'RSaveGame_UnlockWeaponModLoadoutOption::WeaponModPrimaryAsset' has a wrong offset!");

// Function RGame.RSaveGame.GetDemoDifficultyPointsCapped
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_GetDemoDifficultyPointsCapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetDemoDifficultyPointsCapped) == 0x000001, "Wrong alignment on RSaveGame_GetDemoDifficultyPointsCapped");
static_assert(sizeof(RSaveGame_GetDemoDifficultyPointsCapped) == 0x000001, "Wrong size on RSaveGame_GetDemoDifficultyPointsCapped");
static_assert(offsetof(RSaveGame_GetDemoDifficultyPointsCapped, ReturnValue) == 0x000000, "Member 'RSaveGame_GetDemoDifficultyPointsCapped::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetDifficultyTreeAssignedPoints
// 0x000C (0x000C - 0x0000)
struct RSaveGame_GetDifficultyTreeAssignedPoints final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetDifficultyTreeAssignedPoints) == 0x000004, "Wrong alignment on RSaveGame_GetDifficultyTreeAssignedPoints");
static_assert(sizeof(RSaveGame_GetDifficultyTreeAssignedPoints) == 0x00000C, "Wrong size on RSaveGame_GetDifficultyTreeAssignedPoints");
static_assert(offsetof(RSaveGame_GetDifficultyTreeAssignedPoints, Key) == 0x000000, "Member 'RSaveGame_GetDifficultyTreeAssignedPoints::Key' has a wrong offset!");
static_assert(offsetof(RSaveGame_GetDifficultyTreeAssignedPoints, ReturnValue) == 0x000008, "Member 'RSaveGame_GetDifficultyTreeAssignedPoints::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetDifficultyTreeTotalAssignedPoints
// 0x0004 (0x0004 - 0x0000)
struct RSaveGame_GetDifficultyTreeTotalAssignedPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetDifficultyTreeTotalAssignedPoints) == 0x000004, "Wrong alignment on RSaveGame_GetDifficultyTreeTotalAssignedPoints");
static_assert(sizeof(RSaveGame_GetDifficultyTreeTotalAssignedPoints) == 0x000004, "Wrong size on RSaveGame_GetDifficultyTreeTotalAssignedPoints");
static_assert(offsetof(RSaveGame_GetDifficultyTreeTotalAssignedPoints, ReturnValue) == 0x000000, "Member 'RSaveGame_GetDifficultyTreeTotalAssignedPoints::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetHasEverSpentDifficultyPoints
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_GetHasEverSpentDifficultyPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetHasEverSpentDifficultyPoints) == 0x000001, "Wrong alignment on RSaveGame_GetHasEverSpentDifficultyPoints");
static_assert(sizeof(RSaveGame_GetHasEverSpentDifficultyPoints) == 0x000001, "Wrong size on RSaveGame_GetHasEverSpentDifficultyPoints");
static_assert(offsetof(RSaveGame_GetHasEverSpentDifficultyPoints, ReturnValue) == 0x000000, "Member 'RSaveGame_GetHasEverSpentDifficultyPoints::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetIsTutorialDone
// 0x0001 (0x0001 - 0x0000)
struct RSaveGame_GetIsTutorialDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetIsTutorialDone) == 0x000001, "Wrong alignment on RSaveGame_GetIsTutorialDone");
static_assert(sizeof(RSaveGame_GetIsTutorialDone) == 0x000001, "Wrong size on RSaveGame_GetIsTutorialDone");
static_assert(offsetof(RSaveGame_GetIsTutorialDone, ReturnValue) == 0x000000, "Member 'RSaveGame_GetIsTutorialDone::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetLatestSessionId
// 0x0010 (0x0010 - 0x0000)
struct RSaveGame_GetLatestSessionId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetLatestSessionId) == 0x000008, "Wrong alignment on RSaveGame_GetLatestSessionId");
static_assert(sizeof(RSaveGame_GetLatestSessionId) == 0x000010, "Wrong size on RSaveGame_GetLatestSessionId");
static_assert(offsetof(RSaveGame_GetLatestSessionId, ReturnValue) == 0x000000, "Member 'RSaveGame_GetLatestSessionId::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGame.GetSkillTreeAssignedPoints
// 0x000C (0x000C - 0x0000)
struct RSaveGame_GetSkillTreeAssignedPoints final
{
public:
	class FName                                   SkillKey;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGame_GetSkillTreeAssignedPoints) == 0x000004, "Wrong alignment on RSaveGame_GetSkillTreeAssignedPoints");
static_assert(sizeof(RSaveGame_GetSkillTreeAssignedPoints) == 0x00000C, "Wrong size on RSaveGame_GetSkillTreeAssignedPoints");
static_assert(offsetof(RSaveGame_GetSkillTreeAssignedPoints, SkillKey) == 0x000000, "Member 'RSaveGame_GetSkillTreeAssignedPoints::SkillKey' has a wrong offset!");
static_assert(offsetof(RSaveGame_GetSkillTreeAssignedPoints, ReturnValue) == 0x000008, "Member 'RSaveGame_GetSkillTreeAssignedPoints::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.ClearNonDemoSaveDataIfDemoBuild
// 0x0008 (0x0008 - 0x0000)
struct RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild) == 0x000008, "Wrong alignment on RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild");
static_assert(sizeof(RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild) == 0x000008, "Wrong size on RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild");
static_assert(offsetof(RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_ClearNonDemoSaveDataIfDemoBuild::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameManager.ClearPrereleaseSaveData
// 0x0008 (0x0008 - 0x0000)
struct RSaveGameManager_ClearPrereleaseSaveData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_ClearPrereleaseSaveData) == 0x000008, "Wrong alignment on RSaveGameManager_ClearPrereleaseSaveData");
static_assert(sizeof(RSaveGameManager_ClearPrereleaseSaveData) == 0x000008, "Wrong size on RSaveGameManager_ClearPrereleaseSaveData");
static_assert(offsetof(RSaveGameManager_ClearPrereleaseSaveData, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_ClearPrereleaseSaveData::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameManager.ClearSaveGameSlotsIfInvalidChangelist
// 0x0008 (0x0008 - 0x0000)
struct RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist) == 0x000008, "Wrong alignment on RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist");
static_assert(sizeof(RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist) == 0x000008, "Wrong size on RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist");
static_assert(offsetof(RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_ClearSaveGameSlotsIfInvalidChangelist::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameManager.CreateSaveGame
// 0x0018 (0x0018 - 0x0000)
struct RSaveGameManager_CreateSaveGame final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSaveGame*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_CreateSaveGame) == 0x000008, "Wrong alignment on RSaveGameManager_CreateSaveGame");
static_assert(sizeof(RSaveGameManager_CreateSaveGame) == 0x000018, "Wrong size on RSaveGameManager_CreateSaveGame");
static_assert(offsetof(RSaveGameManager_CreateSaveGame, SlotName) == 0x000000, "Member 'RSaveGameManager_CreateSaveGame::SlotName' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_CreateSaveGame, ReturnValue) == 0x000010, "Member 'RSaveGameManager_CreateSaveGame::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.DeleteSaveSlot
// 0x0018 (0x0018 - 0x0000)
struct RSaveGameManager_DeleteSaveSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_DeleteSaveSlot) == 0x000008, "Wrong alignment on RSaveGameManager_DeleteSaveSlot");
static_assert(sizeof(RSaveGameManager_DeleteSaveSlot) == 0x000018, "Wrong size on RSaveGameManager_DeleteSaveSlot");
static_assert(offsetof(RSaveGameManager_DeleteSaveSlot, SlotName) == 0x000000, "Member 'RSaveGameManager_DeleteSaveSlot::SlotName' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_DeleteSaveSlot, WorldContextObject) == 0x000010, "Member 'RSaveGameManager_DeleteSaveSlot::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameManager.DoesSaveGameExist
// 0x0018 (0x0018 - 0x0000)
struct RSaveGameManager_DoesSaveGameExist final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGameManager_DoesSaveGameExist) == 0x000008, "Wrong alignment on RSaveGameManager_DoesSaveGameExist");
static_assert(sizeof(RSaveGameManager_DoesSaveGameExist) == 0x000018, "Wrong size on RSaveGameManager_DoesSaveGameExist");
static_assert(offsetof(RSaveGameManager_DoesSaveGameExist, SlotName) == 0x000000, "Member 'RSaveGameManager_DoesSaveGameExist::SlotName' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_DoesSaveGameExist, ReturnValue) == 0x000010, "Member 'RSaveGameManager_DoesSaveGameExist::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.GetCurrentSaveGame
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameManager_GetCurrentSaveGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSaveGame*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_GetCurrentSaveGame) == 0x000008, "Wrong alignment on RSaveGameManager_GetCurrentSaveGame");
static_assert(sizeof(RSaveGameManager_GetCurrentSaveGame) == 0x000010, "Wrong size on RSaveGameManager_GetCurrentSaveGame");
static_assert(offsetof(RSaveGameManager_GetCurrentSaveGame, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_GetCurrentSaveGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_GetCurrentSaveGame, ReturnValue) == 0x000008, "Member 'RSaveGameManager_GetCurrentSaveGame::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.GetNumSavedRunStats
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameManager_GetNumSavedRunStats final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGameManager_GetNumSavedRunStats) == 0x000008, "Wrong alignment on RSaveGameManager_GetNumSavedRunStats");
static_assert(sizeof(RSaveGameManager_GetNumSavedRunStats) == 0x000010, "Wrong size on RSaveGameManager_GetNumSavedRunStats");
static_assert(offsetof(RSaveGameManager_GetNumSavedRunStats, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_GetNumSavedRunStats::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_GetNumSavedRunStats, ReturnValue) == 0x000008, "Member 'RSaveGameManager_GetNumSavedRunStats::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.GetProjectVersionChangelist
// 0x0004 (0x0004 - 0x0000)
struct RSaveGameManager_GetProjectVersionChangelist final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_GetProjectVersionChangelist) == 0x000004, "Wrong alignment on RSaveGameManager_GetProjectVersionChangelist");
static_assert(sizeof(RSaveGameManager_GetProjectVersionChangelist) == 0x000004, "Wrong size on RSaveGameManager_GetProjectVersionChangelist");
static_assert(offsetof(RSaveGameManager_GetProjectVersionChangelist, ReturnValue) == 0x000000, "Member 'RSaveGameManager_GetProjectVersionChangelist::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.LoadGameFromSlot
// 0x0018 (0x0018 - 0x0000)
struct RSaveGameManager_LoadGameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSaveGame*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_LoadGameFromSlot) == 0x000008, "Wrong alignment on RSaveGameManager_LoadGameFromSlot");
static_assert(sizeof(RSaveGameManager_LoadGameFromSlot) == 0x000018, "Wrong size on RSaveGameManager_LoadGameFromSlot");
static_assert(offsetof(RSaveGameManager_LoadGameFromSlot, SlotName) == 0x000000, "Member 'RSaveGameManager_LoadGameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_LoadGameFromSlot, ReturnValue) == 0x000010, "Member 'RSaveGameManager_LoadGameFromSlot::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.QuickSave
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameManager_QuickSave final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERSavedGameResult                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGameManager_QuickSave) == 0x000008, "Wrong alignment on RSaveGameManager_QuickSave");
static_assert(sizeof(RSaveGameManager_QuickSave) == 0x000010, "Wrong size on RSaveGameManager_QuickSave");
static_assert(offsetof(RSaveGameManager_QuickSave, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_QuickSave::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_QuickSave, ReturnValue) == 0x000008, "Member 'RSaveGameManager_QuickSave::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.SaveGameToSlot
// 0x0020 (0x0020 - 0x0000)
struct RSaveGameManager_SaveGameToSlot final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERSavedGameResult                             ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RSaveGameManager_SaveGameToSlot) == 0x000008, "Wrong alignment on RSaveGameManager_SaveGameToSlot");
static_assert(sizeof(RSaveGameManager_SaveGameToSlot) == 0x000020, "Wrong size on RSaveGameManager_SaveGameToSlot");
static_assert(offsetof(RSaveGameManager_SaveGameToSlot, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_SaveGameToSlot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_SaveGameToSlot, SlotName) == 0x000008, "Member 'RSaveGameManager_SaveGameToSlot::SlotName' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_SaveGameToSlot, ReturnValue) == 0x000018, "Member 'RSaveGameManager_SaveGameToSlot::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameManager.SetCurrentSaveGame
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameManager_SetCurrentSaveGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSaveGame*                             SaveGame;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_SetCurrentSaveGame) == 0x000008, "Wrong alignment on RSaveGameManager_SetCurrentSaveGame");
static_assert(sizeof(RSaveGameManager_SetCurrentSaveGame) == 0x000010, "Wrong size on RSaveGameManager_SetCurrentSaveGame");
static_assert(offsetof(RSaveGameManager_SetCurrentSaveGame, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_SetCurrentSaveGame::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameManager_SetCurrentSaveGame, SaveGame) == 0x000008, "Member 'RSaveGameManager_SetCurrentSaveGame::SaveGame' has a wrong offset!");

// Function RGame.RSaveGameManager.SetCurrentSaveGameToLastSessionSaveGame
// 0x0008 (0x0008 - 0x0000)
struct RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame) == 0x000008, "Wrong alignment on RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame");
static_assert(sizeof(RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame) == 0x000008, "Wrong size on RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame");
static_assert(offsetof(RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_SetCurrentSaveGameToLastSessionSaveGame::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameManager.UpdateCreationChangelistIfDemoBuild
// 0x0008 (0x0008 - 0x0000)
struct RSaveGameManager_UpdateCreationChangelistIfDemoBuild final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameManager_UpdateCreationChangelistIfDemoBuild) == 0x000008, "Wrong alignment on RSaveGameManager_UpdateCreationChangelistIfDemoBuild");
static_assert(sizeof(RSaveGameManager_UpdateCreationChangelistIfDemoBuild) == 0x000008, "Wrong size on RSaveGameManager_UpdateCreationChangelistIfDemoBuild");
static_assert(offsetof(RSaveGameManager_UpdateCreationChangelistIfDemoBuild, WorldContextObject) == 0x000000, "Member 'RSaveGameManager_UpdateCreationChangelistIfDemoBuild::WorldContextObject' has a wrong offset!");

// Function RGame.RSaveGameSession.GetLastSaveGameSession
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameSession_GetLastSaveGameSession final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URSaveGameSession*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameSession_GetLastSaveGameSession) == 0x000008, "Wrong alignment on RSaveGameSession_GetLastSaveGameSession");
static_assert(sizeof(RSaveGameSession_GetLastSaveGameSession) == 0x000010, "Wrong size on RSaveGameSession_GetLastSaveGameSession");
static_assert(offsetof(RSaveGameSession_GetLastSaveGameSession, WorldContextObject) == 0x000000, "Member 'RSaveGameSession_GetLastSaveGameSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RSaveGameSession_GetLastSaveGameSession, ReturnValue) == 0x000008, "Member 'RSaveGameSession_GetLastSaveGameSession::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameSession.AddSaveGame
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameSession_AddSaveGame final
{
public:
	class FString                                 SaveGameSlot;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameSession_AddSaveGame) == 0x000008, "Wrong alignment on RSaveGameSession_AddSaveGame");
static_assert(sizeof(RSaveGameSession_AddSaveGame) == 0x000010, "Wrong size on RSaveGameSession_AddSaveGame");
static_assert(offsetof(RSaveGameSession_AddSaveGame, SaveGameSlot) == 0x000000, "Member 'RSaveGameSession_AddSaveGame::SaveGameSlot' has a wrong offset!");

// Function RGame.RSaveGameSession.GetAllSaveGames
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameSession_GetAllSaveGames final
{
public:
	TArray<class URSaveGame*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameSession_GetAllSaveGames) == 0x000008, "Wrong alignment on RSaveGameSession_GetAllSaveGames");
static_assert(sizeof(RSaveGameSession_GetAllSaveGames) == 0x000010, "Wrong size on RSaveGameSession_GetAllSaveGames");
static_assert(offsetof(RSaveGameSession_GetAllSaveGames, ReturnValue) == 0x000000, "Member 'RSaveGameSession_GetAllSaveGames::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameSession.GetLastSaveGameSlot
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameSession_GetLastSaveGameSlot final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameSession_GetLastSaveGameSlot) == 0x000008, "Wrong alignment on RSaveGameSession_GetLastSaveGameSlot");
static_assert(sizeof(RSaveGameSession_GetLastSaveGameSlot) == 0x000010, "Wrong size on RSaveGameSession_GetLastSaveGameSlot");
static_assert(offsetof(RSaveGameSession_GetLastSaveGameSlot, ReturnValue) == 0x000000, "Member 'RSaveGameSession_GetLastSaveGameSlot::ReturnValue' has a wrong offset!");

// Function RGame.RSaveGameSession.RemoveSaveGame
// 0x0010 (0x0010 - 0x0000)
struct RSaveGameSession_RemoveSaveGame final
{
public:
	class FString                                 SaveGameSlot;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSaveGameSession_RemoveSaveGame) == 0x000008, "Wrong alignment on RSaveGameSession_RemoveSaveGame");
static_assert(sizeof(RSaveGameSession_RemoveSaveGame) == 0x000010, "Wrong size on RSaveGameSession_RemoveSaveGame");
static_assert(offsetof(RSaveGameSession_RemoveSaveGame, SaveGameSlot) == 0x000000, "Member 'RSaveGameSession_RemoveSaveGame::SaveGameSlot' has a wrong offset!");

// Function RGame.RSettingTabWidget.GetDesiredFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct RSettingTabWidget_GetDesiredFocusWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSettingTabWidget_GetDesiredFocusWidget) == 0x000008, "Wrong alignment on RSettingTabWidget_GetDesiredFocusWidget");
static_assert(sizeof(RSettingTabWidget_GetDesiredFocusWidget) == 0x000008, "Wrong size on RSettingTabWidget_GetDesiredFocusWidget");
static_assert(offsetof(RSettingTabWidget_GetDesiredFocusWidget, ReturnValue) == 0x000000, "Member 'RSettingTabWidget_GetDesiredFocusWidget::ReturnValue' has a wrong offset!");

// Function RGame.RSpectateHud.OnSpectatedPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct RSpectateHud_OnSpectatedPlayerChanged final
{
public:
	class ARPlayerPawn*                           NewSpectatedPlayer;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSpectateHud_OnSpectatedPlayerChanged) == 0x000008, "Wrong alignment on RSpectateHud_OnSpectatedPlayerChanged");
static_assert(sizeof(RSpectateHud_OnSpectatedPlayerChanged) == 0x000008, "Wrong size on RSpectateHud_OnSpectatedPlayerChanged");
static_assert(offsetof(RSpectateHud_OnSpectatedPlayerChanged, NewSpectatedPlayer) == 0x000000, "Member 'RSpectateHud_OnSpectatedPlayerChanged::NewSpectatedPlayer' has a wrong offset!");

// Function RGame.RSpectatorPawn.OnPlayerPawnKilled
// 0x0008 (0x0008 - 0x0000)
struct RSpectatorPawn_OnPlayerPawnKilled final
{
public:
	class ARPlayerPawn*                           PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSpectatorPawn_OnPlayerPawnKilled) == 0x000008, "Wrong alignment on RSpectatorPawn_OnPlayerPawnKilled");
static_assert(sizeof(RSpectatorPawn_OnPlayerPawnKilled) == 0x000008, "Wrong size on RSpectatorPawn_OnPlayerPawnKilled");
static_assert(offsetof(RSpectatorPawn_OnPlayerPawnKilled, PlayerPawn) == 0x000000, "Member 'RSpectatorPawn_OnPlayerPawnKilled::PlayerPawn' has a wrong offset!");

// Function RGame.RSpectatorPawn.OnPlayerPawnRevived
// 0x0008 (0x0008 - 0x0000)
struct RSpectatorPawn_OnPlayerPawnRevived final
{
public:
	class ARPlayerPawn*                           PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSpectatorPawn_OnPlayerPawnRevived) == 0x000008, "Wrong alignment on RSpectatorPawn_OnPlayerPawnRevived");
static_assert(sizeof(RSpectatorPawn_OnPlayerPawnRevived) == 0x000008, "Wrong size on RSpectatorPawn_OnPlayerPawnRevived");
static_assert(offsetof(RSpectatorPawn_OnPlayerPawnRevived, PlayerPawn) == 0x000000, "Member 'RSpectatorPawn_OnPlayerPawnRevived::PlayerPawn' has a wrong offset!");

// Function RGame.RSpectatorPawn.OnSpectatedPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct RSpectatorPawn_OnSpectatedPlayerChanged final
{
public:
	class ARPlayerPawn*                           NewSpectatedPlayer;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSpectatorPawn_OnSpectatedPlayerChanged) == 0x000008, "Wrong alignment on RSpectatorPawn_OnSpectatedPlayerChanged");
static_assert(sizeof(RSpectatorPawn_OnSpectatedPlayerChanged) == 0x000008, "Wrong size on RSpectatorPawn_OnSpectatedPlayerChanged");
static_assert(offsetof(RSpectatorPawn_OnSpectatedPlayerChanged, NewSpectatedPlayer) == 0x000000, "Member 'RSpectatorPawn_OnSpectatedPlayerChanged::NewSpectatedPlayer' has a wrong offset!");

// Function RGame.RStatTracker.GetStatTracker
// 0x0010 (0x0010 - 0x0000)
struct RStatTracker_GetStatTracker final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARStatTracker*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatTracker_GetStatTracker) == 0x000008, "Wrong alignment on RStatTracker_GetStatTracker");
static_assert(sizeof(RStatTracker_GetStatTracker) == 0x000010, "Wrong size on RStatTracker_GetStatTracker");
static_assert(offsetof(RStatTracker_GetStatTracker, WorldContextObject) == 0x000000, "Member 'RStatTracker_GetStatTracker::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RStatTracker_GetStatTracker, ReturnValue) == 0x000008, "Member 'RStatTracker_GetStatTracker::ReturnValue' has a wrong offset!");

// Function RGame.RStatTracker.SaveLogToFile
// 0x0020 (0x0020 - 0x0000)
struct RStatTracker_SaveLogToFile final
{
public:
	TArray<class FString>                         lines;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStatTracker_SaveLogToFile) == 0x000008, "Wrong alignment on RStatTracker_SaveLogToFile");
static_assert(sizeof(RStatTracker_SaveLogToFile) == 0x000020, "Wrong size on RStatTracker_SaveLogToFile");
static_assert(offsetof(RStatTracker_SaveLogToFile, lines) == 0x000000, "Member 'RStatTracker_SaveLogToFile::lines' has a wrong offset!");
static_assert(offsetof(RStatTracker_SaveLogToFile, Filename) == 0x000010, "Member 'RStatTracker_SaveLogToFile::Filename' has a wrong offset!");

// Function RGame.RStringLibrary.FilterBadWords
// 0x0020 (0x0020 - 0x0000)
struct RStringLibrary_FilterBadWords final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStringLibrary_FilterBadWords) == 0x000008, "Wrong alignment on RStringLibrary_FilterBadWords");
static_assert(sizeof(RStringLibrary_FilterBadWords) == 0x000020, "Wrong size on RStringLibrary_FilterBadWords");
static_assert(offsetof(RStringLibrary_FilterBadWords, InText) == 0x000000, "Member 'RStringLibrary_FilterBadWords::InText' has a wrong offset!");
static_assert(offsetof(RStringLibrary_FilterBadWords, ReturnValue) == 0x000010, "Member 'RStringLibrary_FilterBadWords::ReturnValue' has a wrong offset!");

// Function RGame.RStringLibrary.ParseDescriptionWithVariable
// 0x0040 (0x0040 - 0x0000)
struct RStringLibrary_ParseDescriptionWithVariable final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDescriptionVariable                   DescriptionVariable;                               // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStringLibrary_ParseDescriptionWithVariable) == 0x000008, "Wrong alignment on RStringLibrary_ParseDescriptionWithVariable");
static_assert(sizeof(RStringLibrary_ParseDescriptionWithVariable) == 0x000040, "Wrong size on RStringLibrary_ParseDescriptionWithVariable");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariable, InText) == 0x000000, "Member 'RStringLibrary_ParseDescriptionWithVariable::InText' has a wrong offset!");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariable, DescriptionVariable) == 0x000010, "Member 'RStringLibrary_ParseDescriptionWithVariable::DescriptionVariable' has a wrong offset!");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariable, ReturnValue) == 0x000030, "Member 'RStringLibrary_ParseDescriptionWithVariable::ReturnValue' has a wrong offset!");

// Function RGame.RStringLibrary.ParseDescriptionWithVariables
// 0x0030 (0x0030 - 0x0000)
struct RStringLibrary_ParseDescriptionWithVariables final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FDescriptionVariable>           DescriptionVariables;                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RStringLibrary_ParseDescriptionWithVariables) == 0x000008, "Wrong alignment on RStringLibrary_ParseDescriptionWithVariables");
static_assert(sizeof(RStringLibrary_ParseDescriptionWithVariables) == 0x000030, "Wrong size on RStringLibrary_ParseDescriptionWithVariables");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariables, InText) == 0x000000, "Member 'RStringLibrary_ParseDescriptionWithVariables::InText' has a wrong offset!");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariables, DescriptionVariables) == 0x000010, "Member 'RStringLibrary_ParseDescriptionWithVariables::DescriptionVariables' has a wrong offset!");
static_assert(offsetof(RStringLibrary_ParseDescriptionWithVariables, ReturnValue) == 0x000020, "Member 'RStringLibrary_ParseDescriptionWithVariables::ReturnValue' has a wrong offset!");

// Function RGame.RStringLibrary.TextContainsBadWord
// 0x0018 (0x0018 - 0x0000)
struct RStringLibrary_TextContainsBadWord final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RStringLibrary_TextContainsBadWord) == 0x000008, "Wrong alignment on RStringLibrary_TextContainsBadWord");
static_assert(sizeof(RStringLibrary_TextContainsBadWord) == 0x000018, "Wrong size on RStringLibrary_TextContainsBadWord");
static_assert(offsetof(RStringLibrary_TextContainsBadWord, InText) == 0x000000, "Member 'RStringLibrary_TextContainsBadWord::InText' has a wrong offset!");
static_assert(offsetof(RStringLibrary_TextContainsBadWord, ReturnValue) == 0x000010, "Member 'RStringLibrary_TextContainsBadWord::ReturnValue' has a wrong offset!");

// Function RGame.RSubCrosshair.GetDynamicCrosshairMaterial
// 0x0008 (0x0008 - 0x0000)
struct RSubCrosshair_GetDynamicCrosshairMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSubCrosshair_GetDynamicCrosshairMaterial) == 0x000008, "Wrong alignment on RSubCrosshair_GetDynamicCrosshairMaterial");
static_assert(sizeof(RSubCrosshair_GetDynamicCrosshairMaterial) == 0x000008, "Wrong size on RSubCrosshair_GetDynamicCrosshairMaterial");
static_assert(offsetof(RSubCrosshair_GetDynamicCrosshairMaterial, ReturnValue) == 0x000000, "Member 'RSubCrosshair_GetDynamicCrosshairMaterial::ReturnValue' has a wrong offset!");

// Function RGame.RSubCrosshair.UpdateTarget
// 0x000C (0x000C - 0x0000)
struct RSubCrosshair_UpdateTarget final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RSubCrosshair_UpdateTarget) == 0x000004, "Wrong alignment on RSubCrosshair_UpdateTarget");
static_assert(sizeof(RSubCrosshair_UpdateTarget) == 0x00000C, "Wrong size on RSubCrosshair_UpdateTarget");
static_assert(offsetof(RSubCrosshair_UpdateTarget, PropertyName) == 0x000000, "Member 'RSubCrosshair_UpdateTarget::PropertyName' has a wrong offset!");
static_assert(offsetof(RSubCrosshair_UpdateTarget, NewValue) == 0x000008, "Member 'RSubCrosshair_UpdateTarget::NewValue' has a wrong offset!");

// Function RGame.RTelemetryManager.AddFoundInteractableInNode
// 0x0008 (0x0008 - 0x0000)
struct RTelemetryManager_AddFoundInteractableInNode final
{
public:
	class AActor*                                 FoundInteractableActor;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_AddFoundInteractableInNode) == 0x000008, "Wrong alignment on RTelemetryManager_AddFoundInteractableInNode");
static_assert(sizeof(RTelemetryManager_AddFoundInteractableInNode) == 0x000008, "Wrong size on RTelemetryManager_AddFoundInteractableInNode");
static_assert(offsetof(RTelemetryManager_AddFoundInteractableInNode, FoundInteractableActor) == 0x000000, "Member 'RTelemetryManager_AddFoundInteractableInNode::FoundInteractableActor' has a wrong offset!");

// Function RGame.RTelemetryManager.AddInteractableInNode
// 0x0008 (0x0008 - 0x0000)
struct RTelemetryManager_AddInteractableInNode final
{
public:
	class AActor*                                 InteractableActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_AddInteractableInNode) == 0x000008, "Wrong alignment on RTelemetryManager_AddInteractableInNode");
static_assert(sizeof(RTelemetryManager_AddInteractableInNode) == 0x000008, "Wrong size on RTelemetryManager_AddInteractableInNode");
static_assert(offsetof(RTelemetryManager_AddInteractableInNode, InteractableActor) == 0x000000, "Member 'RTelemetryManager_AddInteractableInNode::InteractableActor' has a wrong offset!");

// Function RGame.RTelemetryManager.ConvertBitmaskToEnumAsByte
// 0x0018 (0x0018 - 0x0000)
struct RTelemetryManager_ConvertBitmaskToEnumAsByte final
{
public:
	int32                                         BitMask;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EDamageSource>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_ConvertBitmaskToEnumAsByte) == 0x000008, "Wrong alignment on RTelemetryManager_ConvertBitmaskToEnumAsByte");
static_assert(sizeof(RTelemetryManager_ConvertBitmaskToEnumAsByte) == 0x000018, "Wrong size on RTelemetryManager_ConvertBitmaskToEnumAsByte");
static_assert(offsetof(RTelemetryManager_ConvertBitmaskToEnumAsByte, BitMask) == 0x000000, "Member 'RTelemetryManager_ConvertBitmaskToEnumAsByte::BitMask' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_ConvertBitmaskToEnumAsByte, ReturnValue) == 0x000008, "Member 'RTelemetryManager_ConvertBitmaskToEnumAsByte::ReturnValue' has a wrong offset!");

// Function RGame.RTelemetryManager.OnAllowTelemetryDataCollectionUpdated
// 0x0001 (0x0001 - 0x0000)
struct RTelemetryManager_OnAllowTelemetryDataCollectionUpdated final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_OnAllowTelemetryDataCollectionUpdated) == 0x000001, "Wrong alignment on RTelemetryManager_OnAllowTelemetryDataCollectionUpdated");
static_assert(sizeof(RTelemetryManager_OnAllowTelemetryDataCollectionUpdated) == 0x000001, "Wrong size on RTelemetryManager_OnAllowTelemetryDataCollectionUpdated");
static_assert(offsetof(RTelemetryManager_OnAllowTelemetryDataCollectionUpdated, bNewValue) == 0x000000, "Member 'RTelemetryManager_OnAllowTelemetryDataCollectionUpdated::bNewValue' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnChallengeCompleted
// 0x0178 (0x0178 - 0x0000)
struct RTelemetryManager_WriteOnChallengeCompleted final
{
public:
	struct FRChallenge                            RChallenge;                                        // 0x0000(0x0178)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnChallengeCompleted) == 0x000008, "Wrong alignment on RTelemetryManager_WriteOnChallengeCompleted");
static_assert(sizeof(RTelemetryManager_WriteOnChallengeCompleted) == 0x000178, "Wrong size on RTelemetryManager_WriteOnChallengeCompleted");
static_assert(offsetof(RTelemetryManager_WriteOnChallengeCompleted, RChallenge) == 0x000000, "Member 'RTelemetryManager_WriteOnChallengeCompleted::RChallenge' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnDeath
// 0x00C0 (0x00C0 - 0x0000)
struct RTelemetryManager_WriteOnDeath final
{
public:
	struct FDamageCombatEvent                     DamageCombatEvent;                                 // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnDeath) == 0x000008, "Wrong alignment on RTelemetryManager_WriteOnDeath");
static_assert(sizeof(RTelemetryManager_WriteOnDeath) == 0x0000C0, "Wrong size on RTelemetryManager_WriteOnDeath");
static_assert(offsetof(RTelemetryManager_WriteOnDeath, DamageCombatEvent) == 0x000000, "Member 'RTelemetryManager_WriteOnDeath::DamageCombatEvent' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnFightEnd
// 0x0020 (0x0020 - 0x0000)
struct RTelemetryManager_WriteOnFightEnd final
{
public:
	bool                                          bWasObjective;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RoomObjectiveType;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumMeleeUsages;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEndBoss;                                        // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RTelemetryManager_WriteOnFightEnd) == 0x000008, "Wrong alignment on RTelemetryManager_WriteOnFightEnd");
static_assert(sizeof(RTelemetryManager_WriteOnFightEnd) == 0x000020, "Wrong size on RTelemetryManager_WriteOnFightEnd");
static_assert(offsetof(RTelemetryManager_WriteOnFightEnd, bWasObjective) == 0x000000, "Member 'RTelemetryManager_WriteOnFightEnd::bWasObjective' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnFightEnd, RoomObjectiveType) == 0x000008, "Member 'RTelemetryManager_WriteOnFightEnd::RoomObjectiveType' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnFightEnd, NumMeleeUsages) == 0x000018, "Member 'RTelemetryManager_WriteOnFightEnd::NumMeleeUsages' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnFightEnd, bIsEndBoss) == 0x00001C, "Member 'RTelemetryManager_WriteOnFightEnd::bIsEndBoss' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnPickupGodMutator
// 0x0040 (0x0040 - 0x0000)
struct RTelemetryManager_WriteOnPickupGodMutator final
{
public:
	class FString                                 ChosenGodCategoryName;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DiscardedGodCategoryNames;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ChosenGodMutatorName;                              // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DiscardedGodMutatorNames;                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnPickupGodMutator) == 0x000008, "Wrong alignment on RTelemetryManager_WriteOnPickupGodMutator");
static_assert(sizeof(RTelemetryManager_WriteOnPickupGodMutator) == 0x000040, "Wrong size on RTelemetryManager_WriteOnPickupGodMutator");
static_assert(offsetof(RTelemetryManager_WriteOnPickupGodMutator, ChosenGodCategoryName) == 0x000000, "Member 'RTelemetryManager_WriteOnPickupGodMutator::ChosenGodCategoryName' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnPickupGodMutator, DiscardedGodCategoryNames) == 0x000010, "Member 'RTelemetryManager_WriteOnPickupGodMutator::DiscardedGodCategoryNames' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnPickupGodMutator, ChosenGodMutatorName) == 0x000020, "Member 'RTelemetryManager_WriteOnPickupGodMutator::ChosenGodMutatorName' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnPickupGodMutator, DiscardedGodMutatorNames) == 0x000030, "Member 'RTelemetryManager_WriteOnPickupGodMutator::DiscardedGodMutatorNames' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnPurchase
// 0x0028 (0x0028 - 0x0000)
struct RTelemetryManager_WriteOnPurchase final
{
public:
	class FString                                 PurchasedItemName;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchasedItemCost;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         NotPurchasedItems;                                 // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnPurchase) == 0x000008, "Wrong alignment on RTelemetryManager_WriteOnPurchase");
static_assert(sizeof(RTelemetryManager_WriteOnPurchase) == 0x000028, "Wrong size on RTelemetryManager_WriteOnPurchase");
static_assert(offsetof(RTelemetryManager_WriteOnPurchase, PurchasedItemName) == 0x000000, "Member 'RTelemetryManager_WriteOnPurchase::PurchasedItemName' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnPurchase, PurchasedItemCost) == 0x000010, "Member 'RTelemetryManager_WriteOnPurchase::PurchasedItemCost' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_WriteOnPurchase, NotPurchasedItems) == 0x000018, "Member 'RTelemetryManager_WriteOnPurchase::NotPurchasedItems' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnRunEnded
// 0x0001 (0x0001 - 0x0000)
struct RTelemetryManager_WriteOnRunEnded final
{
public:
	bool                                          bCurrentRunSuccesful;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnRunEnded) == 0x000001, "Wrong alignment on RTelemetryManager_WriteOnRunEnded");
static_assert(sizeof(RTelemetryManager_WriteOnRunEnded) == 0x000001, "Wrong size on RTelemetryManager_WriteOnRunEnded");
static_assert(offsetof(RTelemetryManager_WriteOnRunEnded, bCurrentRunSuccesful) == 0x000000, "Member 'RTelemetryManager_WriteOnRunEnded::bCurrentRunSuccesful' has a wrong offset!");

// Function RGame.RTelemetryManager.WriteOnRunEnded_Multicast
// 0x0001 (0x0001 - 0x0000)
struct RTelemetryManager_WriteOnRunEnded_Multicast final
{
public:
	bool                                          bCurrentRunSuccesful;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_WriteOnRunEnded_Multicast) == 0x000001, "Wrong alignment on RTelemetryManager_WriteOnRunEnded_Multicast");
static_assert(sizeof(RTelemetryManager_WriteOnRunEnded_Multicast) == 0x000001, "Wrong size on RTelemetryManager_WriteOnRunEnded_Multicast");
static_assert(offsetof(RTelemetryManager_WriteOnRunEnded_Multicast, bCurrentRunSuccesful) == 0x000000, "Member 'RTelemetryManager_WriteOnRunEnded_Multicast::bCurrentRunSuccesful' has a wrong offset!");

// Function RGame.RTelemetryManager.GetInstigatorDisplayName
// 0x0018 (0x0018 - 0x0000)
struct RTelemetryManager_GetInstigatorDisplayName final
{
public:
	class AActor*                                 InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTelemetryManager_GetInstigatorDisplayName) == 0x000008, "Wrong alignment on RTelemetryManager_GetInstigatorDisplayName");
static_assert(sizeof(RTelemetryManager_GetInstigatorDisplayName) == 0x000018, "Wrong size on RTelemetryManager_GetInstigatorDisplayName");
static_assert(offsetof(RTelemetryManager_GetInstigatorDisplayName, InstigatorActor) == 0x000000, "Member 'RTelemetryManager_GetInstigatorDisplayName::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RTelemetryManager_GetInstigatorDisplayName, ReturnValue) == 0x000008, "Member 'RTelemetryManager_GetInstigatorDisplayName::ReturnValue' has a wrong offset!");

// Function RGame.RTempCharacter.AddRecoil
// 0x0018 (0x0018 - 0x0000)
struct RTempCharacter_AddRecoil final
{
public:
	struct FRotator                               Recoil;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTempCharacter_AddRecoil) == 0x000008, "Wrong alignment on RTempCharacter_AddRecoil");
static_assert(sizeof(RTempCharacter_AddRecoil) == 0x000018, "Wrong size on RTempCharacter_AddRecoil");
static_assert(offsetof(RTempCharacter_AddRecoil, Recoil) == 0x000000, "Member 'RTempCharacter_AddRecoil::Recoil' has a wrong offset!");

// Function RGame.RTeslaGunLightningOrbScript.NativeCheckHighVoltage
// 0x0001 (0x0001 - 0x0000)
struct RTeslaGunLightningOrbScript_NativeCheckHighVoltage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTeslaGunLightningOrbScript_NativeCheckHighVoltage) == 0x000001, "Wrong alignment on RTeslaGunLightningOrbScript_NativeCheckHighVoltage");
static_assert(sizeof(RTeslaGunLightningOrbScript_NativeCheckHighVoltage) == 0x000001, "Wrong size on RTeslaGunLightningOrbScript_NativeCheckHighVoltage");
static_assert(offsetof(RTeslaGunLightningOrbScript_NativeCheckHighVoltage, ReturnValue) == 0x000000, "Member 'RTeslaGunLightningOrbScript_NativeCheckHighVoltage::ReturnValue' has a wrong offset!");

// Function RGame.RTeslaGunLightningOrbScript.NativeZapEnemy
// 0x0020 (0x0020 - 0x0000)
struct RTeslaGunLightningOrbScript_NativeZapEnemy final
{
public:
	class AActor*                                 EnemyActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ZapOrigin;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTeslaGunLightningOrbScript_NativeZapEnemy) == 0x000008, "Wrong alignment on RTeslaGunLightningOrbScript_NativeZapEnemy");
static_assert(sizeof(RTeslaGunLightningOrbScript_NativeZapEnemy) == 0x000020, "Wrong size on RTeslaGunLightningOrbScript_NativeZapEnemy");
static_assert(offsetof(RTeslaGunLightningOrbScript_NativeZapEnemy, EnemyActor) == 0x000000, "Member 'RTeslaGunLightningOrbScript_NativeZapEnemy::EnemyActor' has a wrong offset!");
static_assert(offsetof(RTeslaGunLightningOrbScript_NativeZapEnemy, ZapOrigin) == 0x000008, "Member 'RTeslaGunLightningOrbScript_NativeZapEnemy::ZapOrigin' has a wrong offset!");

// Function RGame.RTriggerMutatorScript.HandleDealtDamageEvent
// 0x00C8 (0x00C8 - 0x0000)
struct RTriggerMutatorScript_HandleDealtDamageEvent final
{
public:
	class ARPawnBase*                             RPawnBase;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDamageCombatEvent                     DamageEventData;                                   // 0x0008(0x00C0)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RTriggerMutatorScript_HandleDealtDamageEvent) == 0x000008, "Wrong alignment on RTriggerMutatorScript_HandleDealtDamageEvent");
static_assert(sizeof(RTriggerMutatorScript_HandleDealtDamageEvent) == 0x0000C8, "Wrong size on RTriggerMutatorScript_HandleDealtDamageEvent");
static_assert(offsetof(RTriggerMutatorScript_HandleDealtDamageEvent, RPawnBase) == 0x000000, "Member 'RTriggerMutatorScript_HandleDealtDamageEvent::RPawnBase' has a wrong offset!");
static_assert(offsetof(RTriggerMutatorScript_HandleDealtDamageEvent, DamageEventData) == 0x000008, "Member 'RTriggerMutatorScript_HandleDealtDamageEvent::DamageEventData' has a wrong offset!");

// Function RGame.RUIManager.GetUIManager
// 0x0010 (0x0010 - 0x0000)
struct RUIManager_GetUIManager final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARUIManager*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUIManager_GetUIManager) == 0x000008, "Wrong alignment on RUIManager_GetUIManager");
static_assert(sizeof(RUIManager_GetUIManager) == 0x000010, "Wrong size on RUIManager_GetUIManager");
static_assert(offsetof(RUIManager_GetUIManager, PlayerController) == 0x000000, "Member 'RUIManager_GetUIManager::PlayerController' has a wrong offset!");
static_assert(offsetof(RUIManager_GetUIManager, ReturnValue) == 0x000008, "Member 'RUIManager_GetUIManager::ReturnValue' has a wrong offset!");

// Function RGame.RUIManager.IsWidgetStackEmpty
// 0x0010 (0x0010 - 0x0000)
struct RUIManager_IsWidgetStackEmpty final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeNonInputWidgets;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RUIManager_IsWidgetStackEmpty) == 0x000008, "Wrong alignment on RUIManager_IsWidgetStackEmpty");
static_assert(sizeof(RUIManager_IsWidgetStackEmpty) == 0x000010, "Wrong size on RUIManager_IsWidgetStackEmpty");
static_assert(offsetof(RUIManager_IsWidgetStackEmpty, PlayerController) == 0x000000, "Member 'RUIManager_IsWidgetStackEmpty::PlayerController' has a wrong offset!");
static_assert(offsetof(RUIManager_IsWidgetStackEmpty, bExcludeNonInputWidgets) == 0x000008, "Member 'RUIManager_IsWidgetStackEmpty::bExcludeNonInputWidgets' has a wrong offset!");
static_assert(offsetof(RUIManager_IsWidgetStackEmpty, ReturnValue) == 0x000009, "Member 'RUIManager_IsWidgetStackEmpty::ReturnValue' has a wrong offset!");

// Function RGame.RUIManager.PopWidget
// 0x0008 (0x0008 - 0x0000)
struct RUIManager_PopWidget final
{
public:
	class URCommonActivatableWidget*              ActivatableWidget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUIManager_PopWidget) == 0x000008, "Wrong alignment on RUIManager_PopWidget");
static_assert(sizeof(RUIManager_PopWidget) == 0x000008, "Wrong size on RUIManager_PopWidget");
static_assert(offsetof(RUIManager_PopWidget, ActivatableWidget) == 0x000000, "Member 'RUIManager_PopWidget::ActivatableWidget' has a wrong offset!");

// Function RGame.RUIManager.PushWidget
// 0x0018 (0x0018 - 0x0000)
struct RUIManager_PushWidget final
{
public:
	TSubclassOf<class URCommonActivatableWidget>  ActivatableWidgetClass;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URCommonActivatableWidget*              OutWidget;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUIManager_PushWidget) == 0x000008, "Wrong alignment on RUIManager_PushWidget");
static_assert(sizeof(RUIManager_PushWidget) == 0x000018, "Wrong size on RUIManager_PushWidget");
static_assert(offsetof(RUIManager_PushWidget, ActivatableWidgetClass) == 0x000000, "Member 'RUIManager_PushWidget::ActivatableWidgetClass' has a wrong offset!");
static_assert(offsetof(RUIManager_PushWidget, OutWidget) == 0x000008, "Member 'RUIManager_PushWidget::OutWidget' has a wrong offset!");
static_assert(offsetof(RUIManager_PushWidget, PlayerController) == 0x000010, "Member 'RUIManager_PushWidget::PlayerController' has a wrong offset!");

// Function RGame.RUIManager.DragDropOperationStarted
// 0x0001 (0x0001 - 0x0000)
struct RUIManager_DragDropOperationStarted final
{
public:
	EDragDropOperationEvent                       OperationType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUIManager_DragDropOperationStarted) == 0x000001, "Wrong alignment on RUIManager_DragDropOperationStarted");
static_assert(sizeof(RUIManager_DragDropOperationStarted) == 0x000001, "Wrong size on RUIManager_DragDropOperationStarted");
static_assert(offsetof(RUIManager_DragDropOperationStarted, OperationType) == 0x000000, "Member 'RUIManager_DragDropOperationStarted::OperationType' has a wrong offset!");

// Function RGame.RUngluMovementSpline.GetMoveTimelineComponent
// 0x0008 (0x0008 - 0x0000)
struct RUngluMovementSpline_GetMoveTimelineComponent final
{
public:
	class UTimelineComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUngluMovementSpline_GetMoveTimelineComponent) == 0x000008, "Wrong alignment on RUngluMovementSpline_GetMoveTimelineComponent");
static_assert(sizeof(RUngluMovementSpline_GetMoveTimelineComponent) == 0x000008, "Wrong size on RUngluMovementSpline_GetMoveTimelineComponent");
static_assert(offsetof(RUngluMovementSpline_GetMoveTimelineComponent, ReturnValue) == 0x000000, "Member 'RUngluMovementSpline_GetMoveTimelineComponent::ReturnValue' has a wrong offset!");

// Function RGame.RUngluMovementSpline.GetSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct RUngluMovementSpline_GetSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUngluMovementSpline_GetSplineComponent) == 0x000008, "Wrong alignment on RUngluMovementSpline_GetSplineComponent");
static_assert(sizeof(RUngluMovementSpline_GetSplineComponent) == 0x000008, "Wrong size on RUngluMovementSpline_GetSplineComponent");
static_assert(offsetof(RUngluMovementSpline_GetSplineComponent, ReturnValue) == 0x000000, "Member 'RUngluMovementSpline_GetSplineComponent::ReturnValue' has a wrong offset!");

// Function RGame.RUngluMovementSpline.MoveCloneToPosition
// 0x0030 (0x0030 - 0x0000)
struct RUngluMovementSpline_MoveCloneToPosition final
{
public:
	class ARPawnBase*                             CloneTarget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceRequirement;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RUngluMovementSpline_MoveCloneToPosition) == 0x000008, "Wrong alignment on RUngluMovementSpline_MoveCloneToPosition");
static_assert(sizeof(RUngluMovementSpline_MoveCloneToPosition) == 0x000030, "Wrong size on RUngluMovementSpline_MoveCloneToPosition");
static_assert(offsetof(RUngluMovementSpline_MoveCloneToPosition, CloneTarget) == 0x000000, "Member 'RUngluMovementSpline_MoveCloneToPosition::CloneTarget' has a wrong offset!");
static_assert(offsetof(RUngluMovementSpline_MoveCloneToPosition, PlayRate) == 0x000008, "Member 'RUngluMovementSpline_MoveCloneToPosition::PlayRate' has a wrong offset!");
static_assert(offsetof(RUngluMovementSpline_MoveCloneToPosition, TargetLocation) == 0x000010, "Member 'RUngluMovementSpline_MoveCloneToPosition::TargetLocation' has a wrong offset!");
static_assert(offsetof(RUngluMovementSpline_MoveCloneToPosition, DistanceRequirement) == 0x000028, "Member 'RUngluMovementSpline_MoveCloneToPosition::DistanceRequirement' has a wrong offset!");

// Function RGame.RUngluMovementSpline.SetSplineStopped
// 0x0001 (0x0001 - 0x0000)
struct RUngluMovementSpline_SetSplineStopped final
{
public:
	bool                                          bStop;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RUngluMovementSpline_SetSplineStopped) == 0x000001, "Wrong alignment on RUngluMovementSpline_SetSplineStopped");
static_assert(sizeof(RUngluMovementSpline_SetSplineStopped) == 0x000001, "Wrong size on RUngluMovementSpline_SetSplineStopped");
static_assert(offsetof(RUngluMovementSpline_SetSplineStopped, bStop) == 0x000000, "Member 'RUngluMovementSpline_SetSplineStopped::bStop' has a wrong offset!");

// Function RGame.RWeaponAnimInstance.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct RWeaponAnimInstance_GetPawnOwner final
{
public:
	class ARPlayerPawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponAnimInstance_GetPawnOwner) == 0x000008, "Wrong alignment on RWeaponAnimInstance_GetPawnOwner");
static_assert(sizeof(RWeaponAnimInstance_GetPawnOwner) == 0x000008, "Wrong size on RWeaponAnimInstance_GetPawnOwner");
static_assert(offsetof(RWeaponAnimInstance_GetPawnOwner, ReturnValue) == 0x000000, "Member 'RWeaponAnimInstance_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function RGame.RWeaponAnimInstance.OnWeaponFired
// 0x0001 (0x0001 - 0x0000)
struct RWeaponAnimInstance_OnWeaponFired final
{
public:
	bool                                          IsPrimaryMod;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponAnimInstance_OnWeaponFired) == 0x000001, "Wrong alignment on RWeaponAnimInstance_OnWeaponFired");
static_assert(sizeof(RWeaponAnimInstance_OnWeaponFired) == 0x000001, "Wrong size on RWeaponAnimInstance_OnWeaponFired");
static_assert(offsetof(RWeaponAnimInstance_OnWeaponFired, IsPrimaryMod) == 0x000000, "Member 'RWeaponAnimInstance_OnWeaponFired::IsPrimaryMod' has a wrong offset!");

// Function RGame.RWeaponPrimaryAsset.GetCompatibleModsBySlot
// 0x0018 (0x0018 - 0x0000)
struct RWeaponPrimaryAsset_GetCompatibleModsBySlot final
{
public:
	EWeaponModAttachmentSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URWeaponModPrimaryAsset*>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponPrimaryAsset_GetCompatibleModsBySlot) == 0x000008, "Wrong alignment on RWeaponPrimaryAsset_GetCompatibleModsBySlot");
static_assert(sizeof(RWeaponPrimaryAsset_GetCompatibleModsBySlot) == 0x000018, "Wrong size on RWeaponPrimaryAsset_GetCompatibleModsBySlot");
static_assert(offsetof(RWeaponPrimaryAsset_GetCompatibleModsBySlot, Slot) == 0x000000, "Member 'RWeaponPrimaryAsset_GetCompatibleModsBySlot::Slot' has a wrong offset!");
static_assert(offsetof(RWeaponPrimaryAsset_GetCompatibleModsBySlot, ReturnValue) == 0x000008, "Member 'RWeaponPrimaryAsset_GetCompatibleModsBySlot::ReturnValue' has a wrong offset!");

// Function RGame.RWeaponPrimaryAsset.GetDefaultCosmeticPA
// 0x0008 (0x0008 - 0x0000)
struct RWeaponPrimaryAsset_GetDefaultCosmeticPA final
{
public:
	class URWeaponCosmeticPrimaryAsset*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponPrimaryAsset_GetDefaultCosmeticPA) == 0x000008, "Wrong alignment on RWeaponPrimaryAsset_GetDefaultCosmeticPA");
static_assert(sizeof(RWeaponPrimaryAsset_GetDefaultCosmeticPA) == 0x000008, "Wrong size on RWeaponPrimaryAsset_GetDefaultCosmeticPA");
static_assert(offsetof(RWeaponPrimaryAsset_GetDefaultCosmeticPA, ReturnValue) == 0x000000, "Member 'RWeaponPrimaryAsset_GetDefaultCosmeticPA::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddFloatCoefficient
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddFloatCoefficient final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddFloatCoefficient) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddFloatCoefficient");
static_assert(sizeof(RMutableWeaponSettings_AddFloatCoefficient) == 0x000010, "Wrong size on RMutableWeaponSettings_AddFloatCoefficient");
static_assert(offsetof(RMutableWeaponSettings_AddFloatCoefficient, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddFloatCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatCoefficient, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddFloatCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatCoefficient, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddFloatCoefficient::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddFloatPostAdditive
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddFloatPostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddFloatPostAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddFloatPostAdditive");
static_assert(sizeof(RMutableWeaponSettings_AddFloatPostAdditive) == 0x000010, "Wrong size on RMutableWeaponSettings_AddFloatPostAdditive");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPostAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddFloatPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPostAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddFloatPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPostAdditive, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddFloatPostAdditive::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddFloatPreAdditive
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddFloatPreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddFloatPreAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddFloatPreAdditive");
static_assert(sizeof(RMutableWeaponSettings_AddFloatPreAdditive) == 0x000010, "Wrong size on RMutableWeaponSettings_AddFloatPreAdditive");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPreAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddFloatPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPreAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddFloatPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddFloatPreAdditive, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddFloatPreAdditive::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddIntegerCoefficient
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddIntegerCoefficient final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddIntegerCoefficient) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddIntegerCoefficient");
static_assert(sizeof(RMutableWeaponSettings_AddIntegerCoefficient) == 0x000010, "Wrong size on RMutableWeaponSettings_AddIntegerCoefficient");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerCoefficient, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddIntegerCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerCoefficient, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddIntegerCoefficient::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerCoefficient, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddIntegerCoefficient::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddIntegerPostAdditive
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddIntegerPostAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddIntegerPostAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddIntegerPostAdditive");
static_assert(sizeof(RMutableWeaponSettings_AddIntegerPostAdditive) == 0x000010, "Wrong size on RMutableWeaponSettings_AddIntegerPostAdditive");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPostAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddIntegerPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPostAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddIntegerPostAdditive::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPostAdditive, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddIntegerPostAdditive::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.AddIntegerPreAdditive
// 0x0010 (0x0010 - 0x0000)
struct RMutableWeaponSettings_AddIntegerPreAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_AddIntegerPreAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_AddIntegerPreAdditive");
static_assert(sizeof(RMutableWeaponSettings_AddIntegerPreAdditive) == 0x000010, "Wrong size on RMutableWeaponSettings_AddIntegerPreAdditive");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPreAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_AddIntegerPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPreAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_AddIntegerPreAdditive::Key' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_AddIntegerPreAdditive, Value) == 0x00000C, "Member 'RMutableWeaponSettings_AddIntegerPreAdditive::Value' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.GetFloatTotalPositiveCoefficients
// 0x0008 (0x0008 - 0x0000)
struct RMutableWeaponSettings_GetFloatTotalPositiveCoefficients final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_GetFloatTotalPositiveCoefficients) == 0x000004, "Wrong alignment on RMutableWeaponSettings_GetFloatTotalPositiveCoefficients");
static_assert(sizeof(RMutableWeaponSettings_GetFloatTotalPositiveCoefficients) == 0x000008, "Wrong size on RMutableWeaponSettings_GetFloatTotalPositiveCoefficients");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositiveCoefficients, Stat) == 0x000000, "Member 'RMutableWeaponSettings_GetFloatTotalPositiveCoefficients::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositiveCoefficients, ReturnValue) == 0x000004, "Member 'RMutableWeaponSettings_GetFloatTotalPositiveCoefficients::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.GetFloatTotalPositivePostAdditive
// 0x0008 (0x0008 - 0x0000)
struct RMutableWeaponSettings_GetFloatTotalPositivePostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_GetFloatTotalPositivePostAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_GetFloatTotalPositivePostAdditive");
static_assert(sizeof(RMutableWeaponSettings_GetFloatTotalPositivePostAdditive) == 0x000008, "Wrong size on RMutableWeaponSettings_GetFloatTotalPositivePostAdditive");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositivePostAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_GetFloatTotalPositivePostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositivePostAdditive, ReturnValue) == 0x000004, "Member 'RMutableWeaponSettings_GetFloatTotalPositivePostAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.GetFloatTotalPositivePreAdditive
// 0x0008 (0x0008 - 0x0000)
struct RMutableWeaponSettings_GetFloatTotalPositivePreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_GetFloatTotalPositivePreAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_GetFloatTotalPositivePreAdditive");
static_assert(sizeof(RMutableWeaponSettings_GetFloatTotalPositivePreAdditive) == 0x000008, "Wrong size on RMutableWeaponSettings_GetFloatTotalPositivePreAdditive");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositivePreAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_GetFloatTotalPositivePreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_GetFloatTotalPositivePreAdditive, ReturnValue) == 0x000004, "Member 'RMutableWeaponSettings_GetFloatTotalPositivePreAdditive::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.GetFloatValue
// 0x0008 (0x0008 - 0x0000)
struct RMutableWeaponSettings_GetFloatValue final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_GetFloatValue) == 0x000004, "Wrong alignment on RMutableWeaponSettings_GetFloatValue");
static_assert(sizeof(RMutableWeaponSettings_GetFloatValue) == 0x000008, "Wrong size on RMutableWeaponSettings_GetFloatValue");
static_assert(offsetof(RMutableWeaponSettings_GetFloatValue, Stat) == 0x000000, "Member 'RMutableWeaponSettings_GetFloatValue::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_GetFloatValue, ReturnValue) == 0x000004, "Member 'RMutableWeaponSettings_GetFloatValue::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.GetIntegerValue
// 0x0008 (0x0008 - 0x0000)
struct RMutableWeaponSettings_GetIntegerValue final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_GetIntegerValue) == 0x000004, "Wrong alignment on RMutableWeaponSettings_GetIntegerValue");
static_assert(sizeof(RMutableWeaponSettings_GetIntegerValue) == 0x000008, "Wrong size on RMutableWeaponSettings_GetIntegerValue");
static_assert(offsetof(RMutableWeaponSettings_GetIntegerValue, Stat) == 0x000000, "Member 'RMutableWeaponSettings_GetIntegerValue::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_GetIntegerValue, ReturnValue) == 0x000004, "Member 'RMutableWeaponSettings_GetIntegerValue::ReturnValue' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveFloatCoefficient
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveFloatCoefficient final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveFloatCoefficient) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveFloatCoefficient");
static_assert(sizeof(RMutableWeaponSettings_RemoveFloatCoefficient) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveFloatCoefficient");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatCoefficient, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveFloatCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatCoefficient, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveFloatCoefficient::Key' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveFloatPostAdditive
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveFloatPostAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveFloatPostAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveFloatPostAdditive");
static_assert(sizeof(RMutableWeaponSettings_RemoveFloatPostAdditive) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveFloatPostAdditive");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatPostAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveFloatPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatPostAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveFloatPostAdditive::Key' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveFloatPreAdditive
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveFloatPreAdditive final
{
public:
	EFloatWeaponStat                              Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveFloatPreAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveFloatPreAdditive");
static_assert(sizeof(RMutableWeaponSettings_RemoveFloatPreAdditive) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveFloatPreAdditive");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatPreAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveFloatPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveFloatPreAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveFloatPreAdditive::Key' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveIntegerCoefficient
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveIntegerCoefficient final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveIntegerCoefficient) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveIntegerCoefficient");
static_assert(sizeof(RMutableWeaponSettings_RemoveIntegerCoefficient) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveIntegerCoefficient");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerCoefficient, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveIntegerCoefficient::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerCoefficient, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveIntegerCoefficient::Key' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveIntegerPostAdditive
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveIntegerPostAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveIntegerPostAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveIntegerPostAdditive");
static_assert(sizeof(RMutableWeaponSettings_RemoveIntegerPostAdditive) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveIntegerPostAdditive");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerPostAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveIntegerPostAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerPostAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveIntegerPostAdditive::Key' has a wrong offset!");

// Function RGame.RMutableWeaponSettings.RemoveIntegerPreAdditive
// 0x000C (0x000C - 0x0000)
struct RMutableWeaponSettings_RemoveIntegerPreAdditive final
{
public:
	EIntegerWeaponStat                            Stat;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RMutableWeaponSettings_RemoveIntegerPreAdditive) == 0x000004, "Wrong alignment on RMutableWeaponSettings_RemoveIntegerPreAdditive");
static_assert(sizeof(RMutableWeaponSettings_RemoveIntegerPreAdditive) == 0x00000C, "Wrong size on RMutableWeaponSettings_RemoveIntegerPreAdditive");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerPreAdditive, Stat) == 0x000000, "Member 'RMutableWeaponSettings_RemoveIntegerPreAdditive::Stat' has a wrong offset!");
static_assert(offsetof(RMutableWeaponSettings_RemoveIntegerPreAdditive, Key) == 0x000004, "Member 'RMutableWeaponSettings_RemoveIntegerPreAdditive::Key' has a wrong offset!");

// Function RGame.RWeaponWorkbench.SortListOptions
// 0x0010 (0x0010 - 0x0000)
struct RWeaponWorkbench_SortListOptions final
{
public:
	TArray<class URPrimaryDataAsset*>             Options;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponWorkbench_SortListOptions) == 0x000008, "Wrong alignment on RWeaponWorkbench_SortListOptions");
static_assert(sizeof(RWeaponWorkbench_SortListOptions) == 0x000010, "Wrong size on RWeaponWorkbench_SortListOptions");
static_assert(offsetof(RWeaponWorkbench_SortListOptions, Options) == 0x000000, "Member 'RWeaponWorkbench_SortListOptions::Options' has a wrong offset!");

// Function RGame.RWeaponWorkbench.UpdateBody
// 0x0010 (0x0010 - 0x0000)
struct RWeaponWorkbench_UpdateBody final
{
public:
	class URWeaponPrimaryAsset*                   NewPrimaryAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponWorkbench_UpdateBody) == 0x000008, "Wrong alignment on RWeaponWorkbench_UpdateBody");
static_assert(sizeof(RWeaponWorkbench_UpdateBody) == 0x000010, "Wrong size on RWeaponWorkbench_UpdateBody");
static_assert(offsetof(RWeaponWorkbench_UpdateBody, NewPrimaryAsset) == 0x000000, "Member 'RWeaponWorkbench_UpdateBody::NewPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RWeaponWorkbench_UpdateBody, Controller) == 0x000008, "Member 'RWeaponWorkbench_UpdateBody::Controller' has a wrong offset!");

// Function RGame.RWeaponWorkbench.UpdateMod
// 0x0010 (0x0010 - 0x0000)
struct RWeaponWorkbench_UpdateMod final
{
public:
	class URWeaponModPrimaryAsset*                NewPrimaryAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponModAttachmentSlot                      TargetAttachmentSlot;                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RWeaponWorkbench_UpdateMod) == 0x000008, "Wrong alignment on RWeaponWorkbench_UpdateMod");
static_assert(sizeof(RWeaponWorkbench_UpdateMod) == 0x000010, "Wrong size on RWeaponWorkbench_UpdateMod");
static_assert(offsetof(RWeaponWorkbench_UpdateMod, NewPrimaryAsset) == 0x000000, "Member 'RWeaponWorkbench_UpdateMod::NewPrimaryAsset' has a wrong offset!");
static_assert(offsetof(RWeaponWorkbench_UpdateMod, TargetAttachmentSlot) == 0x000008, "Member 'RWeaponWorkbench_UpdateMod::TargetAttachmentSlot' has a wrong offset!");

// Function RGame.RWeaponWorkbench.GetCurrentBody
// 0x0008 (0x0008 - 0x0000)
struct RWeaponWorkbench_GetCurrentBody final
{
public:
	TSubclassOf<class ARWeapon>                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponWorkbench_GetCurrentBody) == 0x000008, "Wrong alignment on RWeaponWorkbench_GetCurrentBody");
static_assert(sizeof(RWeaponWorkbench_GetCurrentBody) == 0x000008, "Wrong size on RWeaponWorkbench_GetCurrentBody");
static_assert(offsetof(RWeaponWorkbench_GetCurrentBody, ReturnValue) == 0x000000, "Member 'RWeaponWorkbench_GetCurrentBody::ReturnValue' has a wrong offset!");

// Function RGame.RWeaponWorkbench.GetCurrentWeaponPrimaryAsset
// 0x0008 (0x0008 - 0x0000)
struct RWeaponWorkbench_GetCurrentWeaponPrimaryAsset final
{
public:
	class URWeaponPrimaryAsset*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeaponWorkbench_GetCurrentWeaponPrimaryAsset) == 0x000008, "Wrong alignment on RWeaponWorkbench_GetCurrentWeaponPrimaryAsset");
static_assert(sizeof(RWeaponWorkbench_GetCurrentWeaponPrimaryAsset) == 0x000008, "Wrong size on RWeaponWorkbench_GetCurrentWeaponPrimaryAsset");
static_assert(offsetof(RWeaponWorkbench_GetCurrentWeaponPrimaryAsset, ReturnValue) == 0x000000, "Member 'RWeaponWorkbench_GetCurrentWeaponPrimaryAsset::ReturnValue' has a wrong offset!");

// Function RGame.RWeapon_EngineRifle.ToggleSecondaryModFX
// 0x0001 (0x0001 - 0x0000)
struct RWeapon_EngineRifle_ToggleSecondaryModFX final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RWeapon_EngineRifle_ToggleSecondaryModFX) == 0x000001, "Wrong alignment on RWeapon_EngineRifle_ToggleSecondaryModFX");
static_assert(sizeof(RWeapon_EngineRifle_ToggleSecondaryModFX) == 0x000001, "Wrong size on RWeapon_EngineRifle_ToggleSecondaryModFX");
static_assert(offsetof(RWeapon_EngineRifle_ToggleSecondaryModFX, bNewVisibility) == 0x000000, "Member 'RWeapon_EngineRifle_ToggleSecondaryModFX::bNewVisibility' has a wrong offset!");

}

