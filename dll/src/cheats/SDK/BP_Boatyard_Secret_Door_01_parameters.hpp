#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Boatyard_Secret_Door_01

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_CanInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_CanInteract) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_CanInteract");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_CanInteract) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_CanInteract");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_CanInteract, Controller) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_CanInteract::Controller' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_CanInteract, ReturnValue) == 0x000008, "Member 'BP_Boatyard_Secret_Door_01_C_CanInteract::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.ExecuteUbergraph_BP_Boatyard_Secret_Door_01
// 0x0288 (0x0288 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0020(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_controller_2;                         // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_Event_controller_1;                         // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_InteractingActor;                     // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewVisible;                           // 0x0160(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_controller;                           // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0170(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0270(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_1;         // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPlayRate_NewRate_ImplicitCast;         // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01) == 0x000288, "Wrong size on BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, EntryPoint) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_VLerp_ReturnValue) == 0x000008, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000020, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_VLerp_ReturnValue_1) == 0x000120, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000138, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, K2Node_Event_controller_2) == 0x000148, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::K2Node_Event_controller_2' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, K2Node_Event_controller_1) == 0x000150, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::K2Node_Event_controller_1' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, K2Node_Event_InteractingActor) == 0x000158, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::K2Node_Event_InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, K2Node_Event_NewVisible) == 0x000160, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::K2Node_Event_NewVisible' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, K2Node_Event_controller) == 0x000168, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::K2Node_Event_controller' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000170, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000270, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_SpawnSoundAttached_ReturnValue_1) == 0x000278, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_SpawnSoundAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01, CallFunc_SetPlayRate_NewRate_ImplicitCast) == 0x000280, "Member 'BP_Boatyard_Secret_Door_01_C_ExecuteUbergraph_BP_Boatyard_Secret_Door_01::CallFunc_SetPlayRate_NewRate_ImplicitCast' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.OnFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_OnFocus final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_OnFocus) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_OnFocus");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_OnFocus) == 0x000008, "Wrong size on BP_Boatyard_Secret_Door_01_C_OnFocus");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_OnFocus, Controller) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_OnFocus::Controller' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.OnFocusGone
// 0x0008 (0x0008 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_OnFocusGone final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_OnFocusGone) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_OnFocusGone");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_OnFocusGone) == 0x000008, "Wrong size on BP_Boatyard_Secret_Door_01_C_OnFocusGone");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_OnFocusGone, Controller) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_OnFocusGone::Controller' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_OnInteract final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_OnInteract) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_OnInteract");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_OnInteract) == 0x000008, "Wrong size on BP_Boatyard_Secret_Door_01_C_OnInteract");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_OnInteract, Controller) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_OnInteract::Controller' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.ToggleInteractionIndicatorVisibility
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility final
{
public:
	class AActor*                                 InteractingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVisible;                                        // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility, InteractingActor) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility::InteractingActor' has a wrong offset!");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility, NewVisible) == 0x000008, "Member 'BP_Boatyard_Secret_Door_01_C_ToggleInteractionIndicatorVisibility::NewVisible' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableAlternativeDescription
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableAlternativeDescription::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableCost
// 0x0004 (0x0004 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableCost) == 0x000004, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableCost");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableCost) == 0x000004, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableCost");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableCost, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableCost::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableCostCurrencyType
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableCostCurrencyType::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableDescription
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableDescription) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableDescription");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableDescription) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableDescription");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableDescription, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableDescription::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableName
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableName) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableName");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableName) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableName");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableName, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableName::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractableSubHeader
// 0x0010 (0x0010 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader) == 0x000010, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractableSubHeader::ReturnValue' has a wrong offset!");

// Function BP_Boatyard_Secret_Door_01.BP_Boatyard_Secret_Door_01_C.GetInteractionIndicatorWidget
// 0x0008 (0x0008 - 0x0000)
struct BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget final
{
public:
	class UWidgetComponent*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget) == 0x000008, "Wrong alignment on BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget");
static_assert(sizeof(BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget) == 0x000008, "Wrong size on BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget");
static_assert(offsetof(BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget, ReturnValue) == 0x000000, "Member 'BP_Boatyard_Secret_Door_01_C_GetInteractionIndicatorWidget::ReturnValue' has a wrong offset!");

}

