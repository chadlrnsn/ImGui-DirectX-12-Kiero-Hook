#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DungeonGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DungeonGameMode.BP_DungeonGameMode_C
// 0x0040 (0x0448 - 0x0408)
class ABP_DungeonGameMode_C final : public ARDungeonGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomNodeId;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomNodeIndex;                                   // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           VoteToProceedTimer;                                // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         VoteToProceedTimeLeft;                             // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateWaitingForPlayersHandle;                     // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BPVoteToProceedTimerDuration;                      // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStartedUnGluTeleport;                           // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldClearVotes;                                 // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void VoteToProceedStartTimer();
	void VoteToProceedShortcutBP(class ARGamePlayerController* VotingPlayer);
	void VoteToProceedShortcut(class ARGamePlayerController* VotingPlayer);
	void VoteToProceedPortalBP();
	void VoteToProceedPortal();
	void UpdateWaitingForPlayersStatus(bool* IsDone);
	void UpdateWaitingForPlayersEvent();
	void Success_2EB2ADF74DF25EBBAFD42B8BBC2DF16D(const class FString& Error);
	void StopWaitingForPlayer(class ARGamePlayerController* GamePlayerController);
	void StartWaitingForPlayers(class ARGamePlayerController* GamePlayerController);
	void ShouldClearVotesAndTimers(bool* DidClear);
	void SetPrereleaseSaveGameDataFlag();
	void SetDemoSaveGameDataFlag();
	float ReevaluateDifficultyCoefficient();
	void ReceiveBeginPlay();
	void OnStartRun();
	void Get_Num_Players_Waiting(int32* NumPlayersWaiting);
	void FinishWaitingForPlayers();
	void FinishWaiting();
	void FinishedWaitingForPlayers();
	void Fail_2EB2ADF74DF25EBBAFD42B8BBC2DF16D(const class FString& Error);
	void ExecuteUbergraph_BP_DungeonGameMode(int32 EntryPoint);
	void ClearVoteTimer();
	void BroadcastOnVoteToProceedTimerTick();
	void Broadcast_On_Vote_To_Proceed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DungeonGameMode_C">();
	}
	static class ABP_DungeonGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DungeonGameMode_C>();
	}
};
static_assert(alignof(ABP_DungeonGameMode_C) == 0x000008, "Wrong alignment on ABP_DungeonGameMode_C");
static_assert(sizeof(ABP_DungeonGameMode_C) == 0x000448, "Wrong size on ABP_DungeonGameMode_C");
static_assert(offsetof(ABP_DungeonGameMode_C, UberGraphFrame) == 0x000408, "Member 'ABP_DungeonGameMode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, DefaultSceneRoot) == 0x000410, "Member 'ABP_DungeonGameMode_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, RandomNodeId) == 0x000418, "Member 'ABP_DungeonGameMode_C::RandomNodeId' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, RandomNodeIndex) == 0x00041C, "Member 'ABP_DungeonGameMode_C::RandomNodeIndex' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, VoteToProceedTimer) == 0x000420, "Member 'ABP_DungeonGameMode_C::VoteToProceedTimer' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, VoteToProceedTimeLeft) == 0x000428, "Member 'ABP_DungeonGameMode_C::VoteToProceedTimeLeft' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, UpdateWaitingForPlayersHandle) == 0x000430, "Member 'ABP_DungeonGameMode_C::UpdateWaitingForPlayersHandle' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, BPVoteToProceedTimerDuration) == 0x000438, "Member 'ABP_DungeonGameMode_C::BPVoteToProceedTimerDuration' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, HasStartedUnGluTeleport) == 0x000440, "Member 'ABP_DungeonGameMode_C::HasStartedUnGluTeleport' has a wrong offset!");
static_assert(offsetof(ABP_DungeonGameMode_C, bShouldClearVotes) == 0x000441, "Member 'ABP_DungeonGameMode_C::bShouldClearVotes' has a wrong offset!");

}

