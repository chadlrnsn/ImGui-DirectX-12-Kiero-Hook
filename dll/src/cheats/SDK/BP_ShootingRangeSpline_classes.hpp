#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRangeSpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShootingRangeSpline.BP_ShootingRangeSpline_C
// 0x0080 (0x0328 - 0x02A8)
class ABP_ShootingRangeSpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PreviewMesh;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Preview;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_ShootingRangeDummy_C*               TargetDummy;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MovementTimer;                                     // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AccumulatedTime;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SplineLenght;                                      // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ABP_ShootingRangeDummy_C>   Dummy;                                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAudioComponent*                        MovementAC;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        StartTime;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate(int32 ID, bool Positive);
	void BP_ShootingRangeSpline_AutoGenFunc(bool* RetValue);
	void EvaluateTargeLocationTick();
	void ExecuteUbergraph_BP_ShootingRangeSpline(int32 EntryPoint);
	void GetSplineTimeForAccumulatedTime(double* SplineTime);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetDummyLocation();
	void StartMovement();
	void StopMovement();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShootingRangeSpline_C">();
	}
	static class ABP_ShootingRangeSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ShootingRangeSpline_C>();
	}
};
static_assert(alignof(ABP_ShootingRangeSpline_C) == 0x000008, "Wrong alignment on ABP_ShootingRangeSpline_C");
static_assert(sizeof(ABP_ShootingRangeSpline_C) == 0x000328, "Wrong size on ABP_ShootingRangeSpline_C");
static_assert(offsetof(ABP_ShootingRangeSpline_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_ShootingRangeSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, PreviewMesh) == 0x0002B0, "Member 'ABP_ShootingRangeSpline_C::PreviewMesh' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, Preview) == 0x0002B8, "Member 'ABP_ShootingRangeSpline_C::Preview' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, Billboard) == 0x0002C0, "Member 'ABP_ShootingRangeSpline_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, Spline) == 0x0002C8, "Member 'ABP_ShootingRangeSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, TargetDummy) == 0x0002D0, "Member 'ABP_ShootingRangeSpline_C::TargetDummy' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, Speed) == 0x0002D8, "Member 'ABP_ShootingRangeSpline_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, MovementTimer) == 0x0002E0, "Member 'ABP_ShootingRangeSpline_C::MovementTimer' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, TargetLocation) == 0x0002E8, "Member 'ABP_ShootingRangeSpline_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, AccumulatedTime) == 0x000300, "Member 'ABP_ShootingRangeSpline_C::AccumulatedTime' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, SplineLenght) == 0x000308, "Member 'ABP_ShootingRangeSpline_C::SplineLenght' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, Dummy) == 0x000310, "Member 'ABP_ShootingRangeSpline_C::Dummy' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, MovementAC) == 0x000318, "Member 'ABP_ShootingRangeSpline_C::MovementAC' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRangeSpline_C, StartTime) == 0x000320, "Member 'ABP_ShootingRangeSpline_C::StartTime' has a wrong offset!");

}

