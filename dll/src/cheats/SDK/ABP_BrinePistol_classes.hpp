#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BrinePistol

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_BrinePistol.ABP_BrinePistol_C
// 0x05F0 (0x0B50 - 0x0560)
class UABP_BrinePistol_C final : public URWeaponAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0560(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0568(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0570(0x0008)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0578(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x06A0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x06C0(0x0128)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x07E8(0x0048)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0830(0x0020)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0850(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0870(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x08B8(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x09E0(0x0128)()
	class UBP_Base_ModScript_C*                   Object;                                            // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          In_ADS;                                            // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B11[0x7];                                      // 0x0B11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CylinderRotation;                                  // 0x0B18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               Target_CylinderRotation;                           // 0x0B30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Cylider_Alpha;                                     // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BrinePistol_AnimGraphNode_ModifyBone_0E5752BC4785679DF4BCB7B697F391A1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BrinePistol_AnimGraphNode_ModifyBone_3A4C1FE74662D94F42B6F0B8AFEEDEBB();
	void ExecuteUbergraph_ABP_BrinePistol(int32 EntryPoint);
	void OnWeaponFired(bool IsPrimaryMod);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_BrinePistol_C">();
	}
	static class UABP_BrinePistol_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_BrinePistol_C>();
	}
};
static_assert(alignof(UABP_BrinePistol_C) == 0x000010, "Wrong alignment on UABP_BrinePistol_C");
static_assert(sizeof(UABP_BrinePistol_C) == 0x000B50, "Wrong size on UABP_BrinePistol_C");
static_assert(offsetof(UABP_BrinePistol_C, UberGraphFrame) == 0x000560, "Member 'UABP_BrinePistol_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimBlueprintExtension_PropertyAccess) == 0x000568, "Member 'UABP_BrinePistol_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimBlueprintExtension_Base) == 0x000570, "Member 'UABP_BrinePistol_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_ModifyBone_3) == 0x000578, "Member 'UABP_BrinePistol_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_LocalToComponentSpace) == 0x0006A0, "Member 'UABP_BrinePistol_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_ModifyBone_2) == 0x0006C0, "Member 'UABP_BrinePistol_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_Slot) == 0x0007E8, "Member 'UABP_BrinePistol_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_ComponentToLocalSpace) == 0x000830, "Member 'UABP_BrinePistol_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_Root) == 0x000850, "Member 'UABP_BrinePistol_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_SequencePlayer) == 0x000870, "Member 'UABP_BrinePistol_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_ModifyBone_1) == 0x0008B8, "Member 'UABP_BrinePistol_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, AnimGraphNode_ModifyBone) == 0x0009E0, "Member 'UABP_BrinePistol_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, Object) == 0x000B08, "Member 'UABP_BrinePistol_C::Object' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, In_ADS) == 0x000B10, "Member 'UABP_BrinePistol_C::In_ADS' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, CylinderRotation) == 0x000B18, "Member 'UABP_BrinePistol_C::CylinderRotation' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, Target_CylinderRotation) == 0x000B30, "Member 'UABP_BrinePistol_C::Target_CylinderRotation' has a wrong offset!");
static_assert(offsetof(UABP_BrinePistol_C, Cylider_Alpha) == 0x000B48, "Member 'UABP_BrinePistol_C::Cylider_Alpha' has a wrong offset!");

}

