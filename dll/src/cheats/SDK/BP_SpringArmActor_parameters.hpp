#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpringArmActor

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_SpringArmActor.BP_SpringArmActor_C.ExecuteUbergraph_BP_SpringArmActor
// 0x0028 (0x0028 - 0x0000)
struct BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Turret;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor) == 0x000008, "Wrong alignment on BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor");
static_assert(sizeof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor) == 0x000028, "Wrong size on BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor");
static_assert(offsetof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor, EntryPoint) == 0x000000, "Member 'BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor, K2Node_CustomEvent_Turret) == 0x000018, "Member 'BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor::K2Node_CustomEvent_Turret' has a wrong offset!");
static_assert(offsetof(BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor, K2Node_CustomEvent_DestroyedActor) == 0x000020, "Member 'BP_SpringArmActor_C_ExecuteUbergraph_BP_SpringArmActor::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");

// Function BP_SpringArmActor.BP_SpringArmActor_C.OnTurretDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BP_SpringArmActor_C_OnTurretDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpringArmActor_C_OnTurretDestroyed) == 0x000008, "Wrong alignment on BP_SpringArmActor_C_OnTurretDestroyed");
static_assert(sizeof(BP_SpringArmActor_C_OnTurretDestroyed) == 0x000008, "Wrong size on BP_SpringArmActor_C_OnTurretDestroyed");
static_assert(offsetof(BP_SpringArmActor_C_OnTurretDestroyed, DestroyedActor) == 0x000000, "Member 'BP_SpringArmActor_C_OnTurretDestroyed::DestroyedActor' has a wrong offset!");

// Function BP_SpringArmActor.BP_SpringArmActor_C.SetTurretRef
// 0x0008 (0x0008 - 0x0000)
struct BP_SpringArmActor_C_SetTurretRef final
{
public:
	class AActor*                                 Turret;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SpringArmActor_C_SetTurretRef) == 0x000008, "Wrong alignment on BP_SpringArmActor_C_SetTurretRef");
static_assert(sizeof(BP_SpringArmActor_C_SetTurretRef) == 0x000008, "Wrong size on BP_SpringArmActor_C_SetTurretRef");
static_assert(offsetof(BP_SpringArmActor_C_SetTurretRef, Turret) == 0x000000, "Member 'BP_SpringArmActor_C_SetTurretRef::Turret' has a wrong offset!");

}

