#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NNEDenoiser

#include "Basic.hpp"

#include "NNEDenoiser_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class NNEDenoiser.NNEDenoiserAsset
// 0x0088 (0x00B8 - 0x0030)
class UNNEDenoiserAsset final : public UDataAsset
{
public:
	TSoftObjectPtr<class UNNEModelData>           ModelData;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              InputMapping;                                      // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              OutputMapping;                                     // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTilingConfig                          TilingConfig;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NNEDenoiserAsset">();
	}
	static class UNNEDenoiserAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNNEDenoiserAsset>();
	}
};
static_assert(alignof(UNNEDenoiserAsset) == 0x000008, "Wrong alignment on UNNEDenoiserAsset");
static_assert(sizeof(UNNEDenoiserAsset) == 0x0000B8, "Wrong size on UNNEDenoiserAsset");
static_assert(offsetof(UNNEDenoiserAsset, ModelData) == 0x000030, "Member 'UNNEDenoiserAsset::ModelData' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserAsset, InputMapping) == 0x000058, "Member 'UNNEDenoiserAsset::InputMapping' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserAsset, OutputMapping) == 0x000080, "Member 'UNNEDenoiserAsset::OutputMapping' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserAsset, TilingConfig) == 0x0000A8, "Member 'UNNEDenoiserAsset::TilingConfig' has a wrong offset!");

// Class NNEDenoiser.NNEDenoiserTemporalAsset
// 0x0088 (0x00B8 - 0x0030)
class UNNEDenoiserTemporalAsset final : public UDataAsset
{
public:
	TSoftObjectPtr<class UNNEModelData>           ModelData;                                         // 0x0030(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              InputMapping;                                      // 0x0058(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              OutputMapping;                                     // 0x0080(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTilingConfig                          TilingConfig;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NNEDenoiserTemporalAsset">();
	}
	static class UNNEDenoiserTemporalAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNNEDenoiserTemporalAsset>();
	}
};
static_assert(alignof(UNNEDenoiserTemporalAsset) == 0x000008, "Wrong alignment on UNNEDenoiserTemporalAsset");
static_assert(sizeof(UNNEDenoiserTemporalAsset) == 0x0000B8, "Wrong size on UNNEDenoiserTemporalAsset");
static_assert(offsetof(UNNEDenoiserTemporalAsset, ModelData) == 0x000030, "Member 'UNNEDenoiserTemporalAsset::ModelData' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserTemporalAsset, InputMapping) == 0x000058, "Member 'UNNEDenoiserTemporalAsset::InputMapping' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserTemporalAsset, OutputMapping) == 0x000080, "Member 'UNNEDenoiserTemporalAsset::OutputMapping' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserTemporalAsset, TilingConfig) == 0x0000A8, "Member 'UNNEDenoiserTemporalAsset::TilingConfig' has a wrong offset!");

// Class NNEDenoiser.NNEDenoiserSettings
// 0x0068 (0x00A0 - 0x0038)
class UNNEDenoiserSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	TSoftObjectPtr<class UNNEDenoiserAsset>       DenoiserAsset;                                     // 0x0038(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x28];                                      // 0x0060(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	EDenoiserRuntimeType                          RuntimeType;                                       // 0x0088(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RuntimeName;                                       // 0x0090(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NNEDenoiserSettings">();
	}
	static class UNNEDenoiserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNNEDenoiserSettings>();
	}
};
static_assert(alignof(UNNEDenoiserSettings) == 0x000008, "Wrong alignment on UNNEDenoiserSettings");
static_assert(sizeof(UNNEDenoiserSettings) == 0x0000A0, "Wrong size on UNNEDenoiserSettings");
static_assert(offsetof(UNNEDenoiserSettings, DenoiserAsset) == 0x000038, "Member 'UNNEDenoiserSettings::DenoiserAsset' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserSettings, RuntimeType) == 0x000088, "Member 'UNNEDenoiserSettings::RuntimeType' has a wrong offset!");
static_assert(offsetof(UNNEDenoiserSettings, RuntimeName) == 0x000090, "Member 'UNNEDenoiserSettings::RuntimeName' has a wrong offset!");

}

