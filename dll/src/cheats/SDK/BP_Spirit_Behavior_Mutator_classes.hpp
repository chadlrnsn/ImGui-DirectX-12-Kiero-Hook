#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spirit_Behavior_Mutator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Spirit_Behavior_Mutator.BP_Spirit_Behavior_Mutator_C
// 0x0050 (0x0198 - 0x0148)
class UBP_Spirit_Behavior_Mutator_C : public URBehaviorScriptSpirit
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0148(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        OrbSpawnInterval;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrbsSpawnHorizontalOffset;                         // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrbsSpawnVerticalOffset;                           // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopActive;                                        // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentTriggerDamage;                              // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentTriggerTarget;                              // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSpiritSpawnAmount;                          // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpawnSpiritOrbTimerEvent;                          // 0x0180(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SpawningLoopAC;                                    // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AvatarActor;                                       // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddGaugeExternal(int32 ExtraGauge);
	void AddPassive9StatusEffect();
	void CheckSpiritMinorBlessing(bool* Result, double* Multiplier);
	void CheckSpiritPassive5(bool* Result, double* Multiplier);
	void CheckSpiritPassive9(bool* Result);
	void ExecuteUbergraph_BP_Spirit_Behavior_Mutator(int32 EntryPoint);
	void GetRandomValidTarget(class AActor** TargetActor);
	void GetSpawnTransform(class AActor* Actor, struct FTransform* OutputPin);
	double GetSpiritOrbDamage();
	void K2_ActivateScript();
	void K2_DeactivateScript();
	void NativeActivateSpiritSpawning(class AActor* TriggerTarget, float TriggerDamage);
	void NativeAddGaugeExternal(const int32 ExtraGauge);
	void OnFail_F57DEAA64375D569AE616FAE82395AED();
	void OnProjectileSpawned_F57DEAA64375D569AE616FAE82395AED(class ARProjectileBase* Projectile);
	void SetSpiritGaugeHudWidgetVisibilty(ESlateVisibility BarrierGaugeVisibility);
	void SetSpiritGaugeReset_Multicast();
	void ToggleSFX_Multicast(bool bPlaySound);
	void TrySpawnSpiritOrb();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Spirit_Behavior_Mutator_C">();
	}
	static class UBP_Spirit_Behavior_Mutator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Spirit_Behavior_Mutator_C>();
	}
};
static_assert(alignof(UBP_Spirit_Behavior_Mutator_C) == 0x000008, "Wrong alignment on UBP_Spirit_Behavior_Mutator_C");
static_assert(sizeof(UBP_Spirit_Behavior_Mutator_C) == 0x000198, "Wrong size on UBP_Spirit_Behavior_Mutator_C");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, UberGraphFrame) == 0x000148, "Member 'UBP_Spirit_Behavior_Mutator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, OrbSpawnInterval) == 0x000150, "Member 'UBP_Spirit_Behavior_Mutator_C::OrbSpawnInterval' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, OrbsSpawnHorizontalOffset) == 0x000158, "Member 'UBP_Spirit_Behavior_Mutator_C::OrbsSpawnHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, OrbsSpawnVerticalOffset) == 0x00015C, "Member 'UBP_Spirit_Behavior_Mutator_C::OrbsSpawnVerticalOffset' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, LoopActive) == 0x000160, "Member 'UBP_Spirit_Behavior_Mutator_C::LoopActive' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, CurrentTriggerDamage) == 0x000168, "Member 'UBP_Spirit_Behavior_Mutator_C::CurrentTriggerDamage' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, CurrentTriggerTarget) == 0x000170, "Member 'UBP_Spirit_Behavior_Mutator_C::CurrentTriggerTarget' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, CurrentSpiritSpawnAmount) == 0x000178, "Member 'UBP_Spirit_Behavior_Mutator_C::CurrentSpiritSpawnAmount' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, SpawnSpiritOrbTimerEvent) == 0x000180, "Member 'UBP_Spirit_Behavior_Mutator_C::SpawnSpiritOrbTimerEvent' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, SpawningLoopAC) == 0x000188, "Member 'UBP_Spirit_Behavior_Mutator_C::SpawningLoopAC' has a wrong offset!");
static_assert(offsetof(UBP_Spirit_Behavior_Mutator_C, AvatarActor) == 0x000190, "Member 'UBP_Spirit_Behavior_Mutator_C::AvatarActor' has a wrong offset!");

}

