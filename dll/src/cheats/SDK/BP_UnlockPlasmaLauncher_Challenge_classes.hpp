#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UnlockPlasmaLauncher_Challenge

#include "Basic.hpp"

#include "BP_UnlockWeapon_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UnlockPlasmaLauncher_Challenge.BP_UnlockPlasmaLauncher_Challenge_C
// 0x0028 (0x03D8 - 0x03B0)
class ABP_UnlockPlasmaLauncher_Challenge_C final : public ABP_UnlockWeapon_Base_C
{
public:
	class UPointLightComponent*                   PointLight;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UnlockPlasmaLauncher_Challenge_C">();
	}
	static class ABP_UnlockPlasmaLauncher_Challenge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UnlockPlasmaLauncher_Challenge_C>();
	}
};
static_assert(alignof(ABP_UnlockPlasmaLauncher_Challenge_C) == 0x000008, "Wrong alignment on ABP_UnlockPlasmaLauncher_Challenge_C");
static_assert(sizeof(ABP_UnlockPlasmaLauncher_Challenge_C) == 0x0003D8, "Wrong size on ABP_UnlockPlasmaLauncher_Challenge_C");
static_assert(offsetof(ABP_UnlockPlasmaLauncher_Challenge_C, PointLight) == 0x0003B0, "Member 'ABP_UnlockPlasmaLauncher_Challenge_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_UnlockPlasmaLauncher_Challenge_C, Niagara) == 0x0003B8, "Member 'ABP_UnlockPlasmaLauncher_Challenge_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_UnlockPlasmaLauncher_Challenge_C, SpotLight1) == 0x0003C0, "Member 'ABP_UnlockPlasmaLauncher_Challenge_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_UnlockPlasmaLauncher_Challenge_C, SpotLight) == 0x0003C8, "Member 'ABP_UnlockPlasmaLauncher_Challenge_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_UnlockPlasmaLauncher_Challenge_C, SkeletalMesh) == 0x0003D0, "Member 'ABP_UnlockPlasmaLauncher_Challenge_C::SkeletalMesh' has a wrong offset!");

}

