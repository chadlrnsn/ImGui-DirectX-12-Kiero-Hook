#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_HitReaction

#include "Basic.hpp"

#include "Widget_HitReaction_classes.hpp"
#include "Widget_HitReaction_parameters.hpp"


namespace SDK
{

// Function Widget_HitReaction.Widget_HitReaction_C.CheckLowHealth
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MissingHealthPercentage                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bGainedHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::CheckLowHealth(double MissingHealthPercentage, bool bGainedHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "CheckLowHealth");

	Params::Widget_HitReaction_C_CheckLowHealth Parms{};

	Parms.MissingHealthPercentage = MissingHealthPercentage;
	Parms.bGainedHealth = bGainedHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidget_HitReaction_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_HitReaction.Widget_HitReaction_C.ExecuteUbergraph_Widget_HitReaction
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::ExecuteUbergraph_Widget_HitReaction(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "ExecuteUbergraph_Widget_HitReaction");

	Params::Widget_HitReaction_C_ExecuteUbergraph_Widget_HitReaction Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.GetShotFromDirection
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::GetShotFromDirection(class AActor* Instigator, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "GetShotFromDirection");

	Params::Widget_HitReaction_C_GetShotFromDirection Parms{};

	Parms.Instigator = Instigator;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function Widget_HitReaction.Widget_HitReaction_C.LocationToScreenAngle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UWidget_HitReaction_C::LocationToScreenAngle(const struct FVector& A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "LocationToScreenAngle");

	Params::Widget_HitReaction_C_LocationToScreenAngle Parms{};

	Parms.A = std::move(A);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnDamageTaken
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FDamageCombatEvent&        DamageEvent                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWidget_HitReaction_C::OnDamageTaken(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnDamageTaken");

	Params::Widget_HitReaction_C_OnDamageTaken Parms{};

	Parms.Component = Component;
	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnDamageTakenTemp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FDamageCombatEvent&        DamageEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UWidget_HitReaction_C::OnDamageTakenTemp(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnDamageTakenTemp");

	Params::Widget_HitReaction_C_OnDamageTakenTemp Parms{};

	Parms.Component = Component;
	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnHealthDepleted
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FDamageCombatEvent&        DamageEventData                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void UWidget_HitReaction_C::OnHealthDepleted(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnHealthDepleted");

	Params::Widget_HitReaction_C_OnHealthDepleted Parms{};

	Parms.Component = Component;
	Parms.DamageEventData = std::move(DamageEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnHealthRegained
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   currentHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   healthDelta                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHealCombatEvent&          HealEvent                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UWidget_HitReaction_C::OnHealthRegained(class URHealthComponent* Component, float currentHealth, float healthDelta, const struct FHealCombatEvent& HealEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnHealthRegained");

	Params::Widget_HitReaction_C_OnHealthRegained Parms{};

	Parms.Component = Component;
	Parms.currentHealth = currentHealth;
	Parms.healthDelta = healthDelta;
	Parms.HealEvent = std::move(HealEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidget_HitReaction_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnMaximumHealthChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// float                                   MaximumHealth                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::OnMaximumHealthChanged(class URHealthComponent* Component, float MaximumHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnMaximumHealthChanged");

	Params::Widget_HitReaction_C_OnMaximumHealthChanged Parms{};

	Parms.Component = Component;
	Parms.MaximumHealth = MaximumHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.OnPlayerPawnRespawned
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARPlayerPawn*                     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::OnPlayerPawnRespawned(class ARPlayerPawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "OnPlayerPawnRespawned");

	Params::Widget_HitReaction_C_OnPlayerPawnRespawned Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_HitReaction.Widget_HitReaction_C.ResetLowHealthRadial
// (Private, BlueprintCallable, BlueprintEvent)

void UWidget_HitReaction_C::ResetLowHealthRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "ResetLowHealthRadial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_HitReaction.Widget_HitReaction_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_HitReaction_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_HitReaction_C", "Tick");

	Params::Widget_HitReaction_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}

}

