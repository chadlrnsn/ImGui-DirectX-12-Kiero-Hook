#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataflowCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DataflowCore.EDataflowMathConstantsEnum
// NumValues: 0x000E
enum class EDataflowMathConstantsEnum : uint8
{
	Dataflow_Math_Constants_Pi               = 0,
	Dataflow_Math_Constants_HalfPi           = 1,
	Dataflow_Math_Constants_TwoPi            = 2,
	Dataflow_Math_Constants_FourPi           = 3,
	Dataflow_Math_Constants_InvPi            = 4,
	Dataflow_Math_Constants_InvTwoPi         = 5,
	Dataflow_Math_Constants_Sqrt2            = 6,
	Dataflow_Math_Constants_InvSqrt2         = 7,
	Dataflow_Math_Constants_Sqrt3            = 8,
	Dataflow_Math_Constants_InvSqrt3         = 9,
	Dataflow_Math_Constants_E                = 10,
	Dataflow_Math_Constants_Gamma            = 11,
	Dataflow_Math_Constants_GoldenRatio      = 12,
	Dataflow_Math_Constants_Max              = 13,
};

// ScriptStruct DataflowCore.DataflowAnyType
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FDataflowAnyType
{
};
#pragma pack(pop)
static_assert(alignof(FDataflowAnyType) == 0x000001, "Wrong alignment on FDataflowAnyType");
static_assert(sizeof(FDataflowAnyType) == 0x000001, "Wrong size on FDataflowAnyType");

// ScriptStruct DataflowCore.DataflowAllTypes
// 0x0001 (0x0001 - 0x0000)
struct FDataflowAllTypes final : public FDataflowAnyType
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowAllTypes) == 0x000001, "Wrong alignment on FDataflowAllTypes");
static_assert(sizeof(FDataflowAllTypes) == 0x000001, "Wrong size on FDataflowAllTypes");

// ScriptStruct DataflowCore.DataflowNumericTypes
// 0x0008 (0x0008 - 0x0000)
struct FDataflowNumericTypes final : public FDataflowAnyType
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowNumericTypes) == 0x000008, "Wrong alignment on FDataflowNumericTypes");
static_assert(sizeof(FDataflowNumericTypes) == 0x000008, "Wrong size on FDataflowNumericTypes");
static_assert(offsetof(FDataflowNumericTypes, Value) == 0x000000, "Member 'FDataflowNumericTypes::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorTypes
// 0x0020 (0x0020 - 0x0000)
struct FDataflowVectorTypes final : public FDataflowAnyType
{
public:
	struct FVector4                               Value;                                             // 0x0000(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowVectorTypes) == 0x000010, "Wrong alignment on FDataflowVectorTypes");
static_assert(sizeof(FDataflowVectorTypes) == 0x000020, "Wrong size on FDataflowVectorTypes");
static_assert(offsetof(FDataflowVectorTypes, Value) == 0x000000, "Member 'FDataflowVectorTypes::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowStringTypes
// 0x0010 (0x0010 - 0x0000)
struct FDataflowStringTypes final : public FDataflowAnyType
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowStringTypes) == 0x000008, "Wrong alignment on FDataflowStringTypes");
static_assert(sizeof(FDataflowStringTypes) == 0x000010, "Wrong size on FDataflowStringTypes");
static_assert(offsetof(FDataflowStringTypes, Value) == 0x000000, "Member 'FDataflowStringTypes::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowStringConvertibleTypes
// 0x0010 (0x0010 - 0x0000)
struct FDataflowStringConvertibleTypes final : public FDataflowAnyType
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowStringConvertibleTypes) == 0x000008, "Wrong alignment on FDataflowStringConvertibleTypes");
static_assert(sizeof(FDataflowStringConvertibleTypes) == 0x000010, "Wrong size on FDataflowStringConvertibleTypes");
static_assert(offsetof(FDataflowStringConvertibleTypes, Value) == 0x000000, "Member 'FDataflowStringConvertibleTypes::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowUObjectConvertibleTypes
// 0x0008 (0x0008 - 0x0000)
struct FDataflowUObjectConvertibleTypes final : public FDataflowAnyType
{
public:
	class UObject*                                Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowUObjectConvertibleTypes) == 0x000008, "Wrong alignment on FDataflowUObjectConvertibleTypes");
static_assert(sizeof(FDataflowUObjectConvertibleTypes) == 0x000008, "Wrong size on FDataflowUObjectConvertibleTypes");
static_assert(offsetof(FDataflowUObjectConvertibleTypes, Value) == 0x000000, "Member 'FDataflowUObjectConvertibleTypes::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowNode
// 0x0198 (0x0198 - 0x0000)
struct alignas(0x08) FDataflowNode
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bActive;                                           // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0xCF];                                      // 0x00C9(0x00CF)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowNode) == 0x000008, "Wrong alignment on FDataflowNode");
static_assert(sizeof(FDataflowNode) == 0x000198, "Wrong size on FDataflowNode");
static_assert(offsetof(FDataflowNode, bActive) == 0x0000C8, "Member 'FDataflowNode::bActive' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowReRouteNode
// 0x0008 (0x01A0 - 0x0198)
struct FDataflowReRouteNode final : public FDataflowNode
{
public:
	struct FDataflowAnyType                       Value;                                             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowReRouteNode) == 0x000008, "Wrong alignment on FDataflowReRouteNode");
static_assert(sizeof(FDataflowReRouteNode) == 0x0001A0, "Wrong size on FDataflowReRouteNode");
static_assert(offsetof(FDataflowReRouteNode, Value) == 0x000198, "Member 'FDataflowReRouteNode::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowBranchNode
// 0x0008 (0x01A0 - 0x0198)
struct FDataflowBranchNode final : public FDataflowNode
{
public:
	struct FDataflowAnyType                       TrueValue;                                         // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataflowAnyType                       FalseValue;                                        // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCondition;                                        // 0x019A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataflowAnyType                       Result;                                            // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowBranchNode) == 0x000008, "Wrong alignment on FDataflowBranchNode");
static_assert(sizeof(FDataflowBranchNode) == 0x0001A0, "Wrong size on FDataflowBranchNode");
static_assert(offsetof(FDataflowBranchNode, TrueValue) == 0x000198, "Member 'FDataflowBranchNode::TrueValue' has a wrong offset!");
static_assert(offsetof(FDataflowBranchNode, FalseValue) == 0x000199, "Member 'FDataflowBranchNode::FalseValue' has a wrong offset!");
static_assert(offsetof(FDataflowBranchNode, bCondition) == 0x00019A, "Member 'FDataflowBranchNode::bCondition' has a wrong offset!");
static_assert(offsetof(FDataflowBranchNode, Result) == 0x00019B, "Member 'FDataflowBranchNode::Result' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowSelectNode
// 0x0018 (0x01B0 - 0x0198)
struct FDataflowSelectNode final : public FDataflowNode
{
public:
	TArray<struct FDataflowAnyType>               Inputs;                                            // 0x0198(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataflowAnyType                       Result;                                            // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowSelectNode) == 0x000008, "Wrong alignment on FDataflowSelectNode");
static_assert(sizeof(FDataflowSelectNode) == 0x0001B0, "Wrong size on FDataflowSelectNode");
static_assert(offsetof(FDataflowSelectNode, Inputs) == 0x000198, "Member 'FDataflowSelectNode::Inputs' has a wrong offset!");
static_assert(offsetof(FDataflowSelectNode, SelectedIndex) == 0x0001A8, "Member 'FDataflowSelectNode::SelectedIndex' has a wrong offset!");
static_assert(offsetof(FDataflowSelectNode, Result) == 0x0001AC, "Member 'FDataflowSelectNode::Result' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowPrintNode
// 0x0010 (0x01A8 - 0x0198)
struct FDataflowPrintNode final : public FDataflowNode
{
public:
	struct FDataflowStringConvertibleTypes        Value;                                             // 0x0198(0x0010)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowPrintNode) == 0x000008, "Wrong alignment on FDataflowPrintNode");
static_assert(sizeof(FDataflowPrintNode) == 0x0001A8, "Wrong size on FDataflowPrintNode");
static_assert(offsetof(FDataflowPrintNode, Value) == 0x000198, "Member 'FDataflowPrintNode::Value' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathOneInputOperatorNode
// 0x0010 (0x01A8 - 0x0198)
struct FDataflowMathOneInputOperatorNode : public FDataflowNode
{
public:
	struct FDataflowNumericTypes                  A;                                                 // 0x0198(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataflowNumericTypes                  Result;                                            // 0x01A0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathOneInputOperatorNode) == 0x000008, "Wrong alignment on FDataflowMathOneInputOperatorNode");
static_assert(sizeof(FDataflowMathOneInputOperatorNode) == 0x0001A8, "Wrong size on FDataflowMathOneInputOperatorNode");
static_assert(offsetof(FDataflowMathOneInputOperatorNode, A) == 0x000198, "Member 'FDataflowMathOneInputOperatorNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowMathOneInputOperatorNode, Result) == 0x0001A0, "Member 'FDataflowMathOneInputOperatorNode::Result' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathTwoInputsOperatorNode
// 0x0018 (0x01B0 - 0x0198)
struct FDataflowMathTwoInputsOperatorNode : public FDataflowNode
{
public:
	struct FDataflowNumericTypes                  A;                                                 // 0x0198(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataflowNumericTypes                  B;                                                 // 0x01A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDataflowNumericTypes                  Result;                                            // 0x01A8(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathTwoInputsOperatorNode) == 0x000008, "Wrong alignment on FDataflowMathTwoInputsOperatorNode");
static_assert(sizeof(FDataflowMathTwoInputsOperatorNode) == 0x0001B0, "Wrong size on FDataflowMathTwoInputsOperatorNode");
static_assert(offsetof(FDataflowMathTwoInputsOperatorNode, A) == 0x000198, "Member 'FDataflowMathTwoInputsOperatorNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowMathTwoInputsOperatorNode, B) == 0x0001A0, "Member 'FDataflowMathTwoInputsOperatorNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowMathTwoInputsOperatorNode, Result) == 0x0001A8, "Member 'FDataflowMathTwoInputsOperatorNode::Result' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathAddNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathAddNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathAddNode) == 0x000008, "Wrong alignment on FDataflowMathAddNode");
static_assert(sizeof(FDataflowMathAddNode) == 0x0001B0, "Wrong size on FDataflowMathAddNode");

// ScriptStruct DataflowCore.DataflowMathSubtractNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathSubtractNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathSubtractNode) == 0x000008, "Wrong alignment on FDataflowMathSubtractNode");
static_assert(sizeof(FDataflowMathSubtractNode) == 0x0001B0, "Wrong size on FDataflowMathSubtractNode");

// ScriptStruct DataflowCore.DataflowMathMultiplyNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathMultiplyNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathMultiplyNode) == 0x000008, "Wrong alignment on FDataflowMathMultiplyNode");
static_assert(sizeof(FDataflowMathMultiplyNode) == 0x0001B0, "Wrong size on FDataflowMathMultiplyNode");

// ScriptStruct DataflowCore.DataflowMathDivideNode
// 0x0008 (0x01B8 - 0x01B0)
struct FDataflowMathDivideNode final : public FDataflowMathTwoInputsOperatorNode
{
public:
	struct FDataflowNumericTypes                  Fallback;                                          // 0x01B0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathDivideNode) == 0x000008, "Wrong alignment on FDataflowMathDivideNode");
static_assert(sizeof(FDataflowMathDivideNode) == 0x0001B8, "Wrong size on FDataflowMathDivideNode");
static_assert(offsetof(FDataflowMathDivideNode, Fallback) == 0x0001B0, "Member 'FDataflowMathDivideNode::Fallback' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathMinimumNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathMinimumNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathMinimumNode) == 0x000008, "Wrong alignment on FDataflowMathMinimumNode");
static_assert(sizeof(FDataflowMathMinimumNode) == 0x0001B0, "Wrong size on FDataflowMathMinimumNode");

// ScriptStruct DataflowCore.DataflowMathMaximumNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathMaximumNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathMaximumNode) == 0x000008, "Wrong alignment on FDataflowMathMaximumNode");
static_assert(sizeof(FDataflowMathMaximumNode) == 0x0001B0, "Wrong size on FDataflowMathMaximumNode");

// ScriptStruct DataflowCore.DataflowMathReciprocalNode
// 0x0008 (0x01B0 - 0x01A8)
struct FDataflowMathReciprocalNode final : public FDataflowMathOneInputOperatorNode
{
public:
	struct FDataflowNumericTypes                  Fallback;                                          // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathReciprocalNode) == 0x000008, "Wrong alignment on FDataflowMathReciprocalNode");
static_assert(sizeof(FDataflowMathReciprocalNode) == 0x0001B0, "Wrong size on FDataflowMathReciprocalNode");
static_assert(offsetof(FDataflowMathReciprocalNode, Fallback) == 0x0001A8, "Member 'FDataflowMathReciprocalNode::Fallback' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathSquareNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathSquareNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathSquareNode) == 0x000008, "Wrong alignment on FDataflowMathSquareNode");
static_assert(sizeof(FDataflowMathSquareNode) == 0x0001A8, "Wrong size on FDataflowMathSquareNode");

// ScriptStruct DataflowCore.DataflowMathCubeNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathCubeNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathCubeNode) == 0x000008, "Wrong alignment on FDataflowMathCubeNode");
static_assert(sizeof(FDataflowMathCubeNode) == 0x0001A8, "Wrong size on FDataflowMathCubeNode");

// ScriptStruct DataflowCore.DataflowMathSquareRootNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathSquareRootNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathSquareRootNode) == 0x000008, "Wrong alignment on FDataflowMathSquareRootNode");
static_assert(sizeof(FDataflowMathSquareRootNode) == 0x0001A8, "Wrong size on FDataflowMathSquareRootNode");

// ScriptStruct DataflowCore.DataflowMathInverseSquareRootNode
// 0x0008 (0x01B0 - 0x01A8)
struct FDataflowMathInverseSquareRootNode final : public FDataflowMathOneInputOperatorNode
{
public:
	struct FDataflowNumericTypes                  Fallback;                                          // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathInverseSquareRootNode) == 0x000008, "Wrong alignment on FDataflowMathInverseSquareRootNode");
static_assert(sizeof(FDataflowMathInverseSquareRootNode) == 0x0001B0, "Wrong size on FDataflowMathInverseSquareRootNode");
static_assert(offsetof(FDataflowMathInverseSquareRootNode, Fallback) == 0x0001A8, "Member 'FDataflowMathInverseSquareRootNode::Fallback' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathNegateNode
// 0x0008 (0x01B0 - 0x01A8)
struct FDataflowMathNegateNode final : public FDataflowMathOneInputOperatorNode
{
public:
	struct FDataflowNumericTypes                  Fallback;                                          // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathNegateNode) == 0x000008, "Wrong alignment on FDataflowMathNegateNode");
static_assert(sizeof(FDataflowMathNegateNode) == 0x0001B0, "Wrong size on FDataflowMathNegateNode");
static_assert(offsetof(FDataflowMathNegateNode, Fallback) == 0x0001A8, "Member 'FDataflowMathNegateNode::Fallback' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathAbsNode
// 0x0008 (0x01B0 - 0x01A8)
struct FDataflowMathAbsNode final : public FDataflowMathOneInputOperatorNode
{
public:
	struct FDataflowNumericTypes                  Fallback;                                          // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathAbsNode) == 0x000008, "Wrong alignment on FDataflowMathAbsNode");
static_assert(sizeof(FDataflowMathAbsNode) == 0x0001B0, "Wrong size on FDataflowMathAbsNode");
static_assert(offsetof(FDataflowMathAbsNode, Fallback) == 0x0001A8, "Member 'FDataflowMathAbsNode::Fallback' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathFloorNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathFloorNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathFloorNode) == 0x000008, "Wrong alignment on FDataflowMathFloorNode");
static_assert(sizeof(FDataflowMathFloorNode) == 0x0001A8, "Wrong size on FDataflowMathFloorNode");

// ScriptStruct DataflowCore.DataflowMathCeilNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathCeilNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathCeilNode) == 0x000008, "Wrong alignment on FDataflowMathCeilNode");
static_assert(sizeof(FDataflowMathCeilNode) == 0x0001A8, "Wrong size on FDataflowMathCeilNode");

// ScriptStruct DataflowCore.DataflowMathRoundNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathRoundNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathRoundNode) == 0x000008, "Wrong alignment on FDataflowMathRoundNode");
static_assert(sizeof(FDataflowMathRoundNode) == 0x0001A8, "Wrong size on FDataflowMathRoundNode");

// ScriptStruct DataflowCore.DataflowMathTruncNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathTruncNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathTruncNode) == 0x000008, "Wrong alignment on FDataflowMathTruncNode");
static_assert(sizeof(FDataflowMathTruncNode) == 0x0001A8, "Wrong size on FDataflowMathTruncNode");

// ScriptStruct DataflowCore.DataflowMathFracNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathFracNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathFracNode) == 0x000008, "Wrong alignment on FDataflowMathFracNode");
static_assert(sizeof(FDataflowMathFracNode) == 0x0001A8, "Wrong size on FDataflowMathFracNode");

// ScriptStruct DataflowCore.DataflowMathPowNode
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathPowNode final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathPowNode) == 0x000008, "Wrong alignment on FDataflowMathPowNode");
static_assert(sizeof(FDataflowMathPowNode) == 0x0001B0, "Wrong size on FDataflowMathPowNode");

// ScriptStruct DataflowCore.DataflowMathLogXNode
// 0x0008 (0x01B0 - 0x01A8)
struct FDataflowMathLogXNode final : public FDataflowMathOneInputOperatorNode
{
public:
	struct FDataflowNumericTypes                  base;                                              // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathLogXNode) == 0x000008, "Wrong alignment on FDataflowMathLogXNode");
static_assert(sizeof(FDataflowMathLogXNode) == 0x0001B0, "Wrong size on FDataflowMathLogXNode");
static_assert(offsetof(FDataflowMathLogXNode, base) == 0x0001A8, "Member 'FDataflowMathLogXNode::base' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathLogNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathLogNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathLogNode) == 0x000008, "Wrong alignment on FDataflowMathLogNode");
static_assert(sizeof(FDataflowMathLogNode) == 0x0001A8, "Wrong size on FDataflowMathLogNode");

// ScriptStruct DataflowCore.DataflowMathExpNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathExpNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathExpNode) == 0x000008, "Wrong alignment on FDataflowMathExpNode");
static_assert(sizeof(FDataflowMathExpNode) == 0x0001A8, "Wrong size on FDataflowMathExpNode");

// ScriptStruct DataflowCore.DataflowMathSignNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathSignNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathSignNode) == 0x000008, "Wrong alignment on FDataflowMathSignNode");
static_assert(sizeof(FDataflowMathSignNode) == 0x0001A8, "Wrong size on FDataflowMathSignNode");

// ScriptStruct DataflowCore.DataflowMathOneMinusNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathOneMinusNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathOneMinusNode) == 0x000008, "Wrong alignment on FDataflowMathOneMinusNode");
static_assert(sizeof(FDataflowMathOneMinusNode) == 0x0001A8, "Wrong size on FDataflowMathOneMinusNode");

// ScriptStruct DataflowCore.DataflowMathConstantNode
// 0x0010 (0x01A8 - 0x0198)
struct FDataflowMathConstantNode final : public FDataflowNode
{
public:
	EDataflowMathConstantsEnum                    Constant;                                          // 0x0198(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowNumericTypes                  Result;                                            // 0x01A0(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowMathConstantNode) == 0x000008, "Wrong alignment on FDataflowMathConstantNode");
static_assert(sizeof(FDataflowMathConstantNode) == 0x0001A8, "Wrong size on FDataflowMathConstantNode");
static_assert(offsetof(FDataflowMathConstantNode, Constant) == 0x000198, "Member 'FDataflowMathConstantNode::Constant' has a wrong offset!");
static_assert(offsetof(FDataflowMathConstantNode, Result) == 0x0001A0, "Member 'FDataflowMathConstantNode::Result' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowMathSinNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathSinNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathSinNode) == 0x000008, "Wrong alignment on FDataflowMathSinNode");
static_assert(sizeof(FDataflowMathSinNode) == 0x0001A8, "Wrong size on FDataflowMathSinNode");

// ScriptStruct DataflowCore.DataflowMathCosNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathCosNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathCosNode) == 0x000008, "Wrong alignment on FDataflowMathCosNode");
static_assert(sizeof(FDataflowMathCosNode) == 0x0001A8, "Wrong size on FDataflowMathCosNode");

// ScriptStruct DataflowCore.DataflowMathTanNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathTanNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathTanNode) == 0x000008, "Wrong alignment on FDataflowMathTanNode");
static_assert(sizeof(FDataflowMathTanNode) == 0x0001A8, "Wrong size on FDataflowMathTanNode");

// ScriptStruct DataflowCore.DataflowMathArcSinNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathArcSinNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathArcSinNode) == 0x000008, "Wrong alignment on FDataflowMathArcSinNode");
static_assert(sizeof(FDataflowMathArcSinNode) == 0x0001A8, "Wrong size on FDataflowMathArcSinNode");

// ScriptStruct DataflowCore.DataflowMathArcCosNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathArcCosNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathArcCosNode) == 0x000008, "Wrong alignment on FDataflowMathArcCosNode");
static_assert(sizeof(FDataflowMathArcCosNode) == 0x0001A8, "Wrong size on FDataflowMathArcCosNode");

// ScriptStruct DataflowCore.DataflowMathArcTanNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathArcTanNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathArcTanNode) == 0x000008, "Wrong alignment on FDataflowMathArcTanNode");
static_assert(sizeof(FDataflowMathArcTanNode) == 0x0001A8, "Wrong size on FDataflowMathArcTanNode");

// ScriptStruct DataflowCore.DataflowMathArcTan2Node
// 0x0000 (0x01B0 - 0x01B0)
struct FDataflowMathArcTan2Node final : public FDataflowMathTwoInputsOperatorNode
{
};
static_assert(alignof(FDataflowMathArcTan2Node) == 0x000008, "Wrong alignment on FDataflowMathArcTan2Node");
static_assert(sizeof(FDataflowMathArcTan2Node) == 0x0001B0, "Wrong size on FDataflowMathArcTan2Node");

// ScriptStruct DataflowCore.DataflowMathDegToRadNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathDegToRadNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathDegToRadNode) == 0x000008, "Wrong alignment on FDataflowMathDegToRadNode");
static_assert(sizeof(FDataflowMathDegToRadNode) == 0x0001A8, "Wrong size on FDataflowMathDegToRadNode");

// ScriptStruct DataflowCore.DataflowMathRadToDegNode
// 0x0000 (0x01A8 - 0x01A8)
struct FDataflowMathRadToDegNode final : public FDataflowMathOneInputOperatorNode
{
};
static_assert(alignof(FDataflowMathRadToDegNode) == 0x000008, "Wrong alignment on FDataflowMathRadToDegNode");
static_assert(sizeof(FDataflowMathRadToDegNode) == 0x0001A8, "Wrong size on FDataflowMathRadToDegNode");

// ScriptStruct DataflowCore.DataflowVectorMakeVec2Node
// 0x0038 (0x01D0 - 0x0198)
struct FDataflowVectorMakeVec2Node final : public FDataflowNode
{
public:
	struct FDataflowNumericTypes                  X;                                                 // 0x0198(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Y;                                                 // 0x01A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A8[0x8];                                      // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   Vector2D;                                          // 0x01B0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorMakeVec2Node) == 0x000010, "Wrong alignment on FDataflowVectorMakeVec2Node");
static_assert(sizeof(FDataflowVectorMakeVec2Node) == 0x0001D0, "Wrong size on FDataflowVectorMakeVec2Node");
static_assert(offsetof(FDataflowVectorMakeVec2Node, X) == 0x000198, "Member 'FDataflowVectorMakeVec2Node::X' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec2Node, Y) == 0x0001A0, "Member 'FDataflowVectorMakeVec2Node::Y' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec2Node, Vector2D) == 0x0001B0, "Member 'FDataflowVectorMakeVec2Node::Vector2D' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorMakeVec3Node
// 0x0038 (0x01D0 - 0x0198)
struct FDataflowVectorMakeVec3Node final : public FDataflowNode
{
public:
	struct FDataflowNumericTypes                  X;                                                 // 0x0198(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Y;                                                 // 0x01A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Z;                                                 // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   Vector3d;                                          // 0x01B0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorMakeVec3Node) == 0x000010, "Wrong alignment on FDataflowVectorMakeVec3Node");
static_assert(sizeof(FDataflowVectorMakeVec3Node) == 0x0001D0, "Wrong size on FDataflowVectorMakeVec3Node");
static_assert(offsetof(FDataflowVectorMakeVec3Node, X) == 0x000198, "Member 'FDataflowVectorMakeVec3Node::X' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec3Node, Y) == 0x0001A0, "Member 'FDataflowVectorMakeVec3Node::Y' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec3Node, Z) == 0x0001A8, "Member 'FDataflowVectorMakeVec3Node::Z' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec3Node, Vector3d) == 0x0001B0, "Member 'FDataflowVectorMakeVec3Node::Vector3d' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorMakeVec4Node
// 0x0048 (0x01E0 - 0x0198)
struct FDataflowVectorMakeVec4Node final : public FDataflowNode
{
public:
	struct FDataflowNumericTypes                  X;                                                 // 0x0198(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Y;                                                 // 0x01A0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Z;                                                 // 0x01A8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  W;                                                 // 0x01B0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   Vector4d;                                          // 0x01C0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorMakeVec4Node) == 0x000010, "Wrong alignment on FDataflowVectorMakeVec4Node");
static_assert(sizeof(FDataflowVectorMakeVec4Node) == 0x0001E0, "Wrong size on FDataflowVectorMakeVec4Node");
static_assert(offsetof(FDataflowVectorMakeVec4Node, X) == 0x000198, "Member 'FDataflowVectorMakeVec4Node::X' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec4Node, Y) == 0x0001A0, "Member 'FDataflowVectorMakeVec4Node::Y' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec4Node, Z) == 0x0001A8, "Member 'FDataflowVectorMakeVec4Node::Z' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec4Node, W) == 0x0001B0, "Member 'FDataflowVectorMakeVec4Node::W' has a wrong offset!");
static_assert(offsetof(FDataflowVectorMakeVec4Node, Vector4d) == 0x0001C0, "Member 'FDataflowVectorMakeVec4Node::Vector4d' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorBreakNode
// 0x0048 (0x01E0 - 0x0198)
struct FDataflowVectorBreakNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   V;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  X;                                                 // 0x01C0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Y;                                                 // 0x01C8(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Z;                                                 // 0x01D0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  W;                                                 // 0x01D8(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorBreakNode) == 0x000010, "Wrong alignment on FDataflowVectorBreakNode");
static_assert(sizeof(FDataflowVectorBreakNode) == 0x0001E0, "Wrong size on FDataflowVectorBreakNode");
static_assert(offsetof(FDataflowVectorBreakNode, V) == 0x0001A0, "Member 'FDataflowVectorBreakNode::V' has a wrong offset!");
static_assert(offsetof(FDataflowVectorBreakNode, X) == 0x0001C0, "Member 'FDataflowVectorBreakNode::X' has a wrong offset!");
static_assert(offsetof(FDataflowVectorBreakNode, Y) == 0x0001C8, "Member 'FDataflowVectorBreakNode::Y' has a wrong offset!");
static_assert(offsetof(FDataflowVectorBreakNode, Z) == 0x0001D0, "Member 'FDataflowVectorBreakNode::Z' has a wrong offset!");
static_assert(offsetof(FDataflowVectorBreakNode, W) == 0x0001D8, "Member 'FDataflowVectorBreakNode::W' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorAddNode
// 0x0068 (0x0200 - 0x0198)
struct FDataflowVectorAddNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   A;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   B;                                                 // 0x01C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   V;                                                 // 0x01E0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorAddNode) == 0x000010, "Wrong alignment on FDataflowVectorAddNode");
static_assert(sizeof(FDataflowVectorAddNode) == 0x000200, "Wrong size on FDataflowVectorAddNode");
static_assert(offsetof(FDataflowVectorAddNode, A) == 0x0001A0, "Member 'FDataflowVectorAddNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowVectorAddNode, B) == 0x0001C0, "Member 'FDataflowVectorAddNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowVectorAddNode, V) == 0x0001E0, "Member 'FDataflowVectorAddNode::V' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorSubtractNode
// 0x0068 (0x0200 - 0x0198)
struct FDataflowVectorSubtractNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   A;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   B;                                                 // 0x01C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   V;                                                 // 0x01E0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorSubtractNode) == 0x000010, "Wrong alignment on FDataflowVectorSubtractNode");
static_assert(sizeof(FDataflowVectorSubtractNode) == 0x000200, "Wrong size on FDataflowVectorSubtractNode");
static_assert(offsetof(FDataflowVectorSubtractNode, A) == 0x0001A0, "Member 'FDataflowVectorSubtractNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowVectorSubtractNode, B) == 0x0001C0, "Member 'FDataflowVectorSubtractNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowVectorSubtractNode, V) == 0x0001E0, "Member 'FDataflowVectorSubtractNode::V' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorDotProductNode
// 0x0058 (0x01F0 - 0x0198)
struct FDataflowVectorDotProductNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   A;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   B;                                                 // 0x01C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  DotProduct;                                        // 0x01E0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowVectorDotProductNode) == 0x000010, "Wrong alignment on FDataflowVectorDotProductNode");
static_assert(sizeof(FDataflowVectorDotProductNode) == 0x0001F0, "Wrong size on FDataflowVectorDotProductNode");
static_assert(offsetof(FDataflowVectorDotProductNode, A) == 0x0001A0, "Member 'FDataflowVectorDotProductNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowVectorDotProductNode, B) == 0x0001C0, "Member 'FDataflowVectorDotProductNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowVectorDotProductNode, DotProduct) == 0x0001E0, "Member 'FDataflowVectorDotProductNode::DotProduct' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorLengthNode
// 0x0038 (0x01D0 - 0x0198)
struct FDataflowVectorLengthNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   V;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Length;                                            // 0x01C0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowVectorLengthNode) == 0x000010, "Wrong alignment on FDataflowVectorLengthNode");
static_assert(sizeof(FDataflowVectorLengthNode) == 0x0001D0, "Wrong size on FDataflowVectorLengthNode");
static_assert(offsetof(FDataflowVectorLengthNode, V) == 0x0001A0, "Member 'FDataflowVectorLengthNode::V' has a wrong offset!");
static_assert(offsetof(FDataflowVectorLengthNode, Length) == 0x0001C0, "Member 'FDataflowVectorLengthNode::Length' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorSquaredLengthNode
// 0x0038 (0x01D0 - 0x0198)
struct FDataflowVectorSquaredLengthNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   V;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  SquaredLength;                                     // 0x01C0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowVectorSquaredLengthNode) == 0x000010, "Wrong alignment on FDataflowVectorSquaredLengthNode");
static_assert(sizeof(FDataflowVectorSquaredLengthNode) == 0x0001D0, "Wrong size on FDataflowVectorSquaredLengthNode");
static_assert(offsetof(FDataflowVectorSquaredLengthNode, V) == 0x0001A0, "Member 'FDataflowVectorSquaredLengthNode::V' has a wrong offset!");
static_assert(offsetof(FDataflowVectorSquaredLengthNode, SquaredLength) == 0x0001C0, "Member 'FDataflowVectorSquaredLengthNode::SquaredLength' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorDistanceNode
// 0x0058 (0x01F0 - 0x0198)
struct FDataflowVectorDistanceNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   A;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   B;                                                 // 0x01C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Distance;                                          // 0x01E0(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowVectorDistanceNode) == 0x000010, "Wrong alignment on FDataflowVectorDistanceNode");
static_assert(sizeof(FDataflowVectorDistanceNode) == 0x0001F0, "Wrong size on FDataflowVectorDistanceNode");
static_assert(offsetof(FDataflowVectorDistanceNode, A) == 0x0001A0, "Member 'FDataflowVectorDistanceNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowVectorDistanceNode, B) == 0x0001C0, "Member 'FDataflowVectorDistanceNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowVectorDistanceNode, Distance) == 0x0001E0, "Member 'FDataflowVectorDistanceNode::Distance' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorCrossProductNode
// 0x0068 (0x0200 - 0x0198)
struct FDataflowVectorCrossProductNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   A;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   B;                                                 // 0x01C0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   CrossProduct;                                      // 0x01E0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorCrossProductNode) == 0x000010, "Wrong alignment on FDataflowVectorCrossProductNode");
static_assert(sizeof(FDataflowVectorCrossProductNode) == 0x000200, "Wrong size on FDataflowVectorCrossProductNode");
static_assert(offsetof(FDataflowVectorCrossProductNode, A) == 0x0001A0, "Member 'FDataflowVectorCrossProductNode::A' has a wrong offset!");
static_assert(offsetof(FDataflowVectorCrossProductNode, B) == 0x0001C0, "Member 'FDataflowVectorCrossProductNode::B' has a wrong offset!");
static_assert(offsetof(FDataflowVectorCrossProductNode, CrossProduct) == 0x0001E0, "Member 'FDataflowVectorCrossProductNode::CrossProduct' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorScaleNode
// 0x0058 (0x01F0 - 0x0198)
struct FDataflowVectorScaleNode final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   V;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowNumericTypes                  Scale;                                             // 0x01C0(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   Scaled;                                            // 0x01D0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorScaleNode) == 0x000010, "Wrong alignment on FDataflowVectorScaleNode");
static_assert(sizeof(FDataflowVectorScaleNode) == 0x0001F0, "Wrong size on FDataflowVectorScaleNode");
static_assert(offsetof(FDataflowVectorScaleNode, V) == 0x0001A0, "Member 'FDataflowVectorScaleNode::V' has a wrong offset!");
static_assert(offsetof(FDataflowVectorScaleNode, Scale) == 0x0001C0, "Member 'FDataflowVectorScaleNode::Scale' has a wrong offset!");
static_assert(offsetof(FDataflowVectorScaleNode, Scaled) == 0x0001D0, "Member 'FDataflowVectorScaleNode::Scaled' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowVectorNormalize
// 0x0048 (0x01E0 - 0x0198)
struct FDataflowVectorNormalize final : public FDataflowNode
{
public:
	uint8                                         Pad_198[0x8];                                      // 0x0198(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataflowVectorTypes                   V;                                                 // 0x01A0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDataflowVectorTypes                   Normalized;                                        // 0x01C0(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDataflowVectorNormalize) == 0x000010, "Wrong alignment on FDataflowVectorNormalize");
static_assert(sizeof(FDataflowVectorNormalize) == 0x0001E0, "Wrong size on FDataflowVectorNormalize");
static_assert(offsetof(FDataflowVectorNormalize, V) == 0x0001A0, "Member 'FDataflowVectorNormalize::V' has a wrong offset!");
static_assert(offsetof(FDataflowVectorNormalize, Normalized) == 0x0001C0, "Member 'FDataflowVectorNormalize::Normalized' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowConnection
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FDataflowConnection
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowConnection) == 0x000008, "Wrong alignment on FDataflowConnection");
static_assert(sizeof(FDataflowConnection) == 0x000048, "Wrong size on FDataflowConnection");

// ScriptStruct DataflowCore.DataflowInput
// 0x0008 (0x0050 - 0x0048)
struct FDataflowInput : public FDataflowConnection
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowInput) == 0x000008, "Wrong alignment on FDataflowInput");
static_assert(sizeof(FDataflowInput) == 0x000050, "Wrong size on FDataflowInput");

// ScriptStruct DataflowCore.DataflowArrayInput
// 0x0010 (0x0060 - 0x0050)
struct FDataflowArrayInput final : public FDataflowInput
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowArrayInput) == 0x000008, "Wrong alignment on FDataflowArrayInput");
static_assert(sizeof(FDataflowArrayInput) == 0x000060, "Wrong size on FDataflowArrayInput");

// ScriptStruct DataflowCore.DataflowOutput
// 0x0030 (0x0078 - 0x0048)
struct FDataflowOutput final : public FDataflowConnection
{
public:
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowOutput) == 0x000008, "Wrong alignment on FDataflowOutput");
static_assert(sizeof(FDataflowOutput) == 0x000078, "Wrong size on FDataflowOutput");

// ScriptStruct DataflowCore.DataflowOverrideNode
// 0x0020 (0x01B8 - 0x0198)
struct FDataflowOverrideNode : public FDataflowNode
{
public:
	class FName                                   Key;                                               // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Default;                                           // 0x01A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverriden;                                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowOverrideNode) == 0x000008, "Wrong alignment on FDataflowOverrideNode");
static_assert(sizeof(FDataflowOverrideNode) == 0x0001B8, "Wrong size on FDataflowOverrideNode");
static_assert(offsetof(FDataflowOverrideNode, Key) == 0x000198, "Member 'FDataflowOverrideNode::Key' has a wrong offset!");
static_assert(offsetof(FDataflowOverrideNode, Default) == 0x0001A0, "Member 'FDataflowOverrideNode::Default' has a wrong offset!");
static_assert(offsetof(FDataflowOverrideNode, IsOverriden) == 0x0001B0, "Member 'FDataflowOverrideNode::IsOverriden' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowSelection
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FDataflowSelection
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowSelection) == 0x000008, "Wrong alignment on FDataflowSelection");
static_assert(sizeof(FDataflowSelection) == 0x000020, "Wrong size on FDataflowSelection");

// ScriptStruct DataflowCore.DataflowTransformSelection
// 0x0000 (0x0020 - 0x0020)
struct FDataflowTransformSelection final : public FDataflowSelection
{
};
static_assert(alignof(FDataflowTransformSelection) == 0x000008, "Wrong alignment on FDataflowTransformSelection");
static_assert(sizeof(FDataflowTransformSelection) == 0x000020, "Wrong size on FDataflowTransformSelection");

// ScriptStruct DataflowCore.DataflowVertexSelection
// 0x0000 (0x0020 - 0x0020)
struct FDataflowVertexSelection final : public FDataflowSelection
{
};
static_assert(alignof(FDataflowVertexSelection) == 0x000008, "Wrong alignment on FDataflowVertexSelection");
static_assert(sizeof(FDataflowVertexSelection) == 0x000020, "Wrong size on FDataflowVertexSelection");

// ScriptStruct DataflowCore.DataflowFaceSelection
// 0x0000 (0x0020 - 0x0020)
struct FDataflowFaceSelection final : public FDataflowSelection
{
};
static_assert(alignof(FDataflowFaceSelection) == 0x000008, "Wrong alignment on FDataflowFaceSelection");
static_assert(sizeof(FDataflowFaceSelection) == 0x000020, "Wrong size on FDataflowFaceSelection");

// ScriptStruct DataflowCore.DataflowGeometrySelection
// 0x0000 (0x0020 - 0x0020)
struct FDataflowGeometrySelection final : public FDataflowSelection
{
};
static_assert(alignof(FDataflowGeometrySelection) == 0x000008, "Wrong alignment on FDataflowGeometrySelection");
static_assert(sizeof(FDataflowGeometrySelection) == 0x000020, "Wrong size on FDataflowGeometrySelection");

// ScriptStruct DataflowCore.DataflowMaterialSelection
// 0x0000 (0x0020 - 0x0020)
struct FDataflowMaterialSelection final : public FDataflowSelection
{
};
static_assert(alignof(FDataflowMaterialSelection) == 0x000008, "Wrong alignment on FDataflowMaterialSelection");
static_assert(sizeof(FDataflowMaterialSelection) == 0x000020, "Wrong size on FDataflowMaterialSelection");

// ScriptStruct DataflowCore.NodeColors
// 0x0020 (0x0020 - 0x0000)
struct FNodeColors final
{
public:
	struct FLinearColor                           NodeTitleColor;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NodeBodyTintColor;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNodeColors) == 0x000004, "Wrong alignment on FNodeColors");
static_assert(sizeof(FNodeColors) == 0x000020, "Wrong size on FNodeColors");
static_assert(offsetof(FNodeColors, NodeTitleColor) == 0x000000, "Member 'FNodeColors::NodeTitleColor' has a wrong offset!");
static_assert(offsetof(FNodeColors, NodeBodyTintColor) == 0x000010, "Member 'FNodeColors::NodeBodyTintColor' has a wrong offset!");

// ScriptStruct DataflowCore.DataflowTerminalNode
// 0x0000 (0x0198 - 0x0198)
struct FDataflowTerminalNode : public FDataflowNode
{
};
static_assert(alignof(FDataflowTerminalNode) == 0x000008, "Wrong alignment on FDataflowTerminalNode");
static_assert(sizeof(FDataflowTerminalNode) == 0x000198, "Wrong size on FDataflowTerminalNode");

}

