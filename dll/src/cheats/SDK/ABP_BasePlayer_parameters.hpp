#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BasePlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_BasePlayer.ABP_BasePlayer_C.AimOffset
// 0x0020 (0x0020 - 0x0000)
struct ABP_BasePlayer_C_AimOffset final
{
public:
	struct FPoseLink                              InputMovementState;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AimOffset_0;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_AimOffset) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_AimOffset");
static_assert(sizeof(ABP_BasePlayer_C_AimOffset) == 0x000020, "Wrong size on ABP_BasePlayer_C_AimOffset");
static_assert(offsetof(ABP_BasePlayer_C_AimOffset, InputMovementState) == 0x000000, "Member 'ABP_BasePlayer_C_AimOffset::InputMovementState' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_AimOffset, AimOffset_0) == 0x000010, "Member 'ABP_BasePlayer_C_AimOffset::AimOffset_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_BasePlayer_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_AnimGraph");
static_assert(sizeof(ABP_BasePlayer_C_AnimGraph) == 0x000010, "Wrong size on ABP_BasePlayer_C_AnimGraph");
static_assert(offsetof(ABP_BasePlayer_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_BasePlayer_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.CycleBlending
// 0x0070 (0x0070 - 0x0000)
struct ABP_BasePlayer_C_CycleBlending final
{
public:
	struct FPoseLink                              F;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              B;                                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FL;                                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FR;                                                // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BL;                                                // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BR;                                                // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              CycleBlending_0;                                   // 0x0060(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_CycleBlending) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_CycleBlending");
static_assert(sizeof(ABP_BasePlayer_C_CycleBlending) == 0x000070, "Wrong size on ABP_BasePlayer_C_CycleBlending");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, F) == 0x000000, "Member 'ABP_BasePlayer_C_CycleBlending::F' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, B) == 0x000010, "Member 'ABP_BasePlayer_C_CycleBlending::B' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, FL) == 0x000020, "Member 'ABP_BasePlayer_C_CycleBlending::FL' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, FR) == 0x000030, "Member 'ABP_BasePlayer_C_CycleBlending::FR' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, BL) == 0x000040, "Member 'ABP_BasePlayer_C_CycleBlending::BL' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, BR) == 0x000050, "Member 'ABP_BasePlayer_C_CycleBlending::BR' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_CycleBlending, CycleBlending_0) == 0x000060, "Member 'ABP_BasePlayer_C_CycleBlending::CycleBlending_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.ExecuteUbergraph_ABP_BasePlayer
// 0x0358 (0x0358 - 0x0000)
struct ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue;       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0038(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate_2;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_4;              // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector4_X;                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y;                           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_5;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_3;    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceStateWeight_ReturnValue_1;     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_4;    // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_X_1;                         // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y_1;                         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z_1;                         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W_1;                         // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_X_2;                         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y_2;                         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z_2;                         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W_2;                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector4_X_3;                         // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y_3;                         // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z_3;                         // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W_3;                         // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_6;              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_7;              // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_5;    // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector4_X_4;                         // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y_4;                         // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z_4;                         // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W_4;                         // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_X_5;                         // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Y_5;                         // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_Z_5;                         // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector4_W_5;                         // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPlayerPawn*                           K2Node_CustomEvent_Player_2;                       // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARPlayerPawn*                           K2Node_CustomEvent_Player_1;                       // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARPlayerPawn*                           K2Node_DynamicCast_AsRPlayer_Pawn;                 // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPlayerPawn*                           K2Node_CustomEvent_Player;                         // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2; // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_20_ImplicitCast; // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_StructMemberSet___FloatProperty_19_ImplicitCast; // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast_1;                     // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast;              // 0x0318(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3; // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_4; // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_1;            // 0x0330(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_2;            // 0x0334(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_3;            // 0x0338(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_5; // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_4;            // 0x0350(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Set_Item_ImplicitCast_5;            // 0x0354(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer");
static_assert(sizeof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer) == 0x000358, "Wrong size on ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, EntryPoint) == 0x000000, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_1) == 0x000008, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00000C, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000D, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetInstanceStateWeight_ReturnValue) == 0x000010, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetInstanceStateWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000015, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_2) == 0x000018, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x00001C, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x00001D, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_3) == 0x000020, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Abs_ReturnValue) == 0x000028, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000030, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000032, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_2) == 0x000033, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000034, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_3) == 0x000035, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanOR_ReturnValue) == 0x000036, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CreateDelegate_OutputDelegate) == 0x000038, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CreateDelegate_OutputDelegate_1) == 0x000048, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000058, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_VSize_ReturnValue) == 0x000068, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector_X) == 0x000070, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector_Y) == 0x000078, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector_Z) == 0x000080, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000090, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000A8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_4) == 0x0000B0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Abs_ReturnValue_1) == 0x0000B8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C1, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X) == 0x0000C8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y) == 0x0000D0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z) == 0x0000D8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W) == 0x0000E0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000E8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_5) == 0x0000EC, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_3) == 0x0000F0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x0000F1, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetInstanceStateWeight_ReturnValue_1) == 0x0000F4, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetInstanceStateWeight_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_4) == 0x0000F8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Location) == 0x000100, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Rotation) == 0x000118, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Scale) == 0x000130, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_4) == 0x000148, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_5) == 0x000149, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Location_1) == 0x000150, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Rotation_1) == 0x000168, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Scale_1) == 0x000180, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X_1) == 0x000198, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y_1) == 0x0001A0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z_1) == 0x0001A8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W_1) == 0x0001B0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X_2) == 0x0001B8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y_2) == 0x0001C0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z_2) == 0x0001C8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W_2) == 0x0001D0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Location_2) == 0x0001D8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Rotation_2) == 0x0001F0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakTransform_Scale_2) == 0x000208, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000220, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X_3) == 0x000228, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y_3) == 0x000230, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z_3) == 0x000238, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W_3) == 0x000240, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_6) == 0x000248, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x00024C, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_GetCurveValue_ReturnValue_7) == 0x000250, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_GetCurveValue_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_ReturnValue_5) == 0x000254, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BooleanAND_ReturnValue_6) == 0x000255, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X_4) == 0x000258, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y_4) == 0x000260, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z_4) == 0x000268, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W_4) == 0x000270, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_X_5) == 0x000278, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_X_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Y_5) == 0x000280, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Y_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_Z_5) == 0x000288, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_Z_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_BreakVector4_W_5) == 0x000290, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_BreakVector4_W_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x000298, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CustomEvent_Player_2) == 0x0002A0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CustomEvent_Player_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CustomEvent_Player_1) == 0x0002A8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_TryGetPawnOwner_ReturnValue) == 0x0002B0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_DynamicCast_AsRPlayer_Pawn) == 0x0002B8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_DynamicCast_AsRPlayer_Pawn' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_DynamicCast_bSuccess) == 0x0002C0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_CustomEvent_Player) == 0x0002C8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x0002D0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0002D8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x0002E0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2) == 0x0002E8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Abs_A_ImplicitCast) == 0x0002F0, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0002F8, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x000300, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_StructMemberSet___FloatProperty_20_ImplicitCast) == 0x000308, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_StructMemberSet___FloatProperty_20_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, K2Node_StructMemberSet___FloatProperty_19_ImplicitCast) == 0x00030C, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::K2Node_StructMemberSet___FloatProperty_19_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Abs_A_ImplicitCast_1) == 0x000310, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Abs_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast) == 0x000318, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3) == 0x000320, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_4) == 0x000328, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast_1) == 0x000330, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast_2) == 0x000334, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast_3) == 0x000338, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000340, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_5) == 0x000348, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast_4) == 0x000350, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer, CallFunc_Array_Set_Item_ImplicitCast_5) == 0x000354, "Member 'ABP_BasePlayer_C_ExecuteUbergraph_ABP_BasePlayer::CallFunc_Array_Set_Item_ImplicitCast_5' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.Foot IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_BasePlayer_C_Foot_IK final
{
public:
	struct FPoseLink                              FootIK_Input;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Foot_IK_0;                                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_Foot_IK) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_Foot_IK");
static_assert(sizeof(ABP_BasePlayer_C_Foot_IK) == 0x000020, "Wrong size on ABP_BasePlayer_C_Foot_IK");
static_assert(offsetof(ABP_BasePlayer_C_Foot_IK, FootIK_Input) == 0x000000, "Member 'ABP_BasePlayer_C_Foot_IK::FootIK_Input' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_Foot_IK, Foot_IK_0) == 0x000010, "Member 'ABP_BasePlayer_C_Foot_IK::Foot_IK_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.Hand IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_BasePlayer_C_Hand_IK final
{
public:
	struct FPoseLink                              HandIK_Input;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Hand_IK_0;                                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_Hand_IK) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_Hand_IK");
static_assert(sizeof(ABP_BasePlayer_C_Hand_IK) == 0x000020, "Wrong size on ABP_BasePlayer_C_Hand_IK");
static_assert(offsetof(ABP_BasePlayer_C_Hand_IK, HandIK_Input) == 0x000000, "Member 'ABP_BasePlayer_C_Hand_IK::HandIK_Input' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_Hand_IK, Hand_IK_0) == 0x000010, "Member 'ABP_BasePlayer_C_Hand_IK::Hand_IK_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.Head IK
// 0x0020 (0x0020 - 0x0000)
struct ABP_BasePlayer_C_Head_IK final
{
public:
	struct FPoseLink                              HeadIK_Input;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Head_IK_0;                                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_Head_IK) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_Head_IK");
static_assert(sizeof(ABP_BasePlayer_C_Head_IK) == 0x000020, "Wrong size on ABP_BasePlayer_C_Head_IK");
static_assert(offsetof(ABP_BasePlayer_C_Head_IK, HeadIK_Input) == 0x000000, "Member 'ABP_BasePlayer_C_Head_IK::HeadIK_Input' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayer_C_Head_IK, Head_IK_0) == 0x000010, "Member 'ABP_BasePlayer_C_Head_IK::Head_IK_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.Locomotion
// 0x0010 (0x0010 - 0x0000)
struct ABP_BasePlayer_C_Locomotion final
{
public:
	struct FPoseLink                              Locomotion_0;                                      // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_BasePlayer_C_Locomotion) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_Locomotion");
static_assert(sizeof(ABP_BasePlayer_C_Locomotion) == 0x000010, "Wrong size on ABP_BasePlayer_C_Locomotion");
static_assert(offsetof(ABP_BasePlayer_C_Locomotion, Locomotion_0) == 0x000000, "Member 'ABP_BasePlayer_C_Locomotion::Locomotion_0' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.PawnDowned
// 0x0008 (0x0008 - 0x0000)
struct ABP_BasePlayer_C_PawnDowned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BasePlayer_C_PawnDowned) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_PawnDowned");
static_assert(sizeof(ABP_BasePlayer_C_PawnDowned) == 0x000008, "Wrong size on ABP_BasePlayer_C_PawnDowned");
static_assert(offsetof(ABP_BasePlayer_C_PawnDowned, Player) == 0x000000, "Member 'ABP_BasePlayer_C_PawnDowned::Player' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.PawnRespawned
// 0x0008 (0x0008 - 0x0000)
struct ABP_BasePlayer_C_PawnRespawned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BasePlayer_C_PawnRespawned) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_PawnRespawned");
static_assert(sizeof(ABP_BasePlayer_C_PawnRespawned) == 0x000008, "Wrong size on ABP_BasePlayer_C_PawnRespawned");
static_assert(offsetof(ABP_BasePlayer_C_PawnRespawned, Player) == 0x000000, "Member 'ABP_BasePlayer_C_PawnRespawned::Player' has a wrong offset!");

// Function ABP_BasePlayer.ABP_BasePlayer_C.PawnRevived
// 0x0008 (0x0008 - 0x0000)
struct ABP_BasePlayer_C_PawnRevived final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_BasePlayer_C_PawnRevived) == 0x000008, "Wrong alignment on ABP_BasePlayer_C_PawnRevived");
static_assert(sizeof(ABP_BasePlayer_C_PawnRevived) == 0x000008, "Wrong size on ABP_BasePlayer_C_PawnRevived");
static_assert(offsetof(ABP_BasePlayer_C_PawnRevived, Player) == 0x000000, "Member 'ABP_BasePlayer_C_PawnRevived::Player' has a wrong offset!");

}

