#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateTreeModule

#include "Basic.hpp"

#include "StateTreeModule_structs.hpp"


namespace SDK::Params
{

// Function StateTreeModule.StateTreeNodeBlueprintBase.RequestTransition
// 0x0004 (0x0004 - 0x0000)
struct StateTreeNodeBlueprintBase_RequestTransition final
{
public:
	struct FStateTreeStateLink                    TargetState;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EStateTreeTransitionPriority                  Priority;                                          // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTreeNodeBlueprintBase_RequestTransition) == 0x000002, "Wrong alignment on StateTreeNodeBlueprintBase_RequestTransition");
static_assert(sizeof(StateTreeNodeBlueprintBase_RequestTransition) == 0x000004, "Wrong size on StateTreeNodeBlueprintBase_RequestTransition");
static_assert(offsetof(StateTreeNodeBlueprintBase_RequestTransition, TargetState) == 0x000000, "Member 'StateTreeNodeBlueprintBase_RequestTransition::TargetState' has a wrong offset!");
static_assert(offsetof(StateTreeNodeBlueprintBase_RequestTransition, Priority) == 0x000002, "Member 'StateTreeNodeBlueprintBase_RequestTransition::Priority' has a wrong offset!");

// Function StateTreeModule.StateTreeNodeBlueprintBase.SendEvent
// 0x0020 (0x0020 - 0x0000)
struct StateTreeNodeBlueprintBase_SendEvent final
{
public:
	struct FStateTreeEvent                        Event;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeNodeBlueprintBase_SendEvent) == 0x000008, "Wrong alignment on StateTreeNodeBlueprintBase_SendEvent");
static_assert(sizeof(StateTreeNodeBlueprintBase_SendEvent) == 0x000020, "Wrong size on StateTreeNodeBlueprintBase_SendEvent");
static_assert(offsetof(StateTreeNodeBlueprintBase_SendEvent, Event) == 0x000000, "Member 'StateTreeNodeBlueprintBase_SendEvent::Event' has a wrong offset!");

// Function StateTreeModule.StateTreeNodeBlueprintBase.GetPropertyDescriptionByPropertyName
// 0x0018 (0x0018 - 0x0000)
struct StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName) == 0x000008, "Wrong alignment on StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName");
static_assert(sizeof(StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName) == 0x000018, "Wrong size on StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName");
static_assert(offsetof(StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName, PropertyName) == 0x000000, "Member 'StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName::PropertyName' has a wrong offset!");
static_assert(offsetof(StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName, ReturnValue) == 0x000008, "Member 'StateTreeNodeBlueprintBase_GetPropertyDescriptionByPropertyName::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeNodeBlueprintBase.GetPropertyReference
// 0x0010 (0x0010 - 0x0000)
struct StateTreeNodeBlueprintBase_GetPropertyReference final
{
public:
	struct FStateTreeBlueprintPropertyRef         PropertyRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeNodeBlueprintBase_GetPropertyReference) == 0x000008, "Wrong alignment on StateTreeNodeBlueprintBase_GetPropertyReference");
static_assert(sizeof(StateTreeNodeBlueprintBase_GetPropertyReference) == 0x000010, "Wrong size on StateTreeNodeBlueprintBase_GetPropertyReference");
static_assert(offsetof(StateTreeNodeBlueprintBase_GetPropertyReference, PropertyRef) == 0x000000, "Member 'StateTreeNodeBlueprintBase_GetPropertyReference::PropertyRef' has a wrong offset!");

// Function StateTreeModule.StateTreeNodeBlueprintBase.IsPropertyRefValid
// 0x0018 (0x0018 - 0x0000)
struct StateTreeNodeBlueprintBase_IsPropertyRefValid final
{
public:
	struct FStateTreeBlueprintPropertyRef         PropertyRef;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTreeNodeBlueprintBase_IsPropertyRefValid) == 0x000008, "Wrong alignment on StateTreeNodeBlueprintBase_IsPropertyRefValid");
static_assert(sizeof(StateTreeNodeBlueprintBase_IsPropertyRefValid) == 0x000018, "Wrong size on StateTreeNodeBlueprintBase_IsPropertyRefValid");
static_assert(offsetof(StateTreeNodeBlueprintBase_IsPropertyRefValid, PropertyRef) == 0x000000, "Member 'StateTreeNodeBlueprintBase_IsPropertyRefValid::PropertyRef' has a wrong offset!");
static_assert(offsetof(StateTreeNodeBlueprintBase_IsPropertyRefValid, ReturnValue) == 0x000010, "Member 'StateTreeNodeBlueprintBase_IsPropertyRefValid::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeNodeBlueprintBase.ReceiveGetDescription
// 0x0018 (0x0018 - 0x0000)
struct StateTreeNodeBlueprintBase_ReceiveGetDescription final
{
public:
	EStateTreeNodeFormatting                      Formatting;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeNodeBlueprintBase_ReceiveGetDescription) == 0x000008, "Wrong alignment on StateTreeNodeBlueprintBase_ReceiveGetDescription");
static_assert(sizeof(StateTreeNodeBlueprintBase_ReceiveGetDescription) == 0x000018, "Wrong size on StateTreeNodeBlueprintBase_ReceiveGetDescription");
static_assert(offsetof(StateTreeNodeBlueprintBase_ReceiveGetDescription, Formatting) == 0x000000, "Member 'StateTreeNodeBlueprintBase_ReceiveGetDescription::Formatting' has a wrong offset!");
static_assert(offsetof(StateTreeNodeBlueprintBase_ReceiveGetDescription, ReturnValue) == 0x000008, "Member 'StateTreeNodeBlueprintBase_ReceiveGetDescription::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeConditionBlueprintBase.ReceiveTestCondition
// 0x0001 (0x0001 - 0x0000)
struct StateTreeConditionBlueprintBase_ReceiveTestCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeConditionBlueprintBase_ReceiveTestCondition) == 0x000001, "Wrong alignment on StateTreeConditionBlueprintBase_ReceiveTestCondition");
static_assert(sizeof(StateTreeConditionBlueprintBase_ReceiveTestCondition) == 0x000001, "Wrong size on StateTreeConditionBlueprintBase_ReceiveTestCondition");
static_assert(offsetof(StateTreeConditionBlueprintBase_ReceiveTestCondition, ReturnValue) == 0x000000, "Member 'StateTreeConditionBlueprintBase_ReceiveTestCondition::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeConsiderationBlueprintBase.ReceiveGetScore
// 0x0004 (0x0004 - 0x0000)
struct StateTreeConsiderationBlueprintBase_ReceiveGetScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeConsiderationBlueprintBase_ReceiveGetScore) == 0x000004, "Wrong alignment on StateTreeConsiderationBlueprintBase_ReceiveGetScore");
static_assert(sizeof(StateTreeConsiderationBlueprintBase_ReceiveGetScore) == 0x000004, "Wrong size on StateTreeConsiderationBlueprintBase_ReceiveGetScore");
static_assert(offsetof(StateTreeConsiderationBlueprintBase_ReceiveGetScore, ReturnValue) == 0x000000, "Member 'StateTreeConsiderationBlueprintBase_ReceiveGetScore::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeEvaluatorBlueprintBase.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct StateTreeEvaluatorBlueprintBase_ReceiveTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeEvaluatorBlueprintBase_ReceiveTick) == 0x000004, "Wrong alignment on StateTreeEvaluatorBlueprintBase_ReceiveTick");
static_assert(sizeof(StateTreeEvaluatorBlueprintBase_ReceiveTick) == 0x000004, "Wrong size on StateTreeEvaluatorBlueprintBase_ReceiveTick");
static_assert(offsetof(StateTreeEvaluatorBlueprintBase_ReceiveTick, DeltaTime) == 0x000000, "Member 'StateTreeEvaluatorBlueprintBase_ReceiveTick::DeltaTime' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.FinishTask
// 0x0001 (0x0001 - 0x0000)
struct StateTreeTaskBlueprintBase_FinishTask final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeTaskBlueprintBase_FinishTask) == 0x000001, "Wrong alignment on StateTreeTaskBlueprintBase_FinishTask");
static_assert(sizeof(StateTreeTaskBlueprintBase_FinishTask) == 0x000001, "Wrong size on StateTreeTaskBlueprintBase_FinishTask");
static_assert(offsetof(StateTreeTaskBlueprintBase_FinishTask, bSucceeded) == 0x000000, "Member 'StateTreeTaskBlueprintBase_FinishTask::bSucceeded' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveEnterState
// 0x0048 (0x0048 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EStateTreeRunStatus                           ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveEnterState) == 0x000008, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveEnterState");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveEnterState) == 0x000048, "Wrong size on StateTreeTaskBlueprintBase_ReceiveEnterState");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveEnterState, Transition) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveEnterState::Transition' has a wrong offset!");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveEnterState, ReturnValue) == 0x000040, "Member 'StateTreeTaskBlueprintBase_ReceiveEnterState::ReturnValue' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveExitState
// 0x0040 (0x0040 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveExitState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveExitState) == 0x000008, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveExitState");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveExitState) == 0x000040, "Wrong size on StateTreeTaskBlueprintBase_ReceiveExitState");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveExitState, Transition) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveExitState::Transition' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveLatentEnterState
// 0x0040 (0x0040 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveLatentEnterState final
{
public:
	struct FStateTreeTransitionResult             Transition;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveLatentEnterState) == 0x000008, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveLatentEnterState");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveLatentEnterState) == 0x000040, "Wrong size on StateTreeTaskBlueprintBase_ReceiveLatentEnterState");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveLatentEnterState, Transition) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveLatentEnterState::Transition' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveLatentTick
// 0x0004 (0x0004 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveLatentTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveLatentTick) == 0x000004, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveLatentTick");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveLatentTick) == 0x000004, "Wrong size on StateTreeTaskBlueprintBase_ReceiveLatentTick");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveLatentTick, DeltaTime) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveLatentTick::DeltaTime' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveStateCompleted
// 0x0014 (0x0014 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveStateCompleted final
{
public:
	EStateTreeRunStatus                           CompletionStatus;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeActiveStates                 CompletedActiveStates;                             // 0x0002(0x0012)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveStateCompleted) == 0x000002, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveStateCompleted");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveStateCompleted) == 0x000014, "Wrong size on StateTreeTaskBlueprintBase_ReceiveStateCompleted");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveStateCompleted, CompletionStatus) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveStateCompleted::CompletionStatus' has a wrong offset!");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveStateCompleted, CompletedActiveStates) == 0x000002, "Member 'StateTreeTaskBlueprintBase_ReceiveStateCompleted::CompletedActiveStates' has a wrong offset!");

// Function StateTreeModule.StateTreeTaskBlueprintBase.ReceiveTick
// 0x0008 (0x0008 - 0x0000)
struct StateTreeTaskBlueprintBase_ReceiveTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStateTreeRunStatus                           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTreeTaskBlueprintBase_ReceiveTick) == 0x000004, "Wrong alignment on StateTreeTaskBlueprintBase_ReceiveTick");
static_assert(sizeof(StateTreeTaskBlueprintBase_ReceiveTick) == 0x000008, "Wrong size on StateTreeTaskBlueprintBase_ReceiveTick");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveTick, DeltaTime) == 0x000000, "Member 'StateTreeTaskBlueprintBase_ReceiveTick::DeltaTime' has a wrong offset!");
static_assert(offsetof(StateTreeTaskBlueprintBase_ReceiveTick, ReturnValue) == 0x000004, "Member 'StateTreeTaskBlueprintBase_ReceiveTick::ReturnValue' has a wrong offset!");

}

