#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyNode

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_DifficultyNode.Widget_DifficultyNode_C
// 0x00E0 (0x03B0 - 0x02D0)
class UWidget_DifficultyNode_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CappedTransition;                                  // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button;                                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CappedDrip;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CappedGlow;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CelebrationShockwave;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Icon;                                              // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_FocusIndicator;                              // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LinearFill;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Tiers;                                   // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SelectedGlyph_C*                Widget_SelectedGlyph;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateColor                            DefaultButtonTint;                                 // 0x0328(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrushOutlineSettings             DefaultButtonOutline;                              // 0x0340(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class URDifficultyPrimaryAsset*               DifficultyPrimaryAsset;                            // 0x0380(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UWidget_DifficultyTree_C*               DifficultyTreeParentWidgetRef;                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UWidget_BaseTooltip_C*                  Tooltip;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   DifficultyScriptCategory;                          // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInfinite;                                        // 0x03A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockGamepadFocus;                                // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AutoAssignSavedPoints();
	void BndEvt__Widget_SkillTreeNode_Button_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void Construct();
	void DeductPoint();
	void DestroyTooltip();
	void Destruct();
	void Does_Next_Node_Have_Points_Assigned(bool* NextNodeHasPointsAssigned);
	void ExecuteUbergraph_Widget_DifficultyNode(int32 EntryPoint);
	void GetCurrentTierDescription(class FText* Description);
	void GetMutatorPrimaryAssetName(class FName* Name_0);
	void GetMutatorPrimaryAssetSkillTreeIdName(class FName* Name_0);
	void GetNextTierDescription(class FText* Header, class FText* Description);
	void GetNumPointsAssigned(int32* NumPoints);
	void GetTooltipSize(class UWidget_BaseTooltip_C* ToolTipWidget_0, struct FVector2D* Values);
	class UWidget* GetToolTipWidget();
	void GetTotalAssignedPoints(int32* Value);
	void ImplementDifficultyEffect();
	void InitProgressVisualRandom();
	void Is_Assigned_Points_Between_Min_Max(bool* BetweenMinMax);
	void IsCapped(bool* Capped);
	void IsNodeLocked(bool* IsLocked);
	struct FEventReply On_Icon_MouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void RemoveDifficultyEffect();
	void ResetNode();
	void SetNumPointsAssigned(int32 NewPoints);
	void SimulateClick();
	void Update_Node_State();
	void Update_Points_Assigned_Text();
	void UpdateGamepadFocus();
	void UpdateProgressVisuals(int32 PointsAssigned, bool SkipAnimation);
	void UpdateTooltipInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_DifficultyNode_C">();
	}
	static class UWidget_DifficultyNode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_DifficultyNode_C>();
	}
};
static_assert(alignof(UWidget_DifficultyNode_C) == 0x000010, "Wrong alignment on UWidget_DifficultyNode_C");
static_assert(sizeof(UWidget_DifficultyNode_C) == 0x0003B0, "Wrong size on UWidget_DifficultyNode_C");
static_assert(offsetof(UWidget_DifficultyNode_C, UberGraphFrame) == 0x0002D0, "Member 'UWidget_DifficultyNode_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, CappedTransition) == 0x0002D8, "Member 'UWidget_DifficultyNode_C::CappedTransition' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, Button) == 0x0002E0, "Member 'UWidget_DifficultyNode_C::Button' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, CappedDrip) == 0x0002E8, "Member 'UWidget_DifficultyNode_C::CappedDrip' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, CappedGlow) == 0x0002F0, "Member 'UWidget_DifficultyNode_C::CappedGlow' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, CelebrationShockwave) == 0x0002F8, "Member 'UWidget_DifficultyNode_C::CelebrationShockwave' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, Icon) == 0x000300, "Member 'UWidget_DifficultyNode_C::Icon' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, Image_FocusIndicator) == 0x000308, "Member 'UWidget_DifficultyNode_C::Image_FocusIndicator' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, LinearFill) == 0x000310, "Member 'UWidget_DifficultyNode_C::LinearFill' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, TextBlock_Tiers) == 0x000318, "Member 'UWidget_DifficultyNode_C::TextBlock_Tiers' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, Widget_SelectedGlyph) == 0x000320, "Member 'UWidget_DifficultyNode_C::Widget_SelectedGlyph' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, DefaultButtonTint) == 0x000328, "Member 'UWidget_DifficultyNode_C::DefaultButtonTint' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, DefaultButtonOutline) == 0x000340, "Member 'UWidget_DifficultyNode_C::DefaultButtonOutline' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, DifficultyPrimaryAsset) == 0x000380, "Member 'UWidget_DifficultyNode_C::DifficultyPrimaryAsset' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, DifficultyTreeParentWidgetRef) == 0x000388, "Member 'UWidget_DifficultyNode_C::DifficultyTreeParentWidgetRef' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, Tooltip) == 0x000390, "Member 'UWidget_DifficultyNode_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, DifficultyScriptCategory) == 0x000398, "Member 'UWidget_DifficultyNode_C::DifficultyScriptCategory' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, IsInfinite) == 0x0003A0, "Member 'UWidget_DifficultyNode_C::IsInfinite' has a wrong offset!");
static_assert(offsetof(UWidget_DifficultyNode_C, bBlockGamepadFocus) == 0x0003A1, "Member 'UWidget_DifficultyNode_C::bBlockGamepadFocus' has a wrong offset!");

}

