#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRange_TimeTrial

#include "Basic.hpp"

#include "BP_ShootingRange_TimeTrial_classes.hpp"
#include "BP_ShootingRange_TimeTrial_parameters.hpp"


namespace SDK
{

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.Activate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Positive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShootingRange_TimeTrial_C::Activate(int32 ID, bool Positive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "Activate");

	Params::BP_ShootingRange_TimeTrial_C_Activate Parms{};

	Parms.ID = ID;
	Parms.Positive = Positive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ActivateAvailableFlipper
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::ActivateAvailableFlipper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "ActivateAvailableFlipper");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ExecuteUbergraph_BP_ShootingRange_TimeTrial
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShootingRange_TimeTrial_C::ExecuteUbergraph_BP_ShootingRange_TimeTrial(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "ExecuteUbergraph_BP_ShootingRange_TimeTrial");

	Params::BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.OnFinished_Multicast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::OnFinished_Multicast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "OnFinished_Multicast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.OnRep_PointsScored
// (BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::OnRep_PointsScored()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "OnRep_PointsScored");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.OnStarted_Multicast
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::OnStarted_Multicast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "OnStarted_Multicast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ResetAndSetup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::ResetAndSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "ResetAndSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.RetractScoreboard
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::RetractScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "RetractScoreboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.SetScorboardState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Retract                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ShootingRange_TimeTrial_C::SetScorboardState(bool Retract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "SetScorboardState");

	Params::BP_ShootingRange_TimeTrial_C_SetScorboardState Parms{};

	Parms.Retract = Retract;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.Target Hit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URHealthComponent*                Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FDamageCombatEvent&        DamageEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_ShootingRange_TimeTrial_C::Target_Hit(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "Target Hit");

	Params::BP_ShootingRange_TimeTrial_C_Target_Hit Parms{};

	Parms.Component = Component;
	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.TrialFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::TrialFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "TrialFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.UpdateCounter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ShootingRange_TimeTrial_C::UpdateCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ShootingRange_TimeTrial_C", "UpdateCounter");

	UObject::ProcessEvent(Func, nullptr);
}

}

