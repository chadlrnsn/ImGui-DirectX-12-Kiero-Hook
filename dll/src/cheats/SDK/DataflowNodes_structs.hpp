#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataflowNodes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataflowEnginePlugin_structs.hpp"
#include "Chaos_structs.hpp"
#include "DataflowCore_structs.hpp"


namespace SDK
{

// ScriptStruct DataflowNodes.DataflowFunctionProperty
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDataflowFunctionProperty final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataflowFunctionProperty) == 0x000008, "Wrong alignment on FDataflowFunctionProperty");
static_assert(sizeof(FDataflowFunctionProperty) == 0x000010, "Wrong size on FDataflowFunctionProperty");

// ScriptStruct DataflowNodes.ScalarVertexPropertyGroup
// 0x0008 (0x0008 - 0x0000)
struct FScalarVertexPropertyGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScalarVertexPropertyGroup) == 0x000004, "Wrong alignment on FScalarVertexPropertyGroup");
static_assert(sizeof(FScalarVertexPropertyGroup) == 0x000008, "Wrong size on FScalarVertexPropertyGroup");
static_assert(offsetof(FScalarVertexPropertyGroup, Name) == 0x000000, "Member 'FScalarVertexPropertyGroup::Name' has a wrong offset!");

// ScriptStruct DataflowNodes.DataflowCollectionAddScalarVertexPropertyNode
// 0x00F8 (0x0290 - 0x0198)
struct FDataflowCollectionAddScalarVertexPropertyNode final : public FDataflowNode
{
public:
	struct FManagedArrayCollection                Collection;                                        // 0x0198(0x00B0)(NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0248(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollectionAttributeKey                AttributeKey;                                      // 0x0258(0x0020)(NativeAccessSpecifierPublic)
	TArray<float>                                 VertexWeights;                                     // 0x0278(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FScalarVertexPropertyGroup             TargetGroup;                                       // 0x0288(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataflowCollectionAddScalarVertexPropertyNode) == 0x000008, "Wrong alignment on FDataflowCollectionAddScalarVertexPropertyNode");
static_assert(sizeof(FDataflowCollectionAddScalarVertexPropertyNode) == 0x000290, "Wrong size on FDataflowCollectionAddScalarVertexPropertyNode");
static_assert(offsetof(FDataflowCollectionAddScalarVertexPropertyNode, Collection) == 0x000198, "Member 'FDataflowCollectionAddScalarVertexPropertyNode::Collection' has a wrong offset!");
static_assert(offsetof(FDataflowCollectionAddScalarVertexPropertyNode, Name) == 0x000248, "Member 'FDataflowCollectionAddScalarVertexPropertyNode::Name' has a wrong offset!");
static_assert(offsetof(FDataflowCollectionAddScalarVertexPropertyNode, AttributeKey) == 0x000258, "Member 'FDataflowCollectionAddScalarVertexPropertyNode::AttributeKey' has a wrong offset!");
static_assert(offsetof(FDataflowCollectionAddScalarVertexPropertyNode, VertexWeights) == 0x000278, "Member 'FDataflowCollectionAddScalarVertexPropertyNode::VertexWeights' has a wrong offset!");
static_assert(offsetof(FDataflowCollectionAddScalarVertexPropertyNode, TargetGroup) == 0x000288, "Member 'FDataflowCollectionAddScalarVertexPropertyNode::TargetGroup' has a wrong offset!");

// ScriptStruct DataflowNodes.MakeAttributeKeyDataflowNode
// 0x0040 (0x01D8 - 0x0198)
struct FMakeAttributeKeyDataflowNode final : public FDataflowNode
{
public:
	class FString                                 GroupIn;                                           // 0x0198(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttributeIn;                                       // 0x01A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollectionAttributeKey                AttributeKeyOut;                                   // 0x01B8(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FMakeAttributeKeyDataflowNode) == 0x000008, "Wrong alignment on FMakeAttributeKeyDataflowNode");
static_assert(sizeof(FMakeAttributeKeyDataflowNode) == 0x0001D8, "Wrong size on FMakeAttributeKeyDataflowNode");
static_assert(offsetof(FMakeAttributeKeyDataflowNode, GroupIn) == 0x000198, "Member 'FMakeAttributeKeyDataflowNode::GroupIn' has a wrong offset!");
static_assert(offsetof(FMakeAttributeKeyDataflowNode, AttributeIn) == 0x0001A8, "Member 'FMakeAttributeKeyDataflowNode::AttributeIn' has a wrong offset!");
static_assert(offsetof(FMakeAttributeKeyDataflowNode, AttributeKeyOut) == 0x0001B8, "Member 'FMakeAttributeKeyDataflowNode::AttributeKeyOut' has a wrong offset!");

// ScriptStruct DataflowNodes.BreakAttributeKeyDataflowNode
// 0x0040 (0x01D8 - 0x0198)
struct FBreakAttributeKeyDataflowNode final : public FDataflowNode
{
public:
	struct FCollectionAttributeKey                AttributeKeyIn;                                    // 0x0198(0x0020)(NativeAccessSpecifierPublic)
	class FString                                 AttributeOut;                                      // 0x01B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupOut;                                          // 0x01C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBreakAttributeKeyDataflowNode) == 0x000008, "Wrong alignment on FBreakAttributeKeyDataflowNode");
static_assert(sizeof(FBreakAttributeKeyDataflowNode) == 0x0001D8, "Wrong size on FBreakAttributeKeyDataflowNode");
static_assert(offsetof(FBreakAttributeKeyDataflowNode, AttributeKeyIn) == 0x000198, "Member 'FBreakAttributeKeyDataflowNode::AttributeKeyIn' has a wrong offset!");
static_assert(offsetof(FBreakAttributeKeyDataflowNode, AttributeOut) == 0x0001B8, "Member 'FBreakAttributeKeyDataflowNode::AttributeOut' has a wrong offset!");
static_assert(offsetof(FBreakAttributeKeyDataflowNode, GroupOut) == 0x0001C8, "Member 'FBreakAttributeKeyDataflowNode::GroupOut' has a wrong offset!");

// ScriptStruct DataflowNodes.FloatOverrideDataflowNode
// 0x0018 (0x01B0 - 0x0198)
struct FFloatOverrideDataflowNode final : public FDataflowNode
{
public:
	class FName                                   PropertyName;                                      // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyName;                                           // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOut;                                          // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloatOverrideDataflowNode) == 0x000008, "Wrong alignment on FFloatOverrideDataflowNode");
static_assert(sizeof(FFloatOverrideDataflowNode) == 0x0001B0, "Wrong size on FFloatOverrideDataflowNode");
static_assert(offsetof(FFloatOverrideDataflowNode, PropertyName) == 0x000198, "Member 'FFloatOverrideDataflowNode::PropertyName' has a wrong offset!");
static_assert(offsetof(FFloatOverrideDataflowNode, KeyName) == 0x0001A0, "Member 'FFloatOverrideDataflowNode::KeyName' has a wrong offset!");
static_assert(offsetof(FFloatOverrideDataflowNode, ValueOut) == 0x0001A8, "Member 'FFloatOverrideDataflowNode::ValueOut' has a wrong offset!");

// ScriptStruct DataflowNodes.SelectionSetDataflowNode
// 0x0020 (0x01B8 - 0x0198)
struct FSelectionSetDataflowNode final : public FDataflowNode
{
public:
	class FString                                 Indices;                                           // 0x0198(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IndicesOut;                                        // 0x01A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSelectionSetDataflowNode) == 0x000008, "Wrong alignment on FSelectionSetDataflowNode");
static_assert(sizeof(FSelectionSetDataflowNode) == 0x0001B8, "Wrong size on FSelectionSetDataflowNode");
static_assert(offsetof(FSelectionSetDataflowNode, Indices) == 0x000198, "Member 'FSelectionSetDataflowNode::Indices' has a wrong offset!");
static_assert(offsetof(FSelectionSetDataflowNode, IndicesOut) == 0x0001A8, "Member 'FSelectionSetDataflowNode::IndicesOut' has a wrong offset!");

// ScriptStruct DataflowNodes.GetSkeletalMeshDataflowNode
// 0x0010 (0x01A8 - 0x0198)
struct FGetSkeletalMeshDataflowNode final : public FDataflowNode
{
public:
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0198(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetSkeletalMeshDataflowNode) == 0x000008, "Wrong alignment on FGetSkeletalMeshDataflowNode");
static_assert(sizeof(FGetSkeletalMeshDataflowNode) == 0x0001A8, "Wrong size on FGetSkeletalMeshDataflowNode");
static_assert(offsetof(FGetSkeletalMeshDataflowNode, SkeletalMesh) == 0x000198, "Member 'FGetSkeletalMeshDataflowNode::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FGetSkeletalMeshDataflowNode, PropertyName) == 0x0001A0, "Member 'FGetSkeletalMeshDataflowNode::PropertyName' has a wrong offset!");

// ScriptStruct DataflowNodes.GetSkeletonDataflowNode
// 0x0010 (0x01A8 - 0x0198)
struct FGetSkeletonDataflowNode final : public FDataflowNode
{
public:
	class USkeleton*                              Skeleton;                                          // 0x0198(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetSkeletonDataflowNode) == 0x000008, "Wrong alignment on FGetSkeletonDataflowNode");
static_assert(sizeof(FGetSkeletonDataflowNode) == 0x0001A8, "Wrong size on FGetSkeletonDataflowNode");
static_assert(offsetof(FGetSkeletonDataflowNode, Skeleton) == 0x000198, "Member 'FGetSkeletonDataflowNode::Skeleton' has a wrong offset!");
static_assert(offsetof(FGetSkeletonDataflowNode, PropertyName) == 0x0001A0, "Member 'FGetSkeletonDataflowNode::PropertyName' has a wrong offset!");

// ScriptStruct DataflowNodes.SkeletalMeshBoneDataflowNode
// 0x0020 (0x01B8 - 0x0198)
struct FSkeletalMeshBoneDataflowNode final : public FDataflowNode
{
public:
	class FName                                   BoneName;                                          // 0x0198(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndexOut;                                      // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x01AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkeletalMeshBoneDataflowNode) == 0x000008, "Wrong alignment on FSkeletalMeshBoneDataflowNode");
static_assert(sizeof(FSkeletalMeshBoneDataflowNode) == 0x0001B8, "Wrong size on FSkeletalMeshBoneDataflowNode");
static_assert(offsetof(FSkeletalMeshBoneDataflowNode, BoneName) == 0x000198, "Member 'FSkeletalMeshBoneDataflowNode::BoneName' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshBoneDataflowNode, SkeletalMesh) == 0x0001A0, "Member 'FSkeletalMeshBoneDataflowNode::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshBoneDataflowNode, BoneIndexOut) == 0x0001A8, "Member 'FSkeletalMeshBoneDataflowNode::BoneIndexOut' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshBoneDataflowNode, PropertyName) == 0x0001AC, "Member 'FSkeletalMeshBoneDataflowNode::PropertyName' has a wrong offset!");

// ScriptStruct DataflowNodes.SkeletalMeshReferenceTransformDataflowNode
// 0x0078 (0x0210 - 0x0198)
struct FSkeletalMeshReferenceTransformDataflowNode final : public FDataflowNode
{
public:
	class USkeletalMesh*                          SkeletalMeshIn;                                    // 0x0198(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndexIn;                                       // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0xC];                                      // 0x01A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformOut;                                      // 0x01B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshReferenceTransformDataflowNode) == 0x000010, "Wrong alignment on FSkeletalMeshReferenceTransformDataflowNode");
static_assert(sizeof(FSkeletalMeshReferenceTransformDataflowNode) == 0x000210, "Wrong size on FSkeletalMeshReferenceTransformDataflowNode");
static_assert(offsetof(FSkeletalMeshReferenceTransformDataflowNode, SkeletalMeshIn) == 0x000198, "Member 'FSkeletalMeshReferenceTransformDataflowNode::SkeletalMeshIn' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshReferenceTransformDataflowNode, BoneIndexIn) == 0x0001A0, "Member 'FSkeletalMeshReferenceTransformDataflowNode::BoneIndexIn' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshReferenceTransformDataflowNode, TransformOut) == 0x0001B0, "Member 'FSkeletalMeshReferenceTransformDataflowNode::TransformOut' has a wrong offset!");

// ScriptStruct DataflowNodes.GetStaticMeshDataflowNode
// 0x0010 (0x01A8 - 0x0198)
struct FGetStaticMeshDataflowNode final : public FDataflowNode
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0198(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x01A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGetStaticMeshDataflowNode) == 0x000008, "Wrong alignment on FGetStaticMeshDataflowNode");
static_assert(sizeof(FGetStaticMeshDataflowNode) == 0x0001A8, "Wrong size on FGetStaticMeshDataflowNode");
static_assert(offsetof(FGetStaticMeshDataflowNode, StaticMesh) == 0x000198, "Member 'FGetStaticMeshDataflowNode::StaticMesh' has a wrong offset!");
static_assert(offsetof(FGetStaticMeshDataflowNode, PropertyName) == 0x0001A0, "Member 'FGetStaticMeshDataflowNode::PropertyName' has a wrong offset!");

}

