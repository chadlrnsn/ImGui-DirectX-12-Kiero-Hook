#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DonAINavigation

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum DonAINavigation.EDonNavigationQueryStatus
// NumValues: 0x0007
enum class EDonNavigationQueryStatus : uint8
{
	Unscheduled                              = 0,
	InProgress                               = 1,
	Success                                  = 2,
	Failure                                  = 3,
	QueryHasNoSolution                       = 4,
	TimedOut                                 = 5,
	EDonNavigationQueryStatus_MAX            = 6,
};

// Enum DonAINavigation.EVoxelNavigationType
// NumValues: 0x0006
enum class EVoxelNavigationType : uint8
{
	TBD                                      = 0,
	Flyable                                  = 1,
	Walkable                                 = 2,
	Climbable                                = 3,
	Blocked                                  = 4,
	EVoxelNavigationType_MAX                 = 5,
};

// Enum DonAINavigation.EGeneratedNavigationType
// NumValues: 0x0006
enum class EGeneratedNavigationType : uint8
{
	T                                        = 0,
	F                                        = 1,
	W                                        = 2,
	C                                        = 3,
	B                                        = 4,
	EGeneratedNavigationType_MAX             = 5,
};

// ScriptStruct DonAINavigation.DonNavigationTask
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDonNavigationTask
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonNavigationTask) == 0x000008, "Wrong alignment on FDonNavigationTask");
static_assert(sizeof(FDonNavigationTask) == 0x000008, "Wrong size on FDonNavigationTask");

// ScriptStruct DonAINavigation.DonNavigationDynamicCollisionPayload
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDonNavigationDynamicCollisionPayload final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonNavigationDynamicCollisionPayload) == 0x000008, "Wrong alignment on FDonNavigationDynamicCollisionPayload");
static_assert(sizeof(FDonNavigationDynamicCollisionPayload) == 0x000018, "Wrong size on FDonNavigationDynamicCollisionPayload");

// ScriptStruct DonAINavigation.DoNNavigationDebugParams
// 0x000C (0x000C - 0x0000)
struct FDoNNavigationDebugParams
{
public:
	bool                                          DrawDebugVolumes;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisualizeRawPath;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisualizeOptimizedPath;                            // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VisualizeInRealTime;                               // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineDuration;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoNNavigationDebugParams) == 0x000004, "Wrong alignment on FDoNNavigationDebugParams");
static_assert(sizeof(FDoNNavigationDebugParams) == 0x00000C, "Wrong size on FDoNNavigationDebugParams");
static_assert(offsetof(FDoNNavigationDebugParams, DrawDebugVolumes) == 0x000000, "Member 'FDoNNavigationDebugParams::DrawDebugVolumes' has a wrong offset!");
static_assert(offsetof(FDoNNavigationDebugParams, VisualizeRawPath) == 0x000001, "Member 'FDoNNavigationDebugParams::VisualizeRawPath' has a wrong offset!");
static_assert(offsetof(FDoNNavigationDebugParams, VisualizeOptimizedPath) == 0x000002, "Member 'FDoNNavigationDebugParams::VisualizeOptimizedPath' has a wrong offset!");
static_assert(offsetof(FDoNNavigationDebugParams, VisualizeInRealTime) == 0x000003, "Member 'FDoNNavigationDebugParams::VisualizeInRealTime' has a wrong offset!");
static_assert(offsetof(FDoNNavigationDebugParams, LineThickness) == 0x000004, "Member 'FDoNNavigationDebugParams::LineThickness' has a wrong offset!");
static_assert(offsetof(FDoNNavigationDebugParams, LineDuration) == 0x000008, "Member 'FDoNNavigationDebugParams::LineDuration' has a wrong offset!");

// ScriptStruct DonAINavigation.BT_FlyToTarget_DebugParams
// 0x0004 (0x0010 - 0x000C)
struct FBT_FlyToTarget_DebugParams final : public FDoNNavigationDebugParams
{
public:
	bool                                          bVisualizePawnAsVoxels;                            // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBT_FlyToTarget_DebugParams) == 0x000004, "Wrong alignment on FBT_FlyToTarget_DebugParams");
static_assert(sizeof(FBT_FlyToTarget_DebugParams) == 0x000010, "Wrong size on FBT_FlyToTarget_DebugParams");
static_assert(offsetof(FBT_FlyToTarget_DebugParams, bVisualizePawnAsVoxels) == 0x00000C, "Member 'FBT_FlyToTarget_DebugParams::bVisualizePawnAsVoxels' has a wrong offset!");

// ScriptStruct DonAINavigation.DoNNavigationQueryParams
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FDoNNavigationQueryParams final
{
public:
	float                                         QueryTimeout;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlexibleOriginGoal;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipOptimizationPass;                             // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxOptimizerSweepAttemptsPerNode;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreciseDynamicCollisionRepathing;                 // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDynamicCollisionRepathingForDirectGoals;    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionShapeInflation;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRescheduleQuery;                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0xB];                                       // 0x0015(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoNNavigationQueryParams) == 0x000008, "Wrong alignment on FDoNNavigationQueryParams");
static_assert(sizeof(FDoNNavigationQueryParams) == 0x000020, "Wrong size on FDoNNavigationQueryParams");
static_assert(offsetof(FDoNNavigationQueryParams, QueryTimeout) == 0x000000, "Member 'FDoNNavigationQueryParams::QueryTimeout' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, bFlexibleOriginGoal) == 0x000004, "Member 'FDoNNavigationQueryParams::bFlexibleOriginGoal' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, bSkipOptimizationPass) == 0x000005, "Member 'FDoNNavigationQueryParams::bSkipOptimizationPass' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, MaxOptimizerSweepAttemptsPerNode) == 0x000008, "Member 'FDoNNavigationQueryParams::MaxOptimizerSweepAttemptsPerNode' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, bPreciseDynamicCollisionRepathing) == 0x00000C, "Member 'FDoNNavigationQueryParams::bPreciseDynamicCollisionRepathing' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, bIgnoreDynamicCollisionRepathingForDirectGoals) == 0x00000D, "Member 'FDoNNavigationQueryParams::bIgnoreDynamicCollisionRepathingForDirectGoals' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, CollisionShapeInflation) == 0x000010, "Member 'FDoNNavigationQueryParams::CollisionShapeInflation' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryParams, bForceRescheduleQuery) == 0x000014, "Member 'FDoNNavigationQueryParams::bForceRescheduleQuery' has a wrong offset!");

// ScriptStruct DonAINavigation.DoNNavigationQueryData
// 0x0188 (0x0188 - 0x0000)
struct FDoNNavigationQueryData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     CollisionComponent;                                // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoxelNavigationType                          NavigationType;                                    // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowJump;                                        // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxJumpDistance;                                   // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFlightHeight;                                   // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlightHeight;                                   // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDoNNavigationQueryParams              QueryParams;                                       // 0x0058(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x48];                                      // 0x0078(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          AttachedActors;                                    // 0x00C0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0xA0];                                      // 0x00D0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PathSolutionOptimized;                             // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EDonNavigationQueryStatus                     QueryStatus;                                       // 0x0180(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoNNavigationQueryData) == 0x000008, "Wrong alignment on FDoNNavigationQueryData");
static_assert(sizeof(FDoNNavigationQueryData) == 0x000188, "Wrong size on FDoNNavigationQueryData");
static_assert(offsetof(FDoNNavigationQueryData, Actor) == 0x000008, "Member 'FDoNNavigationQueryData::Actor' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, CollisionComponent) == 0x000010, "Member 'FDoNNavigationQueryData::CollisionComponent' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, Origin) == 0x000018, "Member 'FDoNNavigationQueryData::Origin' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, Destination) == 0x000030, "Member 'FDoNNavigationQueryData::Destination' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, NavigationType) == 0x000048, "Member 'FDoNNavigationQueryData::NavigationType' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, bAllowJump) == 0x000049, "Member 'FDoNNavigationQueryData::bAllowJump' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, MaxJumpDistance) == 0x00004C, "Member 'FDoNNavigationQueryData::MaxJumpDistance' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, MinFlightHeight) == 0x000050, "Member 'FDoNNavigationQueryData::MinFlightHeight' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, MaxFlightHeight) == 0x000054, "Member 'FDoNNavigationQueryData::MaxFlightHeight' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, QueryParams) == 0x000058, "Member 'FDoNNavigationQueryData::QueryParams' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, AttachedActors) == 0x0000C0, "Member 'FDoNNavigationQueryData::AttachedActors' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, PathSolutionOptimized) == 0x000170, "Member 'FDoNNavigationQueryData::PathSolutionOptimized' has a wrong offset!");
static_assert(offsetof(FDoNNavigationQueryData, QueryStatus) == 0x000180, "Member 'FDoNNavigationQueryData::QueryStatus' has a wrong offset!");

// ScriptStruct DonAINavigation.DonNavigationDynamicCollisionNotifyee
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDonNavigationDynamicCollisionNotifyee final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FDonNavigationDynamicCollisionPayload& Data)> Listener;              // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonNavigationDynamicCollisionNotifyee) == 0x000008, "Wrong alignment on FDonNavigationDynamicCollisionNotifyee");
static_assert(sizeof(FDonNavigationDynamicCollisionNotifyee) == 0x000030, "Wrong size on FDonNavigationDynamicCollisionNotifyee");
static_assert(offsetof(FDonNavigationDynamicCollisionNotifyee, Listener) == 0x000008, "Member 'FDonNavigationDynamicCollisionNotifyee::Listener' has a wrong offset!");

// ScriptStruct DonAINavigation.DonNavigationQueryTask
// 0x01B8 (0x01C0 - 0x0008)
struct FDonNavigationQueryTask final : public FDonNavigationTask
{
public:
	uint8                                         Pad_8[0x194];                                      // 0x0008(0x0194)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FDoNNavigationQueryData& Data)> ResultHandler;                       // 0x019C(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FDonNavigationDynamicCollisionPayload& Data)> DynamicCollisionListener; // 0x01AC(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonNavigationQueryTask) == 0x000008, "Wrong alignment on FDonNavigationQueryTask");
static_assert(sizeof(FDonNavigationQueryTask) == 0x0001C0, "Wrong size on FDonNavigationQueryTask");
static_assert(offsetof(FDonNavigationQueryTask, ResultHandler) == 0x00019C, "Member 'FDonNavigationQueryTask::ResultHandler' has a wrong offset!");
static_assert(offsetof(FDonNavigationQueryTask, DynamicCollisionListener) == 0x0001AC, "Member 'FDonNavigationQueryTask::DynamicCollisionListener' has a wrong offset!");

// ScriptStruct DonAINavigation.DonNavigationDynamicCollisionTask
// 0x0130 (0x0138 - 0x0008)
struct FDonNavigationDynamicCollisionTask final : public FDonNavigationTask
{
public:
	uint8                                         Pad_8[0x130];                                      // 0x0008(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDonNavigationDynamicCollisionTask) == 0x000008, "Wrong alignment on FDonNavigationDynamicCollisionTask");
static_assert(sizeof(FDonNavigationDynamicCollisionTask) == 0x000138, "Wrong size on FDonNavigationDynamicCollisionTask");

// ScriptStruct DonAINavigation.GeneratedVoxelData
// 0x0001 (0x0001 - 0x0000)
struct FGeneratedVoxelData final
{
public:
	EGeneratedNavigationType                      T;                                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedVoxelData) == 0x000001, "Wrong alignment on FGeneratedVoxelData");
static_assert(sizeof(FGeneratedVoxelData) == 0x000001, "Wrong size on FGeneratedVoxelData");
static_assert(offsetof(FGeneratedVoxelData, T) == 0x000000, "Member 'FGeneratedVoxelData::T' has a wrong offset!");

// ScriptStruct DonAINavigation.GeneratedNavVolumeSet
// 0x0010 (0x0018 - 0x0008)
struct FGeneratedNavVolumeSet final : public FTableRowBase
{
public:
	TArray<struct FGeneratedVoxelData>            D;                                                 // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedNavVolumeSet) == 0x000008, "Wrong alignment on FGeneratedNavVolumeSet");
static_assert(sizeof(FGeneratedNavVolumeSet) == 0x000018, "Wrong size on FGeneratedNavVolumeSet");
static_assert(offsetof(FGeneratedNavVolumeSet, D) == 0x000008, "Member 'FGeneratedNavVolumeSet::D' has a wrong offset!");

}

