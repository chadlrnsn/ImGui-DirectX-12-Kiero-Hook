#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRange_TimeTrial

#include "Basic.hpp"

#include "RGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.Activate
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_Activate final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Positive;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_Activate) == 0x000004, "Wrong alignment on BP_ShootingRange_TimeTrial_C_Activate");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_Activate) == 0x000008, "Wrong size on BP_ShootingRange_TimeTrial_C_Activate");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Activate, ID) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_Activate::ID' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Activate, Positive) == 0x000004, "Member 'BP_ShootingRange_TimeTrial_C_Activate::Positive' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ActivateAvailableFlipper
// 0x0098 (0x0098 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper final
{
public:
	class ABP_ShootingRange_DummyFlipper_C*       LocalFlipper;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TSet<class ABP_ShootingRange_DummyFlipper_C*> LocalSet;                                          // 0x0008(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TDelegate<void(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)> K2Node_CreateDelegate_OutputDelegate; // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_IsNotEmpty_ReturnValue;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ShootingRange_DummyFlipper_C*> CallFunc_Set_ToArray_Result;                     // 0x0070(0x0010)(ReferenceParm)
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Array_Random_OutItem;                     // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper) == 0x000098, "Wrong size on BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, LocalFlipper) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::LocalFlipper' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, LocalSet) == 0x000008, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::LocalSet' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, K2Node_CreateDelegate_OutputDelegate) == 0x000058, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Set_IsNotEmpty_ReturnValue) == 0x000068, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Set_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Array_AddUnique_ReturnValue) == 0x00006C, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Set_ToArray_Result) == 0x000070, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Array_Random_OutItem) == 0x000080, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Array_Random_OutIndex) == 0x000088, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Array_Length_ReturnValue) == 0x00008C, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BP_ShootingRange_TimeTrial_C_ActivateAvailableFlipper::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ExecuteUbergraph_BP_ShootingRange_TimeTrial
// 0x00F8 (0x00F8 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_ID;                                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Positive;                             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x00B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput; // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast;   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial) == 0x0000F8, "Wrong size on BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, EntryPoint) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_RandomFloatInRange_ReturnValue) == 0x000028, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000040, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000068, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000080, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, K2Node_Event_ID) == 0x000090, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::K2Node_Event_ID' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, K2Node_Event_Positive) == 0x000094, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::K2Node_Event_Positive' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_IsValid_ReturnValue_1) == 0x000095, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, K2Node_CreateDelegate_OutputDelegate_2) == 0x000098, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x0000B0, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_HasAuthority_ReturnValue) == 0x0000B8, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_IsValid_ReturnValue_2) == 0x0000B9, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_SetFloatParameter_self_CastInput) == 0x0000C0, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_SetFloatParameter_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x0000D0, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000D8, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_SetFloatParameter_InFloat_ImplicitCast) == 0x0000E0, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_SetFloatParameter_InFloat_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0000E8, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x0000F0, "Member 'BP_ShootingRange_TimeTrial_C_ExecuteUbergraph_BP_ShootingRange_TimeTrial::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.ResetAndSetup
// 0x0090 (0x0090 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_ResetAndSetup final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ShootingRange_DummyFlipper_C*> CallFunc_Set_ToArray_Result;                     // 0x0018(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ShootingRangeSpline_C*>      CallFunc_GetAllActorsOfClass_OutActors;            // 0x0040(0x0010)(ReferenceParm)
	class ABP_ShootingRangeSpline_C*              CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_ShootingRange_DummyFlipper_C*> CallFunc_GetAllActorsOfClass_OutActors_1;        // 0x0070(0x0010)(ReferenceParm)
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Array_Get_Item_2;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_ResetAndSetup) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_ResetAndSetup");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_ResetAndSetup) == 0x000090, "Wrong size on BP_ShootingRange_TimeTrial_C_ResetAndSetup");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Array_Index_Variable_1) == 0x000004, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Array_Index_Variable_2) == 0x000010, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Set_ToArray_Result) == 0x000018, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_GetAllActorsOfClass_OutActors) == 0x000040, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, Temp_int_Loop_Counter_Variable_2) == 0x000060, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Less_IntInt_ReturnValue_1) == 0x000064, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000070, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Get_Item_2) == 0x000080, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Array_Length_ReturnValue_2) == 0x000088, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_ResetAndSetup, CallFunc_Less_IntInt_ReturnValue_2) == 0x00008C, "Member 'BP_ShootingRange_TimeTrial_C_ResetAndSetup::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.SetScorboardState
// 0x0001 (0x0001 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_SetScorboardState final
{
public:
	bool                                          Retract;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_SetScorboardState) == 0x000001, "Wrong alignment on BP_ShootingRange_TimeTrial_C_SetScorboardState");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_SetScorboardState) == 0x000001, "Wrong size on BP_ShootingRange_TimeTrial_C_SetScorboardState");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_SetScorboardState, Retract) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_SetScorboardState::Retract' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.Target Hit
// 0x0108 (0x0108 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_Target_Hit final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDamageCombatEvent                     DamageEvent;                                       // 0x0008(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         PointsToAward;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ShootingRangeDummy_C*               K2Node_DynamicCast_AsBP_Shooting_Range_Dummy;      // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)> K2Node_CreateDelegate_OutputDelegate; // 0x00E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Map_Find_Value;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_Target_Hit) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_Target_Hit");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_Target_Hit) == 0x000108, "Wrong size on BP_ShootingRange_TimeTrial_C_Target_Hit");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, Component) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::Component' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, DamageEvent) == 0x000008, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, PointsToAward) == 0x0000C8, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::PointsToAward' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, CallFunc_GetOwner_ReturnValue) == 0x0000D0, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, K2Node_DynamicCast_AsBP_Shooting_Range_Dummy) == 0x0000D8, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::K2Node_DynamicCast_AsBP_Shooting_Range_Dummy' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, K2Node_CreateDelegate_OutputDelegate) == 0x0000E4, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, CallFunc_Add_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, CallFunc_Map_Find_Value) == 0x0000F8, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, CallFunc_Map_Find_ReturnValue) == 0x000100, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_Target_Hit, CallFunc_Array_RemoveItem_ReturnValue) == 0x000101, "Member 'BP_ShootingRange_TimeTrial_C_Target_Hit::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.TrialFinished
// 0x0078 (0x0078 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_TrialFinished final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ShootingRangeSpline_C*>      CallFunc_GetAllActorsOfClass_OutActors;            // 0x0038(0x0010)(ReferenceParm)
	TArray<class ABP_ShootingRange_DummyFlipper_C*> CallFunc_GetAllActorsOfClass_OutActors_1;        // 0x0048(0x0010)(ReferenceParm)
	class ABP_ShootingRangeSpline_C*              CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ShootingRange_DummyFlipper_C*       CallFunc_Array_Get_Item_2;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_TrialFinished) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_TrialFinished");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_TrialFinished) == 0x000078, "Wrong size on BP_ShootingRange_TimeTrial_C_TrialFinished");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Array_Index_Variable_1) == 0x000004, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Array_Index_Variable_2) == 0x000010, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, Temp_int_Loop_Counter_Variable_2) == 0x00002C, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Add_IntInt_ReturnValue_2) == 0x000034, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_GetAllActorsOfClass_OutActors) == 0x000038, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000048, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Get_Item_2) == 0x000060, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Array_Length_ReturnValue_2) == 0x00006C, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Less_IntInt_ReturnValue_1) == 0x000070, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_TrialFinished, CallFunc_Less_IntInt_ReturnValue_2) == 0x000071, "Member 'BP_ShootingRange_TimeTrial_C_TrialFinished::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C.UpdateCounter
// 0x0010 (0x0010 - 0x0000)
struct BP_ShootingRange_TimeTrial_C_UpdateCounter final
{
public:
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0000(0x0010)()
};
static_assert(alignof(BP_ShootingRange_TimeTrial_C_UpdateCounter) == 0x000008, "Wrong alignment on BP_ShootingRange_TimeTrial_C_UpdateCounter");
static_assert(sizeof(BP_ShootingRange_TimeTrial_C_UpdateCounter) == 0x000010, "Wrong size on BP_ShootingRange_TimeTrial_C_UpdateCounter");
static_assert(offsetof(BP_ShootingRange_TimeTrial_C_UpdateCounter, CallFunc_Conv_IntToText_ReturnValue) == 0x000000, "Member 'BP_ShootingRange_TimeTrial_C_UpdateCounter::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

}

