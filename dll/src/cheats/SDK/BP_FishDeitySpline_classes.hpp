#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FishDeitySpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FishDeitySpline.BP_FishDeitySpline_C
// 0x0048 (0x02F0 - 0x02A8)
class ABP_FishDeitySpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Alpha_050FB5204D0527817EED6D8598C55DD3;   // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_050FB5204D0527817EED6D8598C55DD3; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TrapRef;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	float                                         MoveAlpha;                                         // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LapDuration;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AREnemySpawnAreaSegment*                SegmentRef;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          DestroyAfterSegment;                               // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetRotation;                                       // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BP_ShootingRangeSpline_AutoGenFunc(bool* RetValue);
	void ExecuteUbergraph_BP_FishDeitySpline(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FishDeitySpline_C">();
	}
	static class ABP_FishDeitySpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FishDeitySpline_C>();
	}
};
static_assert(alignof(ABP_FishDeitySpline_C) == 0x000008, "Wrong alignment on ABP_FishDeitySpline_C");
static_assert(sizeof(ABP_FishDeitySpline_C) == 0x0002F0, "Wrong size on ABP_FishDeitySpline_C");
static_assert(offsetof(ABP_FishDeitySpline_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_FishDeitySpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, Spline) == 0x0002B0, "Member 'ABP_FishDeitySpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, Timeline_Alpha_050FB5204D0527817EED6D8598C55DD3) == 0x0002B8, "Member 'ABP_FishDeitySpline_C::Timeline_Alpha_050FB5204D0527817EED6D8598C55DD3' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, Timeline__Direction_050FB5204D0527817EED6D8598C55DD3) == 0x0002BC, "Member 'ABP_FishDeitySpline_C::Timeline__Direction_050FB5204D0527817EED6D8598C55DD3' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, Timeline) == 0x0002C0, "Member 'ABP_FishDeitySpline_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, TrapRef) == 0x0002C8, "Member 'ABP_FishDeitySpline_C::TrapRef' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, MoveAlpha) == 0x0002D0, "Member 'ABP_FishDeitySpline_C::MoveAlpha' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, LapDuration) == 0x0002D8, "Member 'ABP_FishDeitySpline_C::LapDuration' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, SegmentRef) == 0x0002E0, "Member 'ABP_FishDeitySpline_C::SegmentRef' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, DestroyAfterSegment) == 0x0002E8, "Member 'ABP_FishDeitySpline_C::DestroyAfterSegment' has a wrong offset!");
static_assert(offsetof(ABP_FishDeitySpline_C, SetRotation) == 0x0002E9, "Member 'ABP_FishDeitySpline_C::SetRotation' has a wrong offset!");

}

