#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayCameras

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GameplayCameras_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "StateTreeModule_structs.hpp"
#include "StateTreeModule_classes.hpp"


namespace SDK
{

// Class GameplayCameras.HasCameraBuildStatus
// 0x0000 (0x0000 - 0x0000)
class IHasCameraBuildStatus final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HasCameraBuildStatus">();
	}
	static class IHasCameraBuildStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHasCameraBuildStatus>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHasCameraBuildStatus) == 0x000001, "Wrong alignment on IHasCameraBuildStatus");
static_assert(sizeof(IHasCameraBuildStatus) == 0x000001, "Wrong size on IHasCameraBuildStatus");

// Class GameplayCameras.CameraNode
// 0x0010 (0x0038 - 0x0028)
class UCameraNode : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEnabled;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraNode">();
	}
	static class UCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraNode>();
	}
};
static_assert(alignof(UCameraNode) == 0x000008, "Wrong alignment on UCameraNode");
static_assert(sizeof(UCameraNode) == 0x000038, "Wrong size on UCameraNode");
static_assert(offsetof(UCameraNode, bIsEnabled) == 0x000030, "Member 'UCameraNode::bIsEnabled' has a wrong offset!");

// Class GameplayCameras.CombinedCameraRigsCameraNode
// 0x0010 (0x0048 - 0x0038)
class UCombinedCameraRigsCameraNode final : public UCameraNode
{
public:
	TArray<struct FCameraRigAssetReference>       CameraRigReferences;                               // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CombinedCameraRigsCameraNode">();
	}
	static class UCombinedCameraRigsCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCombinedCameraRigsCameraNode>();
	}
};
static_assert(alignof(UCombinedCameraRigsCameraNode) == 0x000008, "Wrong alignment on UCombinedCameraRigsCameraNode");
static_assert(sizeof(UCombinedCameraRigsCameraNode) == 0x000048, "Wrong size on UCombinedCameraRigsCameraNode");
static_assert(offsetof(UCombinedCameraRigsCameraNode, CameraRigReferences) == 0x000038, "Member 'UCombinedCameraRigsCameraNode::CameraRigReferences' has a wrong offset!");

// Class GameplayCameras.Input1DCameraNode
// 0x0000 (0x0038 - 0x0038)
class UInput1DCameraNode : public UCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Input1DCameraNode">();
	}
	static class UInput1DCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInput1DCameraNode>();
	}
};
static_assert(alignof(UInput1DCameraNode) == 0x000008, "Wrong alignment on UInput1DCameraNode");
static_assert(sizeof(UInput1DCameraNode) == 0x000038, "Wrong size on UInput1DCameraNode");

// Class GameplayCameras.CameraRigInput1DSlot
// 0x0048 (0x0080 - 0x0038)
class UCameraRigInput1DSlot final : public UInput1DCameraNode
{
public:
	struct FCameraRigInputSlotParameters          InputSlotParameters;                               // 0x0038(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraParameterClamping               clamp;                                             // 0x0040(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraParameterNormalization          Normalize;                                         // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBuiltInDoubleCameraVariable                  BuiltInVariable;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDoubleCameraVariableReference         CustomVariable;                                    // 0x0070(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraVariableID                      TransientVariableID;                               // 0x0078(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCameraVariableID                      VariableID;                                        // 0x007C(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigInput1DSlot">();
	}
	static class UCameraRigInput1DSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigInput1DSlot>();
	}
};
static_assert(alignof(UCameraRigInput1DSlot) == 0x000008, "Wrong alignment on UCameraRigInput1DSlot");
static_assert(sizeof(UCameraRigInput1DSlot) == 0x000080, "Wrong size on UCameraRigInput1DSlot");
static_assert(offsetof(UCameraRigInput1DSlot, InputSlotParameters) == 0x000038, "Member 'UCameraRigInput1DSlot::InputSlotParameters' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, clamp) == 0x000040, "Member 'UCameraRigInput1DSlot::clamp' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, Normalize) == 0x000058, "Member 'UCameraRigInput1DSlot::Normalize' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, BuiltInVariable) == 0x000068, "Member 'UCameraRigInput1DSlot::BuiltInVariable' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, CustomVariable) == 0x000070, "Member 'UCameraRigInput1DSlot::CustomVariable' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, TransientVariableID) == 0x000078, "Member 'UCameraRigInput1DSlot::TransientVariableID' has a wrong offset!");
static_assert(offsetof(UCameraRigInput1DSlot, VariableID) == 0x00007C, "Member 'UCameraRigInput1DSlot::VariableID' has a wrong offset!");

// Class GameplayCameras.Input2DCameraNode
// 0x0000 (0x0038 - 0x0038)
class UInput2DCameraNode : public UCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Input2DCameraNode">();
	}
	static class UInput2DCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInput2DCameraNode>();
	}
};
static_assert(alignof(UInput2DCameraNode) == 0x000008, "Wrong alignment on UInput2DCameraNode");
static_assert(sizeof(UInput2DCameraNode) == 0x000038, "Wrong size on UInput2DCameraNode");

// Class GameplayCameras.CameraRigInput2DSlot
// 0x0070 (0x00A8 - 0x0038)
class UCameraRigInput2DSlot : public UInput2DCameraNode
{
public:
	struct FCameraRigInputSlotParameters          InputSlotParameters;                               // 0x0038(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraParameterClamping               ClampX;                                            // 0x0040(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraParameterClamping               ClampY;                                            // 0x0058(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraParameterNormalization          NormalizeX;                                        // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraParameterNormalization          NormalizeY;                                        // 0x0080(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBuiltInVector2dCameraVariable                BuiltInVariable;                                   // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2dCameraVariableReference       CustomVariable;                                    // 0x0098(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCameraVariableID                      TransientVariableID;                               // 0x00A0(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCameraVariableID                      VariableID;                                        // 0x00A4(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigInput2DSlot">();
	}
	static class UCameraRigInput2DSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigInput2DSlot>();
	}
};
static_assert(alignof(UCameraRigInput2DSlot) == 0x000008, "Wrong alignment on UCameraRigInput2DSlot");
static_assert(sizeof(UCameraRigInput2DSlot) == 0x0000A8, "Wrong size on UCameraRigInput2DSlot");
static_assert(offsetof(UCameraRigInput2DSlot, InputSlotParameters) == 0x000038, "Member 'UCameraRigInput2DSlot::InputSlotParameters' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, ClampX) == 0x000040, "Member 'UCameraRigInput2DSlot::ClampX' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, ClampY) == 0x000058, "Member 'UCameraRigInput2DSlot::ClampY' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, NormalizeX) == 0x000070, "Member 'UCameraRigInput2DSlot::NormalizeX' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, NormalizeY) == 0x000080, "Member 'UCameraRigInput2DSlot::NormalizeY' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, BuiltInVariable) == 0x000090, "Member 'UCameraRigInput2DSlot::BuiltInVariable' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, CustomVariable) == 0x000098, "Member 'UCameraRigInput2DSlot::CustomVariable' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, TransientVariableID) == 0x0000A0, "Member 'UCameraRigInput2DSlot::TransientVariableID' has a wrong offset!");
static_assert(offsetof(UCameraRigInput2DSlot, VariableID) == 0x0000A4, "Member 'UCameraRigInput2DSlot::VariableID' has a wrong offset!");

// Class GameplayCameras.CameraRigProxyAsset
// 0x0010 (0x0038 - 0x0028)
class UCameraRigProxyAsset final : public UObject
{
public:
	struct FGuid                                  Guid;                                              // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigProxyAsset">();
	}
	static class UCameraRigProxyAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigProxyAsset>();
	}
};
static_assert(alignof(UCameraRigProxyAsset) == 0x000008, "Wrong alignment on UCameraRigProxyAsset");
static_assert(sizeof(UCameraRigProxyAsset) == 0x000038, "Wrong size on UCameraRigProxyAsset");
static_assert(offsetof(UCameraRigProxyAsset, Guid) == 0x000028, "Member 'UCameraRigProxyAsset::Guid' has a wrong offset!");

// Class GameplayCameras.CameraRigProxyTable
// 0x0010 (0x0038 - 0x0028)
class UCameraRigProxyTable final : public UObject
{
public:
	TArray<struct FCameraRigProxyTableEntry>      Entries;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigProxyTable">();
	}
	static class UCameraRigProxyTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigProxyTable>();
	}
};
static_assert(alignof(UCameraRigProxyTable) == 0x000008, "Wrong alignment on UCameraRigProxyTable");
static_assert(sizeof(UCameraRigProxyTable) == 0x000038, "Wrong size on UCameraRigProxyTable");
static_assert(offsetof(UCameraRigProxyTable, Entries) == 0x000028, "Member 'UCameraRigProxyTable::Entries' has a wrong offset!");

// Class GameplayCameras.GameplayCameraSystemHost
// 0x0010 (0x0038 - 0x0028)
class UGameplayCameraSystemHost final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCameraSystemHost">();
	}
	static class UGameplayCameraSystemHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCameraSystemHost>();
	}
};
static_assert(alignof(UGameplayCameraSystemHost) == 0x000008, "Wrong alignment on UGameplayCameraSystemHost");
static_assert(sizeof(UGameplayCameraSystemHost) == 0x000038, "Wrong size on UGameplayCameraSystemHost");

// Class GameplayCameras.InputAxisBinding2DCameraNode
// 0x0048 (0x00F0 - 0x00A8)
class UInputAxisBinding2DCameraNode final : public UCameraRigInput2DSlot
{
public:
	TArray<class UInputAction*>                   AxisActions;                                       // 0x00A8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                RevertAxisX;                                       // 0x00B8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                RevertAxisY;                                       // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2dCameraParameter               Multiplier;                                        // 0x00D8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputAxisBinding2DCameraNode">();
	}
	static class UInputAxisBinding2DCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputAxisBinding2DCameraNode>();
	}
};
static_assert(alignof(UInputAxisBinding2DCameraNode) == 0x000008, "Wrong alignment on UInputAxisBinding2DCameraNode");
static_assert(sizeof(UInputAxisBinding2DCameraNode) == 0x0000F0, "Wrong size on UInputAxisBinding2DCameraNode");
static_assert(offsetof(UInputAxisBinding2DCameraNode, AxisActions) == 0x0000A8, "Member 'UInputAxisBinding2DCameraNode::AxisActions' has a wrong offset!");
static_assert(offsetof(UInputAxisBinding2DCameraNode, RevertAxisX) == 0x0000B8, "Member 'UInputAxisBinding2DCameraNode::RevertAxisX' has a wrong offset!");
static_assert(offsetof(UInputAxisBinding2DCameraNode, RevertAxisY) == 0x0000C8, "Member 'UInputAxisBinding2DCameraNode::RevertAxisY' has a wrong offset!");
static_assert(offsetof(UInputAxisBinding2DCameraNode, Multiplier) == 0x0000D8, "Member 'UInputAxisBinding2DCameraNode::Multiplier' has a wrong offset!");

// Class GameplayCameras.ObjectTreeGraphObject
// 0x0000 (0x0000 - 0x0000)
class IObjectTreeGraphObject final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectTreeGraphObject">();
	}
	static class IObjectTreeGraphObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IObjectTreeGraphObject>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IObjectTreeGraphObject) == 0x000001, "Wrong alignment on IObjectTreeGraphObject");
static_assert(sizeof(IObjectTreeGraphObject) == 0x000001, "Wrong size on IObjectTreeGraphObject");

// Class GameplayCameras.ObjectTreeGraphRootObject
// 0x0000 (0x0000 - 0x0000)
class IObjectTreeGraphRootObject final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectTreeGraphRootObject">();
	}
	static class IObjectTreeGraphRootObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<IObjectTreeGraphRootObject>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IObjectTreeGraphRootObject) == 0x000001, "Wrong alignment on IObjectTreeGraphRootObject");
static_assert(sizeof(IObjectTreeGraphRootObject) == 0x000001, "Wrong size on IObjectTreeGraphRootObject");

// Class GameplayCameras.BlendCameraNode
// 0x0000 (0x0038 - 0x0038)
class UBlendCameraNode : public UCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlendCameraNode">();
	}
	static class UBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendCameraNode>();
	}
};
static_assert(alignof(UBlendCameraNode) == 0x000008, "Wrong alignment on UBlendCameraNode");
static_assert(sizeof(UBlendCameraNode) == 0x000038, "Wrong size on UBlendCameraNode");

// Class GameplayCameras.BlendStackCameraNode
// 0x0008 (0x0040 - 0x0038)
class UBlendStackCameraNode final : public UCameraNode
{
public:
	ECameraBlendStackType                         BlendStackType;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlendStackCameraNode">();
	}
	static class UBlendStackCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendStackCameraNode>();
	}
};
static_assert(alignof(UBlendStackCameraNode) == 0x000008, "Wrong alignment on UBlendStackCameraNode");
static_assert(sizeof(UBlendStackCameraNode) == 0x000040, "Wrong size on UBlendStackCameraNode");
static_assert(offsetof(UBlendStackCameraNode, BlendStackType) == 0x000038, "Member 'UBlendStackCameraNode::BlendStackType' has a wrong offset!");

// Class GameplayCameras.BlendStackRootCameraNode
// 0x0010 (0x0048 - 0x0038)
class UBlendStackRootCameraNode final : public UCameraNode
{
public:
	class UBlendCameraNode*                       Blend;                                             // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraNode*                            RootNode;                                          // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlendStackRootCameraNode">();
	}
	static class UBlendStackRootCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlendStackRootCameraNode>();
	}
};
static_assert(alignof(UBlendStackRootCameraNode) == 0x000008, "Wrong alignment on UBlendStackRootCameraNode");
static_assert(sizeof(UBlendStackRootCameraNode) == 0x000048, "Wrong size on UBlendStackRootCameraNode");
static_assert(offsetof(UBlendStackRootCameraNode, Blend) == 0x000038, "Member 'UBlendStackRootCameraNode::Blend' has a wrong offset!");
static_assert(offsetof(UBlendStackRootCameraNode, RootNode) == 0x000040, "Member 'UBlendStackRootCameraNode::RootNode' has a wrong offset!");

// Class GameplayCameras.CameraAsset
// 0x0060 (0x0088 - 0x0028)
class UCameraAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraDirector*                        CameraDirector;                                    // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UCameraRigAsset*>                CameraRigs;                                        // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UCameraRigTransition*>           EnterTransitions;                                  // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UCameraRigTransition*>           ExitTransitions;                                   // 0x0070(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	ECameraBuildStatus                            BuildStatus;                                       // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraAsset">();
	}
	static class UCameraAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraAsset>();
	}
};
static_assert(alignof(UCameraAsset) == 0x000008, "Wrong alignment on UCameraAsset");
static_assert(sizeof(UCameraAsset) == 0x000088, "Wrong size on UCameraAsset");
static_assert(offsetof(UCameraAsset, CameraDirector) == 0x000048, "Member 'UCameraAsset::CameraDirector' has a wrong offset!");
static_assert(offsetof(UCameraAsset, CameraRigs) == 0x000050, "Member 'UCameraAsset::CameraRigs' has a wrong offset!");
static_assert(offsetof(UCameraAsset, EnterTransitions) == 0x000060, "Member 'UCameraAsset::EnterTransitions' has a wrong offset!");
static_assert(offsetof(UCameraAsset, ExitTransitions) == 0x000070, "Member 'UCameraAsset::ExitTransitions' has a wrong offset!");
static_assert(offsetof(UCameraAsset, BuildStatus) == 0x000080, "Member 'UCameraAsset::BuildStatus' has a wrong offset!");

// Class GameplayCameras.CameraDirector
// 0x0000 (0x0028 - 0x0028)
class UCameraDirector : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraDirector">();
	}
	static class UCameraDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraDirector>();
	}
};
static_assert(alignof(UCameraDirector) == 0x000008, "Wrong alignment on UCameraDirector");
static_assert(sizeof(UCameraDirector) == 0x000028, "Wrong size on UCameraDirector");

// Class GameplayCameras.CameraRigInterfaceParameter
// 0x0040 (0x0068 - 0x0028)
class UCameraRigInterfaceParameter final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraNode*                            Target;                                            // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPropertyName;                                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterfaceParameterName;                            // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraVariableAsset*                   PrivateVariable;                                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigInterfaceParameter">();
	}
	static class UCameraRigInterfaceParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigInterfaceParameter>();
	}
};
static_assert(alignof(UCameraRigInterfaceParameter) == 0x000008, "Wrong alignment on UCameraRigInterfaceParameter");
static_assert(sizeof(UCameraRigInterfaceParameter) == 0x000068, "Wrong size on UCameraRigInterfaceParameter");
static_assert(offsetof(UCameraRigInterfaceParameter, Target) == 0x000030, "Member 'UCameraRigInterfaceParameter::Target' has a wrong offset!");
static_assert(offsetof(UCameraRigInterfaceParameter, TargetPropertyName) == 0x000038, "Member 'UCameraRigInterfaceParameter::TargetPropertyName' has a wrong offset!");
static_assert(offsetof(UCameraRigInterfaceParameter, InterfaceParameterName) == 0x000040, "Member 'UCameraRigInterfaceParameter::InterfaceParameterName' has a wrong offset!");
static_assert(offsetof(UCameraRigInterfaceParameter, Guid) == 0x000050, "Member 'UCameraRigInterfaceParameter::Guid' has a wrong offset!");
static_assert(offsetof(UCameraRigInterfaceParameter, PrivateVariable) == 0x000060, "Member 'UCameraRigInterfaceParameter::PrivateVariable' has a wrong offset!");

// Class GameplayCameras.CameraRigAsset
// 0x00D0 (0x00F8 - 0x0028)
class UCameraRigAsset final : public UObject
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraNode*                            RootNode;                                          // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0050(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FCameraRigInterface                    Interface;                                         // 0x0070(0x0020)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UCameraRigTransition*>           EnterTransitions;                                  // 0x0090(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UCameraRigTransition*>           ExitTransitions;                                   // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	ECameraRigInitialOrientation                  InitialOrientation;                                // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraRigAllocationInfo               AllocationInfo;                                    // 0x00B8(0x0028)(NativeAccessSpecifierPublic)
	ECameraBuildStatus                            BuildStatus;                                       // 0x00E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x00E4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigAsset">();
	}
	static class UCameraRigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigAsset>();
	}
};
static_assert(alignof(UCameraRigAsset) == 0x000008, "Wrong alignment on UCameraRigAsset");
static_assert(sizeof(UCameraRigAsset) == 0x0000F8, "Wrong size on UCameraRigAsset");
static_assert(offsetof(UCameraRigAsset, RootNode) == 0x000048, "Member 'UCameraRigAsset::RootNode' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, GameplayTags) == 0x000050, "Member 'UCameraRigAsset::GameplayTags' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, Interface) == 0x000070, "Member 'UCameraRigAsset::Interface' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, EnterTransitions) == 0x000090, "Member 'UCameraRigAsset::EnterTransitions' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, ExitTransitions) == 0x0000A0, "Member 'UCameraRigAsset::ExitTransitions' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, InitialOrientation) == 0x0000B0, "Member 'UCameraRigAsset::InitialOrientation' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, AllocationInfo) == 0x0000B8, "Member 'UCameraRigAsset::AllocationInfo' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, BuildStatus) == 0x0000E0, "Member 'UCameraRigAsset::BuildStatus' has a wrong offset!");
static_assert(offsetof(UCameraRigAsset, Guid) == 0x0000E4, "Member 'UCameraRigAsset::Guid' has a wrong offset!");

// Class GameplayCameras.CameraRigTransitionCondition
// 0x0008 (0x0030 - 0x0028)
class UCameraRigTransitionCondition : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigTransitionCondition">();
	}
	static class UCameraRigTransitionCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigTransitionCondition>();
	}
};
static_assert(alignof(UCameraRigTransitionCondition) == 0x000008, "Wrong alignment on UCameraRigTransitionCondition");
static_assert(sizeof(UCameraRigTransitionCondition) == 0x000030, "Wrong size on UCameraRigTransitionCondition");

// Class GameplayCameras.CameraRigTransition
// 0x0028 (0x0050 - 0x0028)
class UCameraRigTransition final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCameraRigTransitionCondition*>  Conditions;                                        // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UBlendCameraNode*                       Blend;                                             // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraRigInitialOrientation                  InitialOrientation;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideInitialOrientation;                       // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCameraRigMerging;                            // 0x004D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigTransition">();
	}
	static class UCameraRigTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigTransition>();
	}
};
static_assert(alignof(UCameraRigTransition) == 0x000008, "Wrong alignment on UCameraRigTransition");
static_assert(sizeof(UCameraRigTransition) == 0x000050, "Wrong size on UCameraRigTransition");
static_assert(offsetof(UCameraRigTransition, Conditions) == 0x000030, "Member 'UCameraRigTransition::Conditions' has a wrong offset!");
static_assert(offsetof(UCameraRigTransition, Blend) == 0x000040, "Member 'UCameraRigTransition::Blend' has a wrong offset!");
static_assert(offsetof(UCameraRigTransition, InitialOrientation) == 0x000048, "Member 'UCameraRigTransition::InitialOrientation' has a wrong offset!");
static_assert(offsetof(UCameraRigTransition, bOverrideInitialOrientation) == 0x00004C, "Member 'UCameraRigTransition::bOverrideInitialOrientation' has a wrong offset!");
static_assert(offsetof(UCameraRigTransition, bAllowCameraRigMerging) == 0x00004D, "Member 'UCameraRigTransition::bAllowCameraRigMerging' has a wrong offset!");

// Class GameplayCameras.CameraValueInterpolator
// 0x0000 (0x0028 - 0x0028)
class UCameraValueInterpolator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraValueInterpolator">();
	}
	static class UCameraValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraValueInterpolator>();
	}
};
static_assert(alignof(UCameraValueInterpolator) == 0x000008, "Wrong alignment on UCameraValueInterpolator");
static_assert(sizeof(UCameraValueInterpolator) == 0x000028, "Wrong size on UCameraValueInterpolator");

// Class GameplayCameras.PopValueInterpolator
// 0x0000 (0x0028 - 0x0028)
class UPopValueInterpolator final : public UCameraValueInterpolator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopValueInterpolator">();
	}
	static class UPopValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopValueInterpolator>();
	}
};
static_assert(alignof(UPopValueInterpolator) == 0x000008, "Wrong alignment on UPopValueInterpolator");
static_assert(sizeof(UPopValueInterpolator) == 0x000028, "Wrong size on UPopValueInterpolator");

// Class GameplayCameras.CameraVariableAsset
// 0x0018 (0x0040 - 0x0028)
class UCameraVariableAsset : public UObject
{
public:
	bool                                          bAutoReset;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPrivate;                                        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInput;                                          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  Guid;                                              // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraVariableAsset">();
	}
	static class UCameraVariableAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraVariableAsset>();
	}
};
static_assert(alignof(UCameraVariableAsset) == 0x000008, "Wrong alignment on UCameraVariableAsset");
static_assert(sizeof(UCameraVariableAsset) == 0x000040, "Wrong size on UCameraVariableAsset");
static_assert(offsetof(UCameraVariableAsset, bAutoReset) == 0x000028, "Member 'UCameraVariableAsset::bAutoReset' has a wrong offset!");
static_assert(offsetof(UCameraVariableAsset, bIsPrivate) == 0x000029, "Member 'UCameraVariableAsset::bIsPrivate' has a wrong offset!");
static_assert(offsetof(UCameraVariableAsset, bIsInput) == 0x00002A, "Member 'UCameraVariableAsset::bIsInput' has a wrong offset!");
static_assert(offsetof(UCameraVariableAsset, Guid) == 0x00002C, "Member 'UCameraVariableAsset::Guid' has a wrong offset!");

// Class GameplayCameras.BooleanCameraVariable
// 0x0008 (0x0048 - 0x0040)
class UBooleanCameraVariable final : public UCameraVariableAsset
{
public:
	bool                                          bDefaultValue;                                     // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BooleanCameraVariable">();
	}
	static class UBooleanCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBooleanCameraVariable>();
	}
};
static_assert(alignof(UBooleanCameraVariable) == 0x000008, "Wrong alignment on UBooleanCameraVariable");
static_assert(sizeof(UBooleanCameraVariable) == 0x000048, "Wrong size on UBooleanCameraVariable");
static_assert(offsetof(UBooleanCameraVariable, bDefaultValue) == 0x000040, "Member 'UBooleanCameraVariable::bDefaultValue' has a wrong offset!");

// Class GameplayCameras.Integer32CameraVariable
// 0x0008 (0x0048 - 0x0040)
class UInteger32CameraVariable final : public UCameraVariableAsset
{
public:
	int32                                         DefaultValue;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Integer32CameraVariable">();
	}
	static class UInteger32CameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteger32CameraVariable>();
	}
};
static_assert(alignof(UInteger32CameraVariable) == 0x000008, "Wrong alignment on UInteger32CameraVariable");
static_assert(sizeof(UInteger32CameraVariable) == 0x000048, "Wrong size on UInteger32CameraVariable");
static_assert(offsetof(UInteger32CameraVariable, DefaultValue) == 0x000040, "Member 'UInteger32CameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.FloatCameraVariable
// 0x0008 (0x0048 - 0x0040)
class UFloatCameraVariable final : public UCameraVariableAsset
{
public:
	float                                         DefaultValue;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloatCameraVariable">();
	}
	static class UFloatCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloatCameraVariable>();
	}
};
static_assert(alignof(UFloatCameraVariable) == 0x000008, "Wrong alignment on UFloatCameraVariable");
static_assert(sizeof(UFloatCameraVariable) == 0x000048, "Wrong size on UFloatCameraVariable");
static_assert(offsetof(UFloatCameraVariable, DefaultValue) == 0x000040, "Member 'UFloatCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.DoubleCameraVariable
// 0x0008 (0x0048 - 0x0040)
class UDoubleCameraVariable final : public UCameraVariableAsset
{
public:
	double                                        DefaultValue;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoubleCameraVariable">();
	}
	static class UDoubleCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoubleCameraVariable>();
	}
};
static_assert(alignof(UDoubleCameraVariable) == 0x000008, "Wrong alignment on UDoubleCameraVariable");
static_assert(sizeof(UDoubleCameraVariable) == 0x000048, "Wrong size on UDoubleCameraVariable");
static_assert(offsetof(UDoubleCameraVariable, DefaultValue) == 0x000040, "Member 'UDoubleCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector2fCameraVariable
// 0x0008 (0x0048 - 0x0040)
class UVector2fCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector2f                              DefaultValue;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector2fCameraVariable">();
	}
	static class UVector2fCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector2fCameraVariable>();
	}
};
static_assert(alignof(UVector2fCameraVariable) == 0x000008, "Wrong alignment on UVector2fCameraVariable");
static_assert(sizeof(UVector2fCameraVariable) == 0x000048, "Wrong size on UVector2fCameraVariable");
static_assert(offsetof(UVector2fCameraVariable, DefaultValue) == 0x000040, "Member 'UVector2fCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector2dCameraVariable
// 0x0010 (0x0050 - 0x0040)
class UVector2dCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector2D                              DefaultValue;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector2dCameraVariable">();
	}
	static class UVector2dCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector2dCameraVariable>();
	}
};
static_assert(alignof(UVector2dCameraVariable) == 0x000008, "Wrong alignment on UVector2dCameraVariable");
static_assert(sizeof(UVector2dCameraVariable) == 0x000050, "Wrong size on UVector2dCameraVariable");
static_assert(offsetof(UVector2dCameraVariable, DefaultValue) == 0x000040, "Member 'UVector2dCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector3fCameraVariable
// 0x0010 (0x0050 - 0x0040)
class UVector3fCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector3f                              DefaultValue;                                      // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector3fCameraVariable">();
	}
	static class UVector3fCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector3fCameraVariable>();
	}
};
static_assert(alignof(UVector3fCameraVariable) == 0x000008, "Wrong alignment on UVector3fCameraVariable");
static_assert(sizeof(UVector3fCameraVariable) == 0x000050, "Wrong size on UVector3fCameraVariable");
static_assert(offsetof(UVector3fCameraVariable, DefaultValue) == 0x000040, "Member 'UVector3fCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector3dCameraVariable
// 0x0018 (0x0058 - 0x0040)
class UVector3dCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector3d                              DefaultValue;                                      // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector3dCameraVariable">();
	}
	static class UVector3dCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector3dCameraVariable>();
	}
};
static_assert(alignof(UVector3dCameraVariable) == 0x000008, "Wrong alignment on UVector3dCameraVariable");
static_assert(sizeof(UVector3dCameraVariable) == 0x000058, "Wrong size on UVector3dCameraVariable");
static_assert(offsetof(UVector3dCameraVariable, DefaultValue) == 0x000040, "Member 'UVector3dCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector4fCameraVariable
// 0x0010 (0x0050 - 0x0040)
class UVector4fCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector4f                              DefaultValue;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector4fCameraVariable">();
	}
	static class UVector4fCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector4fCameraVariable>();
	}
};
static_assert(alignof(UVector4fCameraVariable) == 0x000010, "Wrong alignment on UVector4fCameraVariable");
static_assert(sizeof(UVector4fCameraVariable) == 0x000050, "Wrong size on UVector4fCameraVariable");
static_assert(offsetof(UVector4fCameraVariable, DefaultValue) == 0x000040, "Member 'UVector4fCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Vector4dCameraVariable
// 0x0020 (0x0060 - 0x0040)
class UVector4dCameraVariable final : public UCameraVariableAsset
{
public:
	struct FVector4d                              DefaultValue;                                      // 0x0040(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Vector4dCameraVariable">();
	}
	static class UVector4dCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVector4dCameraVariable>();
	}
};
static_assert(alignof(UVector4dCameraVariable) == 0x000010, "Wrong alignment on UVector4dCameraVariable");
static_assert(sizeof(UVector4dCameraVariable) == 0x000060, "Wrong size on UVector4dCameraVariable");
static_assert(offsetof(UVector4dCameraVariable, DefaultValue) == 0x000040, "Member 'UVector4dCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Rotator3fCameraVariable
// 0x0010 (0x0050 - 0x0040)
class URotator3fCameraVariable final : public UCameraVariableAsset
{
public:
	struct FRotator3f                             DefaultValue;                                      // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Rotator3fCameraVariable">();
	}
	static class URotator3fCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotator3fCameraVariable>();
	}
};
static_assert(alignof(URotator3fCameraVariable) == 0x000008, "Wrong alignment on URotator3fCameraVariable");
static_assert(sizeof(URotator3fCameraVariable) == 0x000050, "Wrong size on URotator3fCameraVariable");
static_assert(offsetof(URotator3fCameraVariable, DefaultValue) == 0x000040, "Member 'URotator3fCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Rotator3dCameraVariable
// 0x0018 (0x0058 - 0x0040)
class URotator3dCameraVariable final : public UCameraVariableAsset
{
public:
	struct FRotator3d                             DefaultValue;                                      // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Rotator3dCameraVariable">();
	}
	static class URotator3dCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<URotator3dCameraVariable>();
	}
};
static_assert(alignof(URotator3dCameraVariable) == 0x000008, "Wrong alignment on URotator3dCameraVariable");
static_assert(sizeof(URotator3dCameraVariable) == 0x000058, "Wrong size on URotator3dCameraVariable");
static_assert(offsetof(URotator3dCameraVariable, DefaultValue) == 0x000040, "Member 'URotator3dCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Transform3fCameraVariable
// 0x0030 (0x0070 - 0x0040)
class UTransform3fCameraVariable final : public UCameraVariableAsset
{
public:
	struct FTransform3f                           DefaultValue;                                      // 0x0040(0x0030)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Transform3fCameraVariable">();
	}
	static class UTransform3fCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransform3fCameraVariable>();
	}
};
static_assert(alignof(UTransform3fCameraVariable) == 0x000010, "Wrong alignment on UTransform3fCameraVariable");
static_assert(sizeof(UTransform3fCameraVariable) == 0x000070, "Wrong size on UTransform3fCameraVariable");
static_assert(offsetof(UTransform3fCameraVariable, DefaultValue) == 0x000040, "Member 'UTransform3fCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.Transform3dCameraVariable
// 0x0060 (0x00A0 - 0x0040)
class UTransform3dCameraVariable final : public UCameraVariableAsset
{
public:
	struct FTransform3d                           DefaultValue;                                      // 0x0040(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Transform3dCameraVariable">();
	}
	static class UTransform3dCameraVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransform3dCameraVariable>();
	}
};
static_assert(alignof(UTransform3dCameraVariable) == 0x000010, "Wrong alignment on UTransform3dCameraVariable");
static_assert(sizeof(UTransform3dCameraVariable) == 0x0000A0, "Wrong size on UTransform3dCameraVariable");
static_assert(offsetof(UTransform3dCameraVariable, DefaultValue) == 0x000040, "Member 'UTransform3dCameraVariable::DefaultValue' has a wrong offset!");

// Class GameplayCameras.CameraVariableCollection
// 0x0010 (0x0038 - 0x0028)
class UCameraVariableCollection final : public UObject
{
public:
	TArray<class UCameraVariableAsset*>           Variables;                                         // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraVariableCollection">();
	}
	static class UCameraVariableCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraVariableCollection>();
	}
};
static_assert(alignof(UCameraVariableCollection) == 0x000008, "Wrong alignment on UCameraVariableCollection");
static_assert(sizeof(UCameraVariableCollection) == 0x000038, "Wrong size on UCameraVariableCollection");
static_assert(offsetof(UCameraVariableCollection, Variables) == 0x000028, "Member 'UCameraVariableCollection::Variables' has a wrong offset!");

// Class GameplayCameras.RootCameraNode
// 0x0000 (0x0038 - 0x0038)
class URootCameraNode : public UCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootCameraNode">();
	}
	static class URootCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootCameraNode>();
	}
};
static_assert(alignof(URootCameraNode) == 0x000008, "Wrong alignment on URootCameraNode");
static_assert(sizeof(URootCameraNode) == 0x000038, "Wrong size on URootCameraNode");

// Class GameplayCameras.DefaultRootCameraNode
// 0x0020 (0x0058 - 0x0038)
class UDefaultRootCameraNode final : public URootCameraNode
{
public:
	class UBlendStackCameraNode*                  BaseLayer;                                         // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendStackCameraNode*                  MainLayer;                                         // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendStackCameraNode*                  GlobalLayer;                                       // 0x0048(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendStackCameraNode*                  VisualLayer;                                       // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DefaultRootCameraNode">();
	}
	static class UDefaultRootCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultRootCameraNode>();
	}
};
static_assert(alignof(UDefaultRootCameraNode) == 0x000008, "Wrong alignment on UDefaultRootCameraNode");
static_assert(sizeof(UDefaultRootCameraNode) == 0x000058, "Wrong size on UDefaultRootCameraNode");
static_assert(offsetof(UDefaultRootCameraNode, BaseLayer) == 0x000038, "Member 'UDefaultRootCameraNode::BaseLayer' has a wrong offset!");
static_assert(offsetof(UDefaultRootCameraNode, MainLayer) == 0x000040, "Member 'UDefaultRootCameraNode::MainLayer' has a wrong offset!");
static_assert(offsetof(UDefaultRootCameraNode, GlobalLayer) == 0x000048, "Member 'UDefaultRootCameraNode::GlobalLayer' has a wrong offset!");
static_assert(offsetof(UDefaultRootCameraNode, VisualLayer) == 0x000050, "Member 'UDefaultRootCameraNode::VisualLayer' has a wrong offset!");

// Class GameplayCameras.BlueprintCameraDirectorEvaluator
// 0x0060 (0x0088 - 0x0028)
class UBlueprintCameraDirectorEvaluator final : public UObject
{
public:
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateCameraDirector(const struct FBlueprintCameraDirectorActivateParams& Params_0);
	void ActivateCameraRig(class UCameraRigAsset* CameraRig);
	void ActivateCameraRigPrefab(class UCameraRigAsset* CameraRig);
	void ActivateCameraRigViaProxy(class UCameraRigProxyAsset* CameraRigProxy);
	void ActivatePersistentBaseCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void ActivatePersistentGlobalCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void ActivatePersistentVisualCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void DeactivateCameraDirector(const struct FBlueprintCameraDirectorDeactivateParams& Params_0);
	void DeactivatePersistentBaseCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void DeactivatePersistentGlobalCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void DeactivatePersistentVisualCameraRig(class UCameraRigAsset* CameraRigPrefab);
	void RunCameraDirector(const struct FBlueprintCameraDirectorEvaluationParams& Params_0);
	void SetInitialContextCameraPose(const struct FBlueprintCameraPose& InCameraPose);

	class AActor* FindEvaluationContextOwnerActor(TSubclassOf<class AActor> ActorClass) const;
	class UCameraRigAsset* GetCameraRig(class UCameraRigAsset* CameraRig) const;
	struct FBlueprintCameraPose GetInitialContextCameraPose() const;
	struct FBlueprintCameraVariableTable GetInitialContextVariableTable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraDirectorEvaluator">();
	}
	static class UBlueprintCameraDirectorEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraDirectorEvaluator>();
	}
};
static_assert(alignof(UBlueprintCameraDirectorEvaluator) == 0x000008, "Wrong alignment on UBlueprintCameraDirectorEvaluator");
static_assert(sizeof(UBlueprintCameraDirectorEvaluator) == 0x000088, "Wrong size on UBlueprintCameraDirectorEvaluator");

// Class GameplayCameras.BlueprintCameraDirector
// 0x0010 (0x0038 - 0x0028)
class UBlueprintCameraDirector final : public UCameraDirector
{
public:
	TSubclassOf<class UBlueprintCameraDirectorEvaluator> CameraDirectorEvaluatorClass;               // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraRigProxyTable*                   CameraRigProxyTable;                               // 0x0030(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraDirector">();
	}
	static class UBlueprintCameraDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraDirector>();
	}
};
static_assert(alignof(UBlueprintCameraDirector) == 0x000008, "Wrong alignment on UBlueprintCameraDirector");
static_assert(sizeof(UBlueprintCameraDirector) == 0x000038, "Wrong size on UBlueprintCameraDirector");
static_assert(offsetof(UBlueprintCameraDirector, CameraDirectorEvaluatorClass) == 0x000028, "Member 'UBlueprintCameraDirector::CameraDirectorEvaluatorClass' has a wrong offset!");
static_assert(offsetof(UBlueprintCameraDirector, CameraRigProxyTable) == 0x000030, "Member 'UBlueprintCameraDirector::CameraRigProxyTable' has a wrong offset!");

// Class GameplayCameras.CameraDirectorStateTreeSchema
// 0x0010 (0x0038 - 0x0028)
class UCameraDirectorStateTreeSchema final : public UStateTreeSchema
{
public:
	TArray<struct FStateTreeExternalDataDesc>     ContextDataDescs;                                  // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraDirectorStateTreeSchema">();
	}
	static class UCameraDirectorStateTreeSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraDirectorStateTreeSchema>();
	}
};
static_assert(alignof(UCameraDirectorStateTreeSchema) == 0x000008, "Wrong alignment on UCameraDirectorStateTreeSchema");
static_assert(sizeof(UCameraDirectorStateTreeSchema) == 0x000038, "Wrong size on UCameraDirectorStateTreeSchema");
static_assert(offsetof(UCameraDirectorStateTreeSchema, ContextDataDescs) == 0x000028, "Member 'UCameraDirectorStateTreeSchema::ContextDataDescs' has a wrong offset!");

// Class GameplayCameras.PriorityQueueCameraDirector
// 0x0000 (0x0028 - 0x0028)
class UPriorityQueueCameraDirector final : public UCameraDirector
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PriorityQueueCameraDirector">();
	}
	static class UPriorityQueueCameraDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPriorityQueueCameraDirector>();
	}
};
static_assert(alignof(UPriorityQueueCameraDirector) == 0x000008, "Wrong alignment on UPriorityQueueCameraDirector");
static_assert(sizeof(UPriorityQueueCameraDirector) == 0x000028, "Wrong size on UPriorityQueueCameraDirector");

// Class GameplayCameras.SingleCameraDirector
// 0x0008 (0x0030 - 0x0028)
class USingleCameraDirector final : public UCameraDirector
{
public:
	class UCameraRigAsset*                        CameraRig;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SingleCameraDirector">();
	}
	static class USingleCameraDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<USingleCameraDirector>();
	}
};
static_assert(alignof(USingleCameraDirector) == 0x000008, "Wrong alignment on USingleCameraDirector");
static_assert(sizeof(USingleCameraDirector) == 0x000030, "Wrong size on USingleCameraDirector");
static_assert(offsetof(USingleCameraDirector, CameraRig) == 0x000028, "Member 'USingleCameraDirector::CameraRig' has a wrong offset!");

// Class GameplayCameras.StateTreeCameraDirector
// 0x0030 (0x0058 - 0x0028)
class UStateTreeCameraDirector final : public UCameraDirector
{
public:
	struct FStateTreeReference                    StateTreeReference;                                // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	class UCameraRigProxyTable*                   CameraRigProxyTable;                               // 0x0050(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeCameraDirector">();
	}
	static class UStateTreeCameraDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeCameraDirector>();
	}
};
static_assert(alignof(UStateTreeCameraDirector) == 0x000008, "Wrong alignment on UStateTreeCameraDirector");
static_assert(sizeof(UStateTreeCameraDirector) == 0x000058, "Wrong size on UStateTreeCameraDirector");
static_assert(offsetof(UStateTreeCameraDirector, StateTreeReference) == 0x000028, "Member 'UStateTreeCameraDirector::StateTreeReference' has a wrong offset!");
static_assert(offsetof(UStateTreeCameraDirector, CameraRigProxyTable) == 0x000050, "Member 'UStateTreeCameraDirector::CameraRigProxyTable' has a wrong offset!");

// Class GameplayCameras.ActivateCameraRigFunctions
// 0x0000 (0x0028 - 0x0028)
class UActivateCameraRigFunctions final : public UBlueprintFunctionLibrary
{
public:
	static void ActivatePersistentBaseCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig);
	static void ActivatePersistentGlobalCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig);
	static void ActivatePersistentVisualCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateCameraRigFunctions">();
	}
	static class UActivateCameraRigFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateCameraRigFunctions>();
	}
};
static_assert(alignof(UActivateCameraRigFunctions) == 0x000008, "Wrong alignment on UActivateCameraRigFunctions");
static_assert(sizeof(UActivateCameraRigFunctions) == 0x000028, "Wrong size on UActivateCameraRigFunctions");

// Class GameplayCameras.BlueprintCameraPoseFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintCameraPoseFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector GetAimDir(const struct FBlueprintCameraPose& CameraPose);
	static struct FRay GetAimRay(const struct FBlueprintCameraPose& CameraPose);
	static double GetEffectiveFieldOfView(const struct FBlueprintCameraPose& CameraPose);
	static double GetFieldOfView(const struct FBlueprintCameraPose& CameraPose);
	static double GetFocalLength(const struct FBlueprintCameraPose& CameraPose);
	static struct FVector GetLocation(const struct FBlueprintCameraPose& CameraPose);
	static struct FRotator GetRotation(const struct FBlueprintCameraPose& CameraPose);
	static double GetSensorAspectRatio(const struct FBlueprintCameraPose& CameraPose);
	static struct FVector GetTarget(const struct FBlueprintCameraPose& CameraPose);
	static struct FVector GetTargetAtDistance(const struct FBlueprintCameraPose& CameraPose, double TargetDistance);
	static double GetTargetDistance(const struct FBlueprintCameraPose& CameraPose);
	static struct FTransform GetTransform(const struct FBlueprintCameraPose& CameraPose);
	static struct FBlueprintCameraPose MakeCameraPoseFromCameraComponent(const class UCameraComponent* CameraComponent);
	static struct FBlueprintCameraPose MakeCameraPoseFromCineCameraComponent(const class UCineCameraComponent* CameraComponent);
	static struct FBlueprintCameraPose SetFieldOfView(const struct FBlueprintCameraPose& CameraPose, float FieldOfView);
	static struct FBlueprintCameraPose SetFocalLength(const struct FBlueprintCameraPose& CameraPose, float FocalLength);
	static struct FBlueprintCameraPose SetLocation(const struct FBlueprintCameraPose& CameraPose, const struct FVector& Location);
	static struct FBlueprintCameraPose SetRotation(const struct FBlueprintCameraPose& CameraPose, const struct FRotator& Rotation);
	static struct FBlueprintCameraPose SetTargetDistance(const struct FBlueprintCameraPose& CameraPose, double TargetDistance);
	static struct FBlueprintCameraPose SetTransform(const struct FBlueprintCameraPose& CameraPose, const struct FTransform& Transform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraPoseFunctionLibrary">();
	}
	static class UBlueprintCameraPoseFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraPoseFunctionLibrary>();
	}
};
static_assert(alignof(UBlueprintCameraPoseFunctionLibrary) == 0x000008, "Wrong alignment on UBlueprintCameraPoseFunctionLibrary");
static_assert(sizeof(UBlueprintCameraPoseFunctionLibrary) == 0x000028, "Wrong size on UBlueprintCameraPoseFunctionLibrary");

// Class GameplayCameras.BlueprintCameraVariableTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintCameraVariableTableFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetBooleanCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UBooleanCameraVariable* Variable);
	static double GetDoubleCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UDoubleCameraVariable* Variable);
	static float GetFloatCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UFloatCameraVariable* Variable);
	static int32 GetInteger32CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UInteger32CameraVariable* Variable);
	static struct FRotator GetRotatorCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class URotator3dCameraVariable* Variable);
	static struct FTransform GetTransformCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UTransform3dCameraVariable* Variable);
	static struct FVector2D GetVector2CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector2dCameraVariable* Variable);
	static struct FVector GetVector3CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector3dCameraVariable* Variable);
	static struct FVector4 GetVector4CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector4dCameraVariable* Variable);
	static void SetBooleanCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UBooleanCameraVariable* Variable, bool Value);
	static void SetDoubleCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UDoubleCameraVariable* Variable, double Value);
	static void SetFloatCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UFloatCameraVariable* Variable, float Value);
	static void SetInteger32CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UInteger32CameraVariable* Variable, int32 Value);
	static void SetRotatorCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class URotator3dCameraVariable* Variable, const struct FRotator& Value);
	static void SetTransformCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UTransform3dCameraVariable* Variable, const struct FTransform& Value);
	static void SetVector2CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector2dCameraVariable* Variable, const struct FVector2D& Value);
	static void SetVector3CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector3dCameraVariable* Variable, const struct FVector& Value);
	static void SetVector4CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector4dCameraVariable* Variable, const struct FVector4& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraVariableTableFunctionLibrary">();
	}
	static class UBlueprintCameraVariableTableFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraVariableTableFunctionLibrary>();
	}
};
static_assert(alignof(UBlueprintCameraVariableTableFunctionLibrary) == 0x000008, "Wrong alignment on UBlueprintCameraVariableTableFunctionLibrary");
static_assert(sizeof(UBlueprintCameraVariableTableFunctionLibrary) == 0x000028, "Wrong size on UBlueprintCameraVariableTableFunctionLibrary");

// Class GameplayCameras.CameraRigParameterInterop
// 0x0000 (0x0028 - 0x0028)
class UCameraRigParameterInterop final : public UBlueprintFunctionLibrary
{
public:
	static void SetBooleanParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, bool bParameterValue);
	static void SetDoubleParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, double ParameterValue);
	static void SetFloatParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, double ParameterValue);
	static void SetIntegerParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, int32 ParameterValue);
	static void SetRotatorParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FRotator& ParameterValue);
	static void SetTransformParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FTransform& ParameterValue);
	static void SetVector2Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector2D& ParameterValue);
	static void SetVector3Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector& ParameterValue);
	static void SetVector4Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector4& ParameterValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigParameterInterop">();
	}
	static class UCameraRigParameterInterop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigParameterInterop>();
	}
};
static_assert(alignof(UCameraRigParameterInterop) == 0x000008, "Wrong alignment on UCameraRigParameterInterop");
static_assert(sizeof(UCameraRigParameterInterop) == 0x000028, "Wrong size on UCameraRigParameterInterop");

// Class GameplayCameras.ControllerGameplayCameraEvaluationComponent
// 0x0028 (0x00C8 - 0x00A0)
class UControllerGameplayCameraEvaluationComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayCameraSystemHost*              CameraSystemHost;                                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControllerGameplayCameraEvaluationComponent">();
	}
	static class UControllerGameplayCameraEvaluationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UControllerGameplayCameraEvaluationComponent>();
	}
};
static_assert(alignof(UControllerGameplayCameraEvaluationComponent) == 0x000008, "Wrong alignment on UControllerGameplayCameraEvaluationComponent");
static_assert(sizeof(UControllerGameplayCameraEvaluationComponent) == 0x0000C8, "Wrong size on UControllerGameplayCameraEvaluationComponent");
static_assert(offsetof(UControllerGameplayCameraEvaluationComponent, CameraSystemHost) == 0x0000C0, "Member 'UControllerGameplayCameraEvaluationComponent::CameraSystemHost' has a wrong offset!");

// Class GameplayCameras.GameplayCameraActor
// 0x0008 (0x02B0 - 0x02A8)
class AGameplayCameraActor final : public AActor
{
public:
	class UGameplayCameraComponent*               CameraComponent;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UGameplayCameraComponent* GetCameraComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCameraActor">();
	}
	static class AGameplayCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayCameraActor>();
	}
};
static_assert(alignof(AGameplayCameraActor) == 0x000008, "Wrong alignment on AGameplayCameraActor");
static_assert(sizeof(AGameplayCameraActor) == 0x0002B0, "Wrong size on AGameplayCameraActor");
static_assert(offsetof(AGameplayCameraActor, CameraComponent) == 0x0002A8, "Member 'AGameplayCameraActor::CameraComponent' has a wrong offset!");

// Class GameplayCameras.GameplayCameraComponent
// 0x0030 (0x0260 - 0x0230)
class UGameplayCameraComponent final : public USceneComponent
{
public:
	class UCameraAsset*                           Camera;                                            // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoReceiveInput                             AutoActivateForPlayer;                             // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x1F];                                     // 0x0239(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayCameraSystemHost*              CameraSystemHost;                                  // 0x0258(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ActivateCameraForPlayerController(class APlayerController* PlayerController);
	void ActivateCameraForPlayerIndex(int32 PlayerIndex);
	void DeactivateCamera();
	void SetInitialPose(const struct FBlueprintCameraPose& CameraPose);

	struct FBlueprintCameraPose GetInitialPose() const;
	struct FBlueprintCameraVariableTable GetInitialVariableTable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCameraComponent">();
	}
	static class UGameplayCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCameraComponent>();
	}
};
static_assert(alignof(UGameplayCameraComponent) == 0x000010, "Wrong alignment on UGameplayCameraComponent");
static_assert(sizeof(UGameplayCameraComponent) == 0x000260, "Wrong size on UGameplayCameraComponent");
static_assert(offsetof(UGameplayCameraComponent, Camera) == 0x000230, "Member 'UGameplayCameraComponent::Camera' has a wrong offset!");
static_assert(offsetof(UGameplayCameraComponent, AutoActivateForPlayer) == 0x000238, "Member 'UGameplayCameraComponent::AutoActivateForPlayer' has a wrong offset!");
static_assert(offsetof(UGameplayCameraComponent, CameraSystemHost) == 0x000258, "Member 'UGameplayCameraComponent::CameraSystemHost' has a wrong offset!");

// Class GameplayCameras.GameplayCameraSystemActor
// 0x0008 (0x02B0 - 0x02A8)
class AGameplayCameraSystemActor final : public AActor
{
public:
	class UGameplayCameraSystemComponent*         CameraSystemComponent;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static void AutoManageActiveViewTarget(class APlayerController* PlayerController);
	static class AGameplayCameraSystemActor* GetAutoSpawnedCameraSystemActor(class APlayerController* PlayerController, bool bForceSpawn);

	class UGameplayCameraSystemComponent* GetCameraSystemComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCameraSystemActor">();
	}
	static class AGameplayCameraSystemActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayCameraSystemActor>();
	}
};
static_assert(alignof(AGameplayCameraSystemActor) == 0x000008, "Wrong alignment on AGameplayCameraSystemActor");
static_assert(sizeof(AGameplayCameraSystemActor) == 0x0002B0, "Wrong size on AGameplayCameraSystemActor");
static_assert(offsetof(AGameplayCameraSystemActor, CameraSystemComponent) == 0x0002A8, "Member 'AGameplayCameraSystemActor::CameraSystemComponent' has a wrong offset!");

// Class GameplayCameras.GameplayCameraSystemComponent
// 0x0020 (0x0250 - 0x0230)
class UGameplayCameraSystemComponent final : public USceneComponent
{
public:
	EAutoReceiveInput                             AutoActivateForPlayer;                             // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPlayerControllerRotation;                      // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayCameraSystemHost*              CameraSystemHost;                                  // 0x0238(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class APlayerController>       WeakPlayerController;                              // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateCameraSystemForPlayerController(class APlayerController* PlayerController);
	void ActivateCameraSystemForPlayerIndex(int32 PlayerIndex);
	void DeactivateCameraSystem(class AActor* NextViewTarget);

	bool IsCameraSystemActiveForPlayController(class APlayerController* PlayerController) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCameraSystemComponent">();
	}
	static class UGameplayCameraSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCameraSystemComponent>();
	}
};
static_assert(alignof(UGameplayCameraSystemComponent) == 0x000010, "Wrong alignment on UGameplayCameraSystemComponent");
static_assert(sizeof(UGameplayCameraSystemComponent) == 0x000250, "Wrong size on UGameplayCameraSystemComponent");
static_assert(offsetof(UGameplayCameraSystemComponent, AutoActivateForPlayer) == 0x000230, "Member 'UGameplayCameraSystemComponent::AutoActivateForPlayer' has a wrong offset!");
static_assert(offsetof(UGameplayCameraSystemComponent, bSetPlayerControllerRotation) == 0x000231, "Member 'UGameplayCameraSystemComponent::bSetPlayerControllerRotation' has a wrong offset!");
static_assert(offsetof(UGameplayCameraSystemComponent, CameraSystemHost) == 0x000238, "Member 'UGameplayCameraSystemComponent::CameraSystemHost' has a wrong offset!");
static_assert(offsetof(UGameplayCameraSystemComponent, WeakPlayerController) == 0x000240, "Member 'UGameplayCameraSystemComponent::WeakPlayerController' has a wrong offset!");

// Class GameplayCameras.GameplayControlRotationComponent
// 0x0040 (0x00E0 - 0x00A0)
class UGameplayControlRotationComponent final : public UActorComponent
{
public:
	TArray<class UInputAction*>                   AxisActions;                                       // 0x00A0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         AxisActionAngularSpeedThreshold;                   // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AxisActionMagnitudeThreshold;                      // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoReceiveInput                             AutoActivateForPlayer;                             // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameplayCameraSystemHost*              CameraSystemHost;                                  // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateControlRotationManagementForPlayerController(class APlayerController* PlayerController_0);
	void ActivateControlRotationManagementForPlayerIndex(int32 PlayerIndex);
	void DeactivateControlRotationManagement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayControlRotationComponent">();
	}
	static class UGameplayControlRotationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayControlRotationComponent>();
	}
};
static_assert(alignof(UGameplayControlRotationComponent) == 0x000008, "Wrong alignment on UGameplayControlRotationComponent");
static_assert(sizeof(UGameplayControlRotationComponent) == 0x0000E0, "Wrong size on UGameplayControlRotationComponent");
static_assert(offsetof(UGameplayControlRotationComponent, AxisActions) == 0x0000A0, "Member 'UGameplayControlRotationComponent::AxisActions' has a wrong offset!");
static_assert(offsetof(UGameplayControlRotationComponent, AxisActionAngularSpeedThreshold) == 0x0000B0, "Member 'UGameplayControlRotationComponent::AxisActionAngularSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UGameplayControlRotationComponent, AxisActionMagnitudeThreshold) == 0x0000B4, "Member 'UGameplayControlRotationComponent::AxisActionMagnitudeThreshold' has a wrong offset!");
static_assert(offsetof(UGameplayControlRotationComponent, AutoActivateForPlayer) == 0x0000B8, "Member 'UGameplayControlRotationComponent::AutoActivateForPlayer' has a wrong offset!");
static_assert(offsetof(UGameplayControlRotationComponent, PlayerController) == 0x0000C0, "Member 'UGameplayControlRotationComponent::PlayerController' has a wrong offset!");
static_assert(offsetof(UGameplayControlRotationComponent, CameraSystemHost) == 0x0000C8, "Member 'UGameplayControlRotationComponent::CameraSystemHost' has a wrong offset!");

// Class GameplayCameras.GameplayCamerasSettings
// 0x0028 (0x0060 - 0x0038)
class UGameplayCamerasSettings final : public UDeveloperSettings
{
public:
	bool                                          bAutoSpawnCameraSystemActor;                       // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSpawnCameraSystemActorSetsControlRotation;    // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CombinedCameraRigNumThreshold;                     // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DefaultIKAimingAngleTolerance;                     // 0x0040(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DefaultIKAimingDistanceTolerance;                  // 0x0048(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DefaultIKAimingMaxIterations;                      // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultIKAimingMinDistance;                        // 0x0058(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCamerasSettings">();
	}
	static class UGameplayCamerasSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCamerasSettings>();
	}
};
static_assert(alignof(UGameplayCamerasSettings) == 0x000008, "Wrong alignment on UGameplayCamerasSettings");
static_assert(sizeof(UGameplayCamerasSettings) == 0x000060, "Wrong size on UGameplayCamerasSettings");
static_assert(offsetof(UGameplayCamerasSettings, bAutoSpawnCameraSystemActor) == 0x000038, "Member 'UGameplayCamerasSettings::bAutoSpawnCameraSystemActor' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, bAutoSpawnCameraSystemActorSetsControlRotation) == 0x000039, "Member 'UGameplayCamerasSettings::bAutoSpawnCameraSystemActorSetsControlRotation' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, CombinedCameraRigNumThreshold) == 0x00003C, "Member 'UGameplayCamerasSettings::CombinedCameraRigNumThreshold' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, DefaultIKAimingAngleTolerance) == 0x000040, "Member 'UGameplayCamerasSettings::DefaultIKAimingAngleTolerance' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, DefaultIKAimingDistanceTolerance) == 0x000048, "Member 'UGameplayCamerasSettings::DefaultIKAimingDistanceTolerance' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, DefaultIKAimingMaxIterations) == 0x000050, "Member 'UGameplayCamerasSettings::DefaultIKAimingMaxIterations' has a wrong offset!");
static_assert(offsetof(UGameplayCamerasSettings, DefaultIKAimingMinDistance) == 0x000058, "Member 'UGameplayCamerasSettings::DefaultIKAimingMinDistance' has a wrong offset!");

// Class GameplayCameras.AttachToPlayerPawnCameraNode
// 0x0020 (0x0058 - 0x0038)
class UAttachToPlayerPawnCameraNode final : public UCameraNode
{
public:
	struct FBooleanCameraParameter                AttachToLocation;                                  // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                AttachToRotation;                                  // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachToPlayerPawnCameraNode">();
	}
	static class UAttachToPlayerPawnCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttachToPlayerPawnCameraNode>();
	}
};
static_assert(alignof(UAttachToPlayerPawnCameraNode) == 0x000008, "Wrong alignment on UAttachToPlayerPawnCameraNode");
static_assert(sizeof(UAttachToPlayerPawnCameraNode) == 0x000058, "Wrong size on UAttachToPlayerPawnCameraNode");
static_assert(offsetof(UAttachToPlayerPawnCameraNode, AttachToLocation) == 0x000038, "Member 'UAttachToPlayerPawnCameraNode::AttachToLocation' has a wrong offset!");
static_assert(offsetof(UAttachToPlayerPawnCameraNode, AttachToRotation) == 0x000048, "Member 'UAttachToPlayerPawnCameraNode::AttachToRotation' has a wrong offset!");

// Class GameplayCameras.SimpleBlendCameraNode
// 0x0000 (0x0038 - 0x0038)
class USimpleBlendCameraNode : public UBlendCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleBlendCameraNode">();
	}
	static class USimpleBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleBlendCameraNode>();
	}
};
static_assert(alignof(USimpleBlendCameraNode) == 0x000008, "Wrong alignment on USimpleBlendCameraNode");
static_assert(sizeof(USimpleBlendCameraNode) == 0x000038, "Wrong size on USimpleBlendCameraNode");

// Class GameplayCameras.SimpleFixedTimeBlendCameraNode
// 0x0008 (0x0040 - 0x0038)
class USimpleFixedTimeBlendCameraNode : public USimpleBlendCameraNode
{
public:
	float                                         BlendTime;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleFixedTimeBlendCameraNode">();
	}
	static class USimpleFixedTimeBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleFixedTimeBlendCameraNode>();
	}
};
static_assert(alignof(USimpleFixedTimeBlendCameraNode) == 0x000008, "Wrong alignment on USimpleFixedTimeBlendCameraNode");
static_assert(sizeof(USimpleFixedTimeBlendCameraNode) == 0x000040, "Wrong size on USimpleFixedTimeBlendCameraNode");
static_assert(offsetof(USimpleFixedTimeBlendCameraNode, BlendTime) == 0x000038, "Member 'USimpleFixedTimeBlendCameraNode::BlendTime' has a wrong offset!");

// Class GameplayCameras.LinearBlendCameraNode
// 0x0000 (0x0040 - 0x0040)
class ULinearBlendCameraNode final : public USimpleFixedTimeBlendCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinearBlendCameraNode">();
	}
	static class ULinearBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinearBlendCameraNode>();
	}
};
static_assert(alignof(ULinearBlendCameraNode) == 0x000008, "Wrong alignment on ULinearBlendCameraNode");
static_assert(sizeof(ULinearBlendCameraNode) == 0x000040, "Wrong size on ULinearBlendCameraNode");

// Class GameplayCameras.OrbitBlendCameraNode
// 0x0008 (0x0040 - 0x0038)
class UOrbitBlendCameraNode final : public UBlendCameraNode
{
public:
	class USimpleBlendCameraNode*                 DrivingBlend;                                      // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OrbitBlendCameraNode">();
	}
	static class UOrbitBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOrbitBlendCameraNode>();
	}
};
static_assert(alignof(UOrbitBlendCameraNode) == 0x000008, "Wrong alignment on UOrbitBlendCameraNode");
static_assert(sizeof(UOrbitBlendCameraNode) == 0x000040, "Wrong size on UOrbitBlendCameraNode");
static_assert(offsetof(UOrbitBlendCameraNode, DrivingBlend) == 0x000038, "Member 'UOrbitBlendCameraNode::DrivingBlend' has a wrong offset!");

// Class GameplayCameras.PopBlendCameraNode
// 0x0000 (0x0038 - 0x0038)
class UPopBlendCameraNode final : public UBlendCameraNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PopBlendCameraNode">();
	}
	static class UPopBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPopBlendCameraNode>();
	}
};
static_assert(alignof(UPopBlendCameraNode) == 0x000008, "Wrong alignment on UPopBlendCameraNode");
static_assert(sizeof(UPopBlendCameraNode) == 0x000038, "Wrong size on UPopBlendCameraNode");

// Class GameplayCameras.SmoothBlendCameraNode
// 0x0008 (0x0048 - 0x0040)
class USmoothBlendCameraNode final : public USimpleFixedTimeBlendCameraNode
{
public:
	ESmoothCameraBlendType                        BlendType;                                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SmoothBlendCameraNode">();
	}
	static class USmoothBlendCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USmoothBlendCameraNode>();
	}
};
static_assert(alignof(USmoothBlendCameraNode) == 0x000008, "Wrong alignment on USmoothBlendCameraNode");
static_assert(sizeof(USmoothBlendCameraNode) == 0x000048, "Wrong size on USmoothBlendCameraNode");
static_assert(offsetof(USmoothBlendCameraNode, BlendType) == 0x000040, "Member 'USmoothBlendCameraNode::BlendType' has a wrong offset!");

// Class GameplayCameras.CollisionPushCameraNode
// 0x0070 (0x00A8 - 0x0038)
class UCollisionPushCameraNode final : public UCameraNode
{
public:
	ECollisionSafePosition                        SafePosition;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3dCameraVariableReference       CustomSafePosition;                                // 0x0040(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3dCameraParameter               SafePositionOffset;                                // 0x0048(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionSafePositionOffsetSpace             SafePositionOffsetSpace;                           // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBooleanCameraVariableReference        EnableCollision;                                   // 0x0070(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  CollisionSphereRadius;                             // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraValueInterpolator*               PushInterpolator;                                  // 0x0090(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraValueInterpolator*               PullInterpolator;                                  // 0x0098(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunAsyncCollision;                                // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionPushCameraNode">();
	}
	static class UCollisionPushCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionPushCameraNode>();
	}
};
static_assert(alignof(UCollisionPushCameraNode) == 0x000008, "Wrong alignment on UCollisionPushCameraNode");
static_assert(sizeof(UCollisionPushCameraNode) == 0x0000A8, "Wrong size on UCollisionPushCameraNode");
static_assert(offsetof(UCollisionPushCameraNode, SafePosition) == 0x000038, "Member 'UCollisionPushCameraNode::SafePosition' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, CustomSafePosition) == 0x000040, "Member 'UCollisionPushCameraNode::CustomSafePosition' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, SafePositionOffset) == 0x000048, "Member 'UCollisionPushCameraNode::SafePositionOffset' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, SafePositionOffsetSpace) == 0x000068, "Member 'UCollisionPushCameraNode::SafePositionOffsetSpace' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, EnableCollision) == 0x000070, "Member 'UCollisionPushCameraNode::EnableCollision' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, CollisionSphereRadius) == 0x000078, "Member 'UCollisionPushCameraNode::CollisionSphereRadius' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, CollisionChannel) == 0x000088, "Member 'UCollisionPushCameraNode::CollisionChannel' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, PushInterpolator) == 0x000090, "Member 'UCollisionPushCameraNode::PushInterpolator' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, PullInterpolator) == 0x000098, "Member 'UCollisionPushCameraNode::PullInterpolator' has a wrong offset!");
static_assert(offsetof(UCollisionPushCameraNode, bRunAsyncCollision) == 0x0000A0, "Member 'UCollisionPushCameraNode::bRunAsyncCollision' has a wrong offset!");

// Class GameplayCameras.OcclusionMaterialCameraNode
// 0x0040 (0x0078 - 0x0038)
class UOcclusionMaterialCameraNode final : public UCameraNode
{
public:
	class UMaterialInterface*                     OcclusionTransparencyMaterial;                     // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  OcclusionSphereRadius;                             // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OcclusionChannel;                                  // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraNodeOriginPosition                     OcclusionTargetPosition;                           // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECameraNodeSpace                              OcclusionTargetOffsetSpace;                        // 0x0052(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3dCameraParameter               OcclusionTargetOffset;                             // 0x0058(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OcclusionMaterialCameraNode">();
	}
	static class UOcclusionMaterialCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOcclusionMaterialCameraNode>();
	}
};
static_assert(alignof(UOcclusionMaterialCameraNode) == 0x000008, "Wrong alignment on UOcclusionMaterialCameraNode");
static_assert(sizeof(UOcclusionMaterialCameraNode) == 0x000078, "Wrong size on UOcclusionMaterialCameraNode");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionTransparencyMaterial) == 0x000038, "Member 'UOcclusionMaterialCameraNode::OcclusionTransparencyMaterial' has a wrong offset!");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionSphereRadius) == 0x000040, "Member 'UOcclusionMaterialCameraNode::OcclusionSphereRadius' has a wrong offset!");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionChannel) == 0x000050, "Member 'UOcclusionMaterialCameraNode::OcclusionChannel' has a wrong offset!");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionTargetPosition) == 0x000051, "Member 'UOcclusionMaterialCameraNode::OcclusionTargetPosition' has a wrong offset!");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionTargetOffsetSpace) == 0x000052, "Member 'UOcclusionMaterialCameraNode::OcclusionTargetOffsetSpace' has a wrong offset!");
static_assert(offsetof(UOcclusionMaterialCameraNode, OcclusionTargetOffset) == 0x000058, "Member 'UOcclusionMaterialCameraNode::OcclusionTargetOffset' has a wrong offset!");

// Class GameplayCameras.ArrayCameraNode
// 0x0010 (0x0048 - 0x0038)
class UArrayCameraNode final : public UCameraNode
{
public:
	TArray<class UCameraNode*>                    Children;                                          // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArrayCameraNode">();
	}
	static class UArrayCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArrayCameraNode>();
	}
};
static_assert(alignof(UArrayCameraNode) == 0x000008, "Wrong alignment on UArrayCameraNode");
static_assert(sizeof(UArrayCameraNode) == 0x000048, "Wrong size on UArrayCameraNode");
static_assert(offsetof(UArrayCameraNode, Children) == 0x000038, "Member 'UArrayCameraNode::Children' has a wrong offset!");

// Class GameplayCameras.BoomArmCameraNode
// 0x0050 (0x0088 - 0x0038)
class UBoomArmCameraNode final : public UCameraNode
{
public:
	struct FVector3dCameraParameter               BoomOffset;                                        // 0x0038(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UCameraValueInterpolator*               BoomLengthInterpolator;                            // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 MaxForwardInterpolationFactor;                     // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 MaxBackwardInterpolationFactor;                    // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UInput2DCameraNode*                     InputSlot;                                         // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BoomArmCameraNode">();
	}
	static class UBoomArmCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBoomArmCameraNode>();
	}
};
static_assert(alignof(UBoomArmCameraNode) == 0x000008, "Wrong alignment on UBoomArmCameraNode");
static_assert(sizeof(UBoomArmCameraNode) == 0x000088, "Wrong size on UBoomArmCameraNode");
static_assert(offsetof(UBoomArmCameraNode, BoomOffset) == 0x000038, "Member 'UBoomArmCameraNode::BoomOffset' has a wrong offset!");
static_assert(offsetof(UBoomArmCameraNode, BoomLengthInterpolator) == 0x000058, "Member 'UBoomArmCameraNode::BoomLengthInterpolator' has a wrong offset!");
static_assert(offsetof(UBoomArmCameraNode, MaxForwardInterpolationFactor) == 0x000060, "Member 'UBoomArmCameraNode::MaxForwardInterpolationFactor' has a wrong offset!");
static_assert(offsetof(UBoomArmCameraNode, MaxBackwardInterpolationFactor) == 0x000070, "Member 'UBoomArmCameraNode::MaxBackwardInterpolationFactor' has a wrong offset!");
static_assert(offsetof(UBoomArmCameraNode, InputSlot) == 0x000080, "Member 'UBoomArmCameraNode::InputSlot' has a wrong offset!");

// Class GameplayCameras.CameraRigCameraNode
// 0x01D0 (0x0208 - 0x0038)
class UCameraRigCameraNode final : public UCameraNode
{
public:
	struct FCameraRigAssetReference               CameraRigReference;                                // 0x0038(0x00E8)(Edit, NativeAccessSpecifierPublic)
	class UCameraRigAsset*                        CameraRig;                                         // 0x0120(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBooleanCameraRigParameterOverride> BooleanOverrides;                              // 0x0128(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FInteger32CameraRigParameterOverride> Integer32Overrides;                          // 0x0138(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FFloatCameraRigParameterOverride> FloatOverrides;                                  // 0x0148(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FDoubleCameraRigParameterOverride> DoubleOverrides;                                // 0x0158(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector2fCameraRigParameterOverride> Vector2fOverrides;                            // 0x0168(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector2dCameraRigParameterOverride> Vector2dOverrides;                            // 0x0178(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector3fCameraRigParameterOverride> Vector3fOverrides;                            // 0x0188(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector3dCameraRigParameterOverride> Vector3dOverrides;                            // 0x0198(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector4fCameraRigParameterOverride> Vector4fOverrides;                            // 0x01A8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FVector4dCameraRigParameterOverride> Vector4dOverrides;                            // 0x01B8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FRotator3fCameraRigParameterOverride> Rotator3fOverrides;                          // 0x01C8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FRotator3dCameraRigParameterOverride> Rotator3dOverrides;                          // 0x01D8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FTransform3fCameraRigParameterOverride> Transform3fOverrides;                      // 0x01E8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<struct FTransform3dCameraRigParameterOverride> Transform3dOverrides;                      // 0x01F8(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraRigCameraNode">();
	}
	static class UCameraRigCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraRigCameraNode>();
	}
};
static_assert(alignof(UCameraRigCameraNode) == 0x000008, "Wrong alignment on UCameraRigCameraNode");
static_assert(sizeof(UCameraRigCameraNode) == 0x000208, "Wrong size on UCameraRigCameraNode");
static_assert(offsetof(UCameraRigCameraNode, CameraRigReference) == 0x000038, "Member 'UCameraRigCameraNode::CameraRigReference' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, CameraRig) == 0x000120, "Member 'UCameraRigCameraNode::CameraRig' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, BooleanOverrides) == 0x000128, "Member 'UCameraRigCameraNode::BooleanOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Integer32Overrides) == 0x000138, "Member 'UCameraRigCameraNode::Integer32Overrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, FloatOverrides) == 0x000148, "Member 'UCameraRigCameraNode::FloatOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, DoubleOverrides) == 0x000158, "Member 'UCameraRigCameraNode::DoubleOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector2fOverrides) == 0x000168, "Member 'UCameraRigCameraNode::Vector2fOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector2dOverrides) == 0x000178, "Member 'UCameraRigCameraNode::Vector2dOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector3fOverrides) == 0x000188, "Member 'UCameraRigCameraNode::Vector3fOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector3dOverrides) == 0x000198, "Member 'UCameraRigCameraNode::Vector3dOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector4fOverrides) == 0x0001A8, "Member 'UCameraRigCameraNode::Vector4fOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Vector4dOverrides) == 0x0001B8, "Member 'UCameraRigCameraNode::Vector4dOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Rotator3fOverrides) == 0x0001C8, "Member 'UCameraRigCameraNode::Rotator3fOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Rotator3dOverrides) == 0x0001D8, "Member 'UCameraRigCameraNode::Rotator3dOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Transform3fOverrides) == 0x0001E8, "Member 'UCameraRigCameraNode::Transform3fOverrides' has a wrong offset!");
static_assert(offsetof(UCameraRigCameraNode, Transform3dOverrides) == 0x0001F8, "Member 'UCameraRigCameraNode::Transform3dOverrides' has a wrong offset!");

// Class GameplayCameras.ClippingPlanesCameraNode
// 0x0020 (0x0058 - 0x0038)
class UClippingPlanesCameraNode final : public UCameraNode
{
public:
	struct FDoubleCameraParameter                 NearPlane;                                         // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 FarPlane;                                          // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClippingPlanesCameraNode">();
	}
	static class UClippingPlanesCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClippingPlanesCameraNode>();
	}
};
static_assert(alignof(UClippingPlanesCameraNode) == 0x000008, "Wrong alignment on UClippingPlanesCameraNode");
static_assert(sizeof(UClippingPlanesCameraNode) == 0x000058, "Wrong size on UClippingPlanesCameraNode");
static_assert(offsetof(UClippingPlanesCameraNode, NearPlane) == 0x000038, "Member 'UClippingPlanesCameraNode::NearPlane' has a wrong offset!");
static_assert(offsetof(UClippingPlanesCameraNode, FarPlane) == 0x000048, "Member 'UClippingPlanesCameraNode::FarPlane' has a wrong offset!");

// Class GameplayCameras.DampenPositionCameraNode
// 0x0038 (0x0070 - 0x0038)
class UDampenPositionCameraNode final : public UCameraNode
{
public:
	struct FFloatCameraParameter                  ForwardDampingFactor;                              // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  LateralDampingFactor;                              // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  VerticalDampingFactor;                             // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECameraNodeSpace                              DampenSpace;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DampenPositionCameraNode">();
	}
	static class UDampenPositionCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDampenPositionCameraNode>();
	}
};
static_assert(alignof(UDampenPositionCameraNode) == 0x000008, "Wrong alignment on UDampenPositionCameraNode");
static_assert(sizeof(UDampenPositionCameraNode) == 0x000070, "Wrong size on UDampenPositionCameraNode");
static_assert(offsetof(UDampenPositionCameraNode, ForwardDampingFactor) == 0x000038, "Member 'UDampenPositionCameraNode::ForwardDampingFactor' has a wrong offset!");
static_assert(offsetof(UDampenPositionCameraNode, LateralDampingFactor) == 0x000048, "Member 'UDampenPositionCameraNode::LateralDampingFactor' has a wrong offset!");
static_assert(offsetof(UDampenPositionCameraNode, VerticalDampingFactor) == 0x000058, "Member 'UDampenPositionCameraNode::VerticalDampingFactor' has a wrong offset!");
static_assert(offsetof(UDampenPositionCameraNode, DampenSpace) == 0x000068, "Member 'UDampenPositionCameraNode::DampenSpace' has a wrong offset!");

// Class GameplayCameras.FieldOfViewCameraNode
// 0x0010 (0x0048 - 0x0038)
class UFieldOfViewCameraNode final : public UCameraNode
{
public:
	struct FFloatCameraParameter                  FieldOfView;                                       // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FieldOfViewCameraNode">();
	}
	static class UFieldOfViewCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFieldOfViewCameraNode>();
	}
};
static_assert(alignof(UFieldOfViewCameraNode) == 0x000008, "Wrong alignment on UFieldOfViewCameraNode");
static_assert(sizeof(UFieldOfViewCameraNode) == 0x000048, "Wrong size on UFieldOfViewCameraNode");
static_assert(offsetof(UFieldOfViewCameraNode, FieldOfView) == 0x000038, "Member 'UFieldOfViewCameraNode::FieldOfView' has a wrong offset!");

// Class GameplayCameras.FilmbackCameraNode
// 0x0058 (0x0090 - 0x0038)
class UFilmbackCameraNode final : public UCameraNode
{
public:
	struct FFloatCameraParameter                  SensorWidth;                                       // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  SensorHeight;                                      // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  ISO;                                               // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                ConstrainAspectRatio;                              // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                OverrideAspectRatioAxisConstraint;                 // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAspectRatioAxisConstraint                    AspectRatioAxisConstraint;                         // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FilmbackCameraNode">();
	}
	static class UFilmbackCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFilmbackCameraNode>();
	}
};
static_assert(alignof(UFilmbackCameraNode) == 0x000008, "Wrong alignment on UFilmbackCameraNode");
static_assert(sizeof(UFilmbackCameraNode) == 0x000090, "Wrong size on UFilmbackCameraNode");
static_assert(offsetof(UFilmbackCameraNode, SensorWidth) == 0x000038, "Member 'UFilmbackCameraNode::SensorWidth' has a wrong offset!");
static_assert(offsetof(UFilmbackCameraNode, SensorHeight) == 0x000048, "Member 'UFilmbackCameraNode::SensorHeight' has a wrong offset!");
static_assert(offsetof(UFilmbackCameraNode, ISO) == 0x000058, "Member 'UFilmbackCameraNode::ISO' has a wrong offset!");
static_assert(offsetof(UFilmbackCameraNode, ConstrainAspectRatio) == 0x000068, "Member 'UFilmbackCameraNode::ConstrainAspectRatio' has a wrong offset!");
static_assert(offsetof(UFilmbackCameraNode, OverrideAspectRatioAxisConstraint) == 0x000078, "Member 'UFilmbackCameraNode::OverrideAspectRatioAxisConstraint' has a wrong offset!");
static_assert(offsetof(UFilmbackCameraNode, AspectRatioAxisConstraint) == 0x000088, "Member 'UFilmbackCameraNode::AspectRatioAxisConstraint' has a wrong offset!");

// Class GameplayCameras.LensParametersCameraNode
// 0x0050 (0x0088 - 0x0038)
class ULensParametersCameraNode final : public UCameraNode
{
public:
	struct FFloatCameraParameter                  FocalLength;                                       // 0x0038(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  FocusDistance;                                     // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  Aperture;                                          // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  ShutterSpeed;                                      // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                EnablePhysicalCamera;                              // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LensParametersCameraNode">();
	}
	static class ULensParametersCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULensParametersCameraNode>();
	}
};
static_assert(alignof(ULensParametersCameraNode) == 0x000008, "Wrong alignment on ULensParametersCameraNode");
static_assert(sizeof(ULensParametersCameraNode) == 0x000088, "Wrong size on ULensParametersCameraNode");
static_assert(offsetof(ULensParametersCameraNode, FocalLength) == 0x000038, "Member 'ULensParametersCameraNode::FocalLength' has a wrong offset!");
static_assert(offsetof(ULensParametersCameraNode, FocusDistance) == 0x000048, "Member 'ULensParametersCameraNode::FocusDistance' has a wrong offset!");
static_assert(offsetof(ULensParametersCameraNode, Aperture) == 0x000058, "Member 'ULensParametersCameraNode::Aperture' has a wrong offset!");
static_assert(offsetof(ULensParametersCameraNode, ShutterSpeed) == 0x000068, "Member 'ULensParametersCameraNode::ShutterSpeed' has a wrong offset!");
static_assert(offsetof(ULensParametersCameraNode, EnablePhysicalCamera) == 0x000078, "Member 'ULensParametersCameraNode::EnablePhysicalCamera' has a wrong offset!");

// Class GameplayCameras.OffsetCameraNode
// 0x0048 (0x0080 - 0x0038)
class UOffsetCameraNode final : public UCameraNode
{
public:
	struct FVector3dCameraParameter               TranslationOffset;                                 // 0x0038(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator3dCameraParameter              RotationOffset;                                    // 0x0058(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECameraNodeSpace                              OffsetSpace;                                       // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OffsetCameraNode">();
	}
	static class UOffsetCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOffsetCameraNode>();
	}
};
static_assert(alignof(UOffsetCameraNode) == 0x000008, "Wrong alignment on UOffsetCameraNode");
static_assert(sizeof(UOffsetCameraNode) == 0x000080, "Wrong size on UOffsetCameraNode");
static_assert(offsetof(UOffsetCameraNode, TranslationOffset) == 0x000038, "Member 'UOffsetCameraNode::TranslationOffset' has a wrong offset!");
static_assert(offsetof(UOffsetCameraNode, RotationOffset) == 0x000058, "Member 'UOffsetCameraNode::RotationOffset' has a wrong offset!");
static_assert(offsetof(UOffsetCameraNode, OffsetSpace) == 0x000078, "Member 'UOffsetCameraNode::OffsetSpace' has a wrong offset!");

// Class GameplayCameras.PostProcessCameraNode
// 0x0708 (0x0740 - 0x0038)
class UPostProcessCameraNode final : public UCameraNode
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0040(0x0700)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PostProcessCameraNode">();
	}
	static class UPostProcessCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPostProcessCameraNode>();
	}
};
static_assert(alignof(UPostProcessCameraNode) == 0x000010, "Wrong alignment on UPostProcessCameraNode");
static_assert(sizeof(UPostProcessCameraNode) == 0x000740, "Wrong size on UPostProcessCameraNode");
static_assert(offsetof(UPostProcessCameraNode, PostProcessSettings) == 0x000040, "Member 'UPostProcessCameraNode::PostProcessSettings' has a wrong offset!");

// Class GameplayCameras.TargetRayCastCameraNode
// 0x0018 (0x0050 - 0x0038)
class UTargetRayCastCameraNode final : public UCameraNode
{
public:
	ECollisionChannel                             TraceChannel;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBooleanCameraParameter                AutoFocus;                                         // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetRayCastCameraNode">();
	}
	static class UTargetRayCastCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetRayCastCameraNode>();
	}
};
static_assert(alignof(UTargetRayCastCameraNode) == 0x000008, "Wrong alignment on UTargetRayCastCameraNode");
static_assert(sizeof(UTargetRayCastCameraNode) == 0x000050, "Wrong size on UTargetRayCastCameraNode");
static_assert(offsetof(UTargetRayCastCameraNode, TraceChannel) == 0x000038, "Member 'UTargetRayCastCameraNode::TraceChannel' has a wrong offset!");
static_assert(offsetof(UTargetRayCastCameraNode, AutoFocus) == 0x000040, "Member 'UTargetRayCastCameraNode::AutoFocus' has a wrong offset!");

// Class GameplayCameras.BaseFramingCameraNode
// 0x00D8 (0x0110 - 0x0038)
class UBaseFramingCameraNode : public UCameraNode
{
public:
	struct FVector3dCameraVariableReference       TargetLocation;                                    // 0x0038(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 HorizontalFraming;                                 // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDoubleCameraParameter                 VerticalFraming;                                   // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  ReframeDampingFactor;                              // 0x0060(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  LowReframeDampingFactor;                           // 0x0070(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  ReframeUnlockRadius;                               // 0x0080(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraFramingZone                     DeadZone;                                          // 0x0090(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCameraFramingZone                     SoftZone;                                          // 0x00D0(0x0040)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseFramingCameraNode">();
	}
	static class UBaseFramingCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseFramingCameraNode>();
	}
};
static_assert(alignof(UBaseFramingCameraNode) == 0x000008, "Wrong alignment on UBaseFramingCameraNode");
static_assert(sizeof(UBaseFramingCameraNode) == 0x000110, "Wrong size on UBaseFramingCameraNode");
static_assert(offsetof(UBaseFramingCameraNode, TargetLocation) == 0x000038, "Member 'UBaseFramingCameraNode::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, HorizontalFraming) == 0x000040, "Member 'UBaseFramingCameraNode::HorizontalFraming' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, VerticalFraming) == 0x000050, "Member 'UBaseFramingCameraNode::VerticalFraming' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, ReframeDampingFactor) == 0x000060, "Member 'UBaseFramingCameraNode::ReframeDampingFactor' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, LowReframeDampingFactor) == 0x000070, "Member 'UBaseFramingCameraNode::LowReframeDampingFactor' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, ReframeUnlockRadius) == 0x000080, "Member 'UBaseFramingCameraNode::ReframeUnlockRadius' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, DeadZone) == 0x000090, "Member 'UBaseFramingCameraNode::DeadZone' has a wrong offset!");
static_assert(offsetof(UBaseFramingCameraNode, SoftZone) == 0x0000D0, "Member 'UBaseFramingCameraNode::SoftZone' has a wrong offset!");

// Class GameplayCameras.DollyFramingCameraNode
// 0x0020 (0x0130 - 0x0110)
class UDollyFramingCameraNode final : public UBaseFramingCameraNode
{
public:
	struct FBooleanCameraParameter                CanMoveLaterally;                                  // 0x0110(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                CanMoveVertically;                                 // 0x0120(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DollyFramingCameraNode">();
	}
	static class UDollyFramingCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDollyFramingCameraNode>();
	}
};
static_assert(alignof(UDollyFramingCameraNode) == 0x000008, "Wrong alignment on UDollyFramingCameraNode");
static_assert(sizeof(UDollyFramingCameraNode) == 0x000130, "Wrong size on UDollyFramingCameraNode");
static_assert(offsetof(UDollyFramingCameraNode, CanMoveLaterally) == 0x000110, "Member 'UDollyFramingCameraNode::CanMoveLaterally' has a wrong offset!");
static_assert(offsetof(UDollyFramingCameraNode, CanMoveVertically) == 0x000120, "Member 'UDollyFramingCameraNode::CanMoveVertically' has a wrong offset!");

// Class GameplayCameras.PanningFramingCameraNode
// 0x0020 (0x0130 - 0x0110)
class UPanningFramingCameraNode final : public UBaseFramingCameraNode
{
public:
	struct FBooleanCameraParameter                CanPanLaterally;                                   // 0x0110(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                CanPanVertically;                                  // 0x0120(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PanningFramingCameraNode">();
	}
	static class UPanningFramingCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPanningFramingCameraNode>();
	}
};
static_assert(alignof(UPanningFramingCameraNode) == 0x000008, "Wrong alignment on UPanningFramingCameraNode");
static_assert(sizeof(UPanningFramingCameraNode) == 0x000130, "Wrong size on UPanningFramingCameraNode");
static_assert(offsetof(UPanningFramingCameraNode, CanPanLaterally) == 0x000110, "Member 'UPanningFramingCameraNode::CanPanLaterally' has a wrong offset!");
static_assert(offsetof(UPanningFramingCameraNode, CanPanVertically) == 0x000120, "Member 'UPanningFramingCameraNode::CanPanVertically' has a wrong offset!");

// Class GameplayCameras.AutoRotateInput2DCameraNode
// 0x0078 (0x00B0 - 0x0038)
class UAutoRotateInput2DCameraNode final : public UInput2DCameraNode
{
public:
	ECameraAutoRotateDirection                    Direction;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatCameraParameter                  WaitTime;                                          // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFloatCameraParameter                  DeactivationThreshold;                             // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UCameraValueInterpolator*               Interpolator;                                      // 0x0060(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                FreezeControlRotation;                             // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                EnableAutoRotate;                                  // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                AutoRotateYaw;                                     // 0x0088(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBooleanCameraParameter                AutoRotatePitch;                                   // 0x0098(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UInput2DCameraNode*                     InputNode;                                         // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutoRotateInput2DCameraNode">();
	}
	static class UAutoRotateInput2DCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutoRotateInput2DCameraNode>();
	}
};
static_assert(alignof(UAutoRotateInput2DCameraNode) == 0x000008, "Wrong alignment on UAutoRotateInput2DCameraNode");
static_assert(sizeof(UAutoRotateInput2DCameraNode) == 0x0000B0, "Wrong size on UAutoRotateInput2DCameraNode");
static_assert(offsetof(UAutoRotateInput2DCameraNode, Direction) == 0x000038, "Member 'UAutoRotateInput2DCameraNode::Direction' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, WaitTime) == 0x000040, "Member 'UAutoRotateInput2DCameraNode::WaitTime' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, DeactivationThreshold) == 0x000050, "Member 'UAutoRotateInput2DCameraNode::DeactivationThreshold' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, Interpolator) == 0x000060, "Member 'UAutoRotateInput2DCameraNode::Interpolator' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, FreezeControlRotation) == 0x000068, "Member 'UAutoRotateInput2DCameraNode::FreezeControlRotation' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, EnableAutoRotate) == 0x000078, "Member 'UAutoRotateInput2DCameraNode::EnableAutoRotate' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, AutoRotateYaw) == 0x000088, "Member 'UAutoRotateInput2DCameraNode::AutoRotateYaw' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, AutoRotatePitch) == 0x000098, "Member 'UAutoRotateInput2DCameraNode::AutoRotatePitch' has a wrong offset!");
static_assert(offsetof(UAutoRotateInput2DCameraNode, InputNode) == 0x0000A8, "Member 'UAutoRotateInput2DCameraNode::InputNode' has a wrong offset!");

// Class GameplayCameras.BlueprintCameraNodeEvaluator
// 0x00B0 (0x00D8 - 0x0028)
class UBlueprintCameraNodeEvaluator final : public UObject
{
public:
	bool                                          bIsFirstFrame;                                     // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                EvaluationContextOwner;                            // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBlueprintCameraPose                   CameraPose;                                        // 0x0038(0x0070)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBlueprintCameraVariableTable          VariableTable;                                     // 0x00A8(0x0018)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TickCameraNode(float DeltaTime);

	class AActor* FindEvaluationContextOwnerActor(TSubclassOf<class AActor> ActorClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraNodeEvaluator">();
	}
	static class UBlueprintCameraNodeEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraNodeEvaluator>();
	}
};
static_assert(alignof(UBlueprintCameraNodeEvaluator) == 0x000008, "Wrong alignment on UBlueprintCameraNodeEvaluator");
static_assert(sizeof(UBlueprintCameraNodeEvaluator) == 0x0000D8, "Wrong size on UBlueprintCameraNodeEvaluator");
static_assert(offsetof(UBlueprintCameraNodeEvaluator, bIsFirstFrame) == 0x000028, "Member 'UBlueprintCameraNodeEvaluator::bIsFirstFrame' has a wrong offset!");
static_assert(offsetof(UBlueprintCameraNodeEvaluator, EvaluationContextOwner) == 0x000030, "Member 'UBlueprintCameraNodeEvaluator::EvaluationContextOwner' has a wrong offset!");
static_assert(offsetof(UBlueprintCameraNodeEvaluator, CameraPose) == 0x000038, "Member 'UBlueprintCameraNodeEvaluator::CameraPose' has a wrong offset!");
static_assert(offsetof(UBlueprintCameraNodeEvaluator, VariableTable) == 0x0000A8, "Member 'UBlueprintCameraNodeEvaluator::VariableTable' has a wrong offset!");

// Class GameplayCameras.BlueprintCameraNode
// 0x0008 (0x0040 - 0x0038)
class UBlueprintCameraNode final : public UCameraNode
{
public:
	TSubclassOf<class UBlueprintCameraNodeEvaluator> CameraNodeEvaluatorClass;                       // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintCameraNode">();
	}
	static class UBlueprintCameraNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintCameraNode>();
	}
};
static_assert(alignof(UBlueprintCameraNode) == 0x000008, "Wrong alignment on UBlueprintCameraNode");
static_assert(sizeof(UBlueprintCameraNode) == 0x000040, "Wrong size on UBlueprintCameraNode");
static_assert(offsetof(UBlueprintCameraNode, CameraNodeEvaluatorClass) == 0x000038, "Member 'UBlueprintCameraNode::CameraNodeEvaluatorClass' has a wrong offset!");

// Class GameplayCameras.IsCameraRigTransitionCondition
// 0x0010 (0x0040 - 0x0030)
class UIsCameraRigTransitionCondition final : public UCameraRigTransitionCondition
{
public:
	class UCameraRigAsset*                        PreviousCameraRig;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraRigAsset*                        NextCameraRig;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsCameraRigTransitionCondition">();
	}
	static class UIsCameraRigTransitionCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsCameraRigTransitionCondition>();
	}
};
static_assert(alignof(UIsCameraRigTransitionCondition) == 0x000008, "Wrong alignment on UIsCameraRigTransitionCondition");
static_assert(sizeof(UIsCameraRigTransitionCondition) == 0x000040, "Wrong size on UIsCameraRigTransitionCondition");
static_assert(offsetof(UIsCameraRigTransitionCondition, PreviousCameraRig) == 0x000030, "Member 'UIsCameraRigTransitionCondition::PreviousCameraRig' has a wrong offset!");
static_assert(offsetof(UIsCameraRigTransitionCondition, NextCameraRig) == 0x000038, "Member 'UIsCameraRigTransitionCondition::NextCameraRig' has a wrong offset!");

// Class GameplayCameras.GameplayTagTransitionCondition
// 0x0090 (0x00C0 - 0x0030)
class UGameplayTagTransitionCondition final : public UCameraRigTransitionCondition
{
public:
	struct FGameplayTagQuery                      PreviousGameplayTagQuery;                          // 0x0030(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      NextGameplayTagQuery;                              // 0x0078(0x0048)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayTagTransitionCondition">();
	}
	static class UGameplayTagTransitionCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayTagTransitionCondition>();
	}
};
static_assert(alignof(UGameplayTagTransitionCondition) == 0x000008, "Wrong alignment on UGameplayTagTransitionCondition");
static_assert(sizeof(UGameplayTagTransitionCondition) == 0x0000C0, "Wrong size on UGameplayTagTransitionCondition");
static_assert(offsetof(UGameplayTagTransitionCondition, PreviousGameplayTagQuery) == 0x000030, "Member 'UGameplayTagTransitionCondition::PreviousGameplayTagQuery' has a wrong offset!");
static_assert(offsetof(UGameplayTagTransitionCondition, NextGameplayTagQuery) == 0x000078, "Member 'UGameplayTagTransitionCondition::NextGameplayTagQuery' has a wrong offset!");

// Class GameplayCameras.AccelerationDecelerationValueInterpolator
// 0x0010 (0x0038 - 0x0028)
class UAccelerationDecelerationValueInterpolator final : public UCameraValueInterpolator
{
public:
	float                                         Acceleration;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AccelerationDecelerationValueInterpolator">();
	}
	static class UAccelerationDecelerationValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAccelerationDecelerationValueInterpolator>();
	}
};
static_assert(alignof(UAccelerationDecelerationValueInterpolator) == 0x000008, "Wrong alignment on UAccelerationDecelerationValueInterpolator");
static_assert(sizeof(UAccelerationDecelerationValueInterpolator) == 0x000038, "Wrong size on UAccelerationDecelerationValueInterpolator");
static_assert(offsetof(UAccelerationDecelerationValueInterpolator, Acceleration) == 0x000028, "Member 'UAccelerationDecelerationValueInterpolator::Acceleration' has a wrong offset!");
static_assert(offsetof(UAccelerationDecelerationValueInterpolator, MaxSpeed) == 0x00002C, "Member 'UAccelerationDecelerationValueInterpolator::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UAccelerationDecelerationValueInterpolator, Deceleration) == 0x000030, "Member 'UAccelerationDecelerationValueInterpolator::Deceleration' has a wrong offset!");

// Class GameplayCameras.CriticalDamperValueInterpolator
// 0x0008 (0x0030 - 0x0028)
class UCriticalDamperValueInterpolator final : public UCameraValueInterpolator
{
public:
	float                                         DampingFactor;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriticalDamperValueInterpolator">();
	}
	static class UCriticalDamperValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriticalDamperValueInterpolator>();
	}
};
static_assert(alignof(UCriticalDamperValueInterpolator) == 0x000008, "Wrong alignment on UCriticalDamperValueInterpolator");
static_assert(sizeof(UCriticalDamperValueInterpolator) == 0x000030, "Wrong size on UCriticalDamperValueInterpolator");
static_assert(offsetof(UCriticalDamperValueInterpolator, DampingFactor) == 0x000028, "Member 'UCriticalDamperValueInterpolator::DampingFactor' has a wrong offset!");

// Class GameplayCameras.DoubleIIRValueInterpolator
// 0x0010 (0x0038 - 0x0028)
class UDoubleIIRValueInterpolator final : public UCameraValueInterpolator
{
public:
	float                                         PrimarySpeed;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntermediateSpeed;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedStep;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoubleIIRValueInterpolator">();
	}
	static class UDoubleIIRValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoubleIIRValueInterpolator>();
	}
};
static_assert(alignof(UDoubleIIRValueInterpolator) == 0x000008, "Wrong alignment on UDoubleIIRValueInterpolator");
static_assert(sizeof(UDoubleIIRValueInterpolator) == 0x000038, "Wrong size on UDoubleIIRValueInterpolator");
static_assert(offsetof(UDoubleIIRValueInterpolator, PrimarySpeed) == 0x000028, "Member 'UDoubleIIRValueInterpolator::PrimarySpeed' has a wrong offset!");
static_assert(offsetof(UDoubleIIRValueInterpolator, IntermediateSpeed) == 0x00002C, "Member 'UDoubleIIRValueInterpolator::IntermediateSpeed' has a wrong offset!");
static_assert(offsetof(UDoubleIIRValueInterpolator, bUseFixedStep) == 0x000030, "Member 'UDoubleIIRValueInterpolator::bUseFixedStep' has a wrong offset!");

// Class GameplayCameras.IIRValueInterpolator
// 0x0008 (0x0030 - 0x0028)
class UIIRValueInterpolator final : public UCameraValueInterpolator
{
public:
	float                                         Speed;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedStep;                                     // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IIRValueInterpolator">();
	}
	static class UIIRValueInterpolator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIIRValueInterpolator>();
	}
};
static_assert(alignof(UIIRValueInterpolator) == 0x000008, "Wrong alignment on UIIRValueInterpolator");
static_assert(sizeof(UIIRValueInterpolator) == 0x000030, "Wrong size on UIIRValueInterpolator");
static_assert(offsetof(UIIRValueInterpolator, Speed) == 0x000028, "Member 'UIIRValueInterpolator::Speed' has a wrong offset!");
static_assert(offsetof(UIIRValueInterpolator, bUseFixedStep) == 0x00002C, "Member 'UIIRValueInterpolator::bUseFixedStep' has a wrong offset!");

}

