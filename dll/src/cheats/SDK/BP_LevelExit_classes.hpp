#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelExit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LevelExit.BP_LevelExit_C
// 0x0088 (0x0330 - 0x02A8)
class ABP_LevelExit_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        MSS_Portal_Passive;                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessSphere;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blackbox;                                          // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              SpawnedPortalFX;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AREnemySpawnAreaSegment*>        CachedSpawnAreaSegments;                           // 0x0300(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class AROverworldManager*                     CachedOverworldManager;                            // 0x0310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        PortalSizeMultiplier;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceLoadLobby;                                    // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCorrupted;                                      // 0x0321(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnPortalVFX;                                    // 0x0322(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323[0x5];                                      // 0x0323(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         PortalSystemTemplate;                              // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ToggleInteractionIndicatorVisibility(class AActor* InteractingActor, const bool NewVisible);
	void StartWaitingForPlayers(class APlayerController* PlayerController);
	void SkipWaitingForDisconnectedPlayers();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PruneGeneratedActors();
	void OnSegmentCompleted(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnRep_bIsCorrupted();
	void OnInteract(class APlayerController* Controller);
	void OnFocusGone(class APlayerController* Controller);
	void OnFocus(class APlayerController* Controller);
	void MakeCorrupted();
	void IsCorrupted(bool* IsCorrupted_0);
	void Is_Last_Node_Of_Last_Area(bool* OutBool);
	void GetSpawnLocation(double InFloat, struct FVector* Location, bool* OutBool);
	void Force_Load_Lobby_Level(bool* ShouldForceLobby);
	void ExecuteUbergraph_BP_LevelExit(int32 EntryPoint);
	void CheckNodeChoice();
	void CheckDisconnectPlayers(bool* HasDisconnectedPlayers);
	bool CanInteract(class APlayerController* Controller);

	bool ShouldShowOnRadar() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;
	struct FVector2D GetRadarIconSize() const;
	struct FLinearColor GetRadarIconColor() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	class FText GetInteractableSubHeader() const;
	class FText GetInteractableName() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableCostCurrencyType() const;
	int32 GetInteractableCost() const;
	class FText GetInteractableAlternativeDescription() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LevelExit_C">();
	}
	static class ABP_LevelExit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LevelExit_C>();
	}
};
static_assert(alignof(ABP_LevelExit_C) == 0x000008, "Wrong alignment on ABP_LevelExit_C");
static_assert(sizeof(ABP_LevelExit_C) == 0x000330, "Wrong size on ABP_LevelExit_C");
static_assert(offsetof(ABP_LevelExit_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_LevelExit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, MSS_Portal_Passive) == 0x0002B0, "Member 'ABP_LevelExit_C::MSS_Portal_Passive' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, PointLight) == 0x0002B8, "Member 'ABP_LevelExit_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, Arrow) == 0x0002C0, "Member 'ABP_LevelExit_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, PostProcessSphere) == 0x0002C8, "Member 'ABP_LevelExit_C::PostProcessSphere' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, Cube) == 0x0002D0, "Member 'ABP_LevelExit_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, Root) == 0x0002D8, "Member 'ABP_LevelExit_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, PostProcess) == 0x0002E0, "Member 'ABP_LevelExit_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, Blackbox) == 0x0002E8, "Member 'ABP_LevelExit_C::Blackbox' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, SpawnedPortalFX) == 0x0002F0, "Member 'ABP_LevelExit_C::SpawnedPortalFX' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, CachedSpawnAreaSegments) == 0x000300, "Member 'ABP_LevelExit_C::CachedSpawnAreaSegments' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, CachedOverworldManager) == 0x000310, "Member 'ABP_LevelExit_C::CachedOverworldManager' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, PortalSizeMultiplier) == 0x000318, "Member 'ABP_LevelExit_C::PortalSizeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, ForceLoadLobby) == 0x000320, "Member 'ABP_LevelExit_C::ForceLoadLobby' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, bIsCorrupted) == 0x000321, "Member 'ABP_LevelExit_C::bIsCorrupted' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, SpawnPortalVFX) == 0x000322, "Member 'ABP_LevelExit_C::SpawnPortalVFX' has a wrong offset!");
static_assert(offsetof(ABP_LevelExit_C, PortalSystemTemplate) == 0x000328, "Member 'ABP_LevelExit_C::PortalSystemTemplate' has a wrong offset!");

}

