#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRangeDummy

#include "Basic.hpp"

#include "RGame_structs.hpp"


namespace SDK::Params
{

// Function BP_ShootingRangeDummy.BP_ShootingRangeDummy_C.Activate
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingRangeDummy_C_Activate final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Positive;                                          // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeDummy_C_Activate) == 0x000004, "Wrong alignment on BP_ShootingRangeDummy_C_Activate");
static_assert(sizeof(BP_ShootingRangeDummy_C_Activate) == 0x000008, "Wrong size on BP_ShootingRangeDummy_C_Activate");
static_assert(offsetof(BP_ShootingRangeDummy_C_Activate, ID) == 0x000000, "Member 'BP_ShootingRangeDummy_C_Activate::ID' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_Activate, Positive) == 0x000004, "Member 'BP_ShootingRangeDummy_C_Activate::Positive' has a wrong offset!");

// Function BP_ShootingRangeDummy.BP_ShootingRangeDummy_C.ExecuteUbergraph_BP_ShootingRangeDummy
// 0x0110 (0x0110 - 0x0000)
struct BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent)> K2Node_CreateDelegate_OutputDelegate; // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHealthComponent*                      K2Node_CustomEvent_Component;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDamageCombatEvent                     K2Node_CustomEvent_DamageEvent;                    // 0x0020(0x00C0)()
	float                                         CallFunc_GetCurrentHealth_ReturnValue;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxHealth_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_ID;                                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Positive;                             // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy) == 0x000008, "Wrong alignment on BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy");
static_assert(sizeof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy) == 0x000110, "Wrong size on BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, EntryPoint) == 0x000000, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, K2Node_CustomEvent_Component) == 0x000018, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::K2Node_CustomEvent_Component' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, K2Node_CustomEvent_DamageEvent) == 0x000020, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::K2Node_CustomEvent_DamageEvent' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_GetCurrentHealth_ReturnValue) == 0x0000E0, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_GetCurrentHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_GetMaxHealth_ReturnValue) == 0x0000E4, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000E8, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_GetMaxHealth_ReturnValue_1) == 0x0000F0, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_GetMaxHealth_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000F4, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, K2Node_Event_ID) == 0x0000F8, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::K2Node_Event_ID' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, K2Node_Event_Positive) == 0x0000FC, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::K2Node_Event_Positive' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000100, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'BP_ShootingRangeDummy_C_ExecuteUbergraph_BP_ShootingRangeDummy::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_ShootingRangeDummy.BP_ShootingRangeDummy_C.OnDamageTaken_Event
// 0x00C8 (0x00C8 - 0x0000)
struct BP_ShootingRangeDummy_C_OnDamageTaken_Event final
{
public:
	class URHealthComponent*                      Component;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDamageCombatEvent                     DamageEvent;                                       // 0x0008(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_ShootingRangeDummy_C_OnDamageTaken_Event) == 0x000008, "Wrong alignment on BP_ShootingRangeDummy_C_OnDamageTaken_Event");
static_assert(sizeof(BP_ShootingRangeDummy_C_OnDamageTaken_Event) == 0x0000C8, "Wrong size on BP_ShootingRangeDummy_C_OnDamageTaken_Event");
static_assert(offsetof(BP_ShootingRangeDummy_C_OnDamageTaken_Event, Component) == 0x000000, "Member 'BP_ShootingRangeDummy_C_OnDamageTaken_Event::Component' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_OnDamageTaken_Event, DamageEvent) == 0x000008, "Member 'BP_ShootingRangeDummy_C_OnDamageTaken_Event::DamageEvent' has a wrong offset!");

// Function BP_ShootingRangeDummy.BP_ShootingRangeDummy_C.SetDummyActive
// 0x0003 (0x0003 - 0x0000)
struct BP_ShootingRangeDummy_C_SetDummyActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeDummy_C_SetDummyActive) == 0x000001, "Wrong alignment on BP_ShootingRangeDummy_C_SetDummyActive");
static_assert(sizeof(BP_ShootingRangeDummy_C_SetDummyActive) == 0x000003, "Wrong size on BP_ShootingRangeDummy_C_SetDummyActive");
static_assert(offsetof(BP_ShootingRangeDummy_C_SetDummyActive, Active) == 0x000000, "Member 'BP_ShootingRangeDummy_C_SetDummyActive::Active' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_SetDummyActive, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'BP_ShootingRangeDummy_C_SetDummyActive::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingRangeDummy_C_SetDummyActive, CallFunc_HasAuthority_ReturnValue_1) == 0x000002, "Member 'BP_ShootingRangeDummy_C_SetDummyActive::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");

// Function BP_ShootingRangeDummy.BP_ShootingRangeDummy_C.ShouldShowOnRadar
// 0x0001 (0x0001 - 0x0000)
struct BP_ShootingRangeDummy_C_ShouldShowOnRadar final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingRangeDummy_C_ShouldShowOnRadar) == 0x000001, "Wrong alignment on BP_ShootingRangeDummy_C_ShouldShowOnRadar");
static_assert(sizeof(BP_ShootingRangeDummy_C_ShouldShowOnRadar) == 0x000001, "Wrong size on BP_ShootingRangeDummy_C_ShouldShowOnRadar");
static_assert(offsetof(BP_ShootingRangeDummy_C_ShouldShowOnRadar, ReturnValue) == 0x000000, "Member 'BP_ShootingRangeDummy_C_ShouldShowOnRadar::ReturnValue' has a wrong offset!");

}

