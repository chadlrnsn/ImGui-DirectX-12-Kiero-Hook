#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyNode

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "RGame_structs.hpp"


namespace SDK::Params
{

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.AutoAssignSavedPoints
// 0x0020 (0x0020 - 0x0000)
struct Widget_DifficultyNode_C_AutoAssignSavedPoints final
{
public:
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_AutoAssignSavedPoints) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_AutoAssignSavedPoints");
static_assert(sizeof(Widget_DifficultyNode_C_AutoAssignSavedPoints) == 0x000020, "Wrong size on Widget_DifficultyNode_C_AutoAssignSavedPoints");
static_assert(offsetof(Widget_DifficultyNode_C_AutoAssignSavedPoints, CallFunc_IsServer_ReturnValue) == 0x000000, "Member 'Widget_DifficultyNode_C_AutoAssignSavedPoints::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_AutoAssignSavedPoints, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000004, "Member 'Widget_DifficultyNode_C_AutoAssignSavedPoints::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_AutoAssignSavedPoints, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_AutoAssignSavedPoints::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_AutoAssignSavedPoints, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_AutoAssignSavedPoints::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_AutoAssignSavedPoints, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'Widget_DifficultyNode_C_AutoAssignSavedPoints::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.DeductPoint
// 0x0018 (0x0018 - 0x0000)
struct Widget_DifficultyNode_C_DeductPoint final
{
public:
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_DeductPoint) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_DeductPoint");
static_assert(sizeof(Widget_DifficultyNode_C_DeductPoint) == 0x000018, "Wrong size on Widget_DifficultyNode_C_DeductPoint");
static_assert(offsetof(Widget_DifficultyNode_C_DeductPoint, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000000, "Member 'Widget_DifficultyNode_C_DeductPoint::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_DeductPoint, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_DeductPoint::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_DeductPoint, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_DeductPoint::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_DeductPoint, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'Widget_DifficultyNode_C_DeductPoint::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.DestroyTooltip
// 0x0001 (0x0001 - 0x0000)
struct Widget_DifficultyNode_C_DestroyTooltip final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_DestroyTooltip) == 0x000001, "Wrong alignment on Widget_DifficultyNode_C_DestroyTooltip");
static_assert(sizeof(Widget_DifficultyNode_C_DestroyTooltip) == 0x000001, "Wrong size on Widget_DifficultyNode_C_DestroyTooltip");
static_assert(offsetof(Widget_DifficultyNode_C_DestroyTooltip, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Widget_DifficultyNode_C_DestroyTooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Does Next Node Have Points Assigned
// 0x0003 (0x0003 - 0x0000)
struct Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned final
{
public:
	bool                                          NextNodeHasPointsAssigned;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned) == 0x000001, "Wrong alignment on Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned");
static_assert(sizeof(Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned) == 0x000003, "Wrong size on Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned");
static_assert(offsetof(Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned, NextNodeHasPointsAssigned) == 0x000000, "Member 'Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned::NextNodeHasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned, CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned) == 0x000002, "Member 'Widget_DifficultyNode_C_Does_Next_Node_Have_Points_Assigned::CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.ExecuteUbergraph_Widget_DifficultyNode
// 0x0180 (0x0180 - 0x0000)
struct Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassFromSoftClassPtr_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsRGScript;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue_1;              // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue_1;  // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              CallFunc_GetScriptInCategory_ReturnValue;          // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URGScript*                              CallFunc_GetScriptInCategory_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URGScript*                              CallFunc_AddScript_ReturnValue;                    // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGScriptActorInfo                      CallFunc_SetGScriptContext_ReturnValue;            // 0x0090(0x0030)(ContainsInstancedReference)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_1;         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_2;         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue_2;              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUserFocus_ReturnValue;                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x00FC(0x0008)(NoDestructor)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0104(0x0008)(NoDestructor)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_2;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GamepadLostFocusByMouseEvent_ReturnValue; // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x011C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue_2;         // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTotalAssignedPoints_Value;             // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDemoBuild_ReturnValue;               // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_137[0x1];                                      // 0x0137(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_3;            // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_CommonEnemyMutatorInfoDialog_C* CallFunc_PushWidget_OutWidget;                     // 0x0148(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSlateModifierKeysState                CallFunc_GetModifierKeysState_ReturnValue;         // 0x0150(0x0001)(NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModifierKeysState_IsShiftDown_ReturnValue; // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateModifierKeysState                CallFunc_GetModifierKeysState_ReturnValue_1;       // 0x0153(0x0001)(NoDestructor)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ModifierKeysState_IsShiftDown_ReturnValue_1; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumTiers_ReturnValue_1;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_3;         // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_4;         // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCapped_Capped;                          // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177[0x1];                                      // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_5;         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode");
static_assert(sizeof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode) == 0x000180, "Wrong size on Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, EntryPoint) == 0x000000, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::EntryPoint' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_Event_IsDesignTime) == 0x000004, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetCurrentSaveGame_ReturnValue_1) == 0x000018, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetCurrentSaveGame_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetRGameState_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_2) == 0x000029, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_3) == 0x00002A, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetOwningPlayer_ReturnValue) == 0x000030, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_4) == 0x000038, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_5) == 0x000039, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_LoadClassFromSoftClassPtr_ReturnValue) == 0x000040, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_LoadClassFromSoftClassPtr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x000048, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_ClassDynamicCast_AsRGScript) == 0x000050, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_ClassDynamicCast_AsRGScript' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_ClassDynamicCast_bSuccess) == 0x000058, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValidClass_ReturnValue) == 0x000059, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumTiers_ReturnValue) == 0x00005C, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetRGameState_ReturnValue_1) == 0x000060, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetRGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_6) == 0x000068, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_7) == 0x000069, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValidSoftClassReference_ReturnValue_1) == 0x00006A, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValidSoftClassReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_8) == 0x00006B, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetScriptInCategory_ReturnValue) == 0x000070, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetScriptInCategory_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetScriptInCategory_ReturnValue_1) == 0x000078, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetScriptInCategory_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_9) == 0x000080, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_10) == 0x000081, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_AddScript_ReturnValue) == 0x000088, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_AddScript_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_SetGScriptContext_ReturnValue) == 0x000090, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_SetGScriptContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints) == 0x0000C0, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints_1) == 0x0000C4, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints_2) == 0x0000CC, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetRGameState_ReturnValue_2) == 0x0000D0, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetRGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Less_IntInt_ReturnValue) == 0x0000D8, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000D9, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000DC, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_BooleanAND_ReturnValue) == 0x0000E0, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000E4, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_BooleanOR_ReturnValue) == 0x0000E8, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x0000F0, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_HasUserFocus_ReturnValue) == 0x0000F8, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_HasUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_Event_InFocusEvent_1) == 0x0000FC, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_Event_InFocusEvent) == 0x000104, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetOwningPlayer_ReturnValue_2) == 0x000110, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetOwningPlayer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GamepadLostFocusByMouseEvent_ReturnValue) == 0x000118, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GamepadLostFocusByMouseEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x00011C, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetCurrentSaveGame_ReturnValue_2) == 0x000128, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetCurrentSaveGame_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetTotalAssignedPoints_Value) == 0x000130, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetTotalAssignedPoints_Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsValid_ReturnValue_11) == 0x000134, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000135, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetIsDemoBuild_ReturnValue) == 0x000136, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetIsDemoBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetOwningPlayer_ReturnValue_3) == 0x000138, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetOwningPlayer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000140, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_PushWidget_OutWidget) == 0x000148, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_PushWidget_OutWidget' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetModifierKeysState_ReturnValue) == 0x000150, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetModifierKeysState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, Temp_bool_Variable) == 0x000151, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_ModifierKeysState_IsShiftDown_ReturnValue) == 0x000152, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_ModifierKeysState_IsShiftDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetModifierKeysState_ReturnValue_1) == 0x000153, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetModifierKeysState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_SelectInt_ReturnValue) == 0x000154, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_ModifierKeysState_IsShiftDown_ReturnValue_1) == 0x000158, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_ModifierKeysState_IsShiftDown_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_SelectInt_ReturnValue_1) == 0x00015C, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumTiers_ReturnValue_1) == 0x000160, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumTiers_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints_3) == 0x000164, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints_4) == 0x000168, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00016C, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_SelectInt_ReturnValue_2) == 0x000170, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000174, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_IsCapped_Capped) == 0x000175, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_IsCapped_Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, K2Node_Select_Default) == 0x000176, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode, CallFunc_GetNumPointsAssigned_NumPoints_5) == 0x000178, "Member 'Widget_DifficultyNode_C_ExecuteUbergraph_Widget_DifficultyNode::CallFunc_GetNumPointsAssigned_NumPoints_5' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetCurrentTierDescription
// 0x0038 (0x0038 - 0x0000)
struct Widget_DifficultyNode_C_GetCurrentTierDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0010)(Parm, OutParm)
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ParseDescription_ReturnValue;             // 0x0028(0x0010)()
};
static_assert(alignof(Widget_DifficultyNode_C_GetCurrentTierDescription) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetCurrentTierDescription");
static_assert(sizeof(Widget_DifficultyNode_C_GetCurrentTierDescription) == 0x000038, "Wrong size on Widget_DifficultyNode_C_GetCurrentTierDescription");
static_assert(offsetof(Widget_DifficultyNode_C_GetCurrentTierDescription, Description) == 0x000000, "Member 'Widget_DifficultyNode_C_GetCurrentTierDescription::Description' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetCurrentTierDescription, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000010, "Member 'Widget_DifficultyNode_C_GetCurrentTierDescription::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetCurrentTierDescription, CallFunc_GetRGameState_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_GetCurrentTierDescription::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetCurrentTierDescription, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_GetCurrentTierDescription::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetCurrentTierDescription, CallFunc_ParseDescription_ReturnValue) == 0x000028, "Member 'Widget_DifficultyNode_C_GetCurrentTierDescription::CallFunc_ParseDescription_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetMutatorPrimaryAssetName
// 0x0008 (0x0008 - 0x0000)
struct Widget_DifficultyNode_C_GetMutatorPrimaryAssetName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetName) == 0x000004, "Wrong alignment on Widget_DifficultyNode_C_GetMutatorPrimaryAssetName");
static_assert(sizeof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetName) == 0x000008, "Wrong size on Widget_DifficultyNode_C_GetMutatorPrimaryAssetName");
static_assert(offsetof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetName, Name_0) == 0x000000, "Member 'Widget_DifficultyNode_C_GetMutatorPrimaryAssetName::Name_0' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetMutatorPrimaryAssetSkillTreeIdName
// 0x000C (0x000C - 0x0000)
struct Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName) == 0x000004, "Wrong alignment on Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName");
static_assert(sizeof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName) == 0x00000C, "Wrong size on Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName");
static_assert(offsetof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName, Name_0) == 0x000000, "Member 'Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName::Name_0' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_GetMutatorPrimaryAssetSkillTreeIdName::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetNextTierDescription
// 0x00B0 (0x00B0 - 0x0000)
struct Widget_DifficultyNode_C_GetNextTierDescription final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0010)(Parm, OutParm)
	class FText                                   Description;                                       // 0x0010(0x0010)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0010)()
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0010)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0010)()
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax; // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ParseDescription_ReturnValue;             // 0x0080(0x0010)()
	class FText                                   K2Node_Select_Default;                             // 0x0090(0x0010)()
	class FText                                   K2Node_Select_Default_1;                           // 0x00A0(0x0010)()
};
static_assert(alignof(Widget_DifficultyNode_C_GetNextTierDescription) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetNextTierDescription");
static_assert(sizeof(Widget_DifficultyNode_C_GetNextTierDescription) == 0x0000B0, "Wrong size on Widget_DifficultyNode_C_GetNextTierDescription");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Header) == 0x000000, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Header' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Description) == 0x000010, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Description' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Temp_bool_Variable) == 0x000020, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Temp_text_Variable) == 0x000028, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Temp_bool_Variable_1) == 0x000038, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Temp_text_Variable_1) == 0x000040, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, Temp_text_Variable_2) == 0x000050, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000060, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_GetRGameState_ReturnValue) == 0x000068, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000070, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax) == 0x000074, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, CallFunc_ParseDescription_ReturnValue) == 0x000080, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::CallFunc_ParseDescription_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, K2Node_Select_Default) == 0x000090, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNextTierDescription, K2Node_Select_Default_1) == 0x0000A0, "Member 'Widget_DifficultyNode_C_GetNextTierDescription::K2Node_Select_Default_1' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetNumPointsAssigned
// 0x0020 (0x0020 - 0x0000)
struct Widget_DifficultyNode_C_GetNumPointsAssigned final
{
public:
	int32                                         NumPoints;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetNumPointsAssigned) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetNumPointsAssigned");
static_assert(sizeof(Widget_DifficultyNode_C_GetNumPointsAssigned) == 0x000020, "Wrong size on Widget_DifficultyNode_C_GetNumPointsAssigned");
static_assert(offsetof(Widget_DifficultyNode_C_GetNumPointsAssigned, NumPoints) == 0x000000, "Member 'Widget_DifficultyNode_C_GetNumPointsAssigned::NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNumPointsAssigned, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000004, "Member 'Widget_DifficultyNode_C_GetNumPointsAssigned::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNumPointsAssigned, CallFunc_GetRGameState_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_GetNumPointsAssigned::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetNumPointsAssigned, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_GetNumPointsAssigned::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetTooltipSize
// 0x0038 (0x0038 - 0x0000)
struct Widget_DifficultyNode_C_GetTooltipSize final
{
public:
	class UWidget_BaseTooltip_C*                  ToolTipWidget_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Values;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_Y_ImplicitCast;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector2D_X_ImplicitCast;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetTooltipSize) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetTooltipSize");
static_assert(sizeof(Widget_DifficultyNode_C_GetTooltipSize) == 0x000038, "Wrong size on Widget_DifficultyNode_C_GetTooltipSize");
static_assert(offsetof(Widget_DifficultyNode_C_GetTooltipSize, ToolTipWidget_0) == 0x000000, "Member 'Widget_DifficultyNode_C_GetTooltipSize::ToolTipWidget_0' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTooltipSize, Values) == 0x000008, "Member 'Widget_DifficultyNode_C_GetTooltipSize::Values' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTooltipSize, CallFunc_MakeVector2D_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_GetTooltipSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTooltipSize, CallFunc_MakeVector2D_Y_ImplicitCast) == 0x000028, "Member 'Widget_DifficultyNode_C_GetTooltipSize::CallFunc_MakeVector2D_Y_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTooltipSize, CallFunc_MakeVector2D_X_ImplicitCast) == 0x000030, "Member 'Widget_DifficultyNode_C_GetTooltipSize::CallFunc_MakeVector2D_X_ImplicitCast' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetToolTipWidget
// 0x0020 (0x0020 - 0x0000)
struct Widget_DifficultyNode_C_GetToolTipWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidget_BaseTooltip_C*                  CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetToolTipWidget) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetToolTipWidget");
static_assert(sizeof(Widget_DifficultyNode_C_GetToolTipWidget) == 0x000020, "Wrong size on Widget_DifficultyNode_C_GetToolTipWidget");
static_assert(offsetof(Widget_DifficultyNode_C_GetToolTipWidget, ReturnValue) == 0x000000, "Member 'Widget_DifficultyNode_C_GetToolTipWidget::ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetToolTipWidget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_GetToolTipWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetToolTipWidget, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_GetToolTipWidget::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetToolTipWidget, CallFunc_Create_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_GetToolTipWidget::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.GetTotalAssignedPoints
// 0x0040 (0x0040 - 0x0000)
struct Widget_DifficultyNode_C_GetTotalAssignedPoints final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URSaveGame*                             CallFunc_GetCurrentSaveGame_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x0020(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_GetTotalAssignedPoints) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_GetTotalAssignedPoints");
static_assert(sizeof(Widget_DifficultyNode_C_GetTotalAssignedPoints) == 0x000040, "Wrong size on Widget_DifficultyNode_C_GetTotalAssignedPoints");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, Value) == 0x000000, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, Count) == 0x000004, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::Count' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_GetCurrentSaveGame_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_GetCurrentSaveGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Map_Values_Values) == 0x000020, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Array_Get_Item) == 0x000034, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_GetTotalAssignedPoints, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'Widget_DifficultyNode_C_GetTotalAssignedPoints::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.InitProgressVisualRandom
// 0x0040 (0x0040 - 0x0000)
struct Widget_DifficultyNode_C_InitProgressVisualRandom final
{
public:
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_InitProgressVisualRandom) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_InitProgressVisualRandom");
static_assert(sizeof(Widget_DifficultyNode_C_InitProgressVisualRandom) == 0x000040, "Wrong size on Widget_DifficultyNode_C_InitProgressVisualRandom");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_RandomFloatInRange_ReturnValue) == 0x000000, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000008, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000020, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000028, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000030, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000034, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_InitProgressVisualRandom, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x000038, "Member 'Widget_DifficultyNode_C_InitProgressVisualRandom::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Is Assigned Points Between Min Max
// 0x0028 (0x0028 - 0x0000)
struct Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max final
{
public:
	bool                                          BetweenMinMax;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max");
static_assert(sizeof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max) == 0x000028, "Wrong size on Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, BetweenMinMax) == 0x000000, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::BetweenMinMax' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000004, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_GetRGameState_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_GetNumTiers_ReturnValue) == 0x00001C, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_Less_IntInt_ReturnValue) == 0x000021, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'Widget_DifficultyNode_C_Is_Assigned_Points_Between_Min_Max::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.IsCapped
// 0x0010 (0x0010 - 0x0000)
struct Widget_DifficultyNode_C_IsCapped final
{
public:
	bool                                          Capped;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_IsCapped) == 0x000004, "Wrong alignment on Widget_DifficultyNode_C_IsCapped");
static_assert(sizeof(Widget_DifficultyNode_C_IsCapped) == 0x000010, "Wrong size on Widget_DifficultyNode_C_IsCapped");
static_assert(offsetof(Widget_DifficultyNode_C_IsCapped, Capped) == 0x000000, "Member 'Widget_DifficultyNode_C_IsCapped::Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsCapped, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'Widget_DifficultyNode_C_IsCapped::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsCapped, CallFunc_GetNumTiers_ReturnValue) == 0x000004, "Member 'Widget_DifficultyNode_C_IsCapped::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsCapped, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000008, "Member 'Widget_DifficultyNode_C_IsCapped::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsCapped, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'Widget_DifficultyNode_C_IsCapped::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.IsNodeLocked
// 0x0003 (0x0003 - 0x0000)
struct Widget_DifficultyNode_C_IsNodeLocked final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Node_Locked_IsLocked;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_IsNodeLocked) == 0x000001, "Wrong alignment on Widget_DifficultyNode_C_IsNodeLocked");
static_assert(sizeof(Widget_DifficultyNode_C_IsNodeLocked) == 0x000003, "Wrong size on Widget_DifficultyNode_C_IsNodeLocked");
static_assert(offsetof(Widget_DifficultyNode_C_IsNodeLocked, IsLocked) == 0x000000, "Member 'Widget_DifficultyNode_C_IsNodeLocked::IsLocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsNodeLocked, CallFunc_Is_Node_Locked_IsLocked) == 0x000001, "Member 'Widget_DifficultyNode_C_IsNodeLocked::CallFunc_Is_Node_Locked_IsLocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_IsNodeLocked, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'Widget_DifficultyNode_C_IsNodeLocked::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.On_Icon_MouseButtonDown
// 0x0240 (0x0240 - 0x0000)
struct Widget_DifficultyNode_C_On_Icon_MouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue; // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_1;         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned; // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyEndGameNodePointsAssigned_HasPointsAssigned; // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasInfiniteNodePointsAssigned_HasPointsAssigned; // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNodeEndGameNode_Value;                  // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNodePredetermined_Value;                // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17F[0x1];                                      // 0x017F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints_2;         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x0188(0x00B8)()
};
static_assert(alignof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_On_Icon_MouseButtonDown");
static_assert(sizeof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown) == 0x000240, "Wrong size on Widget_DifficultyNode_C_On_Icon_MouseButtonDown");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, MyGeometry) == 0x000000, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, MouseEvent) == 0x000038, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, ReturnValue) == 0x0000B0, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000168, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue) == 0x00016C, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_PointerEvent_IsMouseButtonDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_GetNumPointsAssigned_NumPoints_1) == 0x000170, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_GetNumPointsAssigned_NumPoints_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000174, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned) == 0x000175, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_DoesNextNodeHavePointsAssigned_HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_Not_PreBool_ReturnValue) == 0x000176, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_HasAnyEndGameNodePointsAssigned_HasPointsAssigned) == 0x000177, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_HasAnyEndGameNodePointsAssigned_HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_IsValid_ReturnValue) == 0x000178, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_Not_PreBool_ReturnValue_1) == 0x000179, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_BooleanAND_ReturnValue) == 0x00017A, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_HasInfiniteNodePointsAssigned_HasPointsAssigned) == 0x00017B, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_HasInfiniteNodePointsAssigned_HasPointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_Not_PreBool_ReturnValue_2) == 0x00017C, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_IsNodeEndGameNode_Value) == 0x00017D, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_IsNodeEndGameNode_Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_IsNodePredetermined_Value) == 0x00017E, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_IsNodePredetermined_Value' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_GetNumPointsAssigned_NumPoints_2) == 0x000180, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_GetNumPointsAssigned_NumPoints_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000184, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, CallFunc_IsValid_ReturnValue_1) == 0x000185, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_On_Icon_MouseButtonDown, K2Node_MakeStruct_EventReply) == 0x000188, "Member 'Widget_DifficultyNode_C_On_Icon_MouseButtonDown::K2Node_MakeStruct_EventReply' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct Widget_DifficultyNode_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(Widget_DifficultyNode_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on Widget_DifficultyNode_C_OnAddedToFocusPath");
static_assert(sizeof(Widget_DifficultyNode_C_OnAddedToFocusPath) == 0x000008, "Wrong size on Widget_DifficultyNode_C_OnAddedToFocusPath");
static_assert(offsetof(Widget_DifficultyNode_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'Widget_DifficultyNode_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct Widget_DifficultyNode_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(Widget_DifficultyNode_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on Widget_DifficultyNode_C_OnRemovedFromFocusPath");
static_assert(sizeof(Widget_DifficultyNode_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on Widget_DifficultyNode_C_OnRemovedFromFocusPath");
static_assert(offsetof(Widget_DifficultyNode_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'Widget_DifficultyNode_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct Widget_DifficultyNode_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_PreConstruct) == 0x000001, "Wrong alignment on Widget_DifficultyNode_C_PreConstruct");
static_assert(sizeof(Widget_DifficultyNode_C_PreConstruct) == 0x000001, "Wrong size on Widget_DifficultyNode_C_PreConstruct");
static_assert(offsetof(Widget_DifficultyNode_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'Widget_DifficultyNode_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.ResetNode
// 0x0010 (0x0010 - 0x0000)
struct Widget_DifficultyNode_C_ResetNode final
{
public:
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_ResetNode) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_ResetNode");
static_assert(sizeof(Widget_DifficultyNode_C_ResetNode) == 0x000010, "Wrong size on Widget_DifficultyNode_C_ResetNode");
static_assert(offsetof(Widget_DifficultyNode_C_ResetNode, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000000, "Member 'Widget_DifficultyNode_C_ResetNode::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_ResetNode, CallFunc_GetRGameState_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_ResetNode::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.SetNumPointsAssigned
// 0x0030 (0x0030 - 0x0000)
struct Widget_DifficultyNode_C_SetNumPointsAssigned final
{
public:
	int32                                         NewPoints;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_SetNumPointsAssigned) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_SetNumPointsAssigned");
static_assert(sizeof(Widget_DifficultyNode_C_SetNumPointsAssigned) == 0x000030, "Wrong size on Widget_DifficultyNode_C_SetNumPointsAssigned");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, NewPoints) == 0x000000, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::NewPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000004, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_GetRGameState_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_GetNumTiers_ReturnValue) == 0x000024, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_Clamp_ReturnValue) == 0x000028, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_SetNumPointsAssigned, CallFunc_SelectInt_ReturnValue) == 0x00002C, "Member 'Widget_DifficultyNode_C_SetNumPointsAssigned::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Update Node State
// 0x0020 (0x0020 - 0x0000)
struct Widget_DifficultyNode_C_Update_Node_State final
{
public:
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNodeLocked_IsLocked;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_Update_Node_State) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_Update_Node_State");
static_assert(sizeof(Widget_DifficultyNode_C_Update_Node_State) == 0x000020, "Wrong size on Widget_DifficultyNode_C_Update_Node_State");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000000, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_GetNumTiers_ReturnValue) == 0x000004, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_Less_IntInt_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_IsNodeLocked_IsLocked) == 0x000018, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_IsNodeLocked_IsLocked' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_HasAuthority_ReturnValue) == 0x000019, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Node_State, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001B, "Member 'Widget_DifficultyNode_C_Update_Node_State::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.Update Points Assigned Text
// 0x0108 (0x0108 - 0x0000)
struct Widget_DifficultyNode_C_Update_Points_Assigned_Text final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPointsAssigned_NumPoints;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0048)(HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0090(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0010)()
};
static_assert(alignof(Widget_DifficultyNode_C_Update_Points_Assigned_Text) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_Update_Points_Assigned_Text");
static_assert(sizeof(Widget_DifficultyNode_C_Update_Points_Assigned_Text) == 0x000108, "Wrong size on Widget_DifficultyNode_C_Update_Points_Assigned_Text");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, Temp_bool_Variable) == 0x000000, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, Temp_string_Variable) == 0x000008, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_GetNumPointsAssigned_NumPoints) == 0x000018, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_GetNumPointsAssigned_NumPoints' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_GetNumTiers_ReturnValue) == 0x00001C, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, K2Node_Select_Default) == 0x000080, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_Conv_StringToText_ReturnValue) == 0x000090, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A0, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, K2Node_MakeArray_Array) == 0x0000E8, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_Update_Points_Assigned_Text, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'Widget_DifficultyNode_C_Update_Points_Assigned_Text::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateGamepadFocus
// 0x00A0 (0x00A0 - 0x0000)
struct Widget_DifficultyNode_C_UpdateGamepadFocus final
{
public:
	class UCommonInputSubsystem*                  CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputType                              CallFunc_GetCurrentInputType_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetTooltipSize_Values;                    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0030(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_LocalToAbsolute_ReturnValue;              // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetToolTipWidget_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            K2Node_DynamicCast_AsUser_Widget;                  // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddToPlayerScreen_ReturnValue;            // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_UpdateGamepadFocus) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_UpdateGamepadFocus");
static_assert(sizeof(Widget_DifficultyNode_C_UpdateGamepadFocus) == 0x0000A0, "Wrong size on Widget_DifficultyNode_C_UpdateGamepadFocus");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000000, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_GetCurrentInputType_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_GetCurrentInputType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_GetTooltipSize_Values) == 0x000010, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_GetTooltipSize_Values' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_GetCachedGeometry_ReturnValue) == 0x000030, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_LocalToAbsolute_ReturnValue) == 0x000068, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_LocalToAbsolute_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_GetToolTipWidget_ReturnValue) == 0x000078, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_GetToolTipWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000080, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, K2Node_DynamicCast_AsUser_Widget) == 0x000090, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::K2Node_DynamicCast_AsUser_Widget' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateGamepadFocus, CallFunc_AddToPlayerScreen_ReturnValue) == 0x000099, "Member 'Widget_DifficultyNode_C_UpdateGamepadFocus::CallFunc_AddToPlayerScreen_ReturnValue' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateProgressVisuals
// 0x00B8 (0x00B8 - 0x0000)
struct Widget_DifficultyNode_C_UpdateProgressVisuals final
{
public:
	int32                                         PointsAssigned;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0024(0x0014)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0040(0x0014)()
	bool                                          CallFunc_IsCapped_Capped;                          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumTiers_ReturnValue;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0070(0x0014)()
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Widget_DifficultyNode_C_UpdateProgressVisuals) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_UpdateProgressVisuals");
static_assert(sizeof(Widget_DifficultyNode_C_UpdateProgressVisuals) == 0x0000B8, "Wrong size on Widget_DifficultyNode_C_UpdateProgressVisuals");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, PointsAssigned) == 0x000000, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::PointsAssigned' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, SkipAnimation) == 0x000004, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::SkipAnimation' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, Temp_bool_Variable) == 0x000005, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_Greater_IntInt_ReturnValue) == 0x000006, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000010, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_FClamp_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, Temp_bool_Variable_1) == 0x000020, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, Temp_byte_Variable) == 0x000021, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, Temp_byte_Variable_1) == 0x000022, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, Temp_bool_Variable_2) == 0x000023, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, K2Node_MakeStruct_SlateColor) == 0x000024, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_PlayAnimationForward_ReturnValue) == 0x000038, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, K2Node_MakeStruct_SlateColor_1) == 0x000040, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_IsCapped_Capped) == 0x000054, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_IsCapped_Capped' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_GetNumTiers_ReturnValue) == 0x000058, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_GetNumTiers_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, K2Node_Select_Default) == 0x00005C, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000060, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_SafeDivide_ReturnValue) == 0x000068, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, K2Node_Select_Default_1) == 0x000070, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_FClamp_ReturnValue_1) == 0x000088, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_SelectFloat_ReturnValue) == 0x000090, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, K2Node_Select_Default_2) == 0x000098, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A0, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_GetDynamicMaterial_ReturnValue) == 0x0000A8, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0000B0, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateProgressVisuals, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0000B4, "Member 'Widget_DifficultyNode_C_UpdateProgressVisuals::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function Widget_DifficultyNode.Widget_DifficultyNode_C.UpdateTooltipInfo
// 0x0260 (0x0260 - 0x0000)
struct Widget_DifficultyNode_C_UpdateTooltipInfo final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name; // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARGameState*                            CallFunc_GetRGameState_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ParseExtraDescription_ReturnValue;        // 0x0020(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetCurrentTierDescription_Description;    // 0x0080(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetNextTierDescription_Header;            // 0x00D8(0x0010)()
	class FText                                   CallFunc_GetNextTierDescription_Description;       // 0x00E8(0x0010)()
	bool                                          CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax; // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0100(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0148(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0190(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01A8(0x0010)()
	class FText                                   K2Node_Select_Default;                             // 0x01B8(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x01D8(0x0048)(HasGetValueTypeHash)
	class FString                                 CallFunc_GetKeywordsInfoText_ReturnValue;          // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0230(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0240(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0250(0x0010)()
};
static_assert(alignof(Widget_DifficultyNode_C_UpdateTooltipInfo) == 0x000008, "Wrong alignment on Widget_DifficultyNode_C_UpdateTooltipInfo");
static_assert(sizeof(Widget_DifficultyNode_C_UpdateTooltipInfo) == 0x000260, "Wrong size on Widget_DifficultyNode_C_UpdateTooltipInfo");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, Temp_bool_Variable) == 0x000000, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name) == 0x000004, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetMutatorPrimaryAssetSkillTreeIdName_Name' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetRGameState_ReturnValue) == 0x000010, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetRGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue) == 0x000018, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetDifficultyTreeAssignedPoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_ParseExtraDescription_ReturnValue) == 0x000020, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_ParseExtraDescription_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_TextIsEmpty_ReturnValue) == 0x000078, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetCurrentTierDescription_Description) == 0x000080, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetCurrentTierDescription_Description' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetNextTierDescription_Header) == 0x0000D8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetNextTierDescription_Header' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetNextTierDescription_Description) == 0x0000E8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetNextTierDescription_Description' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax) == 0x0000F8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_Is_Assigned_Points_Between_Min_Max_BetweenMinMax' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeStruct_FormatArgumentData_2) == 0x000100, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeStruct_FormatArgumentData_3) == 0x000148, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeArray_Array) == 0x000190, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_IsValid_ReturnValue) == 0x0001A0, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_Format_ReturnValue) == 0x0001A8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_Select_Default) == 0x0001B8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0001C8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeStruct_FormatArgumentData_4) == 0x0001D8, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_GetKeywordsInfoText_ReturnValue) == 0x000220, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_GetKeywordsInfoText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, K2Node_MakeArray_Array_1) == 0x000230, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000240, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Widget_DifficultyNode_C_UpdateTooltipInfo, CallFunc_Format_ReturnValue_1) == 0x000250, "Member 'Widget_DifficultyNode_C_UpdateTooltipInfo::CallFunc_Format_ReturnValue_1' has a wrong offset!");

}

