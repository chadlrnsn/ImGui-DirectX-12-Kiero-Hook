#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RTelemetryManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RTelemetryManager.BP_RTelemetryManager_C
// 0x0010 (0x0478 - 0x0468)
class ABP_RTelemetryManager_C final : public ARTelemetryManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0468(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void SetupRunEndEvent();
	void SetupRoomEvents();
	void SetupReviveUseEvent();
	void SetupPurchaseItemEvent();
	void SetupPickupGodMutatorEvents();
	void SetupMeleeUsageEvent();
	void SetupLogBookEvents();
	void SetupInteractEvent();
	void SetupHealUseEvent();
	void SetupFightEndEvent();
	void SetupExitWorkbenchEvent();
	void SetupDeathEvent();
	void SetupDamageTakenEvent();
	void SetupDamageDealtEvent();
	void SetupChallengeCompletedEvent();
	void ReceiveBeginPlay();
	void OnSegmentStarted_Event(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnSegmentCompleted_Event_Multicast(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnSegmentCompleted_Event(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment);
	void OnPreLevelChanged_Event();
	void OnPlayerPurchaseItem_Event_0(const class FString& PurchasedItemName, int32 PurchasedItemCost, const TArray<class AActor*>& NotPurchasedItems);
	void OnPlayerPawnRevived_Event(class ARPlayerPawn* Player);
	void OnPlayerPawnKilled_Event(class ARPlayerPawn* Player);
	void OnPlayerInteract_Event(class AActor* ActorInteractedWith);
	void OnPlayerEnterSpawnAreaSegment_Event_Multicast(class AREnemySpawnAreaSegment* Segment, class ARPlayerPawn* EnteringPlayerPawn);
	void OnPlayerEnterSpawnAreaSegment_Event(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment, class ARPlayerPawn* EnteringPlayerPawn);
	void OnPlayerChoseGodCategoryMutator_Event(const class FString& ChosenGodCategoryName, const TArray<class FString>& DiscardedGodCategoryNames, const class FString& ChosenGodMutatorName, const TArray<class FString>& DiscardedGodMutatorNames);
	void OnOpenLogBook_Event();
	void OnLevelChanged_Event();
	void OnHealUsed_Event();
	void OnHealthDepleted_Event(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEventData);
	void OnExitWorkbench_Event();
	void OnDealtDamage_Event(class ARPawnBase* Pawn, const struct FDamageCombatEvent& DamageEventData);
	void OnDamageTaken_Event(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent);
	void OnCloseLogBook_Event();
	void OnChallengeCompletedEvent_Event(const struct FRChallenge& Challenge);
	void ExecuteUbergraph_BP_RTelemetryManager(int32 EntryPoint);
	void BPWriteRunEnd(bool CurrentRunSuccess);
	void BPSetLobbyStartTime();
	void BPIsEndBoss(class AREnemySpawnAreaSegment* Segment, bool* Value);
	void BPGetMeleeUsages(int32* Usages);
	void BPGetMeleeCharacterMutator(class UBP_Melee_CharacterMutator_C** MeleeCharacterMutatorScript);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RTelemetryManager_C">();
	}
	static class ABP_RTelemetryManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RTelemetryManager_C>();
	}
};
static_assert(alignof(ABP_RTelemetryManager_C) == 0x000008, "Wrong alignment on ABP_RTelemetryManager_C");
static_assert(sizeof(ABP_RTelemetryManager_C) == 0x000478, "Wrong size on ABP_RTelemetryManager_C");
static_assert(offsetof(ABP_RTelemetryManager_C, UberGraphFrame) == 0x000468, "Member 'ABP_RTelemetryManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RTelemetryManager_C, DefaultSceneRoot) == 0x000470, "Member 'ABP_RTelemetryManager_C::DefaultSceneRoot' has a wrong offset!");

}

