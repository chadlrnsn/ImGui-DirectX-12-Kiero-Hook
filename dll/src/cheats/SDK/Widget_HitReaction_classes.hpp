#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_HitReaction

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_HitReaction.Widget_HitReaction_C
// 0x0058 (0x0328 - 0x02D0)
class UWidget_HitReaction_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       GenericDamageTakenAnimation;                       // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LowHealthLoopAnimation;                            // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DamageTakenAnimation;                              // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DamageHitDirection;                                // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GenericDamageIndicator;                            // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_219;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_0;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LowHealthRadial;                                   // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Radial;                                            // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_DamageIndicator_Container_C*    Widget_DamageIndicator_Container;                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void CheckLowHealth(double MissingHealthPercentage, bool bGainedHealth);
	void Construct();
	void ExecuteUbergraph_Widget_HitReaction(int32 EntryPoint);
	void GetShotFromDirection(class AActor* Instigator, struct FVector* Direction);
	double LocationToScreenAngle(const struct FVector& A);
	void OnDamageTaken(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent);
	void OnDamageTakenTemp(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent);
	void OnHealthDepleted(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEventData);
	void OnHealthRegained(class URHealthComponent* Component, float currentHealth, float healthDelta, const struct FHealCombatEvent& HealEvent);
	void OnInitialized();
	void OnMaximumHealthChanged(class URHealthComponent* Component, float MaximumHealth);
	void OnPlayerPawnRespawned(class ARPlayerPawn* Player);
	void ResetLowHealthRadial();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_HitReaction_C">();
	}
	static class UWidget_HitReaction_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HitReaction_C>();
	}
};
static_assert(alignof(UWidget_HitReaction_C) == 0x000008, "Wrong alignment on UWidget_HitReaction_C");
static_assert(sizeof(UWidget_HitReaction_C) == 0x000328, "Wrong size on UWidget_HitReaction_C");
static_assert(offsetof(UWidget_HitReaction_C, UberGraphFrame) == 0x0002D0, "Member 'UWidget_HitReaction_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, GenericDamageTakenAnimation) == 0x0002D8, "Member 'UWidget_HitReaction_C::GenericDamageTakenAnimation' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, LowHealthLoopAnimation) == 0x0002E0, "Member 'UWidget_HitReaction_C::LowHealthLoopAnimation' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, DamageTakenAnimation) == 0x0002E8, "Member 'UWidget_HitReaction_C::DamageTakenAnimation' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, DamageHitDirection) == 0x0002F0, "Member 'UWidget_HitReaction_C::DamageHitDirection' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, GenericDamageIndicator) == 0x0002F8, "Member 'UWidget_HitReaction_C::GenericDamageIndicator' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, Image_219) == 0x000300, "Member 'UWidget_HitReaction_C::Image_219' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, InvalidationBox_0) == 0x000308, "Member 'UWidget_HitReaction_C::InvalidationBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, LowHealthRadial) == 0x000310, "Member 'UWidget_HitReaction_C::LowHealthRadial' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, Radial) == 0x000318, "Member 'UWidget_HitReaction_C::Radial' has a wrong offset!");
static_assert(offsetof(UWidget_HitReaction_C, Widget_DamageIndicator_Container) == 0x000320, "Member 'UWidget_HitReaction_C::Widget_DamageIndicator_Container' has a wrong offset!");

}

