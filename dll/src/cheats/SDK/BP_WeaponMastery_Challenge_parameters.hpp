#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponMastery_Challenge

#include "Basic.hpp"

#include "RGame_structs.hpp"


namespace SDK::Params
{

// Function BP_WeaponMastery_Challenge.BP_WeaponMastery_Challenge_C.CheckCompletedChallenges
// 0x0038 (0x0038 - 0x0000)
struct BP_WeaponMastery_Challenge_C_CheckCompletedChallenges final
{
public:
	int32                                         CompletedChallenges;                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CompletedChallengesNum;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARChallengeManager*                     CallFunc_GetChallengeManager_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChallengeCompleted_ReturnValue;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges) == 0x000008, "Wrong alignment on BP_WeaponMastery_Challenge_C_CheckCompletedChallenges");
static_assert(sizeof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges) == 0x000038, "Wrong size on BP_WeaponMastery_Challenge_C_CheckCompletedChallenges");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CompletedChallenges) == 0x000000, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CompletedChallenges' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CompletedChallengesNum) == 0x000004, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CompletedChallengesNum' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, Temp_int_Variable) == 0x000014, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_GetChallengeManager_ReturnValue) == 0x000020, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_IsChallengeCompleted_ReturnValue) == 0x000034, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_IsChallengeCompleted_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_CheckCompletedChallenges, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'BP_WeaponMastery_Challenge_C_CheckCompletedChallenges::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WeaponMastery_Challenge.BP_WeaponMastery_Challenge_C.ExecuteUbergraph_BP_WeaponMastery_Challenge
// 0x01B0 (0x01B0 - 0x0000)
struct BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FRChallenge& Challenge)> K2Node_CreateDelegate_OutputDelegate;       // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARChallengeManager*                     CallFunc_GetChallengeManager_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRChallenge                            K2Node_CustomEvent_Challenge;                      // 0x0020(0x0178)()
	int32                                         CallFunc_CheckCompletedChallenges_CompletedChallenges; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARChallengeManager*                     CallFunc_GetChallengeManager_ReturnValue_1;        // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChallengeCompleted_ReturnValue;         // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge) == 0x000008, "Wrong alignment on BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge");
static_assert(sizeof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge) == 0x0001B0, "Wrong size on BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, EntryPoint) == 0x000000, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, CallFunc_GetChallengeManager_ReturnValue) == 0x000018, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::CallFunc_GetChallengeManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, K2Node_CustomEvent_Challenge) == 0x000020, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::K2Node_CustomEvent_Challenge' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, CallFunc_CheckCompletedChallenges_CompletedChallenges) == 0x000198, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::CallFunc_CheckCompletedChallenges_CompletedChallenges' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, CallFunc_GetChallengeManager_ReturnValue_1) == 0x0001A0, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::CallFunc_GetChallengeManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge, CallFunc_IsChallengeCompleted_ReturnValue) == 0x0001A8, "Member 'BP_WeaponMastery_Challenge_C_ExecuteUbergraph_BP_WeaponMastery_Challenge::CallFunc_IsChallengeCompleted_ReturnValue' has a wrong offset!");

// Function BP_WeaponMastery_Challenge.BP_WeaponMastery_Challenge_C.OnChallengeCompleted
// 0x0178 (0x0178 - 0x0000)
struct BP_WeaponMastery_Challenge_C_OnChallengeCompleted final
{
public:
	struct FRChallenge                            Challenge;                                         // 0x0000(0x0178)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_WeaponMastery_Challenge_C_OnChallengeCompleted) == 0x000008, "Wrong alignment on BP_WeaponMastery_Challenge_C_OnChallengeCompleted");
static_assert(sizeof(BP_WeaponMastery_Challenge_C_OnChallengeCompleted) == 0x000178, "Wrong size on BP_WeaponMastery_Challenge_C_OnChallengeCompleted");
static_assert(offsetof(BP_WeaponMastery_Challenge_C_OnChallengeCompleted, Challenge) == 0x000000, "Member 'BP_WeaponMastery_Challenge_C_OnChallengeCompleted::Challenge' has a wrong offset!");

}

