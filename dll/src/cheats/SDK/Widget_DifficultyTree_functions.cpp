#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_DifficultyTree

#include "Basic.hpp"

#include "Widget_DifficultyTree_classes.hpp"
#include "Widget_DifficultyTree_parameters.hpp"


namespace SDK
{

// Function Widget_DifficultyTree.Widget_DifficultyTree_C.AreAllPredeterminedNodesUnlocked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   AllUnlocked                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::AreAllPredeterminedNodesUnlocked(bool* AllUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "AreAllPredeterminedNodesUnlocked");

	Params::Widget_DifficultyTree_C_AreAllPredeterminedNodesUnlocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllUnlocked != nullptr)
		*AllUnlocked = Parms.AllUnlocked;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BndEvt__Widget_DifficultyTree_Button_840_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void UWidget_DifficultyTree_C::BndEvt__Widget_DifficultyTree_Button_840_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "BndEvt__Widget_DifficultyTree_Button_840_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UCommonButtonBase*                Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature");

	Params::Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_1_K2Node_ComponentBoundEvent_3_CommonButtonBaseClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UCommonButtonBase*                Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature(class UCommonButtonBase* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature");

	Params::Widget_DifficultyTree_C_BndEvt__Widget_DifficultyTree_Widget_TextButton_K2Node_ComponentBoundEvent_2_CommonButtonBaseClicked__DelegateSignature Parms{};

	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWidget_DifficultyTree_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ConstructEndGameNodes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::ConstructEndGameNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "ConstructEndGameNodes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ConstructPredeterminedNodes
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::ConstructPredeterminedNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "ConstructPredeterminedNodes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.DoesNextNodeHavePointsAssigned
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget_DifficultyNode_C*         Node                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasPointsAssigned                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::DoesNextNodeHavePointsAssigned(class UWidget_DifficultyNode_C* Node, bool* HasPointsAssigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "DoesNextNodeHavePointsAssigned");

	Params::Widget_DifficultyTree_C_DoesNextNodeHavePointsAssigned Parms{};

	Parms.Node = Node;

	UObject::ProcessEvent(Func, &Parms);

	if (HasPointsAssigned != nullptr)
		*HasPointsAssigned = Parms.HasPointsAssigned;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ExecuteUbergraph_Widget_DifficultyTree
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::ExecuteUbergraph_Widget_DifficultyTree(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "ExecuteUbergraph_Widget_DifficultyTree");

	Params::Widget_DifficultyTree_C_ExecuteUbergraph_Widget_DifficultyTree Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.GetAllNodes
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UWidget_DifficultyNode_C*>*AllNodes                                               (Parm, OutParm, ContainsInstancedReference)

void UWidget_DifficultyTree_C::GetAllNodes(TArray<class UWidget_DifficultyNode_C*>* AllNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "GetAllNodes");

	Params::Widget_DifficultyTree_C_GetAllNodes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllNodes != nullptr)
		*AllNodes = std::move(Parms.AllNodes);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.GetNumTotalPointsAssigned
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  TotalPointsAssigned                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::GetNumTotalPointsAssigned(int32* TotalPointsAssigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "GetNumTotalPointsAssigned");

	Params::Widget_DifficultyTree_C_GetNumTotalPointsAssigned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TotalPointsAssigned != nullptr)
		*TotalPointsAssigned = Parms.TotalPointsAssigned;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.HasAnyEndGameNodePointsAssigned
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasPointsAssigned                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::HasAnyEndGameNodePointsAssigned(bool* HasPointsAssigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "HasAnyEndGameNodePointsAssigned");

	Params::Widget_DifficultyTree_C_HasAnyEndGameNodePointsAssigned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasPointsAssigned != nullptr)
		*HasPointsAssigned = Parms.HasPointsAssigned;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.HasInfiniteNodePointsAssigned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasPointsAssigned                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::HasInfiniteNodePointsAssigned(bool* HasPointsAssigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "HasInfiniteNodePointsAssigned");

	Params::Widget_DifficultyTree_C_HasInfiniteNodePointsAssigned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasPointsAssigned != nullptr)
		*HasPointsAssigned = Parms.HasPointsAssigned;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.Is Node Locked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget_DifficultyNode_C*         NodeWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsLocked                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::Is_Node_Locked(class UWidget_DifficultyNode_C* NodeWidget, bool* IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "Is Node Locked");

	Params::Widget_DifficultyTree_C_Is_Node_Locked Parms{};

	Parms.NodeWidget = NodeWidget;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLocked != nullptr)
		*IsLocked = Parms.IsLocked;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodeEndGameNode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          WidgetNode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::IsNodeEndGameNode(class UWidget* WidgetNode, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "IsNodeEndGameNode");

	Params::Widget_DifficultyTree_C_IsNodeEndGameNode Parms{};

	Parms.WidgetNode = WidgetNode;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodeInPanel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          WidgetNode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     PanelWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::IsNodeInPanel(class UWidget* WidgetNode, class UPanelWidget* PanelWidget, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "IsNodeInPanel");

	Params::Widget_DifficultyTree_C_IsNodeInPanel Parms{};

	Parms.WidgetNode = WidgetNode;
	Parms.PanelWidget = PanelWidget;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsNodePredetermined
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          WidgetNode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::IsNodePredetermined(class UWidget* WidgetNode, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "IsNodePredetermined");

	Params::Widget_DifficultyTree_C_IsNodePredetermined Parms{};

	Parms.WidgetNode = WidgetNode;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.IsTreeCapped
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Capped                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWidget_DifficultyTree_C::IsTreeCapped(bool* Capped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "IsTreeCapped");

	Params::Widget_DifficultyTree_C_IsTreeCapped Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Capped != nullptr)
		*Capped = Parms.Capped;
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.ResetNodes
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::ResetNodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "ResetNodes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.Update Enemy and Boss Bonuses
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::Update_Enemy_and_Boss_Bonuses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "Update Enemy and Boss Bonuses");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateDifficultyPointsText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::UpdateDifficultyPointsText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "UpdateDifficultyPointsText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateInfiniteNodeStatus
// (Public, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::UpdateInfiniteNodeStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "UpdateInfiniteNodeStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.UpdateNodeStates
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWidget_DifficultyTree_C::UpdateNodeStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "UpdateNodeStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Widget_DifficultyTree.Widget_DifficultyTree_C.BP_GetDesiredFocusTarget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UWidget_DifficultyTree_C::BP_GetDesiredFocusTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Widget_DifficultyTree_C", "BP_GetDesiredFocusTarget");

	Params::Widget_DifficultyTree_C_BP_GetDesiredFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

