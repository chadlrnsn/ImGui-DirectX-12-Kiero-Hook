#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_GameplaySettings

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_structs.hpp"
#include "Widget_SettingTabBase_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_GameplaySettings.Widget_GameplaySettings_C
// 0x0140 (0x0418 - 0x02D8)
class UWidget_GameplaySettings_C final : public UWidget_SettingTabBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Widget_GameplaySettings_C;          // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidget_SettingsSlider_C*               ControllerAimAssistStrength;                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               ControllerScopedXSensitivity;                      // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               ControllerScopedYSensitivity;                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               ControllerXSensitivity;                            // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               ControllerYSensitivity;                            // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             Crosshair;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsOptions_C*              CrosshairAlignment;                                // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsOptions_C*              DamageNumbers;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             DashIndicator;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               FOV;                                               // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             HealthBars;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsComboBox_C*             ICON_SCHEME;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             InvertedXAxis;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             InvertedYAxis;                                     // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsComboBox_C*             Language;                                          // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             LANGUAGE_FILTERING;                                // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               MouseSensitivity;                                  // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             PlayerHUD;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             PlayerNames;                                       // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsSlider_C*               ScopedSensitivity;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             ScopeMode;                                         // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             ScreenShake;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_0;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidget_SettingsCheckbox_C*             TELEMETRY_CONSENT;                                 // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class FString>                         CultureArray;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RecursionFlag;                                     // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, EGamepadIconScheme>       IconSchemeMap;                                     // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           LangaugeArray;                                     // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetWidgetCurrentValues();
	void SetIconSchemeOptions();
	void ResetSettings();
	void PreviousWidgetSettingsValue(class UUserWidget* Widget);
	void OnInitialized();
	void NextWidgetSettingsValue(class UUserWidget* Widget);
	class UWidget* GetDesiredFocusWidget();
	void GetDamageNumbersOptionByIndex(int32 Index_0, EDamageNumbersOption* Option);
	void GetDamageNumbersIndexByOption(EDamageNumbersOption Option, int32* Index_0);
	void GetCrosshairAlignmentOptionByIndex(int32 Index_0, ECrosshairAlignmentOption* Option);
	void GetCrosshairAlignmentIndexByOption(ECrosshairAlignmentOption Option, int32* Index_0);
	void GetAvailableLanguages();
	void ExecuteUbergraph_Widget_GameplaySettings(int32 EntryPoint);
	void Construct();
	void BP_OnWidgetDeactivated_Event();
	void BP_GetScrollBoxWidget(class UScrollBox** Result);
	void BndEvt__Widget_GameplaySettings_Widget_SettingsSlider_2_K2Node_ComponentBoundEvent_0_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_Widget_SettingsComboBox_K2Node_ComponentBoundEvent_8_OnOptionChanged__DelegateSignature(const class FText& NewOption, int32 Index_0);
	void BndEvt__Widget_GameplaySettings_Widget_SettingsCheckbox_1_K2Node_ComponentBoundEvent_3_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_TELEMETRY_CONSENT_K2Node_ComponentBoundEvent_20_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_ScreenShake_K2Node_ComponentBoundEvent_10_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_ScopedSensitivity_K2Node_ComponentBoundEvent_11_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_PlayerNames_K2Node_ComponentBoundEvent_9_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_PlayerHUD_K2Node_ComponentBoundEvent_7_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_LANGUAGE_FILTERING_K2Node_ComponentBoundEvent_18_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_InvertedYAxis_K2Node_ComponentBoundEvent_5_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_InvertedXAxis_K2Node_ComponentBoundEvent_8_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_ICON_SCHEME_K2Node_ComponentBoundEvent_23_OnOptionChanged__DelegateSignature(const class FText& NewOption, int32 Index_0);
	void BndEvt__Widget_GameplaySettings_HealthBars_K2Node_ComponentBoundEvent_4_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_FOV_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_DashIndicator_K2Node_ComponentBoundEvent_2_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_DamageNumbers_K2Node_ComponentBoundEvent_2_OnValueChanged__DelegateSignature(int32 Index_0);
	void BndEvt__Widget_GameplaySettings_CrosshairAlignment_K2Node_ComponentBoundEvent_19_OnValueChanged__DelegateSignature(int32 Index_0);
	void BndEvt__Widget_GameplaySettings_Crosshair_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature(bool State);
	void BndEvt__Widget_GameplaySettings_ControllerYSensitivity_K2Node_ComponentBoundEvent_13_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_ControllerXSensitivity_K2Node_ComponentBoundEvent_0_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_ControllerScopedYSensitivity_K2Node_ComponentBoundEvent_15_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_ControllerScopedXSensitivity_K2Node_ComponentBoundEvent_14_OnValueChanged__DelegateSignature(double Value, double Percent);
	void BndEvt__Widget_GameplaySettings_ControllerAimAssistStrength_K2Node_ComponentBoundEvent_16_OnValueChanged__DelegateSignature(double Value, double Percent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_GameplaySettings_C">();
	}
	static class UWidget_GameplaySettings_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_GameplaySettings_C>();
	}
};
static_assert(alignof(UWidget_GameplaySettings_C) == 0x000008, "Wrong alignment on UWidget_GameplaySettings_C");
static_assert(sizeof(UWidget_GameplaySettings_C) == 0x000418, "Wrong size on UWidget_GameplaySettings_C");
static_assert(offsetof(UWidget_GameplaySettings_C, UberGraphFrame_Widget_GameplaySettings_C) == 0x0002D8, "Member 'UWidget_GameplaySettings_C::UberGraphFrame_Widget_GameplaySettings_C' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ControllerAimAssistStrength) == 0x0002E0, "Member 'UWidget_GameplaySettings_C::ControllerAimAssistStrength' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ControllerScopedXSensitivity) == 0x0002E8, "Member 'UWidget_GameplaySettings_C::ControllerScopedXSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ControllerScopedYSensitivity) == 0x0002F0, "Member 'UWidget_GameplaySettings_C::ControllerScopedYSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ControllerXSensitivity) == 0x0002F8, "Member 'UWidget_GameplaySettings_C::ControllerXSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ControllerYSensitivity) == 0x000300, "Member 'UWidget_GameplaySettings_C::ControllerYSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, Crosshair) == 0x000308, "Member 'UWidget_GameplaySettings_C::Crosshair' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, CrosshairAlignment) == 0x000310, "Member 'UWidget_GameplaySettings_C::CrosshairAlignment' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, DamageNumbers) == 0x000318, "Member 'UWidget_GameplaySettings_C::DamageNumbers' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, DashIndicator) == 0x000320, "Member 'UWidget_GameplaySettings_C::DashIndicator' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, FOV) == 0x000328, "Member 'UWidget_GameplaySettings_C::FOV' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, HealthBars) == 0x000330, "Member 'UWidget_GameplaySettings_C::HealthBars' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ICON_SCHEME) == 0x000338, "Member 'UWidget_GameplaySettings_C::ICON_SCHEME' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, InvertedXAxis) == 0x000340, "Member 'UWidget_GameplaySettings_C::InvertedXAxis' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, InvertedYAxis) == 0x000348, "Member 'UWidget_GameplaySettings_C::InvertedYAxis' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, Language) == 0x000350, "Member 'UWidget_GameplaySettings_C::Language' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, LANGUAGE_FILTERING) == 0x000358, "Member 'UWidget_GameplaySettings_C::LANGUAGE_FILTERING' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, MouseSensitivity) == 0x000360, "Member 'UWidget_GameplaySettings_C::MouseSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, PlayerHUD) == 0x000368, "Member 'UWidget_GameplaySettings_C::PlayerHUD' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, PlayerNames) == 0x000370, "Member 'UWidget_GameplaySettings_C::PlayerNames' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ScopedSensitivity) == 0x000378, "Member 'UWidget_GameplaySettings_C::ScopedSensitivity' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ScopeMode) == 0x000380, "Member 'UWidget_GameplaySettings_C::ScopeMode' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ScreenShake) == 0x000388, "Member 'UWidget_GameplaySettings_C::ScreenShake' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, ScrollBox_0) == 0x000390, "Member 'UWidget_GameplaySettings_C::ScrollBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, TELEMETRY_CONSENT) == 0x000398, "Member 'UWidget_GameplaySettings_C::TELEMETRY_CONSENT' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, CultureArray) == 0x0003A0, "Member 'UWidget_GameplaySettings_C::CultureArray' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, RecursionFlag) == 0x0003B0, "Member 'UWidget_GameplaySettings_C::RecursionFlag' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, IconSchemeMap) == 0x0003B8, "Member 'UWidget_GameplaySettings_C::IconSchemeMap' has a wrong offset!");
static_assert(offsetof(UWidget_GameplaySettings_C, LangaugeArray) == 0x000408, "Member 'UWidget_GameplaySettings_C::LangaugeArray' has a wrong offset!");

}

