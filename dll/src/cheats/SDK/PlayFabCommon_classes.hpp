#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayFabCommon

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class PlayFabCommon.PlayFabAuthenticationContext
// 0x0040 (0x0068 - 0x0028)
class UPlayFabAuthenticationContext final : public UObject
{
public:
	class FString                                 ClientSessionTicket;                               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 EntityToken;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DeveloperSecretKey;                                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PlayFabId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ForgetAllCredentials();
	class FString GetClientSessionTicket();
	class FString GetDeveloperSecretKey();
	class FString GetEntityToken();
	class FString GetPlayFabId();
	void SetClientSessionTicket(const class FString& InTicket);
	void SetDeveloperSecretKey(const class FString& InKey);
	void SetEntityToken(const class FString& InToken);
	void SetPlayFabId(const class FString& InKey);

	void ClientAdminSecurityCheck() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayFabAuthenticationContext">();
	}
	static class UPlayFabAuthenticationContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayFabAuthenticationContext>();
	}
};
static_assert(alignof(UPlayFabAuthenticationContext) == 0x000008, "Wrong alignment on UPlayFabAuthenticationContext");
static_assert(sizeof(UPlayFabAuthenticationContext) == 0x000068, "Wrong size on UPlayFabAuthenticationContext");
static_assert(offsetof(UPlayFabAuthenticationContext, ClientSessionTicket) == 0x000028, "Member 'UPlayFabAuthenticationContext::ClientSessionTicket' has a wrong offset!");
static_assert(offsetof(UPlayFabAuthenticationContext, EntityToken) == 0x000038, "Member 'UPlayFabAuthenticationContext::EntityToken' has a wrong offset!");
static_assert(offsetof(UPlayFabAuthenticationContext, DeveloperSecretKey) == 0x000048, "Member 'UPlayFabAuthenticationContext::DeveloperSecretKey' has a wrong offset!");
static_assert(offsetof(UPlayFabAuthenticationContext, PlayFabId) == 0x000058, "Member 'UPlayFabAuthenticationContext::PlayFabId' has a wrong offset!");

// Class PlayFabCommon.PlayFabRuntimeSettings
// 0x0030 (0x0058 - 0x0028)
class UPlayFabRuntimeSettings final : public UObject
{
public:
	class FString                                 ProductionEnvironmentURL;                          // 0x0028(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleId;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeveloperSecretKey;                                // 0x0048(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayFabRuntimeSettings">();
	}
	static class UPlayFabRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayFabRuntimeSettings>();
	}
};
static_assert(alignof(UPlayFabRuntimeSettings) == 0x000008, "Wrong alignment on UPlayFabRuntimeSettings");
static_assert(sizeof(UPlayFabRuntimeSettings) == 0x000058, "Wrong size on UPlayFabRuntimeSettings");
static_assert(offsetof(UPlayFabRuntimeSettings, ProductionEnvironmentURL) == 0x000028, "Member 'UPlayFabRuntimeSettings::ProductionEnvironmentURL' has a wrong offset!");
static_assert(offsetof(UPlayFabRuntimeSettings, TitleId) == 0x000038, "Member 'UPlayFabRuntimeSettings::TitleId' has a wrong offset!");
static_assert(offsetof(UPlayFabRuntimeSettings, DeveloperSecretKey) == 0x000048, "Member 'UPlayFabRuntimeSettings::DeveloperSecretKey' has a wrong offset!");

}

