#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HiddenCoin

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HiddenCoin.BP_HiddenCoin_C
// 0x0040 (0x02F0 - 0x02B0)
class ABP_HiddenCoin_C final : public ARHiddenCoin
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      VFX;                                               // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URHealthComponent*                      RHealth;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   CoinId;                                            // 0x02D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           ChallengeTag;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SkipLobbyCheck;                                    // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__BP_HiddenCoin_RHealth_K2Node_ComponentBoundEvent_0_OnHealthOrArmorChanged__DelegateSignature(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent);
	void CompleteChallenge(class ARGamePlayerController* PlayerController, class UObject* PlayerPawn);
	void ExecuteUbergraph_BP_HiddenCoin(int32 EntryPoint);
	void GetChallengeId(class FName* ChallengeId);
	void OnProjHit(class ARPlayerPawn* Player, class AActor* HitActor, class ARProjectileBase* ProjectileActor);
	void PlayFX();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HiddenCoin_C">();
	}
	static class ABP_HiddenCoin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HiddenCoin_C>();
	}
};
static_assert(alignof(ABP_HiddenCoin_C) == 0x000008, "Wrong alignment on ABP_HiddenCoin_C");
static_assert(sizeof(ABP_HiddenCoin_C) == 0x0002F0, "Wrong size on ABP_HiddenCoin_C");
static_assert(offsetof(ABP_HiddenCoin_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_HiddenCoin_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, VFX) == 0x0002B8, "Member 'ABP_HiddenCoin_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, Sphere) == 0x0002C0, "Member 'ABP_HiddenCoin_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, RHealth) == 0x0002C8, "Member 'ABP_HiddenCoin_C::RHealth' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_HiddenCoin_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, CoinId) == 0x0002D8, "Member 'ABP_HiddenCoin_C::CoinId' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, ChallengeTag) == 0x0002E0, "Member 'ABP_HiddenCoin_C::ChallengeTag' has a wrong offset!");
static_assert(offsetof(ABP_HiddenCoin_C, SkipLobbyCheck) == 0x0002E8, "Member 'ABP_HiddenCoin_C::SkipLobbyCheck' has a wrong offset!");

}

