#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NNE

#include "Basic.hpp"


namespace SDK
{

// Enum NNE.ENNEAttributeDataType
// NumValues: 0x000A
enum class ENNEAttributeDataType : uint8
{
	None                                     = 0,
	Float                                    = 1,
	FloatArray                               = 2,
	Int32                                    = 3,
	Int32Array                               = 4,
	String                                   = 5,
	StringArray                              = 6,
	Tensor                                   = 7,
	TensorArray                              = 8,
	ENNEAttributeDataType_MAX                = 9,
};

// Enum NNE.ENNEFormatTensorType
// NumValues: 0x0008
enum class ENNEFormatTensorType : uint8
{
	None                                     = 0,
	Input                                    = 1,
	Output                                   = 2,
	Intermediate                             = 3,
	Initializer                              = 4,
	Empty                                    = 5,
	NUM                                      = 6,
	ENNEFormatTensorType_MAX                 = 7,
};

// Enum NNE.ENNEInferenceFormat
// NumValues: 0x0005
enum class ENNEInferenceFormat : uint8
{
	Invalid                                  = 0,
	ONNX                                     = 1,
	ORT                                      = 2,
	NNERT                                    = 3,
	ENNEInferenceFormat_MAX                  = 4,
};

// Enum NNE.ENNETensorDataType
// NumValues: 0x0012
enum class ENNETensorDataType : uint8
{
	None                                     = 0,
	Char                                     = 1,
	Boolean                                  = 2,
	Half                                     = 3,
	Float                                    = 4,
	Double                                   = 5,
	Int8                                     = 6,
	Int16                                    = 7,
	Int32                                    = 8,
	Int64                                    = 9,
	UInt8                                    = 10,
	UInt16                                   = 11,
	UInt32                                   = 12,
	UInt64                                   = 13,
	Complex64                                = 14,
	Complex128                               = 15,
	BFloat16                                 = 16,
	ENNETensorDataType_MAX                   = 17,
};

// ScriptStruct NNE.NNEAttributeValue
// 0x0018 (0x0018 - 0x0000)
struct FNNEAttributeValue final
{
public:
	ENNEAttributeDataType                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FNNEAttributeValue) == 0x000008, "Wrong alignment on FNNEAttributeValue");
static_assert(sizeof(FNNEAttributeValue) == 0x000018, "Wrong size on FNNEAttributeValue");
static_assert(offsetof(FNNEAttributeValue, Type) == 0x000000, "Member 'FNNEAttributeValue::Type' has a wrong offset!");
static_assert(offsetof(FNNEAttributeValue, Value) == 0x000008, "Member 'FNNEAttributeValue::Value' has a wrong offset!");

// ScriptStruct NNE.NNEFormatAttributeDesc
// 0x0028 (0x0028 - 0x0000)
struct FNNEFormatAttributeDesc final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNNEAttributeValue                     Value;                                             // 0x0010(0x0018)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNNEFormatAttributeDesc) == 0x000008, "Wrong alignment on FNNEFormatAttributeDesc");
static_assert(sizeof(FNNEFormatAttributeDesc) == 0x000028, "Wrong size on FNNEFormatAttributeDesc");
static_assert(offsetof(FNNEFormatAttributeDesc, Name) == 0x000000, "Member 'FNNEFormatAttributeDesc::Name' has a wrong offset!");
static_assert(offsetof(FNNEFormatAttributeDesc, Value) == 0x000010, "Member 'FNNEFormatAttributeDesc::Value' has a wrong offset!");

// ScriptStruct NNE.NNEFormatOperatorDesc
// 0x0058 (0x0058 - 0x0000)
struct FNNEFormatOperatorDesc final
{
public:
	class FString                                 TypeName;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DomainName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TOptional<uint32>                             Version;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint32>                                InTensors;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<uint32>                                OutTensors;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNNEFormatAttributeDesc>        Attributes;                                        // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNNEFormatOperatorDesc) == 0x000008, "Wrong alignment on FNNEFormatOperatorDesc");
static_assert(sizeof(FNNEFormatOperatorDesc) == 0x000058, "Wrong size on FNNEFormatOperatorDesc");
static_assert(offsetof(FNNEFormatOperatorDesc, TypeName) == 0x000000, "Member 'FNNEFormatOperatorDesc::TypeName' has a wrong offset!");
static_assert(offsetof(FNNEFormatOperatorDesc, DomainName) == 0x000010, "Member 'FNNEFormatOperatorDesc::DomainName' has a wrong offset!");
static_assert(offsetof(FNNEFormatOperatorDesc, Version) == 0x000020, "Member 'FNNEFormatOperatorDesc::Version' has a wrong offset!");
static_assert(offsetof(FNNEFormatOperatorDesc, InTensors) == 0x000028, "Member 'FNNEFormatOperatorDesc::InTensors' has a wrong offset!");
static_assert(offsetof(FNNEFormatOperatorDesc, OutTensors) == 0x000038, "Member 'FNNEFormatOperatorDesc::OutTensors' has a wrong offset!");
static_assert(offsetof(FNNEFormatOperatorDesc, Attributes) == 0x000048, "Member 'FNNEFormatOperatorDesc::Attributes' has a wrong offset!");

// ScriptStruct NNE.NNEFormatTensorDesc
// 0x0038 (0x0038 - 0x0000)
struct FNNEFormatTensorDesc final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Shape;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	ENNEFormatTensorType                          Type;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENNETensorDataType                            DataType;                                          // 0x0021(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        DataSize;                                          // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        DataOffset;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNNEFormatTensorDesc) == 0x000008, "Wrong alignment on FNNEFormatTensorDesc");
static_assert(sizeof(FNNEFormatTensorDesc) == 0x000038, "Wrong size on FNNEFormatTensorDesc");
static_assert(offsetof(FNNEFormatTensorDesc, Name) == 0x000000, "Member 'FNNEFormatTensorDesc::Name' has a wrong offset!");
static_assert(offsetof(FNNEFormatTensorDesc, Shape) == 0x000010, "Member 'FNNEFormatTensorDesc::Shape' has a wrong offset!");
static_assert(offsetof(FNNEFormatTensorDesc, Type) == 0x000020, "Member 'FNNEFormatTensorDesc::Type' has a wrong offset!");
static_assert(offsetof(FNNEFormatTensorDesc, DataType) == 0x000021, "Member 'FNNEFormatTensorDesc::DataType' has a wrong offset!");
static_assert(offsetof(FNNEFormatTensorDesc, DataSize) == 0x000028, "Member 'FNNEFormatTensorDesc::DataSize' has a wrong offset!");
static_assert(offsetof(FNNEFormatTensorDesc, DataOffset) == 0x000030, "Member 'FNNEFormatTensorDesc::DataOffset' has a wrong offset!");

// ScriptStruct NNE.NNERuntimeFormat
// 0x0040 (0x0040 - 0x0000)
struct FNNERuntimeFormat final
{
public:
	TArray<struct FNNEFormatTensorDesc>           Tensors;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FNNEFormatOperatorDesc>         Operators;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x20];                                      // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNNERuntimeFormat) == 0x000008, "Wrong alignment on FNNERuntimeFormat");
static_assert(sizeof(FNNERuntimeFormat) == 0x000040, "Wrong size on FNNERuntimeFormat");
static_assert(offsetof(FNNERuntimeFormat, Tensors) == 0x000000, "Member 'FNNERuntimeFormat::Tensors' has a wrong offset!");
static_assert(offsetof(FNNERuntimeFormat, Operators) == 0x000010, "Member 'FNNERuntimeFormat::Operators' has a wrong offset!");

}

