#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_BossHealthbar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_BossHealthbar.Widget_BossHealthbar_C
// 0x00D8 (0x03B8 - 0x02E0)
class UWidget_BossHealthbar_C final : public URHealthbarWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UProgressBar*                           ArmorBackground;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ArmorForeground;                                   // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             BossNameText;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrostBackgroundShadow;                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           FrostBuildupBackground;                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           FrostBuildupForeground;                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FrozenForeground;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HealthBackground;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           HealthForeground;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_0;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay;                                           // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_64;                                        // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_3;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Thresholds;                                        // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_0;                                     // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        ArmorPercentage;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ArmorInitialized;                                  // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HealthPercentCount;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              RecursiveEvent;                                    // 0x0388(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsActive;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x7];                                      // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentRefillAlpha;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RefillHealthbarTimer;                              // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PreventRemovalOnDeath;                             // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockTick;                                         // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_Widget_BossHealthbar(int32 EntryPoint);
	void GetBossArmorPercent(double* Percent);
	void GetBossHealthPercent(double* Percent);
	void InitializeBar();
	void InvokeWhenHealthComponentValid(bool* RetValue);
	void IsOwningHealthComponentValid(bool* RetValue);
	void OnArmorUpdated(class URHealthComponent* Component, float CurrentArmor, float Delta, const struct FHealCombatEvent& HealEvent);
	void OnDamageTaken(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageData);
	void OnHealthDepleted(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageData);
	void OnHealthUpdated(class URHealthComponent* Component, float currentHealth, float Delta, const struct FHealCombatEvent& HealEvent);
	void OnInvoke_291B4B9E4419E16AC17307BD22F61C5D();
	void OnInvulnerabilityChanged(class URHealthComponent* Component, bool NewInvulnerability);
	void OnStatusEffectAttached(class URStatusEffectGScript* StatusEffectScript);
	void RefillHealthTick();
	void ReinitHealthbarWithNewTarget(class URHealthComponent* NewComponent);
	void SetAllVisibility(bool NewValue);
	void SetName(const class FText& Name_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateArmorBar();
	void UpdateFrostVisuals();
	void UpdateHealthBar(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_BossHealthbar_C">();
	}
	static class UWidget_BossHealthbar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_BossHealthbar_C>();
	}
};
static_assert(alignof(UWidget_BossHealthbar_C) == 0x000008, "Wrong alignment on UWidget_BossHealthbar_C");
static_assert(sizeof(UWidget_BossHealthbar_C) == 0x0003B8, "Wrong size on UWidget_BossHealthbar_C");
static_assert(offsetof(UWidget_BossHealthbar_C, UberGraphFrame) == 0x0002E0, "Member 'UWidget_BossHealthbar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, ArmorBackground) == 0x0002E8, "Member 'UWidget_BossHealthbar_C::ArmorBackground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, ArmorForeground) == 0x0002F0, "Member 'UWidget_BossHealthbar_C::ArmorForeground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, BossNameText) == 0x0002F8, "Member 'UWidget_BossHealthbar_C::BossNameText' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, FrostBackgroundShadow) == 0x000300, "Member 'UWidget_BossHealthbar_C::FrostBackgroundShadow' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, FrostBuildupBackground) == 0x000308, "Member 'UWidget_BossHealthbar_C::FrostBuildupBackground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, FrostBuildupForeground) == 0x000310, "Member 'UWidget_BossHealthbar_C::FrostBuildupForeground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, FrozenForeground) == 0x000318, "Member 'UWidget_BossHealthbar_C::FrozenForeground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, HealthBackground) == 0x000320, "Member 'UWidget_BossHealthbar_C::HealthBackground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, HealthForeground) == 0x000328, "Member 'UWidget_BossHealthbar_C::HealthForeground' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, Image_0) == 0x000330, "Member 'UWidget_BossHealthbar_C::Image_0' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, InvalidationBox_0) == 0x000338, "Member 'UWidget_BossHealthbar_C::InvalidationBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, Overlay) == 0x000340, "Member 'UWidget_BossHealthbar_C::Overlay' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, Overlay_64) == 0x000348, "Member 'UWidget_BossHealthbar_C::Overlay_64' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, SizeBox) == 0x000350, "Member 'UWidget_BossHealthbar_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, SizeBox_3) == 0x000358, "Member 'UWidget_BossHealthbar_C::SizeBox_3' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, Thresholds) == 0x000360, "Member 'UWidget_BossHealthbar_C::Thresholds' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, VerticalBox_0) == 0x000368, "Member 'UWidget_BossHealthbar_C::VerticalBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, ArmorPercentage) == 0x000370, "Member 'UWidget_BossHealthbar_C::ArmorPercentage' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, ArmorInitialized) == 0x000378, "Member 'UWidget_BossHealthbar_C::ArmorInitialized' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, HealthPercentCount) == 0x000380, "Member 'UWidget_BossHealthbar_C::HealthPercentCount' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, RecursiveEvent) == 0x000388, "Member 'UWidget_BossHealthbar_C::RecursiveEvent' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, IsActive) == 0x000398, "Member 'UWidget_BossHealthbar_C::IsActive' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, CurrentRefillAlpha) == 0x0003A0, "Member 'UWidget_BossHealthbar_C::CurrentRefillAlpha' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, RefillHealthbarTimer) == 0x0003A8, "Member 'UWidget_BossHealthbar_C::RefillHealthbarTimer' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, PreventRemovalOnDeath) == 0x0003B0, "Member 'UWidget_BossHealthbar_C::PreventRemovalOnDeath' has a wrong offset!");
static_assert(offsetof(UWidget_BossHealthbar_C, BlockTick) == 0x0003B1, "Member 'UWidget_BossHealthbar_C::BlockTick' has a wrong offset!");

}

