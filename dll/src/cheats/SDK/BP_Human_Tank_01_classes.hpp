#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Human_Tank_01

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Human_Tank_01.BP_Human_Tank_01_C
// 0x0030 (0x02E8 - 0x02B8)
class ABP_Human_Tank_01_C final : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                   Sphere5;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere4;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere3;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere2;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere1;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Human_Tank_01_C">();
	}
	static class ABP_Human_Tank_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Human_Tank_01_C>();
	}
};
static_assert(alignof(ABP_Human_Tank_01_C) == 0x000008, "Wrong alignment on ABP_Human_Tank_01_C");
static_assert(sizeof(ABP_Human_Tank_01_C) == 0x0002E8, "Wrong size on ABP_Human_Tank_01_C");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere5) == 0x0002B8, "Member 'ABP_Human_Tank_01_C::Sphere5' has a wrong offset!");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere4) == 0x0002C0, "Member 'ABP_Human_Tank_01_C::Sphere4' has a wrong offset!");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere3) == 0x0002C8, "Member 'ABP_Human_Tank_01_C::Sphere3' has a wrong offset!");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere2) == 0x0002D0, "Member 'ABP_Human_Tank_01_C::Sphere2' has a wrong offset!");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere1) == 0x0002D8, "Member 'ABP_Human_Tank_01_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_Human_Tank_01_C, Sphere) == 0x0002E0, "Member 'ABP_Human_Tank_01_C::Sphere' has a wrong offset!");

}

