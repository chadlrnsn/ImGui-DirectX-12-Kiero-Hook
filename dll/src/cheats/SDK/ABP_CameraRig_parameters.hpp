#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CameraRig

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_CameraRig.ABP_CameraRig_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_CameraRig_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_CameraRig_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_CameraRig_C_AnimGraph");
static_assert(sizeof(ABP_CameraRig_C_AnimGraph) == 0x000010, "Wrong size on ABP_CameraRig_C_AnimGraph");
static_assert(offsetof(ABP_CameraRig_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_CameraRig_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_CameraRig.ABP_CameraRig_C.ExecuteUbergraph_ABP_CameraRig
// 0x0180 (0x0180 - 0x0000)
struct ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARPlayerPawn*                           K2Node_DynamicCast_AsRPlayer_Pawn;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARPlayerPawn*                           K2Node_CustomEvent_Player_2;                       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARPlayerPawn* Player)>   K2Node_CreateDelegate_OutputDelegate_2;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ARPlayerPawn*                           K2Node_CustomEvent_Player_1;                       // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0078(0x0100)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ARPlayerPawn*                           K2Node_CustomEvent_Player;                         // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig) == 0x000008, "Wrong alignment on ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig");
static_assert(sizeof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig) == 0x000180, "Wrong size on ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, EntryPoint) == 0x000000, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000028, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_DynamicCast_AsRPlayer_Pawn) == 0x000030, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_DynamicCast_AsRPlayer_Pawn' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CustomEvent_Player_2) == 0x000040, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CustomEvent_Player_2' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CreateDelegate_OutputDelegate_2) == 0x000048, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000058, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CustomEvent_Player_1) == 0x000070, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000078, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig, K2Node_CustomEvent_Player) == 0x000178, "Member 'ABP_CameraRig_C_ExecuteUbergraph_ABP_CameraRig::K2Node_CustomEvent_Player' has a wrong offset!");

// Function ABP_CameraRig.ABP_CameraRig_C.PawnDowned
// 0x0008 (0x0008 - 0x0000)
struct ABP_CameraRig_C_PawnDowned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CameraRig_C_PawnDowned) == 0x000008, "Wrong alignment on ABP_CameraRig_C_PawnDowned");
static_assert(sizeof(ABP_CameraRig_C_PawnDowned) == 0x000008, "Wrong size on ABP_CameraRig_C_PawnDowned");
static_assert(offsetof(ABP_CameraRig_C_PawnDowned, Player) == 0x000000, "Member 'ABP_CameraRig_C_PawnDowned::Player' has a wrong offset!");

// Function ABP_CameraRig.ABP_CameraRig_C.PawnRespawned
// 0x0008 (0x0008 - 0x0000)
struct ABP_CameraRig_C_PawnRespawned final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CameraRig_C_PawnRespawned) == 0x000008, "Wrong alignment on ABP_CameraRig_C_PawnRespawned");
static_assert(sizeof(ABP_CameraRig_C_PawnRespawned) == 0x000008, "Wrong size on ABP_CameraRig_C_PawnRespawned");
static_assert(offsetof(ABP_CameraRig_C_PawnRespawned, Player) == 0x000000, "Member 'ABP_CameraRig_C_PawnRespawned::Player' has a wrong offset!");

// Function ABP_CameraRig.ABP_CameraRig_C.PawnRevived
// 0x0008 (0x0008 - 0x0000)
struct ABP_CameraRig_C_PawnRevived final
{
public:
	class ARPlayerPawn*                           Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_CameraRig_C_PawnRevived) == 0x000008, "Wrong alignment on ABP_CameraRig_C_PawnRevived");
static_assert(sizeof(ABP_CameraRig_C_PawnRevived) == 0x000008, "Wrong size on ABP_CameraRig_C_PawnRevived");
static_assert(offsetof(ABP_CameraRig_C_PawnRevived, Player) == 0x000000, "Member 'ABP_CameraRig_C_PawnRevived::Player' has a wrong offset!");

}

