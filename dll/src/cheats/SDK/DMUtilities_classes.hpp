#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DMUtilities

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DMUtilities_structs.hpp"


namespace SDK
{

// Class DMUtilities.DMActorProximityComponentBase
// 0x00F0 (0x0320 - 0x0230)
#pragma pack(push, 0x1)
class alignas(0x10) UDMActorProximityComponentBase : public USceneComponent
{
public:
	TSet<class AActor*>                           ActorsInProximity;                                 // 0x0230(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             ActorClassArray;                                   // 0x0280(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x88];                                     // 0x0290(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCheckedClass(TSubclassOf<class AActor> ActorClass, class FName Key);
	TArray<class AActor*> GetActorsInProximityAsArray();
	class AActor* GetClosestActorInProximity();
	void RemoveCheckedClass(class FName Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMActorProximityComponentBase">();
	}
	static class UDMActorProximityComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMActorProximityComponentBase>();
	}
};
#pragma pack(pop)
static_assert(alignof(UDMActorProximityComponentBase) == 0x000010, "Wrong alignment on UDMActorProximityComponentBase");
static_assert(sizeof(UDMActorProximityComponentBase) == 0x000320, "Wrong size on UDMActorProximityComponentBase");
static_assert(offsetof(UDMActorProximityComponentBase, ActorsInProximity) == 0x000230, "Member 'UDMActorProximityComponentBase::ActorsInProximity' has a wrong offset!");
static_assert(offsetof(UDMActorProximityComponentBase, ActorClassArray) == 0x000280, "Member 'UDMActorProximityComponentBase::ActorClassArray' has a wrong offset!");

// Class DMUtilities.DMActorProximityBoxComponent
// 0x0090 (0x03B0 - 0x0320)
class UDMActorProximityBoxComponent final : public UDMActorProximityComponentBase
{
public:
	uint8                                         Pad_318[0x38];                                     // 0x0318(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtent;                                         // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnActorEnterProximity;                       // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnActorExitProximity;                        // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnInitialActorEnterProximity;                // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> OnAllActorsExitProximity;                    // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetScaledBoxExtent() const;
	struct FVector GetUnscaledBoxExtent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMActorProximityBoxComponent">();
	}
	static class UDMActorProximityBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMActorProximityBoxComponent>();
	}
};
static_assert(alignof(UDMActorProximityBoxComponent) == 0x000010, "Wrong alignment on UDMActorProximityBoxComponent");
static_assert(sizeof(UDMActorProximityBoxComponent) == 0x0003B0, "Wrong size on UDMActorProximityBoxComponent");
static_assert(offsetof(UDMActorProximityBoxComponent, BoxExtent) == 0x000350, "Member 'UDMActorProximityBoxComponent::BoxExtent' has a wrong offset!");
static_assert(offsetof(UDMActorProximityBoxComponent, OnActorEnterProximity) == 0x000368, "Member 'UDMActorProximityBoxComponent::OnActorEnterProximity' has a wrong offset!");
static_assert(offsetof(UDMActorProximityBoxComponent, OnActorExitProximity) == 0x000378, "Member 'UDMActorProximityBoxComponent::OnActorExitProximity' has a wrong offset!");
static_assert(offsetof(UDMActorProximityBoxComponent, OnInitialActorEnterProximity) == 0x000388, "Member 'UDMActorProximityBoxComponent::OnInitialActorEnterProximity' has a wrong offset!");
static_assert(offsetof(UDMActorProximityBoxComponent, OnAllActorsExitProximity) == 0x000398, "Member 'UDMActorProximityBoxComponent::OnAllActorsExitProximity' has a wrong offset!");

// Class DMUtilities.DMAdvancedGyroComponent
// 0x0100 (0x0330 - 0x0230)
class UDMAdvancedGyroComponent final : public USceneComponent
{
public:
	bool                                          bDrawDebug;                                        // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMultiplyByMass;                                   // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampForce;                                       // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TensorScale;                                       // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighFidelityMass;                              // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAggregateTick;                                 // 0x0239(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAxis1;                                      // 0x023A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B[0x5];                                      // 0x023B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis1Direction;                                    // 0x0240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Axis1StiffnessCoefficient;                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Axis1DampingCoefficient;                           // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis1ForceMask;                                    // 0x0260(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Axis1DampingCurve;                                 // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAxis2;                                      // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Axis2Direction;                                    // 0x0288(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Axis2StiffnessCoefficient;                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Axis2DampingCoefficient;                           // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis2ForceMask;                                    // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Axis2DampingCurve;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x68];                                     // 0x02C8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAxis1TargetDirection(const struct FVector& TargetDirection);
	void SetAxis2TargetDirection(const struct FVector& TargetDirection);

	const struct FVector GetAxis1TargetDirection() const;
	const struct FVector GetAxis2TargetDirection() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMAdvancedGyroComponent">();
	}
	static class UDMAdvancedGyroComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMAdvancedGyroComponent>();
	}
};
static_assert(alignof(UDMAdvancedGyroComponent) == 0x000010, "Wrong alignment on UDMAdvancedGyroComponent");
static_assert(sizeof(UDMAdvancedGyroComponent) == 0x000330, "Wrong size on UDMAdvancedGyroComponent");
static_assert(offsetof(UDMAdvancedGyroComponent, bDrawDebug) == 0x000230, "Member 'UDMAdvancedGyroComponent::bDrawDebug' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bMultiplyByMass) == 0x000231, "Member 'UDMAdvancedGyroComponent::bMultiplyByMass' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bClampForce) == 0x000232, "Member 'UDMAdvancedGyroComponent::bClampForce' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, TensorScale) == 0x000234, "Member 'UDMAdvancedGyroComponent::TensorScale' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bUseHighFidelityMass) == 0x000238, "Member 'UDMAdvancedGyroComponent::bUseHighFidelityMass' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bUseAggregateTick) == 0x000239, "Member 'UDMAdvancedGyroComponent::bUseAggregateTick' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bEnableAxis1) == 0x00023A, "Member 'UDMAdvancedGyroComponent::bEnableAxis1' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis1Direction) == 0x000240, "Member 'UDMAdvancedGyroComponent::Axis1Direction' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis1StiffnessCoefficient) == 0x000258, "Member 'UDMAdvancedGyroComponent::Axis1StiffnessCoefficient' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis1DampingCoefficient) == 0x00025C, "Member 'UDMAdvancedGyroComponent::Axis1DampingCoefficient' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis1ForceMask) == 0x000260, "Member 'UDMAdvancedGyroComponent::Axis1ForceMask' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis1DampingCurve) == 0x000278, "Member 'UDMAdvancedGyroComponent::Axis1DampingCurve' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, bEnableAxis2) == 0x000280, "Member 'UDMAdvancedGyroComponent::bEnableAxis2' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis2Direction) == 0x000288, "Member 'UDMAdvancedGyroComponent::Axis2Direction' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis2StiffnessCoefficient) == 0x0002A0, "Member 'UDMAdvancedGyroComponent::Axis2StiffnessCoefficient' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis2DampingCoefficient) == 0x0002A4, "Member 'UDMAdvancedGyroComponent::Axis2DampingCoefficient' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis2ForceMask) == 0x0002A8, "Member 'UDMAdvancedGyroComponent::Axis2ForceMask' has a wrong offset!");
static_assert(offsetof(UDMAdvancedGyroComponent, Axis2DampingCurve) == 0x0002C0, "Member 'UDMAdvancedGyroComponent::Axis2DampingCurve' has a wrong offset!");

// Class DMUtilities.TickableTargetsWrapper
// 0x0010 (0x0038 - 0x0028)
class UTickableTargetsWrapper final : public UObject
{
public:
	TArray<struct FTickableTarget>                Targets;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableTargetsWrapper">();
	}
	static class UTickableTargetsWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableTargetsWrapper>();
	}
};
static_assert(alignof(UTickableTargetsWrapper) == 0x000008, "Wrong alignment on UTickableTargetsWrapper");
static_assert(sizeof(UTickableTargetsWrapper) == 0x000038, "Wrong size on UTickableTargetsWrapper");
static_assert(offsetof(UTickableTargetsWrapper, Targets) == 0x000028, "Member 'UTickableTargetsWrapper::Targets' has a wrong offset!");

// Class DMUtilities.DMShapeComponent
// 0x0010 (0x0500 - 0x04F0)
class UDMShapeComponent : public UPrimitiveComponent
{
public:
	class UBodySetup*                             ShapeBodySetup;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ShapeColor;                                        // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDrawOnlyIfSelected : 1;                           // 0x04F4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldCollideWhenPlacing : 1;                     // 0x04F4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDynamicObstacle : 1;                              // 0x04F4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               AreaClass;                                         // 0x04F8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMShapeComponent">();
	}
	static class UDMShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMShapeComponent>();
	}
};
static_assert(alignof(UDMShapeComponent) == 0x000010, "Wrong alignment on UDMShapeComponent");
static_assert(sizeof(UDMShapeComponent) == 0x000500, "Wrong size on UDMShapeComponent");
static_assert(offsetof(UDMShapeComponent, ShapeBodySetup) == 0x0004E8, "Member 'UDMShapeComponent::ShapeBodySetup' has a wrong offset!");
static_assert(offsetof(UDMShapeComponent, ShapeColor) == 0x0004F0, "Member 'UDMShapeComponent::ShapeColor' has a wrong offset!");
static_assert(offsetof(UDMShapeComponent, AreaClass) == 0x0004F8, "Member 'UDMShapeComponent::AreaClass' has a wrong offset!");

// Class DMUtilities.DMAnyShapeComponent
// 0x0030 (0x0530 - 0x0500)
class UDMAnyShapeComponent final : public UDMShapeComponent
{
public:
	EDMCollisionShape                             Shape;                                             // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_501[0x3];                                      // 0x0501(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0508(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0524(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0528(0x0004)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);

	struct FVector GetScaledBoxExtent() const;
	float GetScaledCapsuleHalfHeight() const;
	float GetScaledCapsuleHalfHeight_WithoutHemisphere() const;
	float GetScaledCapsuleRadius() const;
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight) const;
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) const;
	float GetScaledSphereRadius() const;
	float GetShapeScale() const;
	struct FVector GetUnscaledBoxExtent() const;
	float GetUnscaledCapsuleHalfHeight() const;
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere() const;
	float GetUnscaledCapsuleRadius() const;
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight) const;
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere) const;
	float GetUnscaledSphereRadius() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMAnyShapeComponent">();
	}
	static class UDMAnyShapeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMAnyShapeComponent>();
	}
};
static_assert(alignof(UDMAnyShapeComponent) == 0x000010, "Wrong alignment on UDMAnyShapeComponent");
static_assert(sizeof(UDMAnyShapeComponent) == 0x000530, "Wrong size on UDMAnyShapeComponent");
static_assert(offsetof(UDMAnyShapeComponent, Shape) == 0x000500, "Member 'UDMAnyShapeComponent::Shape' has a wrong offset!");
static_assert(offsetof(UDMAnyShapeComponent, SphereRadius) == 0x000504, "Member 'UDMAnyShapeComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(UDMAnyShapeComponent, BoxExtent) == 0x000508, "Member 'UDMAnyShapeComponent::BoxExtent' has a wrong offset!");
static_assert(offsetof(UDMAnyShapeComponent, CapsuleRadius) == 0x000520, "Member 'UDMAnyShapeComponent::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(UDMAnyShapeComponent, CapsuleHalfHeight) == 0x000524, "Member 'UDMAnyShapeComponent::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UDMAnyShapeComponent, LineThickness) == 0x000528, "Member 'UDMAnyShapeComponent::LineThickness' has a wrong offset!");

// Class DMUtilities.DMConveyorComponent
// 0x0030 (0x05F0 - 0x05C0)
class UDMConveyorComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_5B8[0x8];                                      // 0x05B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderMaterialFriction;                         // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComFactor;                                         // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConveyorDirection;                                 // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMConveyorComponent">();
	}
	static class UDMConveyorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMConveyorComponent>();
	}
};
static_assert(alignof(UDMConveyorComponent) == 0x000010, "Wrong alignment on UDMConveyorComponent");
static_assert(sizeof(UDMConveyorComponent) == 0x0005F0, "Wrong size on UDMConveyorComponent");
static_assert(offsetof(UDMConveyorComponent, Speed) == 0x0005C0, "Member 'UDMConveyorComponent::Speed' has a wrong offset!");
static_assert(offsetof(UDMConveyorComponent, bConsiderMaterialFriction) == 0x0005C4, "Member 'UDMConveyorComponent::bConsiderMaterialFriction' has a wrong offset!");
static_assert(offsetof(UDMConveyorComponent, ComFactor) == 0x0005C8, "Member 'UDMConveyorComponent::ComFactor' has a wrong offset!");
static_assert(offsetof(UDMConveyorComponent, ConveyorDirection) == 0x0005D0, "Member 'UDMConveyorComponent::ConveyorDirection' has a wrong offset!");

// Class DMUtilities.DMDragComponent
// 0x0020 (0x0250 - 0x0230)
class UDMDragComponent final : public USceneComponent
{
public:
	float                                         DragCoefficient;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAtCOM;                                       // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0235(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236[0x1A];                                     // 0x0236(0x001A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMDragComponent">();
	}
	static class UDMDragComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMDragComponent>();
	}
};
static_assert(alignof(UDMDragComponent) == 0x000010, "Wrong alignment on UDMDragComponent");
static_assert(sizeof(UDMDragComponent) == 0x000250, "Wrong size on UDMDragComponent");
static_assert(offsetof(UDMDragComponent, DragCoefficient) == 0x000230, "Member 'UDMDragComponent::DragCoefficient' has a wrong offset!");
static_assert(offsetof(UDMDragComponent, bApplyAtCOM) == 0x000234, "Member 'UDMDragComponent::bApplyAtCOM' has a wrong offset!");
static_assert(offsetof(UDMDragComponent, bDrawDebug) == 0x000235, "Member 'UDMDragComponent::bDrawDebug' has a wrong offset!");

// Class DMUtilities.DMGameplayLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMGameplayLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddBlockingHit(class UPrimitiveComponent* MyComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	static float GetActorMass(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMGameplayLibrary">();
	}
	static class UDMGameplayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMGameplayLibrary>();
	}
};
static_assert(alignof(UDMGameplayLibrary) == 0x000008, "Wrong alignment on UDMGameplayLibrary");
static_assert(sizeof(UDMGameplayLibrary) == 0x000028, "Wrong size on UDMGameplayLibrary");

// Class DMUtilities.DMInterpolatedSpringArm
// 0x0180 (0x04B0 - 0x0330)
class UDMInterpolatedSpringArm final : public USpringArmComponent
{
public:
	class APawn*                                  OwningPawn;                                        // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0xD0];                                     // 0x0338(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       AttachedCameraComp;                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDMSpringArmSettings                   CameraSettings;                                    // 0x0410(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseFollowRotation;                                // 0x0480(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateControllerRotation;                         // 0x0481(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLengthRotationInterpSpeed;                   // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLengthFollowInterpSpeed;                     // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraFollowInterpLag;                             // 0x0490(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCameraVelocityPitch(float Val);
	void AddCameraVelocityYaw(float Val);
	void BlockCameraDirectionalMovement(const struct FVector& Direction);
	void ResetCameraFollowLocation();
	void ResetCameraRotation();
	void RestoreOriginalCameraLength();
	void RestoreOriginalZOffset();
	void RotateTowardsWorldLocation(const struct FVector& Location);
	void SetMinCameraLength(float cameraLength);
	void SetTargetCameraLength(float cameraLength);
	void SetTargetZOffset(float ZOffset);
	void StopBlockingCameraDirectionalMovement(const struct FVector& Direction);

	struct FVector GetSpringArmForwardVector() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMInterpolatedSpringArm">();
	}
	static class UDMInterpolatedSpringArm* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMInterpolatedSpringArm>();
	}
};
static_assert(alignof(UDMInterpolatedSpringArm) == 0x000010, "Wrong alignment on UDMInterpolatedSpringArm");
static_assert(sizeof(UDMInterpolatedSpringArm) == 0x0004B0, "Wrong size on UDMInterpolatedSpringArm");
static_assert(offsetof(UDMInterpolatedSpringArm, OwningPawn) == 0x000330, "Member 'UDMInterpolatedSpringArm::OwningPawn' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, AttachedCameraComp) == 0x000408, "Member 'UDMInterpolatedSpringArm::AttachedCameraComp' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, CameraSettings) == 0x000410, "Member 'UDMInterpolatedSpringArm::CameraSettings' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, bUseFollowRotation) == 0x000480, "Member 'UDMInterpolatedSpringArm::bUseFollowRotation' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, bUpdateControllerRotation) == 0x000481, "Member 'UDMInterpolatedSpringArm::bUpdateControllerRotation' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, CameraLengthRotationInterpSpeed) == 0x000484, "Member 'UDMInterpolatedSpringArm::CameraLengthRotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, CameraLengthFollowInterpSpeed) == 0x000488, "Member 'UDMInterpolatedSpringArm::CameraLengthFollowInterpSpeed' has a wrong offset!");
static_assert(offsetof(UDMInterpolatedSpringArm, CameraFollowInterpLag) == 0x000490, "Member 'UDMInterpolatedSpringArm::CameraFollowInterpLag' has a wrong offset!");

// Class DMUtilities.DMMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMMathLibrary final : public UBlueprintFunctionLibrary
{
public:
	static uint8 EnumByteToBitmask(uint8 enumByte);
	static struct FTransform ParabolaLerp(const struct FTransform& A, const struct FTransform& B, float Alpha);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMMathLibrary">();
	}
	static class UDMMathLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMMathLibrary>();
	}
};
static_assert(alignof(UDMMathLibrary) == 0x000008, "Wrong alignment on UDMMathLibrary");
static_assert(sizeof(UDMMathLibrary) == 0x000028, "Wrong size on UDMMathLibrary");

// Class DMUtilities.DMNetworkLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMNetworkLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsDedicatedAndAuthorative(const class AActor* networkedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMNetworkLibrary">();
	}
	static class UDMNetworkLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMNetworkLibrary>();
	}
};
static_assert(alignof(UDMNetworkLibrary) == 0x000008, "Wrong alignment on UDMNetworkLibrary");
static_assert(sizeof(UDMNetworkLibrary) == 0x000028, "Wrong size on UDMNetworkLibrary");

// Class DMUtilities.DMPhysicalAnimationComponent
// 0x0060 (0x0100 - 0x00A0)
class UDMPhysicalAnimationComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrengthMultiplyer;                                // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAggregateTick;                                 // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSkelMeshAggrTickPrerequisite;                  // 0x00ED(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockFree;                                         // 0x00EE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF[0x11];                                      // 0x00EF(0x0011)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPhysicalAnimationProfileBelow(class FName BodyName, class FName ProfileName, bool bIncludeSelf, bool bClearNotFound);
	void ApplyPhysicalAnimationSettings(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationSettingsBelow(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void SetStrengthMultiplyer(float InStrengthMultiplyer);

	struct FTransform GetBodyTargetTransform(class FName BodyName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMPhysicalAnimationComponent">();
	}
	static class UDMPhysicalAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMPhysicalAnimationComponent>();
	}
};
static_assert(alignof(UDMPhysicalAnimationComponent) == 0x000008, "Wrong alignment on UDMPhysicalAnimationComponent");
static_assert(sizeof(UDMPhysicalAnimationComponent) == 0x000100, "Wrong size on UDMPhysicalAnimationComponent");
static_assert(offsetof(UDMPhysicalAnimationComponent, SkeletalMeshComponent) == 0x0000A8, "Member 'UDMPhysicalAnimationComponent::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(UDMPhysicalAnimationComponent, StrengthMultiplyer) == 0x0000E8, "Member 'UDMPhysicalAnimationComponent::StrengthMultiplyer' has a wrong offset!");
static_assert(offsetof(UDMPhysicalAnimationComponent, bUseAggregateTick) == 0x0000EC, "Member 'UDMPhysicalAnimationComponent::bUseAggregateTick' has a wrong offset!");
static_assert(offsetof(UDMPhysicalAnimationComponent, bUseSkelMeshAggrTickPrerequisite) == 0x0000ED, "Member 'UDMPhysicalAnimationComponent::bUseSkelMeshAggrTickPrerequisite' has a wrong offset!");
static_assert(offsetof(UDMPhysicalAnimationComponent, bLockFree) == 0x0000EE, "Member 'UDMPhysicalAnimationComponent::bLockFree' has a wrong offset!");

// Class DMUtilities.DMPhysicsVolume
// 0x0060 (0x0308 - 0x02A8)
class ADMPhysicsVolume : public AActor
{
public:
	class UDMAnyShapeComponent*                   ShapeComponent;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B0[0x50];                                     // 0x02B0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDrawDebug;                                        // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class AActor*> GetOverlappingActorsArray() const;
	class UDMAnyShapeComponent* GetShapeComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMPhysicsVolume">();
	}
	static class ADMPhysicsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADMPhysicsVolume>();
	}
};
static_assert(alignof(ADMPhysicsVolume) == 0x000008, "Wrong alignment on ADMPhysicsVolume");
static_assert(sizeof(ADMPhysicsVolume) == 0x000308, "Wrong size on ADMPhysicsVolume");
static_assert(offsetof(ADMPhysicsVolume, ShapeComponent) == 0x0002A8, "Member 'ADMPhysicsVolume::ShapeComponent' has a wrong offset!");
static_assert(offsetof(ADMPhysicsVolume, bDrawDebug) == 0x000300, "Member 'ADMPhysicsVolume::bDrawDebug' has a wrong offset!");

// Class DMUtilities.DMPhysicsVolumeInterface
// 0x0000 (0x0000 - 0x0000)
class IDMPhysicsVolumeInterface final
{
public:
	void OnEnterPhysicsVolume(class ADMPhysicsVolume* PhysicsVolume);
	void OnExitPhysicsVolume(class ADMPhysicsVolume* PhysicsVolume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMPhysicsVolumeInterface">();
	}
	static class IDMPhysicsVolumeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDMPhysicsVolumeInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IDMPhysicsVolumeInterface) == 0x000001, "Wrong alignment on IDMPhysicsVolumeInterface");
static_assert(sizeof(IDMPhysicsVolumeInterface) == 0x000001, "Wrong size on IDMPhysicsVolumeInterface");

// Class DMUtilities.DMPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMPlatformLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FName GetPlatformName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMPlatformLibrary">();
	}
	static class UDMPlatformLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMPlatformLibrary>();
	}
};
static_assert(alignof(UDMPlatformLibrary) == 0x000008, "Wrong alignment on UDMPlatformLibrary");
static_assert(sizeof(UDMPlatformLibrary) == 0x000028, "Wrong size on UDMPlatformLibrary");

// Class DMUtilities.DMRocketThrusterComponent
// 0x0070 (0x0570 - 0x0500)
class UDMRocketThrusterComponent final : public UArrowComponent
{
public:
	float                                         RocketForce;                                       // 0x0500(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             BoostSound;                                        // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        BoostParticleSystem;                               // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ParticleEffectOffset;                              // 0x0518(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ParticleEffectRotationOffset;                      // 0x0530(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ParticleEffectScale;                               // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x054C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_550[0x20];                                     // 0x0550(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Server_SetThrottle(float newThrottle);
	void SetThrottle(float newThrottle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMRocketThrusterComponent">();
	}
	static class UDMRocketThrusterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMRocketThrusterComponent>();
	}
};
static_assert(alignof(UDMRocketThrusterComponent) == 0x000010, "Wrong alignment on UDMRocketThrusterComponent");
static_assert(sizeof(UDMRocketThrusterComponent) == 0x000570, "Wrong size on UDMRocketThrusterComponent");
static_assert(offsetof(UDMRocketThrusterComponent, RocketForce) == 0x000500, "Member 'UDMRocketThrusterComponent::RocketForce' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, BoostSound) == 0x000508, "Member 'UDMRocketThrusterComponent::BoostSound' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, BoostParticleSystem) == 0x000510, "Member 'UDMRocketThrusterComponent::BoostParticleSystem' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, ParticleEffectOffset) == 0x000518, "Member 'UDMRocketThrusterComponent::ParticleEffectOffset' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, ParticleEffectRotationOffset) == 0x000530, "Member 'UDMRocketThrusterComponent::ParticleEffectRotationOffset' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, ParticleEffectScale) == 0x000548, "Member 'UDMRocketThrusterComponent::ParticleEffectScale' has a wrong offset!");
static_assert(offsetof(UDMRocketThrusterComponent, Throttle) == 0x00054C, "Member 'UDMRocketThrusterComponent::Throttle' has a wrong offset!");

// Class DMUtilities.DMStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMStringLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString KeyToString(const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMStringLibrary">();
	}
	static class UDMStringLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMStringLibrary>();
	}
};
static_assert(alignof(UDMStringLibrary) == 0x000008, "Wrong alignment on UDMStringLibrary");
static_assert(sizeof(UDMStringLibrary) == 0x000028, "Wrong size on UDMStringLibrary");

// Class DMUtilities.DMSynchronizedClockComponent
// 0x0020 (0x00C0 - 0x00A0)
class UDMSynchronizedClockComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientUpdateTime(float clientTime, float serverTime);
	void ServerRequestTime(float currentClientTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMSynchronizedClockComponent">();
	}
	static class UDMSynchronizedClockComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMSynchronizedClockComponent>();
	}
};
static_assert(alignof(UDMSynchronizedClockComponent) == 0x000008, "Wrong alignment on UDMSynchronizedClockComponent");
static_assert(sizeof(UDMSynchronizedClockComponent) == 0x0000C0, "Wrong size on UDMSynchronizedClockComponent");

// Class DMUtilities.DMSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UDMSystemLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearAndInvalidateTimerByDelegate(TDelegate<void()> Event);
	static bool IsObjectASoftClass(class UObject* Object, TSoftClassPtr<class UClass> SoftClass);
	static bool IsObjectChildOfSoftClass(class UObject* Object, TSoftClassPtr<class UClass> SoftClass);
	static class UClass* LoadSoftClassSynchronous(TSoftClassPtr<class UClass> SoftClass);
	static class UObject* LoadSoftObjectSynchronous(TSoftObjectPtr<class UObject> SoftObject);
	static TSoftClassPtr<class UClass> MakeLiteralSoftClass(TSoftClassPtr<class UClass> SoftClass);
	static TSoftObjectPtr<class UObject> MakeLiteralSoftObject(TSoftObjectPtr<class UObject> SoftObject);
	static struct FTimerHandle SetOneOffTimer(TDelegate<void()> Delegate, float Time, bool bLooping);
	static void SetOneOffTimerWithId(TDelegate<void(const struct FGuid& ID)> Delegate, float Time, bool bLooping, struct FTimerHandle* TimerHandle, struct FGuid* TimerId);
	static void SetTimerForNextTick(TDelegate<void()> Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMSystemLibrary">();
	}
	static class UDMSystemLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMSystemLibrary>();
	}
};
static_assert(alignof(UDMSystemLibrary) == 0x000008, "Wrong alignment on UDMSystemLibrary");
static_assert(sizeof(UDMSystemLibrary) == 0x000028, "Wrong size on UDMSystemLibrary");

// Class DMUtilities.DMWaterVolume
// 0x0030 (0x0338 - 0x0308)
class ADMWaterVolume final : public ADMPhysicsVolume
{
public:
	class UArrowComponent*                        ArrowComponent;                                    // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WaterDensity;                                      // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WaterDensity_Drag;                                 // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FlowDirection;                                     // 0x0318(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlowMagnitude;                                     // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMWaterVolume">();
	}
	static class ADMWaterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADMWaterVolume>();
	}
};
static_assert(alignof(ADMWaterVolume) == 0x000008, "Wrong alignment on ADMWaterVolume");
static_assert(sizeof(ADMWaterVolume) == 0x000338, "Wrong size on ADMWaterVolume");
static_assert(offsetof(ADMWaterVolume, ArrowComponent) == 0x000308, "Member 'ADMWaterVolume::ArrowComponent' has a wrong offset!");
static_assert(offsetof(ADMWaterVolume, WaterDensity) == 0x000310, "Member 'ADMWaterVolume::WaterDensity' has a wrong offset!");
static_assert(offsetof(ADMWaterVolume, WaterDensity_Drag) == 0x000314, "Member 'ADMWaterVolume::WaterDensity_Drag' has a wrong offset!");
static_assert(offsetof(ADMWaterVolume, FlowDirection) == 0x000318, "Member 'ADMWaterVolume::FlowDirection' has a wrong offset!");
static_assert(offsetof(ADMWaterVolume, FlowMagnitude) == 0x000330, "Member 'ADMWaterVolume::FlowMagnitude' has a wrong offset!");

// Class DMUtilities.DMWheelComponent
// 0x04D0 (0x09C0 - 0x04F0)
class UDMWheelComponent final : public UPrimitiveComponent
{
public:
	bool                                          bApplyForceOnImpact;                               // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyForceOnRootComponent;                        // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EA[0x6];                                      // 0x04EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ImpactAngleForceCurve;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweepAsync;                                       // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F9[0x3];                                      // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SweepFrequency;                                    // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticForwardFrictionCOF;                          // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicForwardFrictionCOF;                         // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticSidewaysFrictionCOF;                         // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicSidewaysFrictionCOF;                        // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicFrictionThreshold;                          // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringLength;                                      // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringConstant;                                    // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDampingConstant;                             // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringCompression;                                 // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCompressionForcePercentage;                     // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySpringAtCOM;                                 // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMass;                                       // 0x0529(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighFidelityMass;                              // 0x052A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelShape                                   WheelShape;                                        // 0x052B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x052C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxHalfExtent;                                     // 0x0530(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0548(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x054C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            WheelMeshCollision;                                // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAggregateTick;                                 // 0x0558(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0559(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldCollideWhenPlacing : 1;                     // 0x055A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_55B[0x1];                                      // 0x055B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 WheelColor;                                        // 0x055C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SpringColor;                                       // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDynamicObstacle : 1;                              // 0x0564(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               AreaClass;                                         // 0x0568(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                             ShapeBodySetup;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_578[0x430];                                    // 0x0578(0x0430)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeWheelSocketLocation;                       // 0x09A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FDMWheelContact GetLastWheelContact() const;
	struct FDMWheelContact GetWheelContact(bool* bSuccess) const;
	bool TouchesGround() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMWheelComponent">();
	}
	static class UDMWheelComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMWheelComponent>();
	}
};
static_assert(alignof(UDMWheelComponent) == 0x000010, "Wrong alignment on UDMWheelComponent");
static_assert(sizeof(UDMWheelComponent) == 0x0009C0, "Wrong size on UDMWheelComponent");
static_assert(offsetof(UDMWheelComponent, bApplyForceOnImpact) == 0x0004E8, "Member 'UDMWheelComponent::bApplyForceOnImpact' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bApplyForceOnRootComponent) == 0x0004E9, "Member 'UDMWheelComponent::bApplyForceOnRootComponent' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, ImpactAngleForceCurve) == 0x0004F0, "Member 'UDMWheelComponent::ImpactAngleForceCurve' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bSweepAsync) == 0x0004F8, "Member 'UDMWheelComponent::bSweepAsync' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SweepFrequency) == 0x0004FC, "Member 'UDMWheelComponent::SweepFrequency' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, StaticForwardFrictionCOF) == 0x000500, "Member 'UDMWheelComponent::StaticForwardFrictionCOF' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, DynamicForwardFrictionCOF) == 0x000504, "Member 'UDMWheelComponent::DynamicForwardFrictionCOF' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, StaticSidewaysFrictionCOF) == 0x000508, "Member 'UDMWheelComponent::StaticSidewaysFrictionCOF' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, DynamicSidewaysFrictionCOF) == 0x00050C, "Member 'UDMWheelComponent::DynamicSidewaysFrictionCOF' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, DynamicFrictionThreshold) == 0x000510, "Member 'UDMWheelComponent::DynamicFrictionThreshold' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SpringLength) == 0x000514, "Member 'UDMWheelComponent::SpringLength' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SpringConstant) == 0x000518, "Member 'UDMWheelComponent::SpringConstant' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SpringDampingConstant) == 0x00051C, "Member 'UDMWheelComponent::SpringDampingConstant' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SpringCompression) == 0x000520, "Member 'UDMWheelComponent::SpringCompression' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, MaxCompressionForcePercentage) == 0x000524, "Member 'UDMWheelComponent::MaxCompressionForcePercentage' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bApplySpringAtCOM) == 0x000528, "Member 'UDMWheelComponent::bApplySpringAtCOM' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bIgnoreMass) == 0x000529, "Member 'UDMWheelComponent::bIgnoreMass' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bUseHighFidelityMass) == 0x00052A, "Member 'UDMWheelComponent::bUseHighFidelityMass' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, WheelShape) == 0x00052B, "Member 'UDMWheelComponent::WheelShape' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SphereRadius) == 0x00052C, "Member 'UDMWheelComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, BoxHalfExtent) == 0x000530, "Member 'UDMWheelComponent::BoxHalfExtent' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, CapsuleRadius) == 0x000548, "Member 'UDMWheelComponent::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, CapsuleHalfHeight) == 0x00054C, "Member 'UDMWheelComponent::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, WheelMeshCollision) == 0x000550, "Member 'UDMWheelComponent::WheelMeshCollision' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bUseAggregateTick) == 0x000558, "Member 'UDMWheelComponent::bUseAggregateTick' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, bDebug) == 0x000559, "Member 'UDMWheelComponent::bDebug' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, WheelColor) == 0x00055C, "Member 'UDMWheelComponent::WheelColor' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, SpringColor) == 0x000560, "Member 'UDMWheelComponent::SpringColor' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, AreaClass) == 0x000568, "Member 'UDMWheelComponent::AreaClass' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, ShapeBodySetup) == 0x000570, "Member 'UDMWheelComponent::ShapeBodySetup' has a wrong offset!");
static_assert(offsetof(UDMWheelComponent, RelativeWheelSocketLocation) == 0x0009A8, "Member 'UDMWheelComponent::RelativeWheelSocketLocation' has a wrong offset!");

// Class DMUtilities.DMWindVolume
// 0x0018 (0x0320 - 0x0308)
class ADMWindVolume final : public ADMPhysicsVolume
{
public:
	class UArrowComponent*                        WindSourceComponent;                               // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WindSpeed;                                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNoDropOff;                                        // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuction;                                          // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUniformFlow;                                      // 0x0316(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_317[0x9];                                      // 0x0317(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMWindVolume">();
	}
	static class ADMWindVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADMWindVolume>();
	}
};
static_assert(alignof(ADMWindVolume) == 0x000008, "Wrong alignment on ADMWindVolume");
static_assert(sizeof(ADMWindVolume) == 0x000320, "Wrong size on ADMWindVolume");
static_assert(offsetof(ADMWindVolume, WindSourceComponent) == 0x000308, "Member 'ADMWindVolume::WindSourceComponent' has a wrong offset!");
static_assert(offsetof(ADMWindVolume, WindSpeed) == 0x000310, "Member 'ADMWindVolume::WindSpeed' has a wrong offset!");
static_assert(offsetof(ADMWindVolume, bNoDropOff) == 0x000314, "Member 'ADMWindVolume::bNoDropOff' has a wrong offset!");
static_assert(offsetof(ADMWindVolume, bSuction) == 0x000315, "Member 'ADMWindVolume::bSuction' has a wrong offset!");
static_assert(offsetof(ADMWindVolume, bUniformFlow) == 0x000316, "Member 'ADMWindVolume::bUniformFlow' has a wrong offset!");

// Class DMUtilities.DMWingComponent
// 0x0020 (0x0250 - 0x0230)
class UDMWingComponent final : public USceneComponent
{
public:
	float                                         LiftConstant;                                      // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebug;                                        // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x1B];                                     // 0x0235(0x001B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DMWingComponent">();
	}
	static class UDMWingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDMWingComponent>();
	}
};
static_assert(alignof(UDMWingComponent) == 0x000010, "Wrong alignment on UDMWingComponent");
static_assert(sizeof(UDMWingComponent) == 0x000250, "Wrong size on UDMWingComponent");
static_assert(offsetof(UDMWingComponent, LiftConstant) == 0x000230, "Member 'UDMWingComponent::LiftConstant' has a wrong offset!");
static_assert(offsetof(UDMWingComponent, bDrawDebug) == 0x000234, "Member 'UDMWingComponent::bDrawDebug' has a wrong offset!");

}

