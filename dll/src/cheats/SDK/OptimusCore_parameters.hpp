#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OptimusCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OptimusCore_structs.hpp"


namespace SDK::Params
{

// Function OptimusCore.OptimusNode.SetGraphPosition
// 0x0018 (0x0018 - 0x0000)
struct OptimusNode_SetGraphPosition final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNode_SetGraphPosition) == 0x000008, "Wrong alignment on OptimusNode_SetGraphPosition");
static_assert(sizeof(OptimusNode_SetGraphPosition) == 0x000018, "Wrong size on OptimusNode_SetGraphPosition");
static_assert(offsetof(OptimusNode_SetGraphPosition, InPosition) == 0x000000, "Member 'OptimusNode_SetGraphPosition::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNode_SetGraphPosition, ReturnValue) == 0x000010, "Member 'OptimusNode_SetGraphPosition::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNode.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct OptimusNode_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNode_GetDisplayName) == 0x000008, "Wrong alignment on OptimusNode_GetDisplayName");
static_assert(sizeof(OptimusNode_GetDisplayName) == 0x000010, "Wrong size on OptimusNode_GetDisplayName");
static_assert(offsetof(OptimusNode_GetDisplayName, ReturnValue) == 0x000000, "Member 'OptimusNode_GetDisplayName::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNode.GetGraphPosition
// 0x0010 (0x0010 - 0x0000)
struct OptimusNode_GetGraphPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNode_GetGraphPosition) == 0x000008, "Wrong alignment on OptimusNode_GetGraphPosition");
static_assert(sizeof(OptimusNode_GetGraphPosition) == 0x000010, "Wrong size on OptimusNode_GetGraphPosition");
static_assert(offsetof(OptimusNode_GetGraphPosition, ReturnValue) == 0x000000, "Member 'OptimusNode_GetGraphPosition::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNode.GetNodeCategory
// 0x0008 (0x0008 - 0x0000)
struct OptimusNode_GetNodeCategory final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNode_GetNodeCategory) == 0x000004, "Wrong alignment on OptimusNode_GetNodeCategory");
static_assert(sizeof(OptimusNode_GetNodeCategory) == 0x000008, "Wrong size on OptimusNode_GetNodeCategory");
static_assert(offsetof(OptimusNode_GetNodeCategory, ReturnValue) == 0x000000, "Member 'OptimusNode_GetNodeCategory::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNode.GetNodeName
// 0x0008 (0x0008 - 0x0000)
struct OptimusNode_GetNodeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNode_GetNodeName) == 0x000004, "Wrong alignment on OptimusNode_GetNodeName");
static_assert(sizeof(OptimusNode_GetNodeName) == 0x000008, "Wrong size on OptimusNode_GetNodeName");
static_assert(offsetof(OptimusNode_GetNodeName, ReturnValue) == 0x000000, "Member 'OptimusNode_GetNodeName::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformer.GetComponentBindings
// 0x0010 (0x0010 - 0x0000)
struct OptimusDeformer_GetComponentBindings final
{
public:
	TArray<class UOptimusComponentSourceBinding*> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusDeformer_GetComponentBindings) == 0x000008, "Wrong alignment on OptimusDeformer_GetComponentBindings");
static_assert(sizeof(OptimusDeformer_GetComponentBindings) == 0x000010, "Wrong size on OptimusDeformer_GetComponentBindings");
static_assert(offsetof(OptimusDeformer_GetComponentBindings, ReturnValue) == 0x000000, "Member 'OptimusDeformer_GetComponentBindings::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformer.GetPrimaryComponentBinding
// 0x0008 (0x0008 - 0x0000)
struct OptimusDeformer_GetPrimaryComponentBinding final
{
public:
	class UOptimusComponentSourceBinding*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusDeformer_GetPrimaryComponentBinding) == 0x000008, "Wrong alignment on OptimusDeformer_GetPrimaryComponentBinding");
static_assert(sizeof(OptimusDeformer_GetPrimaryComponentBinding) == 0x000008, "Wrong size on OptimusDeformer_GetPrimaryComponentBinding");
static_assert(offsetof(OptimusDeformer_GetPrimaryComponentBinding, ReturnValue) == 0x000000, "Member 'OptimusDeformer_GetPrimaryComponentBinding::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformer.GetResources
// 0x0010 (0x0010 - 0x0000)
struct OptimusDeformer_GetResources final
{
public:
	TArray<class UOptimusResourceDescription*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusDeformer_GetResources) == 0x000008, "Wrong alignment on OptimusDeformer_GetResources");
static_assert(sizeof(OptimusDeformer_GetResources) == 0x000010, "Wrong size on OptimusDeformer_GetResources");
static_assert(offsetof(OptimusDeformer_GetResources, ReturnValue) == 0x000000, "Member 'OptimusDeformer_GetResources::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformer.GetVariables
// 0x0010 (0x0010 - 0x0000)
struct OptimusDeformer_GetVariables final
{
public:
	TArray<class UOptimusVariableDescription*>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusDeformer_GetVariables) == 0x000008, "Wrong alignment on OptimusDeformer_GetVariables");
static_assert(sizeof(OptimusDeformer_GetVariables) == 0x000010, "Wrong size on OptimusDeformer_GetVariables");
static_assert(offsetof(OptimusDeformer_GetVariables, ReturnValue) == 0x000000, "Member 'OptimusDeformer_GetVariables::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.EnqueueTriggerGraph
// 0x000C (0x000C - 0x0000)
struct OptimusDeformerInstance_EnqueueTriggerGraph final
{
public:
	class FName                                   InTriggerGraphName;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_EnqueueTriggerGraph) == 0x000004, "Wrong alignment on OptimusDeformerInstance_EnqueueTriggerGraph");
static_assert(sizeof(OptimusDeformerInstance_EnqueueTriggerGraph) == 0x00000C, "Wrong size on OptimusDeformerInstance_EnqueueTriggerGraph");
static_assert(offsetof(OptimusDeformerInstance_EnqueueTriggerGraph, InTriggerGraphName) == 0x000000, "Member 'OptimusDeformerInstance_EnqueueTriggerGraph::InTriggerGraphName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_EnqueueTriggerGraph, ReturnValue) == 0x000008, "Member 'OptimusDeformerInstance_EnqueueTriggerGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetBoolArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetBoolArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetBoolArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetBoolArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetBoolArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetBoolArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetBoolArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetBoolArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetBoolArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetBoolArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetBoolArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetBoolArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetBoolVariable
// 0x000C (0x000C - 0x0000)
struct OptimusDeformerInstance_SetBoolVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetBoolVariable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetBoolVariable");
static_assert(sizeof(OptimusDeformerInstance_SetBoolVariable) == 0x00000C, "Wrong size on OptimusDeformerInstance_SetBoolVariable");
static_assert(offsetof(OptimusDeformerInstance_SetBoolVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetBoolVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetBoolVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetBoolVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetBoolVariable, ReturnValue) == 0x000009, "Member 'OptimusDeformerInstance_SetBoolVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetFloatArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetFloatArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<double>                                InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetFloatArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetFloatArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetFloatArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetFloatArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetFloatArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetFloatArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetFloatArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetFloatArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetFloatArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetFloatArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetFloatVariable
// 0x0018 (0x0018 - 0x0000)
struct OptimusDeformerInstance_SetFloatVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InValue;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetFloatVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetFloatVariable");
static_assert(sizeof(OptimusDeformerInstance_SetFloatVariable) == 0x000018, "Wrong size on OptimusDeformerInstance_SetFloatVariable");
static_assert(offsetof(OptimusDeformerInstance_SetFloatVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetFloatVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetFloatVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetFloatVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetFloatVariable, ReturnValue) == 0x000010, "Member 'OptimusDeformerInstance_SetFloatVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt2ArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetInt2ArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntPoint>                      InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt2ArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetInt2ArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetInt2ArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetInt2ArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetInt2ArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt2ArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt2ArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt2ArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt2ArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetInt2ArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt2Variable
// 0x0014 (0x0014 - 0x0000)
struct OptimusDeformerInstance_SetInt2Variable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              InValue;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt2Variable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetInt2Variable");
static_assert(sizeof(OptimusDeformerInstance_SetInt2Variable) == 0x000014, "Wrong size on OptimusDeformerInstance_SetInt2Variable");
static_assert(offsetof(OptimusDeformerInstance_SetInt2Variable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt2Variable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt2Variable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt2Variable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt2Variable, ReturnValue) == 0x000010, "Member 'OptimusDeformerInstance_SetInt2Variable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt3ArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetInt3ArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector>                     InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt3ArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetInt3ArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetInt3ArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetInt3ArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetInt3ArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt3ArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt3ArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt3ArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt3ArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetInt3ArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt3Variable
// 0x0018 (0x0018 - 0x0000)
struct OptimusDeformerInstance_SetInt3Variable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             InValue;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt3Variable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetInt3Variable");
static_assert(sizeof(OptimusDeformerInstance_SetInt3Variable) == 0x000018, "Wrong size on OptimusDeformerInstance_SetInt3Variable");
static_assert(offsetof(OptimusDeformerInstance_SetInt3Variable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt3Variable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt3Variable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt3Variable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt3Variable, ReturnValue) == 0x000014, "Member 'OptimusDeformerInstance_SetInt3Variable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt4ArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetInt4ArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntVector4>                    InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt4ArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetInt4ArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetInt4ArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetInt4ArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetInt4ArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt4ArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt4ArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt4ArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt4ArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetInt4ArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetInt4Variable
// 0x001C (0x001C - 0x0000)
struct OptimusDeformerInstance_SetInt4Variable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector4                            InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetInt4Variable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetInt4Variable");
static_assert(sizeof(OptimusDeformerInstance_SetInt4Variable) == 0x00001C, "Wrong size on OptimusDeformerInstance_SetInt4Variable");
static_assert(offsetof(OptimusDeformerInstance_SetInt4Variable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetInt4Variable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt4Variable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetInt4Variable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetInt4Variable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetInt4Variable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetIntArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetIntArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetIntArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetIntArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetIntArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetIntArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetIntArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetIntArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetIntArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetIntArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetIntArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetIntArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetIntVariable
// 0x0010 (0x0010 - 0x0000)
struct OptimusDeformerInstance_SetIntVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetIntVariable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetIntVariable");
static_assert(sizeof(OptimusDeformerInstance_SetIntVariable) == 0x000010, "Wrong size on OptimusDeformerInstance_SetIntVariable");
static_assert(offsetof(OptimusDeformerInstance_SetIntVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetIntVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetIntVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetIntVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetIntVariable, ReturnValue) == 0x00000C, "Member 'OptimusDeformerInstance_SetIntVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetLinearColorArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetLinearColorArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetLinearColorArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetLinearColorArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetLinearColorArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetLinearColorArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetLinearColorArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetLinearColorArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetLinearColorArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetLinearColorVariable
// 0x001C (0x001C - 0x0000)
struct OptimusDeformerInstance_SetLinearColorVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetLinearColorVariable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetLinearColorVariable");
static_assert(sizeof(OptimusDeformerInstance_SetLinearColorVariable) == 0x00001C, "Wrong size on OptimusDeformerInstance_SetLinearColorVariable");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetLinearColorVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetLinearColorVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetLinearColorVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetLinearColorVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetNameArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetNameArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetNameArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetNameArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetNameArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetNameArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetNameArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetNameArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetNameArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetNameArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetNameArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetNameArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetNameVariable
// 0x0014 (0x0014 - 0x0000)
struct OptimusDeformerInstance_SetNameVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InValue;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetNameVariable) == 0x000004, "Wrong alignment on OptimusDeformerInstance_SetNameVariable");
static_assert(sizeof(OptimusDeformerInstance_SetNameVariable) == 0x000014, "Wrong size on OptimusDeformerInstance_SetNameVariable");
static_assert(offsetof(OptimusDeformerInstance_SetNameVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetNameVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetNameVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetNameVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetNameVariable, ReturnValue) == 0x000010, "Member 'OptimusDeformerInstance_SetNameVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetQuatArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetQuatArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetQuatArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetQuatArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetQuatArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetQuatArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetQuatArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetQuatArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetQuatArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetQuatArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetQuatArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetQuatArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetQuatVariable
// 0x0040 (0x0040 - 0x0000)
struct OptimusDeformerInstance_SetQuatVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  InValue;                                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetQuatVariable) == 0x000010, "Wrong alignment on OptimusDeformerInstance_SetQuatVariable");
static_assert(sizeof(OptimusDeformerInstance_SetQuatVariable) == 0x000040, "Wrong size on OptimusDeformerInstance_SetQuatVariable");
static_assert(offsetof(OptimusDeformerInstance_SetQuatVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetQuatVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetQuatVariable, InValue) == 0x000010, "Member 'OptimusDeformerInstance_SetQuatVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetQuatVariable, ReturnValue) == 0x000030, "Member 'OptimusDeformerInstance_SetQuatVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetRotatorArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetRotatorArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetRotatorArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetRotatorArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetRotatorArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetRotatorArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetRotatorArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetRotatorArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetRotatorArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetRotatorVariable
// 0x0028 (0x0028 - 0x0000)
struct OptimusDeformerInstance_SetRotatorVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InValue;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetRotatorVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetRotatorVariable");
static_assert(sizeof(OptimusDeformerInstance_SetRotatorVariable) == 0x000028, "Wrong size on OptimusDeformerInstance_SetRotatorVariable");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetRotatorVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetRotatorVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetRotatorVariable, ReturnValue) == 0x000020, "Member 'OptimusDeformerInstance_SetRotatorVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetTransformArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetTransformArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetTransformArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetTransformArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetTransformArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetTransformArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetTransformArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetTransformArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetTransformArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetTransformArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetTransformArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetTransformArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetTransformVariable
// 0x0080 (0x0080 - 0x0000)
struct OptimusDeformerInstance_SetTransformVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InValue;                                           // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetTransformVariable) == 0x000010, "Wrong alignment on OptimusDeformerInstance_SetTransformVariable");
static_assert(sizeof(OptimusDeformerInstance_SetTransformVariable) == 0x000080, "Wrong size on OptimusDeformerInstance_SetTransformVariable");
static_assert(offsetof(OptimusDeformerInstance_SetTransformVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetTransformVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetTransformVariable, InValue) == 0x000010, "Member 'OptimusDeformerInstance_SetTransformVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetTransformVariable, ReturnValue) == 0x000070, "Member 'OptimusDeformerInstance_SetTransformVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVector2ArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetVector2ArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVector2ArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetVector2ArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetVector2ArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetVector2ArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetVector2ArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVector2ArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector2ArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetVector2ArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector2ArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetVector2ArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVector2Variable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetVector2Variable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVector2Variable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetVector2Variable");
static_assert(sizeof(OptimusDeformerInstance_SetVector2Variable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetVector2Variable");
static_assert(offsetof(OptimusDeformerInstance_SetVector2Variable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVector2Variable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector2Variable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetVector2Variable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector2Variable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetVector2Variable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVector4ArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetVector4ArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector4>                       InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVector4ArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetVector4ArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetVector4ArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetVector4ArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetVector4ArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVector4ArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector4ArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetVector4ArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector4ArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetVector4ArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVector4Variable
// 0x0040 (0x0040 - 0x0000)
struct OptimusDeformerInstance_SetVector4Variable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InValue;                                           // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVector4Variable) == 0x000010, "Wrong alignment on OptimusDeformerInstance_SetVector4Variable");
static_assert(sizeof(OptimusDeformerInstance_SetVector4Variable) == 0x000040, "Wrong size on OptimusDeformerInstance_SetVector4Variable");
static_assert(offsetof(OptimusDeformerInstance_SetVector4Variable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVector4Variable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector4Variable, InValue) == 0x000010, "Member 'OptimusDeformerInstance_SetVector4Variable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVector4Variable, ReturnValue) == 0x000030, "Member 'OptimusDeformerInstance_SetVector4Variable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVectorArrayVariable
// 0x0020 (0x0020 - 0x0000)
struct OptimusDeformerInstance_SetVectorArrayVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        InValue;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVectorArrayVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetVectorArrayVariable");
static_assert(sizeof(OptimusDeformerInstance_SetVectorArrayVariable) == 0x000020, "Wrong size on OptimusDeformerInstance_SetVectorArrayVariable");
static_assert(offsetof(OptimusDeformerInstance_SetVectorArrayVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVectorArrayVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVectorArrayVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetVectorArrayVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVectorArrayVariable, ReturnValue) == 0x000018, "Member 'OptimusDeformerInstance_SetVectorArrayVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusDeformerInstance.SetVectorVariable
// 0x0028 (0x0028 - 0x0000)
struct OptimusDeformerInstance_SetVectorVariable final
{
public:
	class FName                                   InVariableName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InValue;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusDeformerInstance_SetVectorVariable) == 0x000008, "Wrong alignment on OptimusDeformerInstance_SetVectorVariable");
static_assert(sizeof(OptimusDeformerInstance_SetVectorVariable) == 0x000028, "Wrong size on OptimusDeformerInstance_SetVectorVariable");
static_assert(offsetof(OptimusDeformerInstance_SetVectorVariable, InVariableName) == 0x000000, "Member 'OptimusDeformerInstance_SetVectorVariable::InVariableName' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVectorVariable, InValue) == 0x000008, "Member 'OptimusDeformerInstance_SetVectorVariable::InValue' has a wrong offset!");
static_assert(offsetof(OptimusDeformerInstance_SetVectorVariable, ReturnValue) == 0x000020, "Member 'OptimusDeformerInstance_SetVectorVariable::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddComponentBindingGetNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddComponentBindingGetNode final
{
public:
	class UOptimusComponentSourceBinding*         InComponentBinding;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddComponentBindingGetNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddComponentBindingGetNode");
static_assert(sizeof(OptimusNodeGraph_AddComponentBindingGetNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddComponentBindingGetNode");
static_assert(offsetof(OptimusNodeGraph_AddComponentBindingGetNode, InComponentBinding) == 0x000000, "Member 'OptimusNodeGraph_AddComponentBindingGetNode::InComponentBinding' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddComponentBindingGetNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddComponentBindingGetNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddComponentBindingGetNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddComponentBindingGetNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddDataInterfaceNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddDataInterfaceNode final
{
public:
	TSubclassOf<class UOptimusComputeDataInterface> InDataInterfaceClass;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddDataInterfaceNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddDataInterfaceNode");
static_assert(sizeof(OptimusNodeGraph_AddDataInterfaceNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddDataInterfaceNode");
static_assert(offsetof(OptimusNodeGraph_AddDataInterfaceNode, InDataInterfaceClass) == 0x000000, "Member 'OptimusNodeGraph_AddDataInterfaceNode::InDataInterfaceClass' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddDataInterfaceNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddDataInterfaceNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddDataInterfaceNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddDataInterfaceNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddFunctionReferenceNode
// 0x0040 (0x0040 - 0x0000)
struct OptimusNodeGraph_AddFunctionReferenceNode final
{
public:
	TSoftObjectPtr<class UOptimusFunctionNodeGraph> InFunctionGraph;                                 // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddFunctionReferenceNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddFunctionReferenceNode");
static_assert(sizeof(OptimusNodeGraph_AddFunctionReferenceNode) == 0x000040, "Wrong size on OptimusNodeGraph_AddFunctionReferenceNode");
static_assert(offsetof(OptimusNodeGraph_AddFunctionReferenceNode, InFunctionGraph) == 0x000000, "Member 'OptimusNodeGraph_AddFunctionReferenceNode::InFunctionGraph' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddFunctionReferenceNode, InPosition) == 0x000028, "Member 'OptimusNodeGraph_AddFunctionReferenceNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddFunctionReferenceNode, ReturnValue) == 0x000038, "Member 'OptimusNodeGraph_AddFunctionReferenceNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddLink
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_AddLink final
{
public:
	class UOptimusNodePin*                        InNodeOutputPin;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNodePin*                        InNodeInputPin;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_AddLink) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddLink");
static_assert(sizeof(OptimusNodeGraph_AddLink) == 0x000018, "Wrong size on OptimusNodeGraph_AddLink");
static_assert(offsetof(OptimusNodeGraph_AddLink, InNodeOutputPin) == 0x000000, "Member 'OptimusNodeGraph_AddLink::InNodeOutputPin' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddLink, InNodeInputPin) == 0x000008, "Member 'OptimusNodeGraph_AddLink::InNodeInputPin' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddLink, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_AddLink::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddLoopTerminalNodes
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddLoopTerminalNodes final
{
public:
	struct FVector2D                              InPosition;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UOptimusNode*>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddLoopTerminalNodes) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddLoopTerminalNodes");
static_assert(sizeof(OptimusNodeGraph_AddLoopTerminalNodes) == 0x000020, "Wrong size on OptimusNodeGraph_AddLoopTerminalNodes");
static_assert(offsetof(OptimusNodeGraph_AddLoopTerminalNodes, InPosition) == 0x000000, "Member 'OptimusNodeGraph_AddLoopTerminalNodes::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddLoopTerminalNodes, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_AddLoopTerminalNodes::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddNode final
{
public:
	TSubclassOf<class UOptimusNode>               InNodeClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddNode");
static_assert(sizeof(OptimusNodeGraph_AddNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddNode");
static_assert(offsetof(OptimusNodeGraph_AddNode, InNodeClass) == 0x000000, "Member 'OptimusNodeGraph_AddNode::InNodeClass' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddResourceGetNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddResourceGetNode final
{
public:
	class UOptimusResourceDescription*            InResourceDesc;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddResourceGetNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddResourceGetNode");
static_assert(sizeof(OptimusNodeGraph_AddResourceGetNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddResourceGetNode");
static_assert(offsetof(OptimusNodeGraph_AddResourceGetNode, InResourceDesc) == 0x000000, "Member 'OptimusNodeGraph_AddResourceGetNode::InResourceDesc' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceGetNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddResourceGetNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceGetNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddResourceGetNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddResourceNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddResourceNode final
{
public:
	class UOptimusResourceDescription*            InResourceDesc;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddResourceNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddResourceNode");
static_assert(sizeof(OptimusNodeGraph_AddResourceNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddResourceNode");
static_assert(offsetof(OptimusNodeGraph_AddResourceNode, InResourceDesc) == 0x000000, "Member 'OptimusNodeGraph_AddResourceNode::InResourceDesc' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddResourceNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddResourceNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddResourceSetNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddResourceSetNode final
{
public:
	class UOptimusResourceDescription*            InResourceDesc;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddResourceSetNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddResourceSetNode");
static_assert(sizeof(OptimusNodeGraph_AddResourceSetNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddResourceSetNode");
static_assert(offsetof(OptimusNodeGraph_AddResourceSetNode, InResourceDesc) == 0x000000, "Member 'OptimusNodeGraph_AddResourceSetNode::InResourceDesc' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceSetNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddResourceSetNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddResourceSetNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddResourceSetNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddValueNode
// 0x0048 (0x0048 - 0x0000)
struct OptimusNodeGraph_AddValueNode final
{
public:
	struct FOptimusDataTypeRef                    InDataTypeRef;                                     // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddValueNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddValueNode");
static_assert(sizeof(OptimusNodeGraph_AddValueNode) == 0x000048, "Wrong size on OptimusNodeGraph_AddValueNode");
static_assert(offsetof(OptimusNodeGraph_AddValueNode, InDataTypeRef) == 0x000000, "Member 'OptimusNodeGraph_AddValueNode::InDataTypeRef' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddValueNode, InPosition) == 0x000030, "Member 'OptimusNodeGraph_AddValueNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddValueNode, ReturnValue) == 0x000040, "Member 'OptimusNodeGraph_AddValueNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.AddVariableGetNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_AddVariableGetNode final
{
public:
	class UOptimusVariableDescription*            InVariableDesc;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_AddVariableGetNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_AddVariableGetNode");
static_assert(sizeof(OptimusNodeGraph_AddVariableGetNode) == 0x000020, "Wrong size on OptimusNodeGraph_AddVariableGetNode");
static_assert(offsetof(OptimusNodeGraph_AddVariableGetNode, InVariableDesc) == 0x000000, "Member 'OptimusNodeGraph_AddVariableGetNode::InVariableDesc' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddVariableGetNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_AddVariableGetNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_AddVariableGetNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_AddVariableGetNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.CollapseNodesToFunction
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_CollapseNodesToFunction final
{
public:
	TArray<class UOptimusNode*>                   InNodes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_CollapseNodesToFunction) == 0x000008, "Wrong alignment on OptimusNodeGraph_CollapseNodesToFunction");
static_assert(sizeof(OptimusNodeGraph_CollapseNodesToFunction) == 0x000018, "Wrong size on OptimusNodeGraph_CollapseNodesToFunction");
static_assert(offsetof(OptimusNodeGraph_CollapseNodesToFunction, InNodes) == 0x000000, "Member 'OptimusNodeGraph_CollapseNodesToFunction::InNodes' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_CollapseNodesToFunction, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_CollapseNodesToFunction::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.CollapseNodesToSubGraph
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_CollapseNodesToSubGraph final
{
public:
	TArray<class UOptimusNode*>                   InNodes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_CollapseNodesToSubGraph) == 0x000008, "Wrong alignment on OptimusNodeGraph_CollapseNodesToSubGraph");
static_assert(sizeof(OptimusNodeGraph_CollapseNodesToSubGraph) == 0x000018, "Wrong size on OptimusNodeGraph_CollapseNodesToSubGraph");
static_assert(offsetof(OptimusNodeGraph_CollapseNodesToSubGraph, InNodes) == 0x000000, "Member 'OptimusNodeGraph_CollapseNodesToSubGraph::InNodes' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_CollapseNodesToSubGraph, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_CollapseNodesToSubGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.ConvertCustomKernelToFunction
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_ConvertCustomKernelToFunction final
{
public:
	class UOptimusNode*                           InCustomKernel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_ConvertCustomKernelToFunction) == 0x000008, "Wrong alignment on OptimusNodeGraph_ConvertCustomKernelToFunction");
static_assert(sizeof(OptimusNodeGraph_ConvertCustomKernelToFunction) == 0x000010, "Wrong size on OptimusNodeGraph_ConvertCustomKernelToFunction");
static_assert(offsetof(OptimusNodeGraph_ConvertCustomKernelToFunction, InCustomKernel) == 0x000000, "Member 'OptimusNodeGraph_ConvertCustomKernelToFunction::InCustomKernel' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_ConvertCustomKernelToFunction, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_ConvertCustomKernelToFunction::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.ConvertFunctionToCustomKernel
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_ConvertFunctionToCustomKernel final
{
public:
	class UOptimusNode*                           InKernelFunction;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_ConvertFunctionToCustomKernel) == 0x000008, "Wrong alignment on OptimusNodeGraph_ConvertFunctionToCustomKernel");
static_assert(sizeof(OptimusNodeGraph_ConvertFunctionToCustomKernel) == 0x000010, "Wrong size on OptimusNodeGraph_ConvertFunctionToCustomKernel");
static_assert(offsetof(OptimusNodeGraph_ConvertFunctionToCustomKernel, InKernelFunction) == 0x000000, "Member 'OptimusNodeGraph_ConvertFunctionToCustomKernel::InKernelFunction' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_ConvertFunctionToCustomKernel, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_ConvertFunctionToCustomKernel::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.ConvertToFunction
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_ConvertToFunction final
{
public:
	class UOptimusNode*                           InSubGraphNode;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_ConvertToFunction) == 0x000008, "Wrong alignment on OptimusNodeGraph_ConvertToFunction");
static_assert(sizeof(OptimusNodeGraph_ConvertToFunction) == 0x000010, "Wrong size on OptimusNodeGraph_ConvertToFunction");
static_assert(offsetof(OptimusNodeGraph_ConvertToFunction, InSubGraphNode) == 0x000000, "Member 'OptimusNodeGraph_ConvertToFunction::InSubGraphNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_ConvertToFunction, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_ConvertToFunction::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.ConvertToSubGraph
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_ConvertToSubGraph final
{
public:
	class UOptimusNode*                           InFunctionNode;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_ConvertToSubGraph) == 0x000008, "Wrong alignment on OptimusNodeGraph_ConvertToSubGraph");
static_assert(sizeof(OptimusNodeGraph_ConvertToSubGraph) == 0x000010, "Wrong size on OptimusNodeGraph_ConvertToSubGraph");
static_assert(offsetof(OptimusNodeGraph_ConvertToSubGraph, InFunctionNode) == 0x000000, "Member 'OptimusNodeGraph_ConvertToSubGraph::InFunctionNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_ConvertToSubGraph, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_ConvertToSubGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.DuplicateNode
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_DuplicateNode final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNode*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_DuplicateNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_DuplicateNode");
static_assert(sizeof(OptimusNodeGraph_DuplicateNode) == 0x000020, "Wrong size on OptimusNodeGraph_DuplicateNode");
static_assert(offsetof(OptimusNodeGraph_DuplicateNode, InNode) == 0x000000, "Member 'OptimusNodeGraph_DuplicateNode::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_DuplicateNode, InPosition) == 0x000008, "Member 'OptimusNodeGraph_DuplicateNode::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_DuplicateNode, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_DuplicateNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.DuplicateNodes
// 0x0028 (0x0028 - 0x0000)
struct OptimusNodeGraph_DuplicateNodes final
{
public:
	TArray<class UOptimusNode*>                   InNodes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              InPosition;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_DuplicateNodes) == 0x000008, "Wrong alignment on OptimusNodeGraph_DuplicateNodes");
static_assert(sizeof(OptimusNodeGraph_DuplicateNodes) == 0x000028, "Wrong size on OptimusNodeGraph_DuplicateNodes");
static_assert(offsetof(OptimusNodeGraph_DuplicateNodes, InNodes) == 0x000000, "Member 'OptimusNodeGraph_DuplicateNodes::InNodes' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_DuplicateNodes, InPosition) == 0x000010, "Member 'OptimusNodeGraph_DuplicateNodes::InPosition' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_DuplicateNodes, ReturnValue) == 0x000020, "Member 'OptimusNodeGraph_DuplicateNodes::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.ExpandCollapsedNodes
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_ExpandCollapsedNodes final
{
public:
	class UOptimusNode*                           InGraphReferenceNode;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UOptimusNode*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_ExpandCollapsedNodes) == 0x000008, "Wrong alignment on OptimusNodeGraph_ExpandCollapsedNodes");
static_assert(sizeof(OptimusNodeGraph_ExpandCollapsedNodes) == 0x000018, "Wrong size on OptimusNodeGraph_ExpandCollapsedNodes");
static_assert(offsetof(OptimusNodeGraph_ExpandCollapsedNodes, InGraphReferenceNode) == 0x000000, "Member 'OptimusNodeGraph_ExpandCollapsedNodes::InGraphReferenceNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_ExpandCollapsedNodes, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_ExpandCollapsedNodes::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.MoveGraphDirect
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_MoveGraphDirect final
{
public:
	class UOptimusNodeGraph*                      InGraph;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InInsertBefore;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_MoveGraphDirect) == 0x000008, "Wrong alignment on OptimusNodeGraph_MoveGraphDirect");
static_assert(sizeof(OptimusNodeGraph_MoveGraphDirect) == 0x000010, "Wrong size on OptimusNodeGraph_MoveGraphDirect");
static_assert(offsetof(OptimusNodeGraph_MoveGraphDirect, InGraph) == 0x000000, "Member 'OptimusNodeGraph_MoveGraphDirect::InGraph' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_MoveGraphDirect, InInsertBefore) == 0x000008, "Member 'OptimusNodeGraph_MoveGraphDirect::InInsertBefore' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_MoveGraphDirect, ReturnValue) == 0x00000C, "Member 'OptimusNodeGraph_MoveGraphDirect::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RemoveAllLinks
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_RemoveAllLinks final
{
public:
	class UOptimusNodePin*                        InNodePin;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RemoveAllLinks) == 0x000008, "Wrong alignment on OptimusNodeGraph_RemoveAllLinks");
static_assert(sizeof(OptimusNodeGraph_RemoveAllLinks) == 0x000010, "Wrong size on OptimusNodeGraph_RemoveAllLinks");
static_assert(offsetof(OptimusNodeGraph_RemoveAllLinks, InNodePin) == 0x000000, "Member 'OptimusNodeGraph_RemoveAllLinks::InNodePin' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RemoveAllLinks, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_RemoveAllLinks::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RemoveLink
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_RemoveLink final
{
public:
	class UOptimusNodePin*                        InNodeOutputPin;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptimusNodePin*                        InNodeInputPin;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RemoveLink) == 0x000008, "Wrong alignment on OptimusNodeGraph_RemoveLink");
static_assert(sizeof(OptimusNodeGraph_RemoveLink) == 0x000018, "Wrong size on OptimusNodeGraph_RemoveLink");
static_assert(offsetof(OptimusNodeGraph_RemoveLink, InNodeOutputPin) == 0x000000, "Member 'OptimusNodeGraph_RemoveLink::InNodeOutputPin' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RemoveLink, InNodeInputPin) == 0x000008, "Member 'OptimusNodeGraph_RemoveLink::InNodeInputPin' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RemoveLink, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_RemoveLink::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RemoveNode
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_RemoveNode final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RemoveNode) == 0x000008, "Wrong alignment on OptimusNodeGraph_RemoveNode");
static_assert(sizeof(OptimusNodeGraph_RemoveNode) == 0x000010, "Wrong size on OptimusNodeGraph_RemoveNode");
static_assert(offsetof(OptimusNodeGraph_RemoveNode, InNode) == 0x000000, "Member 'OptimusNodeGraph_RemoveNode::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RemoveNode, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_RemoveNode::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RemoveNodes
// 0x0018 (0x0018 - 0x0000)
struct OptimusNodeGraph_RemoveNodes final
{
public:
	TArray<class UOptimusNode*>                   InNodes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RemoveNodes) == 0x000008, "Wrong alignment on OptimusNodeGraph_RemoveNodes");
static_assert(sizeof(OptimusNodeGraph_RemoveNodes) == 0x000018, "Wrong size on OptimusNodeGraph_RemoveNodes");
static_assert(offsetof(OptimusNodeGraph_RemoveNodes, InNodes) == 0x000000, "Member 'OptimusNodeGraph_RemoveNodes::InNodes' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RemoveNodes, ReturnValue) == 0x000010, "Member 'OptimusNodeGraph_RemoveNodes::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RenameGraph
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_RenameGraph final
{
public:
	class UOptimusNodeGraph*                      InGraph;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InNewName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RenameGraph) == 0x000008, "Wrong alignment on OptimusNodeGraph_RenameGraph");
static_assert(sizeof(OptimusNodeGraph_RenameGraph) == 0x000020, "Wrong size on OptimusNodeGraph_RenameGraph");
static_assert(offsetof(OptimusNodeGraph_RenameGraph, InGraph) == 0x000000, "Member 'OptimusNodeGraph_RenameGraph::InGraph' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RenameGraph, InNewName) == 0x000008, "Member 'OptimusNodeGraph_RenameGraph::InNewName' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RenameGraph, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_RenameGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.RenameGraphDirect
// 0x0020 (0x0020 - 0x0000)
struct OptimusNodeGraph_RenameGraphDirect final
{
public:
	class UOptimusNodeGraph*                      InGraph;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InNewName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_RenameGraphDirect) == 0x000008, "Wrong alignment on OptimusNodeGraph_RenameGraphDirect");
static_assert(sizeof(OptimusNodeGraph_RenameGraphDirect) == 0x000020, "Wrong size on OptimusNodeGraph_RenameGraphDirect");
static_assert(offsetof(OptimusNodeGraph_RenameGraphDirect, InGraph) == 0x000000, "Member 'OptimusNodeGraph_RenameGraphDirect::InGraph' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RenameGraphDirect, InNewName) == 0x000008, "Member 'OptimusNodeGraph_RenameGraphDirect::InNewName' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_RenameGraphDirect, ReturnValue) == 0x000018, "Member 'OptimusNodeGraph_RenameGraphDirect::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.GetGraphIndex
// 0x0004 (0x0004 - 0x0000)
struct OptimusNodeGraph_GetGraphIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_GetGraphIndex) == 0x000004, "Wrong alignment on OptimusNodeGraph_GetGraphIndex");
static_assert(sizeof(OptimusNodeGraph_GetGraphIndex) == 0x000004, "Wrong size on OptimusNodeGraph_GetGraphIndex");
static_assert(offsetof(OptimusNodeGraph_GetGraphIndex, ReturnValue) == 0x000000, "Member 'OptimusNodeGraph_GetGraphIndex::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.GetGraphs
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_GetGraphs final
{
public:
	TArray<class UOptimusNodeGraph*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_GetGraphs) == 0x000008, "Wrong alignment on OptimusNodeGraph_GetGraphs");
static_assert(sizeof(OptimusNodeGraph_GetGraphs) == 0x000010, "Wrong size on OptimusNodeGraph_GetGraphs");
static_assert(offsetof(OptimusNodeGraph_GetGraphs, ReturnValue) == 0x000000, "Member 'OptimusNodeGraph_GetGraphs::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.GetGraphType
// 0x0004 (0x0004 - 0x0000)
struct OptimusNodeGraph_GetGraphType final
{
public:
	EOptimusNodeGraphType                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_GetGraphType) == 0x000004, "Wrong alignment on OptimusNodeGraph_GetGraphType");
static_assert(sizeof(OptimusNodeGraph_GetGraphType) == 0x000004, "Wrong size on OptimusNodeGraph_GetGraphType");
static_assert(offsetof(OptimusNodeGraph_GetGraphType, ReturnValue) == 0x000000, "Member 'OptimusNodeGraph_GetGraphType::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsCustomKernel
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_IsCustomKernel final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_IsCustomKernel) == 0x000008, "Wrong alignment on OptimusNodeGraph_IsCustomKernel");
static_assert(sizeof(OptimusNodeGraph_IsCustomKernel) == 0x000010, "Wrong size on OptimusNodeGraph_IsCustomKernel");
static_assert(offsetof(OptimusNodeGraph_IsCustomKernel, InNode) == 0x000000, "Member 'OptimusNodeGraph_IsCustomKernel::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_IsCustomKernel, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_IsCustomKernel::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsExecutionGraph
// 0x0001 (0x0001 - 0x0000)
struct OptimusNodeGraph_IsExecutionGraph final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_IsExecutionGraph) == 0x000001, "Wrong alignment on OptimusNodeGraph_IsExecutionGraph");
static_assert(sizeof(OptimusNodeGraph_IsExecutionGraph) == 0x000001, "Wrong size on OptimusNodeGraph_IsExecutionGraph");
static_assert(offsetof(OptimusNodeGraph_IsExecutionGraph, ReturnValue) == 0x000000, "Member 'OptimusNodeGraph_IsExecutionGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsFunctionGraph
// 0x0001 (0x0001 - 0x0000)
struct OptimusNodeGraph_IsFunctionGraph final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusNodeGraph_IsFunctionGraph) == 0x000001, "Wrong alignment on OptimusNodeGraph_IsFunctionGraph");
static_assert(sizeof(OptimusNodeGraph_IsFunctionGraph) == 0x000001, "Wrong size on OptimusNodeGraph_IsFunctionGraph");
static_assert(offsetof(OptimusNodeGraph_IsFunctionGraph, ReturnValue) == 0x000000, "Member 'OptimusNodeGraph_IsFunctionGraph::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsFunctionReference
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_IsFunctionReference final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_IsFunctionReference) == 0x000008, "Wrong alignment on OptimusNodeGraph_IsFunctionReference");
static_assert(sizeof(OptimusNodeGraph_IsFunctionReference) == 0x000010, "Wrong size on OptimusNodeGraph_IsFunctionReference");
static_assert(offsetof(OptimusNodeGraph_IsFunctionReference, InNode) == 0x000000, "Member 'OptimusNodeGraph_IsFunctionReference::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_IsFunctionReference, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_IsFunctionReference::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsKernelFunction
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_IsKernelFunction final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_IsKernelFunction) == 0x000008, "Wrong alignment on OptimusNodeGraph_IsKernelFunction");
static_assert(sizeof(OptimusNodeGraph_IsKernelFunction) == 0x000010, "Wrong size on OptimusNodeGraph_IsKernelFunction");
static_assert(offsetof(OptimusNodeGraph_IsKernelFunction, InNode) == 0x000000, "Member 'OptimusNodeGraph_IsKernelFunction::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_IsKernelFunction, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_IsKernelFunction::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusNodeGraph.IsSubGraphReference
// 0x0010 (0x0010 - 0x0000)
struct OptimusNodeGraph_IsSubGraphReference final
{
public:
	class UOptimusNode*                           InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptimusNodeGraph_IsSubGraphReference) == 0x000008, "Wrong alignment on OptimusNodeGraph_IsSubGraphReference");
static_assert(sizeof(OptimusNodeGraph_IsSubGraphReference) == 0x000010, "Wrong size on OptimusNodeGraph_IsSubGraphReference");
static_assert(offsetof(OptimusNodeGraph_IsSubGraphReference, InNode) == 0x000000, "Member 'OptimusNodeGraph_IsSubGraphReference::InNode' has a wrong offset!");
static_assert(offsetof(OptimusNodeGraph_IsSubGraphReference, ReturnValue) == 0x000008, "Member 'OptimusNodeGraph_IsSubGraphReference::ReturnValue' has a wrong offset!");

// Function OptimusCore.OptimusFunctionNodeGraph.GetAccessSpecifierOptions
// 0x0010 (0x0010 - 0x0000)
struct OptimusFunctionNodeGraph_GetAccessSpecifierOptions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptimusFunctionNodeGraph_GetAccessSpecifierOptions) == 0x000008, "Wrong alignment on OptimusFunctionNodeGraph_GetAccessSpecifierOptions");
static_assert(sizeof(OptimusFunctionNodeGraph_GetAccessSpecifierOptions) == 0x000010, "Wrong size on OptimusFunctionNodeGraph_GetAccessSpecifierOptions");
static_assert(offsetof(OptimusFunctionNodeGraph_GetAccessSpecifierOptions, ReturnValue) == 0x000000, "Member 'OptimusFunctionNodeGraph_GetAccessSpecifierOptions::ReturnValue' has a wrong offset!");

}

