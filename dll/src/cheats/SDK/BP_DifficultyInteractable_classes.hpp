#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DifficultyInteractable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DifficultyInteractable.BP_DifficultyInteractable_C
// 0x00B0 (0x0360 - 0x02B0)
class ABP_DifficultyInteractable_C final : public ARDifficultyTree
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_InteractableIndicator_C*           BPC_InteractableIndicator;                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Interactable_Difficulty_Engine_01;              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       ObjectHighlightWidgetComponent;                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         IndicatorTimeline_Alpha_3328613C4D5412C8D05037B13CEF21C9; // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            IndicatorTimeline__Direction_3328613C4D5412C8D05037B13CEF21C9; // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     IndicatorTimeline;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldShowHighlight;                               // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DMIDifficultyIndicator;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousIndicatorLevel;                            // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_DifficultyTree_C*               MenuRef;                                           // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      DifficultyTreeAssignedPoints;                      // 0x0310(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BP_OnWidgetDeactivated_Event();
	bool CanInteract(class APlayerController* Controller);
	void ExecuteUbergraph_BP_DifficultyInteractable(int32 EntryPoint);
	void GetPercentPointsAssigned(double* Percent);
	void HideHighlight();
	void IndicatorTimeline__FinishedFunc();
	void IndicatorTimeline__UpdateFunc();
	void OnFocus(class APlayerController* Controller);
	void OnFocusGone(class APlayerController* Controller);
	void OnInteract(class APlayerController* Controller);
	void OnPointsChanged_Event();
	void OnPointsChanged_Multicast(double IndicatorLevel);
	void OnWidgetActivated();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void SetupHighlight();
	void ToggleInteractionIndicatorVisibility(class AActor* InteractingActor, const bool NewVisible);
	void UpdateDifficultyIndicator(double IndicatorLevel);

	class FText GetInteractableAlternativeDescription() const;
	int32 GetInteractableCost() const;
	class FText GetInteractableCostCurrencyType() const;
	class FText GetInteractableDescription() const;
	class FText GetInteractableName() const;
	class FText GetInteractableSubHeader() const;
	class UWidgetComponent* GetInteractionIndicatorWidget() const;
	struct FLinearColor GetRadarIconColor() const;
	struct FVector2D GetRadarIconSize() const;
	class USlateBrushAsset* GetRadarObjectIcon() const;
	bool ShouldShowOnRadar() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DifficultyInteractable_C">();
	}
	static class ABP_DifficultyInteractable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DifficultyInteractable_C>();
	}
};
static_assert(alignof(ABP_DifficultyInteractable_C) == 0x000008, "Wrong alignment on ABP_DifficultyInteractable_C");
static_assert(sizeof(ABP_DifficultyInteractable_C) == 0x000360, "Wrong size on ABP_DifficultyInteractable_C");
static_assert(offsetof(ABP_DifficultyInteractable_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_DifficultyInteractable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, BPC_InteractableIndicator) == 0x0002B8, "Member 'ABP_DifficultyInteractable_C::BPC_InteractableIndicator' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, PointLight) == 0x0002C0, "Member 'ABP_DifficultyInteractable_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, SM_Interactable_Difficulty_Engine_01) == 0x0002C8, "Member 'ABP_DifficultyInteractable_C::SM_Interactable_Difficulty_Engine_01' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, ObjectHighlightWidgetComponent) == 0x0002D0, "Member 'ABP_DifficultyInteractable_C::ObjectHighlightWidgetComponent' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, StaticMesh) == 0x0002D8, "Member 'ABP_DifficultyInteractable_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, IndicatorTimeline_Alpha_3328613C4D5412C8D05037B13CEF21C9) == 0x0002E0, "Member 'ABP_DifficultyInteractable_C::IndicatorTimeline_Alpha_3328613C4D5412C8D05037B13CEF21C9' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, IndicatorTimeline__Direction_3328613C4D5412C8D05037B13CEF21C9) == 0x0002E4, "Member 'ABP_DifficultyInteractable_C::IndicatorTimeline__Direction_3328613C4D5412C8D05037B13CEF21C9' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, IndicatorTimeline) == 0x0002E8, "Member 'ABP_DifficultyInteractable_C::IndicatorTimeline' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, ShouldShowHighlight) == 0x0002F0, "Member 'ABP_DifficultyInteractable_C::ShouldShowHighlight' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, DMIDifficultyIndicator) == 0x0002F8, "Member 'ABP_DifficultyInteractable_C::DMIDifficultyIndicator' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, PreviousIndicatorLevel) == 0x000300, "Member 'ABP_DifficultyInteractable_C::PreviousIndicatorLevel' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, MenuRef) == 0x000308, "Member 'ABP_DifficultyInteractable_C::MenuRef' has a wrong offset!");
static_assert(offsetof(ABP_DifficultyInteractable_C, DifficultyTreeAssignedPoints) == 0x000310, "Member 'ABP_DifficultyInteractable_C::DifficultyTreeAssignedPoints' has a wrong offset!");

}

