#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassEntity

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MassEntity.EMassCommandOperationType
// NumValues: 0x0008
enum class EMassCommandOperationType : uint8
{
	None                                     = 0,
	Create                                   = 1,
	Add                                      = 2,
	Remove                                   = 3,
	ChangeComposition                        = 4,
	Set                                      = 5,
	Destroy                                  = 6,
	MAX                                      = 7,
};

// Enum MassEntity.EMassObservedOperation
// NumValues: 0x0003
enum class EMassObservedOperation : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	MAX                                      = 2,
};

// Enum MassEntity.EProcessorExecutionFlags
// NumValues: 0x000A
enum class EProcessorExecutionFlags : uint8
{
	None                                     = 0,
	Standalone                               = 1,
	Server                                   = 2,
	Client                                   = 4,
	Editor                                   = 8,
	EditorWorld                              = 16,
	AllNetModes                              = 7,
	AllWorldModes                            = 23,
	All                                      = 31,
	EProcessorExecutionFlags_MAX             = 32,
};

// Enum MassEntity.EMassProcessingPhase
// NumValues: 0x0007
enum class EMassProcessingPhase : uint8
{
	PrePhysics                               = 0,
	StartPhysics                             = 1,
	DuringPhysics                            = 2,
	EndPhysics                               = 3,
	PostPhysics                              = 4,
	FrameEnd                                 = 5,
	MAX                                      = 6,
};

// Enum MassEntity.EMassFragmentAccess
// NumValues: 0x0004
enum class EMassFragmentAccess : uint8
{
	None                                     = 0,
	ReadOnly                                 = 1,
	ReadWrite                                = 2,
	MAX                                      = 3,
};

// Enum MassEntity.EMassFragmentPresence
// NumValues: 0x0005
enum class EMassFragmentPresence : uint8
{
	All                                      = 0,
	Any                                      = 1,
	None                                     = 2,
	Optional                                 = 3,
	MAX                                      = 4,
};

// ScriptStruct MassEntity.MassGenericDebugEvent
// 0x0001 (0x0001 - 0x0000)
struct FMassGenericDebugEvent final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassGenericDebugEvent) == 0x000001, "Wrong alignment on FMassGenericDebugEvent");
static_assert(sizeof(FMassGenericDebugEvent) == 0x000001, "Wrong size on FMassGenericDebugEvent");

// ScriptStruct MassEntity.MassFragmentRequirements
// 0x0268 (0x0268 - 0x0000)
struct alignas(0x08) FMassFragmentRequirements
{
public:
	uint8                                         Pad_0[0x268];                                      // 0x0000(0x0268)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassFragmentRequirements) == 0x000008, "Wrong alignment on FMassFragmentRequirements");
static_assert(sizeof(FMassFragmentRequirements) == 0x000268, "Wrong size on FMassFragmentRequirements");

// ScriptStruct MassEntity.MassEntityQuery
// 0x00B8 (0x0320 - 0x0268)
struct alignas(0x10) FMassEntityQuery final : public FMassFragmentRequirements
{
public:
	uint8                                         Pad_268[0xB8];                                     // 0x0268(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassEntityQuery) == 0x000010, "Wrong alignment on FMassEntityQuery");
static_assert(sizeof(FMassEntityQuery) == 0x000320, "Wrong size on FMassEntityQuery");

// ScriptStruct MassEntity.MassFragment
// 0x0001 (0x0001 - 0x0000)
struct FMassFragment final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassFragment) == 0x000001, "Wrong alignment on FMassFragment");
static_assert(sizeof(FMassFragment) == 0x000001, "Wrong size on FMassFragment");

// ScriptStruct MassEntity.MassTag
// 0x0001 (0x0001 - 0x0000)
struct FMassTag final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassTag) == 0x000001, "Wrong alignment on FMassTag");
static_assert(sizeof(FMassTag) == 0x000001, "Wrong size on FMassTag");

// ScriptStruct MassEntity.MassChunkFragment
// 0x0001 (0x0001 - 0x0000)
struct FMassChunkFragment final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassChunkFragment) == 0x000001, "Wrong alignment on FMassChunkFragment");
static_assert(sizeof(FMassChunkFragment) == 0x000001, "Wrong size on FMassChunkFragment");

// ScriptStruct MassEntity.MassSharedFragment
// 0x0001 (0x0001 - 0x0000)
struct FMassSharedFragment final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSharedFragment) == 0x000001, "Wrong alignment on FMassSharedFragment");
static_assert(sizeof(FMassSharedFragment) == 0x000001, "Wrong size on FMassSharedFragment");

// ScriptStruct MassEntity.MassConstSharedFragment
// 0x0001 (0x0001 - 0x0000)
struct FMassConstSharedFragment final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassConstSharedFragment) == 0x000001, "Wrong alignment on FMassConstSharedFragment");
static_assert(sizeof(FMassConstSharedFragment) == 0x000001, "Wrong size on FMassConstSharedFragment");

// ScriptStruct MassEntity.MassEntityHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMassEntityHandle final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SerialNumber;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassEntityHandle) == 0x000008, "Wrong alignment on FMassEntityHandle");
static_assert(sizeof(FMassEntityHandle) == 0x000008, "Wrong size on FMassEntityHandle");
static_assert(offsetof(FMassEntityHandle, Index) == 0x000000, "Member 'FMassEntityHandle::Index' has a wrong offset!");
static_assert(offsetof(FMassEntityHandle, SerialNumber) == 0x000004, "Member 'FMassEntityHandle::SerialNumber' has a wrong offset!");

// ScriptStruct MassEntity.MassEntityView
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMassEntityView final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassEntityView) == 0x000008, "Wrong alignment on FMassEntityView");
static_assert(sizeof(FMassEntityView) == 0x000020, "Wrong size on FMassEntityView");

// ScriptStruct MassEntity.MassRuntimePipeline
// 0x0018 (0x0018 - 0x0000)
struct FMassRuntimePipeline final
{
public:
	TArray<class UMassProcessor*>                 Processors;                                        // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassRuntimePipeline) == 0x000008, "Wrong alignment on FMassRuntimePipeline");
static_assert(sizeof(FMassRuntimePipeline) == 0x000018, "Wrong size on FMassRuntimePipeline");
static_assert(offsetof(FMassRuntimePipeline, Processors) == 0x000000, "Member 'FMassRuntimePipeline::Processors' has a wrong offset!");

// ScriptStruct MassEntity.MassObserversMap
// 0x0050 (0x0050 - 0x0000)
struct FMassObserversMap final
{
public:
	TMap<class UScriptStruct*, struct FMassRuntimePipeline> Container;                               // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMassObserversMap) == 0x000008, "Wrong alignment on FMassObserversMap");
static_assert(sizeof(FMassObserversMap) == 0x000050, "Wrong size on FMassObserversMap");
static_assert(offsetof(FMassObserversMap, Container) == 0x000000, "Member 'FMassObserversMap::Container' has a wrong offset!");

// ScriptStruct MassEntity.MassObserverManager
// 0x01C8 (0x01C8 - 0x0000)
struct FMassObserverManager final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMassObserversMap                      FragmentObservers[0x2];                            // 0x0080(0x0050)(Protected, NativeAccessSpecifierProtected)
	struct FMassObserversMap                      TagObservers[0x2];                                 // 0x0120(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassObserverManager) == 0x000008, "Wrong alignment on FMassObserverManager");
static_assert(sizeof(FMassObserverManager) == 0x0001C8, "Wrong size on FMassObserverManager");
static_assert(offsetof(FMassObserverManager, FragmentObservers) == 0x000080, "Member 'FMassObserverManager::FragmentObservers' has a wrong offset!");
static_assert(offsetof(FMassObserverManager, TagObservers) == 0x000120, "Member 'FMassObserverManager::TagObservers' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessorClassCollection
// 0x0010 (0x0010 - 0x0000)
struct FMassProcessorClassCollection final
{
public:
	TArray<TSubclassOf<class UMassProcessor>>     ClassCollection;                                   // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessorClassCollection) == 0x000008, "Wrong alignment on FMassProcessorClassCollection");
static_assert(sizeof(FMassProcessorClassCollection) == 0x000010, "Wrong size on FMassProcessorClassCollection");
static_assert(offsetof(FMassProcessorClassCollection, ClassCollection) == 0x000000, "Member 'FMassProcessorClassCollection::ClassCollection' has a wrong offset!");

// ScriptStruct MassEntity.MassEntityObserverClassesMap
// 0x0050 (0x0050 - 0x0000)
struct FMassEntityObserverClassesMap final
{
public:
	TMap<class UScriptStruct*, struct FMassProcessorClassCollection> Container;                      // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMassEntityObserverClassesMap) == 0x000008, "Wrong alignment on FMassEntityObserverClassesMap");
static_assert(sizeof(FMassEntityObserverClassesMap) == 0x000050, "Wrong size on FMassEntityObserverClassesMap");
static_assert(offsetof(FMassEntityObserverClassesMap, Container) == 0x000000, "Member 'FMassEntityObserverClassesMap::Container' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessingPhaseConfig
// 0x0020 (0x0020 - 0x0000)
struct FMassProcessingPhaseConfig final
{
public:
	class FName                                   PhaseName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMassCompositeProcessor>    PhaseGroupClass;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, Config, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMassProcessor*>                 ProcessorCDOs;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessingPhaseConfig) == 0x000008, "Wrong alignment on FMassProcessingPhaseConfig");
static_assert(sizeof(FMassProcessingPhaseConfig) == 0x000020, "Wrong size on FMassProcessingPhaseConfig");
static_assert(offsetof(FMassProcessingPhaseConfig, PhaseName) == 0x000000, "Member 'FMassProcessingPhaseConfig::PhaseName' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhaseConfig, PhaseGroupClass) == 0x000008, "Member 'FMassProcessingPhaseConfig::PhaseGroupClass' has a wrong offset!");
static_assert(offsetof(FMassProcessingPhaseConfig, ProcessorCDOs) == 0x000010, "Member 'FMassProcessingPhaseConfig::ProcessorCDOs' has a wrong offset!");

// ScriptStruct MassEntity.ProcessorAuxDataBase
// 0x0001 (0x0001 - 0x0000)
struct FProcessorAuxDataBase final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProcessorAuxDataBase) == 0x000001, "Wrong alignment on FProcessorAuxDataBase");
static_assert(sizeof(FProcessorAuxDataBase) == 0x000001, "Wrong size on FProcessorAuxDataBase");

// ScriptStruct MassEntity.MassProcessingContext
// 0x0040 (0x0040 - 0x0000)
struct FMassProcessingContext final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       AuxData;                                           // 0x0018(0x0010)(NativeAccessSpecifierPublic)
	bool                                          bFlushCommandBuffer;                               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x17];                                      // 0x0029(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassProcessingContext) == 0x000008, "Wrong alignment on FMassProcessingContext");
static_assert(sizeof(FMassProcessingContext) == 0x000040, "Wrong size on FMassProcessingContext");
static_assert(offsetof(FMassProcessingContext, DeltaSeconds) == 0x000010, "Member 'FMassProcessingContext::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FMassProcessingContext, AuxData) == 0x000018, "Member 'FMassProcessingContext::AuxData' has a wrong offset!");
static_assert(offsetof(FMassProcessingContext, bFlushCommandBuffer) == 0x000028, "Member 'FMassProcessingContext::bFlushCommandBuffer' has a wrong offset!");

// ScriptStruct MassEntity.MassProcessorExecutionOrder
// 0x0028 (0x0028 - 0x0000)
struct FMassProcessorExecutionOrder final
{
public:
	class FName                                   ExecuteInGroup;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExecuteBefore;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExecuteAfter;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassProcessorExecutionOrder) == 0x000008, "Wrong alignment on FMassProcessorExecutionOrder");
static_assert(sizeof(FMassProcessorExecutionOrder) == 0x000028, "Wrong size on FMassProcessorExecutionOrder");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteInGroup) == 0x000000, "Member 'FMassProcessorExecutionOrder::ExecuteInGroup' has a wrong offset!");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteBefore) == 0x000008, "Member 'FMassProcessorExecutionOrder::ExecuteBefore' has a wrong offset!");
static_assert(offsetof(FMassProcessorExecutionOrder, ExecuteAfter) == 0x000018, "Member 'FMassProcessorExecutionOrder::ExecuteAfter' has a wrong offset!");

// ScriptStruct MassEntity.MassSubsystemRequirements
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FMassSubsystemRequirements final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSubsystemRequirements) == 0x000008, "Wrong alignment on FMassSubsystemRequirements");
static_assert(sizeof(FMassSubsystemRequirements) == 0x000048, "Wrong size on FMassSubsystemRequirements");

}

