#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingRange_TimeTrial

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShootingRange_TimeTrial.BP_ShootingRange_TimeTrial_C
// 0x0108 (0x03B0 - 0x02A8)
class ABP_ShootingRange_TimeTrial_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UText3DComponent*                       Text3D;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_ShootingRange_Scoreboard;                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSet<class ABP_ShootingRange_DummyFlipper_C*> Flippers;                                          // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TMap<class ABP_ShootingRangeDummy_C*, class ABP_ShootingRange_DummyFlipper_C*> DummyFlipperPairMap; // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_ShootingRange_DummyFlipper_C*> ActiveFlippers;                                  // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          TrialActive;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x3];                                      // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointsScored;                                      // 0x037C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MainTimer;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TargetTimer;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TimerAC;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TrialDuration;                                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScoreboardRetracted;                               // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RetractionTimer;                                   // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PointsForWeakspotHit;                              // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointsForStandardHit;                              // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate(int32 ID, bool Positive);
	void ActivateAvailableFlipper();
	void ExecuteUbergraph_BP_ShootingRange_TimeTrial(int32 EntryPoint);
	void OnFinished_Multicast();
	void OnRep_PointsScored();
	void OnStarted_Multicast();
	void ReceiveBeginPlay();
	void ResetAndSetup();
	void RetractScoreboard();
	void SetScorboardState(bool Retract);
	void Target_Hit(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEvent);
	void TrialFinished();
	void UpdateCounter();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShootingRange_TimeTrial_C">();
	}
	static class ABP_ShootingRange_TimeTrial_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ShootingRange_TimeTrial_C>();
	}
};
static_assert(alignof(ABP_ShootingRange_TimeTrial_C) == 0x000008, "Wrong alignment on ABP_ShootingRange_TimeTrial_C");
static_assert(sizeof(ABP_ShootingRange_TimeTrial_C) == 0x0003B0, "Wrong size on ABP_ShootingRange_TimeTrial_C");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_ShootingRange_TimeTrial_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, Text3D) == 0x0002B0, "Member 'ABP_ShootingRange_TimeTrial_C::Text3D' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, SK_ShootingRange_Scoreboard) == 0x0002B8, "Member 'ABP_ShootingRange_TimeTrial_C::SK_ShootingRange_Scoreboard' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_ShootingRange_TimeTrial_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, Flippers) == 0x0002C8, "Member 'ABP_ShootingRange_TimeTrial_C::Flippers' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, DummyFlipperPairMap) == 0x000318, "Member 'ABP_ShootingRange_TimeTrial_C::DummyFlipperPairMap' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, ActiveFlippers) == 0x000368, "Member 'ABP_ShootingRange_TimeTrial_C::ActiveFlippers' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, TrialActive) == 0x000378, "Member 'ABP_ShootingRange_TimeTrial_C::TrialActive' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, PointsScored) == 0x00037C, "Member 'ABP_ShootingRange_TimeTrial_C::PointsScored' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, MainTimer) == 0x000380, "Member 'ABP_ShootingRange_TimeTrial_C::MainTimer' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, TargetTimer) == 0x000388, "Member 'ABP_ShootingRange_TimeTrial_C::TargetTimer' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, TimerAC) == 0x000390, "Member 'ABP_ShootingRange_TimeTrial_C::TimerAC' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, TrialDuration) == 0x000398, "Member 'ABP_ShootingRange_TimeTrial_C::TrialDuration' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, ScoreboardRetracted) == 0x00039C, "Member 'ABP_ShootingRange_TimeTrial_C::ScoreboardRetracted' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, RetractionTimer) == 0x0003A0, "Member 'ABP_ShootingRange_TimeTrial_C::RetractionTimer' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, PointsForWeakspotHit) == 0x0003A8, "Member 'ABP_ShootingRange_TimeTrial_C::PointsForWeakspotHit' has a wrong offset!");
static_assert(offsetof(ABP_ShootingRange_TimeTrial_C, PointsForStandardHit) == 0x0003AC, "Member 'ABP_ShootingRange_TimeTrial_C::PointsForStandardHit' has a wrong offset!");

}

