#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_BarrierGauge

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_BarrierGauge.Widget_BarrierGauge_C
// 0x0080 (0x0350 - 0x02D0)
class UWidget_BarrierGauge_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Active_Transition;                                 // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Blocked_Transition;                                // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BecomeHidden_Animation;                            // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BecomeVisible_Animation;                           // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reset_Animation;                                   // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ThresholdReached_Animation;                        // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BackgroundImage;                                   // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           BarrierGauge;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Clamps_Image;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_0;                                 // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PopImage;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URHealthComponent*                      HealthComponent;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeMaxBarrier;                                // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetGaugePrecentage;                             // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BarrierActive;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Widget_BarrierGauge(int32 EntryPoint);
	void GagueBlocked();
	void GaugeReset();
	void OnBarrierChanged_HealthComponent(class URHealthComponent* Component, float currentHealth, float healthDelta, const struct FHealCombatEvent& HealEvent);
	void OnBarrierDepleted_HealthComponent(class URHealthComponent* Component, const struct FDamageCombatEvent& DamageEventData);
	void OnBarrierRegained_HealthComponent(class URHealthComponent* Component, float currentHealth, float healthDelta, const struct FHealCombatEvent& HealEvent);
	void OnInitialized();
	void SetGaugePercent(float Percent);
	void SetGaugeVisibility(ESlateVisibility Visibility_0);
	void ThresholdReached();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateRemaingBarrier();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_BarrierGauge_C">();
	}
	static class UWidget_BarrierGauge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_BarrierGauge_C>();
	}
};
static_assert(alignof(UWidget_BarrierGauge_C) == 0x000008, "Wrong alignment on UWidget_BarrierGauge_C");
static_assert(sizeof(UWidget_BarrierGauge_C) == 0x000350, "Wrong size on UWidget_BarrierGauge_C");
static_assert(offsetof(UWidget_BarrierGauge_C, UberGraphFrame) == 0x0002D0, "Member 'UWidget_BarrierGauge_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, Active_Transition) == 0x0002D8, "Member 'UWidget_BarrierGauge_C::Active_Transition' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, Blocked_Transition) == 0x0002E0, "Member 'UWidget_BarrierGauge_C::Blocked_Transition' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, BecomeHidden_Animation) == 0x0002E8, "Member 'UWidget_BarrierGauge_C::BecomeHidden_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, BecomeVisible_Animation) == 0x0002F0, "Member 'UWidget_BarrierGauge_C::BecomeVisible_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, Reset_Animation) == 0x0002F8, "Member 'UWidget_BarrierGauge_C::Reset_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, ThresholdReached_Animation) == 0x000300, "Member 'UWidget_BarrierGauge_C::ThresholdReached_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, BackgroundImage) == 0x000308, "Member 'UWidget_BarrierGauge_C::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, BarrierGauge) == 0x000310, "Member 'UWidget_BarrierGauge_C::BarrierGauge' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, Clamps_Image) == 0x000318, "Member 'UWidget_BarrierGauge_C::Clamps_Image' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, InvalidationBox_0) == 0x000320, "Member 'UWidget_BarrierGauge_C::InvalidationBox_0' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, PopImage) == 0x000328, "Member 'UWidget_BarrierGauge_C::PopImage' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, HealthComponent) == 0x000330, "Member 'UWidget_BarrierGauge_C::HealthComponent' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, RelativeMaxBarrier) == 0x000338, "Member 'UWidget_BarrierGauge_C::RelativeMaxBarrier' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, TargetGaugePrecentage) == 0x000340, "Member 'UWidget_BarrierGauge_C::TargetGaugePrecentage' has a wrong offset!");
static_assert(offsetof(UWidget_BarrierGauge_C, BarrierActive) == 0x000348, "Member 'UWidget_BarrierGauge_C::BarrierActive' has a wrong offset!");

}

