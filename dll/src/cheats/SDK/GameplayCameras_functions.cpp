#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayCameras

#include "Basic.hpp"

#include "GameplayCameras_classes.hpp"
#include "GameplayCameras_parameters.hpp"


namespace SDK
{

// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivateCameraDirector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlueprintCameraDirectorActivateParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivateCameraDirector(const struct FBlueprintCameraDirectorActivateParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivateCameraDirector");

	Params::BlueprintCameraDirectorEvaluator_ActivateCameraDirector Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivateCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivateCameraRig(class UCameraRigAsset* CameraRig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivateCameraRig");

	Params::BlueprintCameraDirectorEvaluator_ActivateCameraRig Parms{};

	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivateCameraRigPrefab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivateCameraRigPrefab(class UCameraRigAsset* CameraRig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivateCameraRigPrefab");

	Params::BlueprintCameraDirectorEvaluator_ActivateCameraRigPrefab Parms{};

	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivateCameraRigViaProxy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigProxyAsset*             CameraRigProxy                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivateCameraRigViaProxy(class UCameraRigProxyAsset* CameraRigProxy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivateCameraRigViaProxy");

	Params::BlueprintCameraDirectorEvaluator_ActivateCameraRigViaProxy Parms{};

	Parms.CameraRigProxy = CameraRigProxy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivatePersistentBaseCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivatePersistentBaseCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivatePersistentBaseCameraRig");

	Params::BlueprintCameraDirectorEvaluator_ActivatePersistentBaseCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivatePersistentGlobalCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivatePersistentGlobalCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivatePersistentGlobalCameraRig");

	Params::BlueprintCameraDirectorEvaluator_ActivatePersistentGlobalCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.ActivatePersistentVisualCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::ActivatePersistentVisualCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "ActivatePersistentVisualCameraRig");

	Params::BlueprintCameraDirectorEvaluator_ActivatePersistentVisualCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.DeactivateCameraDirector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlueprintCameraDirectorDeactivateParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::DeactivateCameraDirector(const struct FBlueprintCameraDirectorDeactivateParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "DeactivateCameraDirector");

	Params::BlueprintCameraDirectorEvaluator_DeactivateCameraDirector Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.DeactivatePersistentBaseCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::DeactivatePersistentBaseCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "DeactivatePersistentBaseCameraRig");

	Params::BlueprintCameraDirectorEvaluator_DeactivatePersistentBaseCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.DeactivatePersistentGlobalCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::DeactivatePersistentGlobalCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "DeactivatePersistentGlobalCameraRig");

	Params::BlueprintCameraDirectorEvaluator_DeactivatePersistentGlobalCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.DeactivatePersistentVisualCameraRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraRigAsset*                  CameraRigPrefab                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::DeactivatePersistentVisualCameraRig(class UCameraRigAsset* CameraRigPrefab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "DeactivatePersistentVisualCameraRig");

	Params::BlueprintCameraDirectorEvaluator_DeactivatePersistentVisualCameraRig Parms{};

	Parms.CameraRigPrefab = CameraRigPrefab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.RunCameraDirector
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlueprintCameraDirectorEvaluationParams&Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::RunCameraDirector(const struct FBlueprintCameraDirectorEvaluationParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "RunCameraDirector");

	Params::BlueprintCameraDirectorEvaluator_RunCameraDirector Parms{};

	Parms.Params_0 = std::move(Params_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.SetInitialContextCameraPose
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      InCameraPose                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBlueprintCameraDirectorEvaluator::SetInitialContextCameraPose(const struct FBlueprintCameraPose& InCameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "SetInitialContextCameraPose");

	Params::BlueprintCameraDirectorEvaluator_SetInitialContextCameraPose Parms{};

	Parms.InCameraPose = std::move(InCameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.FindEvaluationContextOwnerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UBlueprintCameraDirectorEvaluator::FindEvaluationContextOwnerActor(TSubclassOf<class AActor> ActorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "FindEvaluationContextOwnerActor");

	Params::BlueprintCameraDirectorEvaluator_FindEvaluationContextOwnerActor Parms{};

	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.GetCameraRig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraRigAsset* UBlueprintCameraDirectorEvaluator::GetCameraRig(class UCameraRigAsset* CameraRig) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "GetCameraRig");

	Params::BlueprintCameraDirectorEvaluator_GetCameraRig Parms{};

	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.GetInitialContextCameraPose
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraDirectorEvaluator::GetInitialContextCameraPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "GetInitialContextCameraPose");

	Params::BlueprintCameraDirectorEvaluator_GetInitialContextCameraPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraDirectorEvaluator.GetInitialContextVariableTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBlueprintCameraVariableTable    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBlueprintCameraVariableTable UBlueprintCameraDirectorEvaluator::GetInitialContextVariableTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraDirectorEvaluator", "GetInitialContextVariableTable");

	Params::BlueprintCameraDirectorEvaluator_GetInitialContextVariableTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.ActivateCameraRigFunctions.ActivatePersistentBaseCameraRig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActivateCameraRigFunctions::ActivatePersistentBaseCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActivateCameraRigFunctions", "ActivatePersistentBaseCameraRig");

	Params::ActivateCameraRigFunctions_ActivatePersistentBaseCameraRig Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.ActivateCameraRigFunctions.ActivatePersistentGlobalCameraRig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActivateCameraRigFunctions::ActivatePersistentGlobalCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActivateCameraRigFunctions", "ActivatePersistentGlobalCameraRig");

	Params::ActivateCameraRigFunctions_ActivatePersistentGlobalCameraRig Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.ActivateCameraRigFunctions.ActivatePersistentVisualCameraRig
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActivateCameraRigFunctions::ActivatePersistentVisualCameraRig(class UObject* WorldContextObject, class APlayerController* PlayerController, class UCameraRigAsset* CameraRig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActivateCameraRigFunctions", "ActivatePersistentVisualCameraRig");

	Params::ActivateCameraRigFunctions_ActivatePersistentVisualCameraRig Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.CameraRig = CameraRig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetAimDir
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBlueprintCameraPoseFunctionLibrary::GetAimDir(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetAimDir");

	Params::BlueprintCameraPoseFunctionLibrary_GetAimDir Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetAimRay
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FRay                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRay UBlueprintCameraPoseFunctionLibrary::GetAimRay(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetAimRay");

	Params::BlueprintCameraPoseFunctionLibrary_GetAimRay Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetEffectiveFieldOfView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraPoseFunctionLibrary::GetEffectiveFieldOfView(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetEffectiveFieldOfView");

	Params::BlueprintCameraPoseFunctionLibrary_GetEffectiveFieldOfView Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetFieldOfView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraPoseFunctionLibrary::GetFieldOfView(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetFieldOfView");

	Params::BlueprintCameraPoseFunctionLibrary_GetFieldOfView Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetFocalLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraPoseFunctionLibrary::GetFocalLength(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetFocalLength");

	Params::BlueprintCameraPoseFunctionLibrary_GetFocalLength Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBlueprintCameraPoseFunctionLibrary::GetLocation(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetLocation");

	Params::BlueprintCameraPoseFunctionLibrary_GetLocation Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBlueprintCameraPoseFunctionLibrary::GetRotation(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetRotation");

	Params::BlueprintCameraPoseFunctionLibrary_GetRotation Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetSensorAspectRatio
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraPoseFunctionLibrary::GetSensorAspectRatio(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetSensorAspectRatio");

	Params::BlueprintCameraPoseFunctionLibrary_GetSensorAspectRatio Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetTarget
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBlueprintCameraPoseFunctionLibrary::GetTarget(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetTarget");

	Params::BlueprintCameraPoseFunctionLibrary_GetTarget Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetTargetAtDistance
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  TargetDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBlueprintCameraPoseFunctionLibrary::GetTargetAtDistance(const struct FBlueprintCameraPose& CameraPose, double TargetDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetTargetAtDistance");

	Params::BlueprintCameraPoseFunctionLibrary_GetTargetAtDistance Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.TargetDistance = TargetDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetTargetDistance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraPoseFunctionLibrary::GetTargetDistance(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetTargetDistance");

	Params::BlueprintCameraPoseFunctionLibrary_GetTargetDistance Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.GetTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBlueprintCameraPoseFunctionLibrary::GetTransform(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "GetTransform");

	Params::BlueprintCameraPoseFunctionLibrary_GetTransform Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.MakeCameraPoseFromCameraComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UCameraComponent*           CameraComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::MakeCameraPoseFromCameraComponent(const class UCameraComponent* CameraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "MakeCameraPoseFromCameraComponent");

	Params::BlueprintCameraPoseFunctionLibrary_MakeCameraPoseFromCameraComponent Parms{};

	Parms.CameraComponent = CameraComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.MakeCameraPoseFromCineCameraComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UCineCameraComponent*       CameraComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::MakeCameraPoseFromCineCameraComponent(const class UCineCameraComponent* CameraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "MakeCameraPoseFromCineCameraComponent");

	Params::BlueprintCameraPoseFunctionLibrary_MakeCameraPoseFromCineCameraComponent Parms{};

	Parms.CameraComponent = CameraComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetFieldOfView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FieldOfView                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetFieldOfView(const struct FBlueprintCameraPose& CameraPose, float FieldOfView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetFieldOfView");

	Params::BlueprintCameraPoseFunctionLibrary_SetFieldOfView Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.FieldOfView = FieldOfView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetFocalLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   FocalLength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetFocalLength(const struct FBlueprintCameraPose& CameraPose, float FocalLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetFocalLength");

	Params::BlueprintCameraPoseFunctionLibrary_SetFocalLength Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.FocalLength = FocalLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetLocation(const struct FBlueprintCameraPose& CameraPose, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetLocation");

	Params::BlueprintCameraPoseFunctionLibrary_SetLocation Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetRotation(const struct FBlueprintCameraPose& CameraPose, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetRotation");

	Params::BlueprintCameraPoseFunctionLibrary_SetRotation Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetTargetDistance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  TargetDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetTargetDistance(const struct FBlueprintCameraPose& CameraPose, double TargetDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetTargetDistance");

	Params::BlueprintCameraPoseFunctionLibrary_SetTargetDistance Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.TargetDistance = TargetDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraPoseFunctionLibrary.SetTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UBlueprintCameraPoseFunctionLibrary::SetTransform(const struct FBlueprintCameraPose& CameraPose, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraPoseFunctionLibrary", "SetTransform");

	Params::BlueprintCameraPoseFunctionLibrary_SetTransform Parms{};

	Parms.CameraPose = std::move(CameraPose);
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetBooleanCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBooleanCameraVariable*           Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintCameraVariableTableFunctionLibrary::GetBooleanCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UBooleanCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetBooleanCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetBooleanCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetDoubleCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDoubleCameraVariable*            Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UBlueprintCameraVariableTableFunctionLibrary::GetDoubleCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UDoubleCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetDoubleCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetDoubleCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetFloatCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFloatCameraVariable*             Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlueprintCameraVariableTableFunctionLibrary::GetFloatCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UFloatCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetFloatCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetFloatCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetInteger32CameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInteger32CameraVariable*         Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBlueprintCameraVariableTableFunctionLibrary::GetInteger32CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UInteger32CameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetInteger32CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetInteger32CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetRotatorCameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class URotator3dCameraVariable*         Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UBlueprintCameraVariableTableFunctionLibrary::GetRotatorCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class URotator3dCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetRotatorCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetRotatorCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetTransformCameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTransform3dCameraVariable*       Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UBlueprintCameraVariableTableFunctionLibrary::GetTransformCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UTransform3dCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetTransformCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetTransformCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetVector2CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector2dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBlueprintCameraVariableTableFunctionLibrary::GetVector2CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector2dCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetVector2CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetVector2CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetVector3CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector3dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBlueprintCameraVariableTableFunctionLibrary::GetVector3CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector3dCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetVector3CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetVector3CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.GetVector4CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector4dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 UBlueprintCameraVariableTableFunctionLibrary::GetVector4CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector4dCameraVariable* Variable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "GetVector4CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_GetVector4CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetBooleanCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBooleanCameraVariable*           Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetBooleanCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UBooleanCameraVariable* Variable, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetBooleanCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetBooleanCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetDoubleCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDoubleCameraVariable*            Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetDoubleCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UDoubleCameraVariable* Variable, double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetDoubleCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetDoubleCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetFloatCameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFloatCameraVariable*             Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetFloatCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UFloatCameraVariable* Variable, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetFloatCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetFloatCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetInteger32CameraVariable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UInteger32CameraVariable*         Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetInteger32CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UInteger32CameraVariable* Variable, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetInteger32CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetInteger32CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetRotatorCameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class URotator3dCameraVariable*         Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetRotatorCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class URotator3dCameraVariable* Variable, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetRotatorCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetRotatorCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetTransformCameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTransform3dCameraVariable*       Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetTransformCameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UTransform3dCameraVariable* Variable, const struct FTransform& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetTransformCameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetTransformCameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetVector2CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector2dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetVector2CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector2dCameraVariable* Variable, const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetVector2CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetVector2CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetVector3CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector3dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetVector3CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector3dCameraVariable* Variable, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetVector3CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetVector3CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraVariableTableFunctionLibrary.SetVector4CameraVariable
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraVariableTable&VariableTable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVector4dCameraVariable*          Variable                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector4&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraVariableTableFunctionLibrary::SetVector4CameraVariable(const struct FBlueprintCameraVariableTable& VariableTable, class UVector4dCameraVariable* Variable, const struct FVector4& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintCameraVariableTableFunctionLibrary", "SetVector4CameraVariable");

	Params::BlueprintCameraVariableTableFunctionLibrary_SetVector4CameraVariable Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.Variable = Variable;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.CameraRigParameterInterop.SetBooleanParameter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bParameterValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetBooleanParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, bool bParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetBooleanParameter");

	Params::CameraRigParameterInterop_SetBooleanParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.bParameterValue = bParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetDoubleParameter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetDoubleParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, double ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetDoubleParameter");

	Params::CameraRigParameterInterop_SetDoubleParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetFloatParameter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetFloatParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, double ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetFloatParameter");

	Params::CameraRigParameterInterop_SetFloatParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetIntegerParameter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetIntegerParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, int32 ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetIntegerParameter");

	Params::CameraRigParameterInterop_SetIntegerParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetRotatorParameter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetRotatorParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FRotator& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetRotatorParameter");

	Params::CameraRigParameterInterop_SetRotatorParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetTransformParameter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                ParameterValue                                         (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetTransformParameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FTransform& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetTransformParameter");

	Params::CameraRigParameterInterop_SetTransformParameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetVector2Parameter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetVector2Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector2D& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetVector2Parameter");

	Params::CameraRigParameterInterop_SetVector2Parameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetVector3Parameter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetVector3Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetVector3Parameter");

	Params::CameraRigParameterInterop_SetVector3Parameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.CameraRigParameterInterop.SetVector4Parameter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBlueprintCameraVariableTable&   VariableTable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCameraRigAsset*                  CameraRig                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector4&                  ParameterValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraRigParameterInterop::SetVector4Parameter(struct FBlueprintCameraVariableTable& VariableTable, class UCameraRigAsset* CameraRig, const class FString& ParameterName, const struct FVector4& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraRigParameterInterop", "SetVector4Parameter");

	Params::CameraRigParameterInterop_SetVector4Parameter Parms{};

	Parms.VariableTable = std::move(VariableTable);
	Parms.CameraRig = CameraRig;
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VariableTable = std::move(Parms.VariableTable);
}


// Function GameplayCameras.GameplayCameraActor.GetCameraComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayCameraComponent*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayCameraComponent* AGameplayCameraActor::GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraActor", "GetCameraComponent");

	Params::GameplayCameraActor_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayCameraComponent.ActivateCameraForPlayerController
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayCameraComponent::ActivateCameraForPlayerController(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "ActivateCameraForPlayerController");

	Params::GameplayCameraComponent_ActivateCameraForPlayerController Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraComponent.ActivateCameraForPlayerIndex
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayCameraComponent::ActivateCameraForPlayerIndex(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "ActivateCameraForPlayerIndex");

	Params::GameplayCameraComponent_ActivateCameraForPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraComponent.DeactivateCamera
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UGameplayCameraComponent::DeactivateCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "DeactivateCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraComponent.SetInitialPose
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FBlueprintCameraPose&      CameraPose                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGameplayCameraComponent::SetInitialPose(const struct FBlueprintCameraPose& CameraPose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "SetInitialPose");

	Params::GameplayCameraComponent_SetInitialPose Parms{};

	Parms.CameraPose = std::move(CameraPose);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraComponent.GetInitialPose
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBlueprintCameraPose             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBlueprintCameraPose UGameplayCameraComponent::GetInitialPose() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "GetInitialPose");

	Params::GameplayCameraComponent_GetInitialPose Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayCameraComponent.GetInitialVariableTable
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBlueprintCameraVariableTable    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBlueprintCameraVariableTable UGameplayCameraComponent::GetInitialVariableTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraComponent", "GetInitialVariableTable");

	Params::GameplayCameraComponent_GetInitialVariableTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayCameraSystemActor.AutoManageActiveViewTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGameplayCameraSystemActor::AutoManageActiveViewTarget(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayCameraSystemActor", "AutoManageActiveViewTarget");

	Params::GameplayCameraSystemActor_AutoManageActiveViewTarget Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraSystemActor.GetAutoSpawnedCameraSystemActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceSpawn                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameplayCameraSystemActor*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGameplayCameraSystemActor* AGameplayCameraSystemActor::GetAutoSpawnedCameraSystemActor(class APlayerController* PlayerController, bool bForceSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayCameraSystemActor", "GetAutoSpawnedCameraSystemActor");

	Params::GameplayCameraSystemActor_GetAutoSpawnedCameraSystemActor Parms{};

	Parms.PlayerController = PlayerController;
	Parms.bForceSpawn = bForceSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayCameraSystemActor.GetCameraSystemComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayCameraSystemComponent*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayCameraSystemComponent* AGameplayCameraSystemActor::GetCameraSystemComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraSystemActor", "GetCameraSystemComponent");

	Params::GameplayCameraSystemActor_GetCameraSystemComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayCameraSystemComponent.ActivateCameraSystemForPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayCameraSystemComponent::ActivateCameraSystemForPlayerController(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraSystemComponent", "ActivateCameraSystemForPlayerController");

	Params::GameplayCameraSystemComponent_ActivateCameraSystemForPlayerController Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraSystemComponent.ActivateCameraSystemForPlayerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayCameraSystemComponent::ActivateCameraSystemForPlayerIndex(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraSystemComponent", "ActivateCameraSystemForPlayerIndex");

	Params::GameplayCameraSystemComponent_ActivateCameraSystemForPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraSystemComponent.DeactivateCameraSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           NextViewTarget                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayCameraSystemComponent::DeactivateCameraSystem(class AActor* NextViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraSystemComponent", "DeactivateCameraSystem");

	Params::GameplayCameraSystemComponent_DeactivateCameraSystem Parms{};

	Parms.NextViewTarget = NextViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayCameraSystemComponent.IsCameraSystemActiveForPlayController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayCameraSystemComponent::IsCameraSystemActiveForPlayController(class APlayerController* PlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayCameraSystemComponent", "IsCameraSystemActiveForPlayController");

	Params::GameplayCameraSystemComponent_IsCameraSystemActiveForPlayController Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GameplayCameras.GameplayControlRotationComponent.ActivateControlRotationManagementForPlayerController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController_0                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayControlRotationComponent::ActivateControlRotationManagementForPlayerController(class APlayerController* PlayerController_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayControlRotationComponent", "ActivateControlRotationManagementForPlayerController");

	Params::GameplayControlRotationComponent_ActivateControlRotationManagementForPlayerController Parms{};

	Parms.PlayerController_0 = PlayerController_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayControlRotationComponent.ActivateControlRotationManagementForPlayerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameplayControlRotationComponent::ActivateControlRotationManagementForPlayerIndex(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayControlRotationComponent", "ActivateControlRotationManagementForPlayerIndex");

	Params::GameplayControlRotationComponent_ActivateControlRotationManagementForPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.GameplayControlRotationComponent.DeactivateControlRotationManagement
// (Final, Native, Public, BlueprintCallable)

void UGameplayControlRotationComponent::DeactivateControlRotationManagement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayControlRotationComponent", "DeactivateControlRotationManagement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GameplayCameras.BlueprintCameraNodeEvaluator.TickCameraNode
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintCameraNodeEvaluator::TickCameraNode(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraNodeEvaluator", "TickCameraNode");

	Params::BlueprintCameraNodeEvaluator_TickCameraNode Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GameplayCameras.BlueprintCameraNodeEvaluator.FindEvaluationContextOwnerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UBlueprintCameraNodeEvaluator::FindEvaluationContextOwnerActor(TSubclassOf<class AActor> ActorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintCameraNodeEvaluator", "FindEvaluationContextOwnerActor");

	Params::BlueprintCameraNodeEvaluator_FindEvaluationContextOwnerActor Parms{};

	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

