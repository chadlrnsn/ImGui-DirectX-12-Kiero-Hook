#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionDepNodes

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataflowEnginePlugin_structs.hpp"
#include "Chaos_structs.hpp"
#include "DataflowCore_structs.hpp"


namespace SDK
{

// Enum GeometryCollectionDepNodes.EDataflowTransferNodeFalloff
// NumValues: 0x0005
enum class EDataflowTransferNodeFalloff : uint8
{
	Dataflow_Transfer_Squared                = 0,
	Dataflow_Transfer_Linear                 = 1,
	Dataflow_Transfer_None                   = 2,
	Dataflow_Transfer_Dataflow_Max           = 3,
	Dataflow_Transfer_MAX                    = 4,
};

// Enum GeometryCollectionDepNodes.EDataflowTransferNodeSampleScale
// NumValues: 0x0005
enum class EDataflowTransferNodeSampleScale : uint8
{
	Dataflow_Transfer_Component_Edge         = 0,
	Dataflow_Transfer_Asset_Edge             = 1,
	Dataflow_Transfer_Asset_Bound            = 2,
	Dataflow_Transfer_Dataflow_Max           = 3,
	Dataflow_Transfer_MAX                    = 4,
};

// Enum GeometryCollectionDepNodes.EDataflowTransferNodeBoundingVolume
// NumValues: 0x0004
enum class EDataflowTransferNodeBoundingVolume : uint8
{
	Dataflow_Transfer_Vertex                 = 0,
	Dataflow_Transfer_Triangle               = 1,
	Dataflow_Transfer_Dataflow_Max           = 2,
	Dataflow_Transfer_MAX                    = 3,
};

// ScriptStruct GeometryCollectionDepNodes.GeometryCollectionTransferVertexScalarAttributeNode
// 0x0190 (0x0328 - 0x0198)
struct FGeometryCollectionTransferVertexScalarAttributeNode final : public FDataflowNode
{
public:
	struct FManagedArrayCollection                Collection;                                        // 0x0198(0x00B0)(NativeAccessSpecifierPublic)
	struct FManagedArrayCollection                FromCollection;                                    // 0x0248(0x00B0)(NativeAccessSpecifierPublic)
	struct FCollectionAttributeKey                AttributeKey;                                      // 0x02F8(0x0020)(Edit, NativeAccessSpecifierPublic)
	EDataflowTransferNodeBoundingVolume           BoundingVolumeType;                                // 0x0318(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataflowTransferNodeSampleScale              SampleScale;                                       // 0x0319(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataflowTransferNodeFalloff                  Falloff;                                           // 0x031A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31B[0x1];                                      // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FalloffThreshold;                                  // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeMultiplier;                                    // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundMultiplier;                                   // 0x0324(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryCollectionTransferVertexScalarAttributeNode) == 0x000008, "Wrong alignment on FGeometryCollectionTransferVertexScalarAttributeNode");
static_assert(sizeof(FGeometryCollectionTransferVertexScalarAttributeNode) == 0x000328, "Wrong size on FGeometryCollectionTransferVertexScalarAttributeNode");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, Collection) == 0x000198, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::Collection' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, FromCollection) == 0x000248, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::FromCollection' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, AttributeKey) == 0x0002F8, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::AttributeKey' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, BoundingVolumeType) == 0x000318, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::BoundingVolumeType' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, SampleScale) == 0x000319, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::SampleScale' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, Falloff) == 0x00031A, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::Falloff' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, FalloffThreshold) == 0x00031C, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::FalloffThreshold' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, EdgeMultiplier) == 0x000320, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::EdgeMultiplier' has a wrong offset!");
static_assert(offsetof(FGeometryCollectionTransferVertexScalarAttributeNode, BoundMultiplier) == 0x000324, "Member 'FGeometryCollectionTransferVertexScalarAttributeNode::BoundMultiplier' has a wrong offset!");

// ScriptStruct GeometryCollectionDepNodes.SetVertexColorInCollectionFromFloatArrayDataflowNode
// 0x00C8 (0x0260 - 0x0198)
struct FSetVertexColorInCollectionFromFloatArrayDataflowNode final : public FDataflowNode
{
public:
	struct FManagedArrayCollection                Collection;                                        // 0x0198(0x00B0)(NativeAccessSpecifierPublic)
	TArray<float>                                 FloatArray;                                        // 0x0248(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSetVertexColorInCollectionFromFloatArrayDataflowNode) == 0x000008, "Wrong alignment on FSetVertexColorInCollectionFromFloatArrayDataflowNode");
static_assert(sizeof(FSetVertexColorInCollectionFromFloatArrayDataflowNode) == 0x000260, "Wrong size on FSetVertexColorInCollectionFromFloatArrayDataflowNode");
static_assert(offsetof(FSetVertexColorInCollectionFromFloatArrayDataflowNode, Collection) == 0x000198, "Member 'FSetVertexColorInCollectionFromFloatArrayDataflowNode::Collection' has a wrong offset!");
static_assert(offsetof(FSetVertexColorInCollectionFromFloatArrayDataflowNode, FloatArray) == 0x000248, "Member 'FSetVertexColorInCollectionFromFloatArrayDataflowNode::FloatArray' has a wrong offset!");
static_assert(offsetof(FSetVertexColorInCollectionFromFloatArrayDataflowNode, Scale) == 0x000258, "Member 'FSetVertexColorInCollectionFromFloatArrayDataflowNode::Scale' has a wrong offset!");

// ScriptStruct GeometryCollectionDepNodes.SetVertexColorInCollectionFromVertexSelectionDataflowNode
// 0x00F0 (0x0288 - 0x0198)
struct FSetVertexColorInCollectionFromVertexSelectionDataflowNode final : public FDataflowNode
{
public:
	struct FManagedArrayCollection                Collection;                                        // 0x0198(0x00B0)(NativeAccessSpecifierPublic)
	struct FDataflowVertexSelection               VertexSelection;                                   // 0x0248(0x0020)(NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectedColor;                                     // 0x0268(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NonSelectedColor;                                  // 0x0278(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode) == 0x000008, "Wrong alignment on FSetVertexColorInCollectionFromVertexSelectionDataflowNode");
static_assert(sizeof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode) == 0x000288, "Wrong size on FSetVertexColorInCollectionFromVertexSelectionDataflowNode");
static_assert(offsetof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode, Collection) == 0x000198, "Member 'FSetVertexColorInCollectionFromVertexSelectionDataflowNode::Collection' has a wrong offset!");
static_assert(offsetof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode, VertexSelection) == 0x000248, "Member 'FSetVertexColorInCollectionFromVertexSelectionDataflowNode::VertexSelection' has a wrong offset!");
static_assert(offsetof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode, SelectedColor) == 0x000268, "Member 'FSetVertexColorInCollectionFromVertexSelectionDataflowNode::SelectedColor' has a wrong offset!");
static_assert(offsetof(FSetVertexColorInCollectionFromVertexSelectionDataflowNode, NonSelectedColor) == 0x000278, "Member 'FSetVertexColorInCollectionFromVertexSelectionDataflowNode::NonSelectedColor' has a wrong offset!");

}

