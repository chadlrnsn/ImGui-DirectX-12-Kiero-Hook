#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCG

#include "Basic.hpp"

#include "PCG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ComputeFramework_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class PCG.PCGData
// 0x0010 (0x0038 - 0x0028)
class UPCGData : public UObject
{
public:
	uint64                                        UID;                                               // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGData">();
	}
	static class UPCGData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGData>();
	}
};
static_assert(alignof(UPCGData) == 0x000008, "Wrong alignment on UPCGData");
static_assert(sizeof(UPCGData) == 0x000038, "Wrong size on UPCGData");
static_assert(offsetof(UPCGData, UID) == 0x000028, "Member 'UPCGData::UID' has a wrong offset!");

// Class PCG.PCGSettingsInterface
// 0x0008 (0x0040 - 0x0038)
class UPCGSettingsInterface : public UPCGData
{
public:
	bool                                          bEnabled;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSettingsInterface">();
	}
	static class UPCGSettingsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSettingsInterface>();
	}
};
static_assert(alignof(UPCGSettingsInterface) == 0x000008, "Wrong alignment on UPCGSettingsInterface");
static_assert(sizeof(UPCGSettingsInterface) == 0x000040, "Wrong size on UPCGSettingsInterface");
static_assert(offsetof(UPCGSettingsInterface, bEnabled) == 0x000038, "Member 'UPCGSettingsInterface::bEnabled' has a wrong offset!");
static_assert(offsetof(UPCGSettingsInterface, bDebug) == 0x000039, "Member 'UPCGSettingsInterface::bDebug' has a wrong offset!");

// Class PCG.PCGSettings
// 0x0078 (0x00B8 - 0x0040)
class UPCGSettings : public UPCGSettingsInterface
{
public:
	int32                                         Seed;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseSeed;                                          // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3F];                                      // 0x0051(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGSettingsOverridableParam>   CachedOverridableParams;                           // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A0[0x1];                                       // 0x00A0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bExecuteOnGPU;                                     // 0x00A1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDumpCookedHLSL;                                   // 0x00A2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDumpDataDescriptions;                             // 0x00A3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPrintShaderDebugValues;                           // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DebugBufferSize;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0xC];                                       // 0x00AC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 BP_GetTypeUnionOfIncidentEdges(const class FName& PinLabel) const;
	bool UseSeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSettings">();
	}
	static class UPCGSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSettings>();
	}
};
static_assert(alignof(UPCGSettings) == 0x000008, "Wrong alignment on UPCGSettings");
static_assert(sizeof(UPCGSettings) == 0x0000B8, "Wrong size on UPCGSettings");
static_assert(offsetof(UPCGSettings, Seed) == 0x000040, "Member 'UPCGSettings::Seed' has a wrong offset!");
static_assert(offsetof(UPCGSettings, bUseSeed) == 0x000050, "Member 'UPCGSettings::bUseSeed' has a wrong offset!");
static_assert(offsetof(UPCGSettings, CachedOverridableParams) == 0x000090, "Member 'UPCGSettings::CachedOverridableParams' has a wrong offset!");
static_assert(offsetof(UPCGSettings, bExecuteOnGPU) == 0x0000A1, "Member 'UPCGSettings::bExecuteOnGPU' has a wrong offset!");
static_assert(offsetof(UPCGSettings, bDumpCookedHLSL) == 0x0000A2, "Member 'UPCGSettings::bDumpCookedHLSL' has a wrong offset!");
static_assert(offsetof(UPCGSettings, bDumpDataDescriptions) == 0x0000A3, "Member 'UPCGSettings::bDumpDataDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGSettings, bPrintShaderDebugValues) == 0x0000A4, "Member 'UPCGSettings::bPrintShaderDebugValues' has a wrong offset!");
static_assert(offsetof(UPCGSettings, DebugBufferSize) == 0x0000A8, "Member 'UPCGSettings::DebugBufferSize' has a wrong offset!");

// Class PCG.PCGFilterDataBaseSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGFilterDataBaseSettings : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterDataBaseSettings">();
	}
	static class UPCGFilterDataBaseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterDataBaseSettings>();
	}
};
static_assert(alignof(UPCGFilterDataBaseSettings) == 0x000008, "Wrong alignment on UPCGFilterDataBaseSettings");
static_assert(sizeof(UPCGFilterDataBaseSettings) == 0x0000B8, "Wrong size on UPCGFilterDataBaseSettings");

// Class PCG.PCGFilterByTypeSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGFilterByTypeSettings final : public UPCGFilterDataBaseSettings
{
public:
	EPCGDataType                                  TargetType;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOutsideFilter;                                // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterByTypeSettings">();
	}
	static class UPCGFilterByTypeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterByTypeSettings>();
	}
};
static_assert(alignof(UPCGFilterByTypeSettings) == 0x000008, "Wrong alignment on UPCGFilterByTypeSettings");
static_assert(sizeof(UPCGFilterByTypeSettings) == 0x0000C0, "Wrong size on UPCGFilterByTypeSettings");
static_assert(offsetof(UPCGFilterByTypeSettings, TargetType) == 0x0000B8, "Member 'UPCGFilterByTypeSettings::TargetType' has a wrong offset!");
static_assert(offsetof(UPCGFilterByTypeSettings, bShowOutsideFilter) == 0x0000BC, "Member 'UPCGFilterByTypeSettings::bShowOutsideFilter' has a wrong offset!");

// Class PCG.PCGNodeSourceTextProvider
// 0x0000 (0x0000 - 0x0000)
class IPCGNodeSourceTextProvider final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNodeSourceTextProvider">();
	}
	static class IPCGNodeSourceTextProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPCGNodeSourceTextProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IPCGNodeSourceTextProvider) == 0x000001, "Wrong alignment on IPCGNodeSourceTextProvider");
static_assert(sizeof(IPCGNodeSourceTextProvider) == 0x000001, "Wrong size on IPCGNodeSourceTextProvider");

// Class PCG.PCGIndirectionSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGIndirectionSettings final : public UPCGSettings
{
public:
	EPCGProxyInterfaceMode                        ProxyInterfaceMode;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPCGSettings>               SettingsClass;                                     // 0x00C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGBlueprintElement>       BlueprintElementClass;                             // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSettings*                           Settings;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagOutputsBasedOnOutputPins;                      // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGIndirectionSettings">();
	}
	static class UPCGIndirectionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGIndirectionSettings>();
	}
};
static_assert(alignof(UPCGIndirectionSettings) == 0x000008, "Wrong alignment on UPCGIndirectionSettings");
static_assert(sizeof(UPCGIndirectionSettings) == 0x0000E0, "Wrong size on UPCGIndirectionSettings");
static_assert(offsetof(UPCGIndirectionSettings, ProxyInterfaceMode) == 0x0000B8, "Member 'UPCGIndirectionSettings::ProxyInterfaceMode' has a wrong offset!");
static_assert(offsetof(UPCGIndirectionSettings, SettingsClass) == 0x0000C0, "Member 'UPCGIndirectionSettings::SettingsClass' has a wrong offset!");
static_assert(offsetof(UPCGIndirectionSettings, BlueprintElementClass) == 0x0000C8, "Member 'UPCGIndirectionSettings::BlueprintElementClass' has a wrong offset!");
static_assert(offsetof(UPCGIndirectionSettings, Settings) == 0x0000D0, "Member 'UPCGIndirectionSettings::Settings' has a wrong offset!");
static_assert(offsetof(UPCGIndirectionSettings, bTagOutputsBasedOnOutputPins) == 0x0000D8, "Member 'UPCGIndirectionSettings::bTagOutputsBasedOnOutputPins' has a wrong offset!");

// Class PCG.PCGAddComponentSettings
// 0x0098 (0x0150 - 0x00B8)
class UPCGAddComponentSettings final : public UPCGSettings
{
public:
	bool                                          bUseClassAttribute;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     ClassAttribute;                                    // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            TemplateComponentClass;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowTemplateComponentEditing;                    // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        TemplateComponent;                                 // 0x00F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     ActorReferenceAttribute;                           // 0x0100(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputNoSourceSelector ComponentReferenceAttribute;                  // 0x0128(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAddComponentSettings">();
	}
	static class UPCGAddComponentSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAddComponentSettings>();
	}
};
static_assert(alignof(UPCGAddComponentSettings) == 0x000008, "Wrong alignment on UPCGAddComponentSettings");
static_assert(sizeof(UPCGAddComponentSettings) == 0x000150, "Wrong size on UPCGAddComponentSettings");
static_assert(offsetof(UPCGAddComponentSettings, bUseClassAttribute) == 0x0000B8, "Member 'UPCGAddComponentSettings::bUseClassAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, ClassAttribute) == 0x0000C0, "Member 'UPCGAddComponentSettings::ClassAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, TemplateComponentClass) == 0x0000E8, "Member 'UPCGAddComponentSettings::TemplateComponentClass' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, bAllowTemplateComponentEditing) == 0x0000F0, "Member 'UPCGAddComponentSettings::bAllowTemplateComponentEditing' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, TemplateComponent) == 0x0000F8, "Member 'UPCGAddComponentSettings::TemplateComponent' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, ActorReferenceAttribute) == 0x000100, "Member 'UPCGAddComponentSettings::ActorReferenceAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAddComponentSettings, ComponentReferenceAttribute) == 0x000128, "Member 'UPCGAddComponentSettings::ComponentReferenceAttribute' has a wrong offset!");

// Class PCG.PCGAddTagSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGAddTagSettings final : public UPCGSettings
{
public:
	class FString                                 TagsToAdd;                                         // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Prefix;                                            // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTagValueParsing;                            // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAddTagSettings">();
	}
	static class UPCGAddTagSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAddTagSettings>();
	}
};
static_assert(alignof(UPCGAddTagSettings) == 0x000008, "Wrong alignment on UPCGAddTagSettings");
static_assert(sizeof(UPCGAddTagSettings) == 0x0000F0, "Wrong size on UPCGAddTagSettings");
static_assert(offsetof(UPCGAddTagSettings, TagsToAdd) == 0x0000B8, "Member 'UPCGAddTagSettings::TagsToAdd' has a wrong offset!");
static_assert(offsetof(UPCGAddTagSettings, Prefix) == 0x0000C8, "Member 'UPCGAddTagSettings::Prefix' has a wrong offset!");
static_assert(offsetof(UPCGAddTagSettings, Suffix) == 0x0000D8, "Member 'UPCGAddTagSettings::Suffix' has a wrong offset!");
static_assert(offsetof(UPCGAddTagSettings, bIgnoreTagValueParsing) == 0x0000E8, "Member 'UPCGAddTagSettings::bIgnoreTagValueParsing' has a wrong offset!");
static_assert(offsetof(UPCGAddTagSettings, bTokenizeOnWhiteSpace) == 0x0000E9, "Member 'UPCGAddTagSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGApplyOnActorSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGApplyOnActorSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     ObjectReferenceAttribute;                          // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGObjectPropertyOverrideDescription> PropertyOverrideDescriptions;               // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSilenceErrorOnEmptyObjectPath;                    // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGApplyOnActorSettings">();
	}
	static class UPCGApplyOnActorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGApplyOnActorSettings>();
	}
};
static_assert(alignof(UPCGApplyOnActorSettings) == 0x000008, "Wrong alignment on UPCGApplyOnActorSettings");
static_assert(sizeof(UPCGApplyOnActorSettings) == 0x000108, "Wrong size on UPCGApplyOnActorSettings");
static_assert(offsetof(UPCGApplyOnActorSettings, ObjectReferenceAttribute) == 0x0000B8, "Member 'UPCGApplyOnActorSettings::ObjectReferenceAttribute' has a wrong offset!");
static_assert(offsetof(UPCGApplyOnActorSettings, PropertyOverrideDescriptions) == 0x0000E0, "Member 'UPCGApplyOnActorSettings::PropertyOverrideDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGApplyOnActorSettings, PostProcessFunctionNames) == 0x0000F0, "Member 'UPCGApplyOnActorSettings::PostProcessFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGApplyOnActorSettings, bSilenceErrorOnEmptyObjectPath) == 0x000100, "Member 'UPCGApplyOnActorSettings::bSilenceErrorOnEmptyObjectPath' has a wrong offset!");
static_assert(offsetof(UPCGApplyOnActorSettings, bSynchronousLoad) == 0x000101, "Member 'UPCGApplyOnActorSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGApplyScaleToBoundsSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGApplyScaleToBoundsSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGApplyScaleToBoundsSettings">();
	}
	static class UPCGApplyScaleToBoundsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGApplyScaleToBoundsSettings>();
	}
};
static_assert(alignof(UPCGApplyScaleToBoundsSettings) == 0x000008, "Wrong alignment on UPCGApplyScaleToBoundsSettings");
static_assert(sizeof(UPCGApplyScaleToBoundsSettings) == 0x0000B8, "Wrong size on UPCGApplyScaleToBoundsSettings");

// Class PCG.PCGBaseSubgraphSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGBaseSubgraphSettings : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBaseSubgraphSettings">();
	}
	static class UPCGBaseSubgraphSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBaseSubgraphSettings>();
	}
};
static_assert(alignof(UPCGBaseSubgraphSettings) == 0x000008, "Wrong alignment on UPCGBaseSubgraphSettings");
static_assert(sizeof(UPCGBaseSubgraphSettings) == 0x0000B8, "Wrong size on UPCGBaseSubgraphSettings");

// Class PCG.PCGSubgraphSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGSubgraphSettings : public UPCGBaseSubgraphSettings
{
public:
	class UPCGGraphInstance*                      SubgraphInstance;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGGraphInterface*                     SubgraphOverride;                                  // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubgraphSettings">();
	}
	static class UPCGSubgraphSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubgraphSettings>();
	}
};
static_assert(alignof(UPCGSubgraphSettings) == 0x000008, "Wrong alignment on UPCGSubgraphSettings");
static_assert(sizeof(UPCGSubgraphSettings) == 0x0000C8, "Wrong size on UPCGSubgraphSettings");
static_assert(offsetof(UPCGSubgraphSettings, SubgraphInstance) == 0x0000B8, "Member 'UPCGSubgraphSettings::SubgraphInstance' has a wrong offset!");
static_assert(offsetof(UPCGSubgraphSettings, SubgraphOverride) == 0x0000C0, "Member 'UPCGSubgraphSettings::SubgraphOverride' has a wrong offset!");

// Class PCG.PCGLoopSettings
// 0x0030 (0x00F8 - 0x00C8)
class UPCGLoopSettings final : public UPCGSubgraphSettings
{
public:
	bool                                          bUseGraphDefaultPinUsage;                          // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoopPins;                                          // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FeedbackPins;                                      // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLoopSettings">();
	}
	static class UPCGLoopSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLoopSettings>();
	}
};
static_assert(alignof(UPCGLoopSettings) == 0x000008, "Wrong alignment on UPCGLoopSettings");
static_assert(sizeof(UPCGLoopSettings) == 0x0000F8, "Wrong size on UPCGLoopSettings");
static_assert(offsetof(UPCGLoopSettings, bUseGraphDefaultPinUsage) == 0x0000C8, "Member 'UPCGLoopSettings::bUseGraphDefaultPinUsage' has a wrong offset!");
static_assert(offsetof(UPCGLoopSettings, LoopPins) == 0x0000D0, "Member 'UPCGLoopSettings::LoopPins' has a wrong offset!");
static_assert(offsetof(UPCGLoopSettings, FeedbackPins) == 0x0000E0, "Member 'UPCGLoopSettings::FeedbackPins' has a wrong offset!");
static_assert(offsetof(UPCGLoopSettings, bTokenizeOnWhiteSpace) == 0x0000F0, "Member 'UPCGLoopSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGAssetExporter
// 0x0000 (0x0028 - 0x0028)
class UPCGAssetExporter : public UObject
{
public:
	bool BP_ExportToAsset(class UPCGDataAsset* Asset);

	TSubclassOf<class UPCGDataAsset> BP_GetAssetType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAssetExporter">();
	}
	static class UPCGAssetExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAssetExporter>();
	}
};
static_assert(alignof(UPCGAssetExporter) == 0x000008, "Wrong alignment on UPCGAssetExporter");
static_assert(sizeof(UPCGAssetExporter) == 0x000028, "Wrong size on UPCGAssetExporter");

// Class PCG.PCGAssetExporterUtils
// 0x0000 (0x0028 - 0x0028)
class UPCGAssetExporterUtils final : public UBlueprintFunctionLibrary
{
public:
	static class UPackage* CreateAsset(class UPCGAssetExporter* Exporter, const struct FPCGAssetExporterParameters& Parameters);
	static void UpdateAssets(const TArray<struct FAssetData>& PCGAssets, const struct FPCGAssetExporterParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAssetExporterUtils">();
	}
	static class UPCGAssetExporterUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAssetExporterUtils>();
	}
};
static_assert(alignof(UPCGAssetExporterUtils) == 0x000008, "Wrong alignment on UPCGAssetExporterUtils");
static_assert(sizeof(UPCGAssetExporterUtils) == 0x000028, "Wrong size on UPCGAssetExporterUtils");

// Class PCG.PCGAttractSettings
// 0x0150 (0x0208 - 0x00B8)
class UPCGAttractSettings final : public UPCGSettings
{
public:
	EPCGAttractMode                               Mode;                                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     AttractorIndexAttribute;                           // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Distance;                                          // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveUnattractedPoints;                          // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     TargetAttribute;                                   // 0x00F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSourceWeight;                                  // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     SourceWeightAttribute;                             // 0x0128(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTargetWeight;                                  // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     TargetWeightAttribute;                             // 0x0158(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Weight;                                            // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FPCGAttributePropertyInputSelector, struct FPCGAttributePropertyInputSelector> SourceAndTargetAttributeMapping; // 0x0188(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOutputAttractIndex;                               // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyOutputNoSourceSelector OutputAttractIndexAttribute;                  // 0x01E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttractSettings">();
	}
	static class UPCGAttractSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttractSettings>();
	}
};
static_assert(alignof(UPCGAttractSettings) == 0x000008, "Wrong alignment on UPCGAttractSettings");
static_assert(sizeof(UPCGAttractSettings) == 0x000208, "Wrong size on UPCGAttractSettings");
static_assert(offsetof(UPCGAttractSettings, Mode) == 0x0000B8, "Member 'UPCGAttractSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, AttractorIndexAttribute) == 0x0000C0, "Member 'UPCGAttractSettings::AttractorIndexAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, Distance) == 0x0000E8, "Member 'UPCGAttractSettings::Distance' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, bRemoveUnattractedPoints) == 0x0000F0, "Member 'UPCGAttractSettings::bRemoveUnattractedPoints' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, TargetAttribute) == 0x0000F8, "Member 'UPCGAttractSettings::TargetAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, bUseSourceWeight) == 0x000120, "Member 'UPCGAttractSettings::bUseSourceWeight' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, SourceWeightAttribute) == 0x000128, "Member 'UPCGAttractSettings::SourceWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, bUseTargetWeight) == 0x000150, "Member 'UPCGAttractSettings::bUseTargetWeight' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, TargetWeightAttribute) == 0x000158, "Member 'UPCGAttractSettings::TargetWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, Weight) == 0x000180, "Member 'UPCGAttractSettings::Weight' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, SourceAndTargetAttributeMapping) == 0x000188, "Member 'UPCGAttractSettings::SourceAndTargetAttributeMapping' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, bOutputAttractIndex) == 0x0001D8, "Member 'UPCGAttractSettings::bOutputAttractIndex' has a wrong offset!");
static_assert(offsetof(UPCGAttractSettings, OutputAttractIndexAttribute) == 0x0001E0, "Member 'UPCGAttractSettings::OutputAttractIndexAttribute' has a wrong offset!");

// Class PCG.PCGAttributeCastSettings
// 0x0058 (0x0110 - 0x00B8)
class UPCGAttributeCastSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             OutputType;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeCastSettings">();
	}
	static class UPCGAttributeCastSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeCastSettings>();
	}
};
static_assert(alignof(UPCGAttributeCastSettings) == 0x000008, "Wrong alignment on UPCGAttributeCastSettings");
static_assert(sizeof(UPCGAttributeCastSettings) == 0x000110, "Wrong size on UPCGAttributeCastSettings");
static_assert(offsetof(UPCGAttributeCastSettings, InputSource) == 0x0000B8, "Member 'UPCGAttributeCastSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeCastSettings, OutputType) == 0x0000E0, "Member 'UPCGAttributeCastSettings::OutputType' has a wrong offset!");
static_assert(offsetof(UPCGAttributeCastSettings, OutputTarget) == 0x0000E8, "Member 'UPCGAttributeCastSettings::OutputTarget' has a wrong offset!");

// Class PCG.PCGAttributeExtractorTestObject
// 0x0008 (0x0030 - 0x0028)
class UPCGAttributeExtractorTestObject final : public UObject
{
public:
	double                                        DoubleValue;                                       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeExtractorTestObject">();
	}
	static class UPCGAttributeExtractorTestObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeExtractorTestObject>();
	}
};
static_assert(alignof(UPCGAttributeExtractorTestObject) == 0x000008, "Wrong alignment on UPCGAttributeExtractorTestObject");
static_assert(sizeof(UPCGAttributeExtractorTestObject) == 0x000030, "Wrong size on UPCGAttributeExtractorTestObject");
static_assert(offsetof(UPCGAttributeExtractorTestObject, DoubleValue) == 0x000028, "Member 'UPCGAttributeExtractorTestObject::DoubleValue' has a wrong offset!");

// Class PCG.PCGAttributeFilteringSettings
// 0x01E8 (0x02A0 - 0x00B8)
class UPCGAttributeFilteringSettings final : public UPCGSettings
{
public:
	EPCGAttributeFilterOperator                   Operator;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     TargetAttribute;                                   // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseConstantThreshold;                             // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     ThresholdAttribute;                                // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpatialQuery;                                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGMetadataTypesConstantStruct        AttributeTypes;                                    // 0x0120(0x0170)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bWarnOnDataMissingAttribute;                       // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSpatialToPointDeprecation;                     // 0x0291(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0xE];                                      // 0x0292(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeFilteringSettings">();
	}
	static class UPCGAttributeFilteringSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeFilteringSettings>();
	}
};
static_assert(alignof(UPCGAttributeFilteringSettings) == 0x000010, "Wrong alignment on UPCGAttributeFilteringSettings");
static_assert(sizeof(UPCGAttributeFilteringSettings) == 0x0002A0, "Wrong size on UPCGAttributeFilteringSettings");
static_assert(offsetof(UPCGAttributeFilteringSettings, Operator) == 0x0000B8, "Member 'UPCGAttributeFilteringSettings::Operator' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, TargetAttribute) == 0x0000C0, "Member 'UPCGAttributeFilteringSettings::TargetAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, bUseConstantThreshold) == 0x0000E8, "Member 'UPCGAttributeFilteringSettings::bUseConstantThreshold' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, ThresholdAttribute) == 0x0000F0, "Member 'UPCGAttributeFilteringSettings::ThresholdAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, bUseSpatialQuery) == 0x000118, "Member 'UPCGAttributeFilteringSettings::bUseSpatialQuery' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, AttributeTypes) == 0x000120, "Member 'UPCGAttributeFilteringSettings::AttributeTypes' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, bWarnOnDataMissingAttribute) == 0x000290, "Member 'UPCGAttributeFilteringSettings::bWarnOnDataMissingAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringSettings, bHasSpatialToPointDeprecation) == 0x000291, "Member 'UPCGAttributeFilteringSettings::bHasSpatialToPointDeprecation' has a wrong offset!");

// Class PCG.PCGAttributeFilteringRangeSettings
// 0x0398 (0x0450 - 0x00B8)
class UPCGAttributeFilteringRangeSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     TargetAttribute;                                   // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributeFilterThresholdSettings   MinThreshold;                                      // 0x00E0(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPCGAttributeFilterThresholdSettings   MaxThreshold;                                      // 0x0290(0x01B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bWarnOnDataMissingAttribute;                       // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSpatialToPointDeprecation;                     // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_442[0xE];                                      // 0x0442(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeFilteringRangeSettings">();
	}
	static class UPCGAttributeFilteringRangeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeFilteringRangeSettings>();
	}
};
static_assert(alignof(UPCGAttributeFilteringRangeSettings) == 0x000010, "Wrong alignment on UPCGAttributeFilteringRangeSettings");
static_assert(sizeof(UPCGAttributeFilteringRangeSettings) == 0x000450, "Wrong size on UPCGAttributeFilteringRangeSettings");
static_assert(offsetof(UPCGAttributeFilteringRangeSettings, TargetAttribute) == 0x0000B8, "Member 'UPCGAttributeFilteringRangeSettings::TargetAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringRangeSettings, MinThreshold) == 0x0000E0, "Member 'UPCGAttributeFilteringRangeSettings::MinThreshold' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringRangeSettings, MaxThreshold) == 0x000290, "Member 'UPCGAttributeFilteringRangeSettings::MaxThreshold' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringRangeSettings, bWarnOnDataMissingAttribute) == 0x000440, "Member 'UPCGAttributeFilteringRangeSettings::bWarnOnDataMissingAttribute' has a wrong offset!");
static_assert(offsetof(UPCGAttributeFilteringRangeSettings, bHasSpatialToPointDeprecation) == 0x000441, "Member 'UPCGAttributeFilteringRangeSettings::bHasSpatialToPointDeprecation' has a wrong offset!");

// Class PCG.PCGAttributePropertySelectorBlueprintHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGAttributePropertySelectorBlueprintHelpers final : public UBlueprintFunctionLibrary
{
public:
	static struct FPCGAttributePropertyInputSelector CopyAndFixLast(const struct FPCGAttributePropertyInputSelector& Selector, const class UPCGData* InData);
	static struct FPCGAttributePropertyOutputSelector CopyAndFixSource(const struct FPCGAttributePropertyOutputSelector& OutputSelector, const struct FPCGAttributePropertyInputSelector& InputSelector);
	static class FName GetAttributeName(const struct FPCGAttributePropertySelector& Selector);
	static const TArray<class FString> GetExtraNames(const struct FPCGAttributePropertySelector& Selector);
	static EPCGExtraProperties GetExtraProperty(const struct FPCGAttributePropertySelector& Selector);
	static class FName GetName(const struct FPCGAttributePropertySelector& Selector);
	static EPCGPointProperties GetPointProperty(const struct FPCGAttributePropertySelector& Selector);
	static EPCGAttributePropertySelection GetSelection(const struct FPCGAttributePropertySelector& Selector);
	static bool SetAttributeName(struct FPCGAttributePropertySelector& Selector, class FName InAttributeName);
	static bool SetExtraProperty(struct FPCGAttributePropertySelector& Selector, EPCGExtraProperties InExtraProperty);
	static bool SetPointProperty(struct FPCGAttributePropertySelector& Selector, EPCGPointProperties InPointProperty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributePropertySelectorBlueprintHelpers">();
	}
	static class UPCGAttributePropertySelectorBlueprintHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributePropertySelectorBlueprintHelpers>();
	}
};
static_assert(alignof(UPCGAttributePropertySelectorBlueprintHelpers) == 0x000008, "Wrong alignment on UPCGAttributePropertySelectorBlueprintHelpers");
static_assert(sizeof(UPCGAttributePropertySelectorBlueprintHelpers) == 0x000028, "Wrong size on UPCGAttributePropertySelectorBlueprintHelpers");

// Class PCG.PCGMetadataSettingsBase
// 0x0030 (0x00E8 - 0x00B8)
class UPCGMetadataSettingsBase : public UPCGSettings
{
public:
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputDataFromPin;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<class FName> GetOutputDataFromPinOptions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataSettingsBase">();
	}
	static class UPCGMetadataSettingsBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataSettingsBase>();
	}
};
static_assert(alignof(UPCGMetadataSettingsBase) == 0x000008, "Wrong alignment on UPCGMetadataSettingsBase");
static_assert(sizeof(UPCGMetadataSettingsBase) == 0x0000E8, "Wrong size on UPCGMetadataSettingsBase");
static_assert(offsetof(UPCGMetadataSettingsBase, OutputTarget) == 0x0000B8, "Member 'UPCGMetadataSettingsBase::OutputTarget' has a wrong offset!");
static_assert(offsetof(UPCGMetadataSettingsBase, OutputDataFromPin) == 0x0000E0, "Member 'UPCGMetadataSettingsBase::OutputDataFromPin' has a wrong offset!");

// Class PCG.PCGAttributeRemapSettings
// 0x0050 (0x0138 - 0x00E8)
class UPCGAttributeRemapSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InRangeMin;                                        // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        InRangeMax;                                        // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutRangeMin;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutRangeMax;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampToUnitRange;                                 // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreValuesOutsideInputRange;                    // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowInverseRange;                                // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeRemapSettings">();
	}
	static class UPCGAttributeRemapSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeRemapSettings>();
	}
};
static_assert(alignof(UPCGAttributeRemapSettings) == 0x000008, "Wrong alignment on UPCGAttributeRemapSettings");
static_assert(sizeof(UPCGAttributeRemapSettings) == 0x000138, "Wrong size on UPCGAttributeRemapSettings");
static_assert(offsetof(UPCGAttributeRemapSettings, InputSource) == 0x0000E8, "Member 'UPCGAttributeRemapSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, InRangeMin) == 0x000110, "Member 'UPCGAttributeRemapSettings::InRangeMin' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, InRangeMax) == 0x000118, "Member 'UPCGAttributeRemapSettings::InRangeMax' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, OutRangeMin) == 0x000120, "Member 'UPCGAttributeRemapSettings::OutRangeMin' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, OutRangeMax) == 0x000128, "Member 'UPCGAttributeRemapSettings::OutRangeMax' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, bClampToUnitRange) == 0x000130, "Member 'UPCGAttributeRemapSettings::bClampToUnitRange' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, bIgnoreValuesOutsideInputRange) == 0x000131, "Member 'UPCGAttributeRemapSettings::bIgnoreValuesOutsideInputRange' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemapSettings, bAllowInverseRange) == 0x000132, "Member 'UPCGAttributeRemapSettings::bAllowInverseRange' has a wrong offset!");

// Class PCG.PCGAttributeRemoveDuplicatesSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGAttributeRemoveDuplicatesSettings final : public UPCGSettings
{
public:
	TArray<struct FPCGAttributePropertyInputSelector> AttributeSelectors;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AttributeNamesToRemoveDuplicates;                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeRemoveDuplicatesSettings">();
	}
	static class UPCGAttributeRemoveDuplicatesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeRemoveDuplicatesSettings>();
	}
};
static_assert(alignof(UPCGAttributeRemoveDuplicatesSettings) == 0x000008, "Wrong alignment on UPCGAttributeRemoveDuplicatesSettings");
static_assert(sizeof(UPCGAttributeRemoveDuplicatesSettings) == 0x0000D8, "Wrong size on UPCGAttributeRemoveDuplicatesSettings");
static_assert(offsetof(UPCGAttributeRemoveDuplicatesSettings, AttributeSelectors) == 0x0000B8, "Member 'UPCGAttributeRemoveDuplicatesSettings::AttributeSelectors' has a wrong offset!");
static_assert(offsetof(UPCGAttributeRemoveDuplicatesSettings, AttributeNamesToRemoveDuplicates) == 0x0000C8, "Member 'UPCGAttributeRemoveDuplicatesSettings::AttributeNamesToRemoveDuplicates' has a wrong offset!");

// Class PCG.PCGCopyAttributesSettings
// 0x0058 (0x0110 - 0x00B8)
class UPCGCopyAttributesSettings : public UPCGSettings
{
public:
	EPCGCopyAttributesOperation                   Operation;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyAllAttributes;                                // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCopyAttributesSettings">();
	}
	static class UPCGCopyAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCopyAttributesSettings>();
	}
};
static_assert(alignof(UPCGCopyAttributesSettings) == 0x000008, "Wrong alignment on UPCGCopyAttributesSettings");
static_assert(sizeof(UPCGCopyAttributesSettings) == 0x000110, "Wrong size on UPCGCopyAttributesSettings");
static_assert(offsetof(UPCGCopyAttributesSettings, Operation) == 0x0000B8, "Member 'UPCGCopyAttributesSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGCopyAttributesSettings, bCopyAllAttributes) == 0x0000BC, "Member 'UPCGCopyAttributesSettings::bCopyAllAttributes' has a wrong offset!");
static_assert(offsetof(UPCGCopyAttributesSettings, InputSource) == 0x0000C0, "Member 'UPCGCopyAttributesSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGCopyAttributesSettings, OutputTarget) == 0x0000E8, "Member 'UPCGCopyAttributesSettings::OutputTarget' has a wrong offset!");

// Class PCG.PCGAttributeTransferSettings
// 0x0000 (0x0110 - 0x0110)
class UPCGAttributeTransferSettings final : public UPCGCopyAttributesSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeTransferSettings">();
	}
	static class UPCGAttributeTransferSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeTransferSettings>();
	}
};
static_assert(alignof(UPCGAttributeTransferSettings) == 0x000008, "Wrong alignment on UPCGAttributeTransferSettings");
static_assert(sizeof(UPCGAttributeTransferSettings) == 0x000110, "Wrong size on UPCGAttributeTransferSettings");

// Class PCG.PCGBlurSettings
// 0x0070 (0x0128 - 0x00B8)
class UPCGBlurSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumIterations;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SearchDistance;                                    // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGBlurElementMode                           BlurMode;                                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomStandardDeviation;                       // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CustomStandardDeviation;                           // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBlurSettings">();
	}
	static class UPCGBlurSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBlurSettings>();
	}
};
static_assert(alignof(UPCGBlurSettings) == 0x000008, "Wrong alignment on UPCGBlurSettings");
static_assert(sizeof(UPCGBlurSettings) == 0x000128, "Wrong size on UPCGBlurSettings");
static_assert(offsetof(UPCGBlurSettings, InputSource) == 0x0000B8, "Member 'UPCGBlurSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, OutputTarget) == 0x0000E0, "Member 'UPCGBlurSettings::OutputTarget' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, NumIterations) == 0x000108, "Member 'UPCGBlurSettings::NumIterations' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, SearchDistance) == 0x000110, "Member 'UPCGBlurSettings::SearchDistance' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, BlurMode) == 0x000118, "Member 'UPCGBlurSettings::BlurMode' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, bUseCustomStandardDeviation) == 0x00011C, "Member 'UPCGBlurSettings::bUseCustomStandardDeviation' has a wrong offset!");
static_assert(offsetof(UPCGBlurSettings, CustomStandardDeviation) == 0x000120, "Member 'UPCGBlurSettings::CustomStandardDeviation' has a wrong offset!");

// Class PCG.PCGBooleanSelectSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGBooleanSelectSettings final : public UPCGSettings
{
public:
	bool                                          bUseInputB;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBooleanSelectSettings">();
	}
	static class UPCGBooleanSelectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBooleanSelectSettings>();
	}
};
static_assert(alignof(UPCGBooleanSelectSettings) == 0x000008, "Wrong alignment on UPCGBooleanSelectSettings");
static_assert(sizeof(UPCGBooleanSelectSettings) == 0x0000C0, "Wrong size on UPCGBooleanSelectSettings");
static_assert(offsetof(UPCGBooleanSelectSettings, bUseInputB) == 0x0000B8, "Member 'UPCGBooleanSelectSettings::bUseInputB' has a wrong offset!");

// Class PCG.PCGBoundsFromMeshSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGBoundsFromMeshSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     MeshAttribute;                                     // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceAttributeNotFoundErrors;                   // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBoundsFromMeshSettings">();
	}
	static class UPCGBoundsFromMeshSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBoundsFromMeshSettings>();
	}
};
static_assert(alignof(UPCGBoundsFromMeshSettings) == 0x000008, "Wrong alignment on UPCGBoundsFromMeshSettings");
static_assert(sizeof(UPCGBoundsFromMeshSettings) == 0x0000E8, "Wrong size on UPCGBoundsFromMeshSettings");
static_assert(offsetof(UPCGBoundsFromMeshSettings, MeshAttribute) == 0x0000B8, "Member 'UPCGBoundsFromMeshSettings::MeshAttribute' has a wrong offset!");
static_assert(offsetof(UPCGBoundsFromMeshSettings, bSilenceAttributeNotFoundErrors) == 0x0000E0, "Member 'UPCGBoundsFromMeshSettings::bSilenceAttributeNotFoundErrors' has a wrong offset!");
static_assert(offsetof(UPCGBoundsFromMeshSettings, bSynchronousLoad) == 0x0000E1, "Member 'UPCGBoundsFromMeshSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGBranchSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGBranchSettings final : public UPCGSettings
{
public:
	bool                                          bOutputToB;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBranchSettings">();
	}
	static class UPCGBranchSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBranchSettings>();
	}
};
static_assert(alignof(UPCGBranchSettings) == 0x000008, "Wrong alignment on UPCGBranchSettings");
static_assert(sizeof(UPCGBranchSettings) == 0x0000C0, "Wrong size on UPCGBranchSettings");
static_assert(offsetof(UPCGBranchSettings, bOutputToB) == 0x0000B8, "Member 'UPCGBranchSettings::bOutputToB' has a wrong offset!");

// Class PCG.PCGCleanSplineSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGCleanSplineSettings final : public UPCGSettings
{
public:
	bool                                          bFuseColocatedControlPoints;                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ColocationDistanceThreshold;                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSplineLocalSpace;                              // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGControlPointFuseMode                      FuseMode;                                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveCollinearControlPoints;                     // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CollinearAngleThreshold;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRadians;                                       // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCleanSplineSettings">();
	}
	static class UPCGCleanSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCleanSplineSettings>();
	}
};
static_assert(alignof(UPCGCleanSplineSettings) == 0x000008, "Wrong alignment on UPCGCleanSplineSettings");
static_assert(sizeof(UPCGCleanSplineSettings) == 0x0000E8, "Wrong size on UPCGCleanSplineSettings");
static_assert(offsetof(UPCGCleanSplineSettings, bFuseColocatedControlPoints) == 0x0000B8, "Member 'UPCGCleanSplineSettings::bFuseColocatedControlPoints' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, ColocationDistanceThreshold) == 0x0000C0, "Member 'UPCGCleanSplineSettings::ColocationDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, bUseSplineLocalSpace) == 0x0000C8, "Member 'UPCGCleanSplineSettings::bUseSplineLocalSpace' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, FuseMode) == 0x0000CC, "Member 'UPCGCleanSplineSettings::FuseMode' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, bRemoveCollinearControlPoints) == 0x0000D0, "Member 'UPCGCleanSplineSettings::bRemoveCollinearControlPoints' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, CollinearAngleThreshold) == 0x0000D8, "Member 'UPCGCleanSplineSettings::CollinearAngleThreshold' has a wrong offset!");
static_assert(offsetof(UPCGCleanSplineSettings, bUseRadians) == 0x0000E0, "Member 'UPCGCleanSplineSettings::bUseRadians' has a wrong offset!");

// Class PCG.PCGClusterSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGClusterSettings final : public UPCGSettings
{
public:
	EPCGClusterAlgorithm                          Algorithm;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumClusters;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClusterAttribute;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Tolerance;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputFinalCentroids;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGClusterSettings">();
	}
	static class UPCGClusterSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGClusterSettings>();
	}
};
static_assert(alignof(UPCGClusterSettings) == 0x000008, "Wrong alignment on UPCGClusterSettings");
static_assert(sizeof(UPCGClusterSettings) == 0x0000E0, "Wrong size on UPCGClusterSettings");
static_assert(offsetof(UPCGClusterSettings, Algorithm) == 0x0000B8, "Member 'UPCGClusterSettings::Algorithm' has a wrong offset!");
static_assert(offsetof(UPCGClusterSettings, NumClusters) == 0x0000BC, "Member 'UPCGClusterSettings::NumClusters' has a wrong offset!");
static_assert(offsetof(UPCGClusterSettings, ClusterAttribute) == 0x0000C0, "Member 'UPCGClusterSettings::ClusterAttribute' has a wrong offset!");
static_assert(offsetof(UPCGClusterSettings, MaxIterations) == 0x0000C8, "Member 'UPCGClusterSettings::MaxIterations' has a wrong offset!");
static_assert(offsetof(UPCGClusterSettings, Tolerance) == 0x0000D0, "Member 'UPCGClusterSettings::Tolerance' has a wrong offset!");
static_assert(offsetof(UPCGClusterSettings, bOutputFinalCentroids) == 0x0000D8, "Member 'UPCGClusterSettings::bOutputFinalCentroids' has a wrong offset!");

// Class PCG.PCGCollapsePointsSettings
// 0x0078 (0x0130 - 0x00B8)
class UPCGCollapsePointsSettings final : public UPCGSettings
{
public:
	double                                        DistanceThreshold;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCollapseMode                              Mode;                                              // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCollapseComparisonMode                    ComparisonMode;                                    // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCollapseVisitOrder                        VisitOrder;                                        // 0x00C2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     VisitOrderAttribute;                               // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMergeWeightAttribute;                          // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     MergeWeightAttribute;                              // 0x00F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGAttributePropertyOutputNoSourceSelector> AttributesToMerge;                    // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCollapsePointsSettings">();
	}
	static class UPCGCollapsePointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCollapsePointsSettings>();
	}
};
static_assert(alignof(UPCGCollapsePointsSettings) == 0x000008, "Wrong alignment on UPCGCollapsePointsSettings");
static_assert(sizeof(UPCGCollapsePointsSettings) == 0x000130, "Wrong size on UPCGCollapsePointsSettings");
static_assert(offsetof(UPCGCollapsePointsSettings, DistanceThreshold) == 0x0000B8, "Member 'UPCGCollapsePointsSettings::DistanceThreshold' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, Mode) == 0x0000C0, "Member 'UPCGCollapsePointsSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, ComparisonMode) == 0x0000C1, "Member 'UPCGCollapsePointsSettings::ComparisonMode' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, VisitOrder) == 0x0000C2, "Member 'UPCGCollapsePointsSettings::VisitOrder' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, VisitOrderAttribute) == 0x0000C8, "Member 'UPCGCollapsePointsSettings::VisitOrderAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, bUseMergeWeightAttribute) == 0x0000F0, "Member 'UPCGCollapsePointsSettings::bUseMergeWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, MergeWeightAttribute) == 0x0000F8, "Member 'UPCGCollapsePointsSettings::MergeWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCollapsePointsSettings, AttributesToMerge) == 0x000120, "Member 'UPCGCollapsePointsSettings::AttributesToMerge' has a wrong offset!");

// Class PCG.PCGSpatialData
// 0x0048 (0x0080 - 0x0038)
class UPCGSpatialData : public UPCGData
{
public:
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepZeroDensityPoints;                            // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           MetaData;                                          // 0x0048(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCachedLastSelector;                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     CachedLastSelector;                                // 0x0058(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UPCGMetadata* CreateEmptyMetadata();
	void InitializeFromData(const class UPCGSpatialData* InSource, const class UPCGMetadata* InMetadataParentOverride, bool bInheritMetadata, bool bInheritAttributes);
	class UPCGMetadata* MutableMetadata();

	const class UPCGMetadata* ConstMetadata() const;
	struct FBox GetBounds() const;
	float GetDensityAtPosition(const struct FVector& InPosition) const;
	int32 GetDimension() const;
	struct FVector GetNormal() const;
	struct FBox GetStrictBounds() const;
	bool HasNonTrivialTransform() const;
	class UPCGIntersectionData* K2_IntersectWith(const class UPCGSpatialData* InOther) const;
	class UPCGSpatialData* K2_ProjectOn(const class UPCGSpatialData* InOther, const struct FPCGProjectionParams& InParams) const;
	bool K2_ProjectPoint(const struct FTransform& InTransform, const struct FBox& InBounds, const struct FPCGProjectionParams& InParams, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata) const;
	bool K2_SamplePoint(const struct FTransform& Transform, const struct FBox& Bounds, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata) const;
	class UPCGDifferenceData* K2_Subtract(const class UPCGSpatialData* InOther) const;
	class UPCGUnionData* K2_UnionWith(const class UPCGSpatialData* InOther) const;
	const class UPCGPointData* ToPointData() const;
	const class UPCGPointData* ToPointDataWithContext(struct FPCGContext& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpatialData">();
	}
	static class UPCGSpatialData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpatialData>();
	}
};
static_assert(alignof(UPCGSpatialData) == 0x000008, "Wrong alignment on UPCGSpatialData");
static_assert(sizeof(UPCGSpatialData) == 0x000080, "Wrong size on UPCGSpatialData");
static_assert(offsetof(UPCGSpatialData, TargetActor) == 0x000038, "Member 'UPCGSpatialData::TargetActor' has a wrong offset!");
static_assert(offsetof(UPCGSpatialData, bKeepZeroDensityPoints) == 0x000040, "Member 'UPCGSpatialData::bKeepZeroDensityPoints' has a wrong offset!");
static_assert(offsetof(UPCGSpatialData, MetaData) == 0x000048, "Member 'UPCGSpatialData::MetaData' has a wrong offset!");
static_assert(offsetof(UPCGSpatialData, bHasCachedLastSelector) == 0x000050, "Member 'UPCGSpatialData::bHasCachedLastSelector' has a wrong offset!");
static_assert(offsetof(UPCGSpatialData, CachedLastSelector) == 0x000058, "Member 'UPCGSpatialData::CachedLastSelector' has a wrong offset!");

// Class PCG.PCGSpatialDataWithPointCache
// 0x0050 (0x00D0 - 0x0080)
class UPCGSpatialDataWithPointCache : public UPCGSpatialData
{
public:
	class UPCGPointData*                          CachedPointData;                                   // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBox>                           CachedBoundedPointDataBoxes;                       // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UPCGPointData*>                  CachedBoundedPointData;                            // 0x0098(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x28];                                      // 0x00A8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpatialDataWithPointCache">();
	}
	static class UPCGSpatialDataWithPointCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpatialDataWithPointCache>();
	}
};
static_assert(alignof(UPCGSpatialDataWithPointCache) == 0x000008, "Wrong alignment on UPCGSpatialDataWithPointCache");
static_assert(sizeof(UPCGSpatialDataWithPointCache) == 0x0000D0, "Wrong size on UPCGSpatialDataWithPointCache");
static_assert(offsetof(UPCGSpatialDataWithPointCache, CachedPointData) == 0x000080, "Member 'UPCGSpatialDataWithPointCache::CachedPointData' has a wrong offset!");
static_assert(offsetof(UPCGSpatialDataWithPointCache, CachedBoundedPointDataBoxes) == 0x000088, "Member 'UPCGSpatialDataWithPointCache::CachedBoundedPointDataBoxes' has a wrong offset!");
static_assert(offsetof(UPCGSpatialDataWithPointCache, CachedBoundedPointData) == 0x000098, "Member 'UPCGSpatialDataWithPointCache::CachedBoundedPointData' has a wrong offset!");

// Class PCG.PCGCollisionShapeData
// 0x00F0 (0x01C0 - 0x00D0)
class UPCGCollisionShapeData final : public UPCGSpatialDataWithPointCache
{
public:
	struct FTransform                             Transform;                                         // 0x00D0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   CachedBounds;                                      // 0x0148(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedStrictBounds;                                // 0x0180(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCollisionShapeData">();
	}
	static class UPCGCollisionShapeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCollisionShapeData>();
	}
};
static_assert(alignof(UPCGCollisionShapeData) == 0x000010, "Wrong alignment on UPCGCollisionShapeData");
static_assert(sizeof(UPCGCollisionShapeData) == 0x0001C0, "Wrong size on UPCGCollisionShapeData");
static_assert(offsetof(UPCGCollisionShapeData, Transform) == 0x0000D0, "Member 'UPCGCollisionShapeData::Transform' has a wrong offset!");
static_assert(offsetof(UPCGCollisionShapeData, CachedBounds) == 0x000148, "Member 'UPCGCollisionShapeData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGCollisionShapeData, CachedStrictBounds) == 0x000180, "Member 'UPCGCollisionShapeData::CachedStrictBounds' has a wrong offset!");

// Class PCG.PCGCombinePointsSettings
// 0x0068 (0x0120 - 0x00B8)
class UPCGCombinePointsSettings final : public UPCGSettings
{
public:
	bool                                          bCenterPivot;                                      // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFirstPointTransform;                           // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PointTransform;                                    // 0x00C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCombinePointsSettings">();
	}
	static class UPCGCombinePointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCombinePointsSettings>();
	}
};
static_assert(alignof(UPCGCombinePointsSettings) == 0x000010, "Wrong alignment on UPCGCombinePointsSettings");
static_assert(sizeof(UPCGCombinePointsSettings) == 0x000120, "Wrong size on UPCGCombinePointsSettings");
static_assert(offsetof(UPCGCombinePointsSettings, bCenterPivot) == 0x0000B8, "Member 'UPCGCombinePointsSettings::bCenterPivot' has a wrong offset!");
static_assert(offsetof(UPCGCombinePointsSettings, bUseFirstPointTransform) == 0x0000B9, "Member 'UPCGCombinePointsSettings::bUseFirstPointTransform' has a wrong offset!");
static_assert(offsetof(UPCGCombinePointsSettings, PointTransform) == 0x0000C0, "Member 'UPCGCombinePointsSettings::PointTransform' has a wrong offset!");

// Class PCG.PCGComputeDataInterface
// 0x0020 (0x0048 - 0x0028)
class UPCGComputeDataInterface : public UComputeDataInterface
{
public:
	class FName                                   OutputPinLabel;                                    // 0x0028(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   OutputPinLabelAlias;                               // 0x0030(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           DownstreamInputPinLabelAliases;                    // 0x0038(0x0010)(BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGComputeDataInterface">();
	}
	static class UPCGComputeDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGComputeDataInterface>();
	}
};
static_assert(alignof(UPCGComputeDataInterface) == 0x000008, "Wrong alignment on UPCGComputeDataInterface");
static_assert(sizeof(UPCGComputeDataInterface) == 0x000048, "Wrong size on UPCGComputeDataInterface");
static_assert(offsetof(UPCGComputeDataInterface, OutputPinLabel) == 0x000028, "Member 'UPCGComputeDataInterface::OutputPinLabel' has a wrong offset!");
static_assert(offsetof(UPCGComputeDataInterface, OutputPinLabelAlias) == 0x000030, "Member 'UPCGComputeDataInterface::OutputPinLabelAlias' has a wrong offset!");
static_assert(offsetof(UPCGComputeDataInterface, DownstreamInputPinLabelAliases) == 0x000038, "Member 'UPCGComputeDataInterface::DownstreamInputPinLabelAliases' has a wrong offset!");

// Class PCG.PCGComputeKernelSource
// 0x0010 (0x00A8 - 0x0098)
class UPCGComputeKernelSource final : public UComputeKernelSource
{
public:
	class FString                                 Source;                                            // 0x0098(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGComputeKernelSource">();
	}
	static class UPCGComputeKernelSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGComputeKernelSource>();
	}
};
static_assert(alignof(UPCGComputeKernelSource) == 0x000008, "Wrong alignment on UPCGComputeKernelSource");
static_assert(sizeof(UPCGComputeKernelSource) == 0x0000A8, "Wrong size on UPCGComputeKernelSource");
static_assert(offsetof(UPCGComputeKernelSource, Source) == 0x000098, "Member 'UPCGComputeKernelSource::Source' has a wrong offset!");

// Class PCG.PCGConvexHull2DSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGConvexHull2DSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGConvexHull2DSettings">();
	}
	static class UPCGConvexHull2DSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGConvexHull2DSettings>();
	}
};
static_assert(alignof(UPCGConvexHull2DSettings) == 0x000008, "Wrong alignment on UPCGConvexHull2DSettings");
static_assert(sizeof(UPCGConvexHull2DSettings) == 0x0000B8, "Wrong size on UPCGConvexHull2DSettings");

// Class PCG.PCGCreatePointsSettings
// 0x0018 (0x00D0 - 0x00B8)
class UPCGCreatePointsSettings final : public UPCGSettings
{
public:
	TArray<struct FPCGPoint>                      PointsToCreate;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EPCGCoordinateSpace                           CoordinateSpace;                                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullPointsOutsideVolume;                          // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreatePointsSettings">();
	}
	static class UPCGCreatePointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreatePointsSettings>();
	}
};
static_assert(alignof(UPCGCreatePointsSettings) == 0x000008, "Wrong alignment on UPCGCreatePointsSettings");
static_assert(sizeof(UPCGCreatePointsSettings) == 0x0000D0, "Wrong size on UPCGCreatePointsSettings");
static_assert(offsetof(UPCGCreatePointsSettings, PointsToCreate) == 0x0000B8, "Member 'UPCGCreatePointsSettings::PointsToCreate' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSettings, CoordinateSpace) == 0x0000C8, "Member 'UPCGCreatePointsSettings::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSettings, bCullPointsOutsideVolume) == 0x0000C9, "Member 'UPCGCreatePointsSettings::bCullPointsOutsideVolume' has a wrong offset!");

// Class PCG.PCGCreatePointsGridSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGCreatePointsGridSettings final : public UPCGSettings
{
public:
	struct FVector                                GridExtents;                                       // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CellSize;                                          // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointSteepness;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCoordinateSpace                           CoordinateSpace;                                   // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPointsBounds;                                  // 0x00ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullPointsOutsideVolume;                          // 0x00EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPointPosition                             PointPosition;                                     // 0x00EF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreatePointsGridSettings">();
	}
	static class UPCGCreatePointsGridSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreatePointsGridSettings>();
	}
};
static_assert(alignof(UPCGCreatePointsGridSettings) == 0x000008, "Wrong alignment on UPCGCreatePointsGridSettings");
static_assert(sizeof(UPCGCreatePointsGridSettings) == 0x0000F0, "Wrong size on UPCGCreatePointsGridSettings");
static_assert(offsetof(UPCGCreatePointsGridSettings, GridExtents) == 0x0000B8, "Member 'UPCGCreatePointsGridSettings::GridExtents' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, CellSize) == 0x0000D0, "Member 'UPCGCreatePointsGridSettings::CellSize' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, PointSteepness) == 0x0000E8, "Member 'UPCGCreatePointsGridSettings::PointSteepness' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, CoordinateSpace) == 0x0000EC, "Member 'UPCGCreatePointsGridSettings::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, bSetPointsBounds) == 0x0000ED, "Member 'UPCGCreatePointsGridSettings::bSetPointsBounds' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, bCullPointsOutsideVolume) == 0x0000EE, "Member 'UPCGCreatePointsGridSettings::bCullPointsOutsideVolume' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsGridSettings, PointPosition) == 0x0000EF, "Member 'UPCGCreatePointsGridSettings::PointPosition' has a wrong offset!");

// Class PCG.PCGCullPointsOutsideActorBoundsSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGCullPointsOutsideActorBoundsSettings final : public UPCGSettings
{
public:
	float                                         BoundsExpansion;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCullPointsMode                            Mode;                                              // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCullPointsOutsideActorBoundsSettings">();
	}
	static class UPCGCullPointsOutsideActorBoundsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCullPointsOutsideActorBoundsSettings>();
	}
};
static_assert(alignof(UPCGCullPointsOutsideActorBoundsSettings) == 0x000008, "Wrong alignment on UPCGCullPointsOutsideActorBoundsSettings");
static_assert(sizeof(UPCGCullPointsOutsideActorBoundsSettings) == 0x0000C0, "Wrong size on UPCGCullPointsOutsideActorBoundsSettings");
static_assert(offsetof(UPCGCullPointsOutsideActorBoundsSettings, BoundsExpansion) == 0x0000B8, "Member 'UPCGCullPointsOutsideActorBoundsSettings::BoundsExpansion' has a wrong offset!");
static_assert(offsetof(UPCGCullPointsOutsideActorBoundsSettings, Mode) == 0x0000BC, "Member 'UPCGCullPointsOutsideActorBoundsSettings::Mode' has a wrong offset!");

// Class PCG.PCGDataAsset
// 0x0040 (0x0068 - 0x0028)
class UPCGDataAsset final : public UObject
{
public:
	struct FPCGDataCollection                     Data;                                              // 0x0028(0x0030)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataAsset">();
	}
	static class UPCGDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataAsset>();
	}
};
static_assert(alignof(UPCGDataAsset) == 0x000008, "Wrong alignment on UPCGDataAsset");
static_assert(sizeof(UPCGDataAsset) == 0x000068, "Wrong size on UPCGDataAsset");
static_assert(offsetof(UPCGDataAsset, Data) == 0x000028, "Member 'UPCGDataAsset::Data' has a wrong offset!");
static_assert(offsetof(UPCGDataAsset, Name_0) == 0x000058, "Member 'UPCGDataAsset::Name_0' has a wrong offset!");

// Class PCG.PCGDataBinding
// 0x01C0 (0x01E8 - 0x0028)
class UPCGDataBinding final : public UObject
{
public:
	TWeakObjectPtr<class UPCGComponent>           SourceComponent;                                   // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGDataCollection                     OutputDataCollection;                              // 0x0030(0x0030)(NativeAccessSpecifierPublic)
	class UPCGComputeGraph*                       Graph;                                             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGDataForGPU                         DataForGPU;                                        // 0x0068(0x00D0)(NativeAccessSpecifierPublic)
	TMap<class UPCGSettings*, struct FPCGSpawnerPrimitives> MeshSpawnersToPrimitives;                // 0x0138(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class FName, struct FPCGKernelAttributeIDAndType> GlobalAttributeLookupTable;               // 0x0188(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         StringTable;                                       // 0x01D8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataBinding">();
	}
	static class UPCGDataBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataBinding>();
	}
};
static_assert(alignof(UPCGDataBinding) == 0x000008, "Wrong alignment on UPCGDataBinding");
static_assert(sizeof(UPCGDataBinding) == 0x0001E8, "Wrong size on UPCGDataBinding");
static_assert(offsetof(UPCGDataBinding, SourceComponent) == 0x000028, "Member 'UPCGDataBinding::SourceComponent' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, OutputDataCollection) == 0x000030, "Member 'UPCGDataBinding::OutputDataCollection' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, Graph) == 0x000060, "Member 'UPCGDataBinding::Graph' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, DataForGPU) == 0x000068, "Member 'UPCGDataBinding::DataForGPU' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, MeshSpawnersToPrimitives) == 0x000138, "Member 'UPCGDataBinding::MeshSpawnersToPrimitives' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, GlobalAttributeLookupTable) == 0x000188, "Member 'UPCGDataBinding::GlobalAttributeLookupTable' has a wrong offset!");
static_assert(offsetof(UPCGDataBinding, StringTable) == 0x0001D8, "Member 'UPCGDataBinding::StringTable' has a wrong offset!");

// Class PCG.PCGDataCollectionDataInterface
// 0x0010 (0x0058 - 0x0048)
class UPCGDataCollectionDataInterface : public UPCGComputeDataInterface
{
public:
	class UPCGSettings*                           ProducerSettings;                                  // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequiresReadback;                                 // 0x0050(0x0001)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataCollectionDataInterface">();
	}
	static class UPCGDataCollectionDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataCollectionDataInterface>();
	}
};
static_assert(alignof(UPCGDataCollectionDataInterface) == 0x000008, "Wrong alignment on UPCGDataCollectionDataInterface");
static_assert(sizeof(UPCGDataCollectionDataInterface) == 0x000058, "Wrong size on UPCGDataCollectionDataInterface");
static_assert(offsetof(UPCGDataCollectionDataInterface, ProducerSettings) == 0x000048, "Member 'UPCGDataCollectionDataInterface::ProducerSettings' has a wrong offset!");
static_assert(offsetof(UPCGDataCollectionDataInterface, bRequiresReadback) == 0x000050, "Member 'UPCGDataCollectionDataInterface::bRequiresReadback' has a wrong offset!");

// Class PCG.PCGDataCollectionDataProvider
// 0x0060 (0x0088 - 0x0028)
class UPCGDataCollectionDataProvider : public UComputeDataProvider
{
public:
	class UPCGSettings*                           ProducerSettings;                                  // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataCollectionDataProvider">();
	}
	static class UPCGDataCollectionDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataCollectionDataProvider>();
	}
};
static_assert(alignof(UPCGDataCollectionDataProvider) == 0x000008, "Wrong alignment on UPCGDataCollectionDataProvider");
static_assert(sizeof(UPCGDataCollectionDataProvider) == 0x000088, "Wrong size on UPCGDataCollectionDataProvider");
static_assert(offsetof(UPCGDataCollectionDataProvider, ProducerSettings) == 0x000028, "Member 'UPCGDataCollectionDataProvider::ProducerSettings' has a wrong offset!");

// Class PCG.PCGDataCollectionUploadDataInterface
// 0x0000 (0x0058 - 0x0058)
class UPCGDataCollectionUploadDataInterface final : public UPCGDataCollectionDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataCollectionUploadDataInterface">();
	}
	static class UPCGDataCollectionUploadDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataCollectionUploadDataInterface>();
	}
};
static_assert(alignof(UPCGDataCollectionUploadDataInterface) == 0x000008, "Wrong alignment on UPCGDataCollectionUploadDataInterface");
static_assert(sizeof(UPCGDataCollectionUploadDataInterface) == 0x000058, "Wrong size on UPCGDataCollectionUploadDataInterface");

// Class PCG.PCGDataProviderDataCollectionUpload
// 0x0010 (0x0098 - 0x0088)
class UPCGDataProviderDataCollectionUpload final : public UPCGDataCollectionDataProvider
{
public:
	uint8                                         Pad_88[0x10];                                      // 0x0088(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataProviderDataCollectionUpload">();
	}
	static class UPCGDataProviderDataCollectionUpload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataProviderDataCollectionUpload>();
	}
};
static_assert(alignof(UPCGDataProviderDataCollectionUpload) == 0x000008, "Wrong alignment on UPCGDataProviderDataCollectionUpload");
static_assert(sizeof(UPCGDataProviderDataCollectionUpload) == 0x000098, "Wrong size on UPCGDataProviderDataCollectionUpload");

// Class PCG.PCGTagsToAttributeSetSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGTagsToAttributeSetSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTagsToAttributeSetSettings">();
	}
	static class UPCGTagsToAttributeSetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTagsToAttributeSetSettings>();
	}
};
static_assert(alignof(UPCGTagsToAttributeSetSettings) == 0x000008, "Wrong alignment on UPCGTagsToAttributeSetSettings");
static_assert(sizeof(UPCGTagsToAttributeSetSettings) == 0x0000B8, "Wrong size on UPCGTagsToAttributeSetSettings");

// Class PCG.PCGExternalDataSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGExternalDataSettings : public UPCGSettings
{
public:
	TMap<class FString, struct FPCGAttributePropertyInputSelector> AttributeMapping;                 // 0x00B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGExternalDataSettings">();
	}
	static class UPCGExternalDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGExternalDataSettings>();
	}
};
static_assert(alignof(UPCGExternalDataSettings) == 0x000008, "Wrong alignment on UPCGExternalDataSettings");
static_assert(sizeof(UPCGExternalDataSettings) == 0x000108, "Wrong size on UPCGExternalDataSettings");
static_assert(offsetof(UPCGExternalDataSettings, AttributeMapping) == 0x0000B8, "Member 'UPCGExternalDataSettings::AttributeMapping' has a wrong offset!");

// Class PCG.PCGLoadDataTableSettings
// 0x0030 (0x0138 - 0x0108)
class UPCGLoadDataTableSettings final : public UPCGExternalDataSettings
{
public:
	TSoftObjectPtr<class UDataTable>              DataTable;                                         // 0x0108(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGExclusiveDataType                         OutputType;                                        // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLoadDataTableSettings">();
	}
	static class UPCGLoadDataTableSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLoadDataTableSettings>();
	}
};
static_assert(alignof(UPCGLoadDataTableSettings) == 0x000008, "Wrong alignment on UPCGLoadDataTableSettings");
static_assert(sizeof(UPCGLoadDataTableSettings) == 0x000138, "Wrong size on UPCGLoadDataTableSettings");
static_assert(offsetof(UPCGLoadDataTableSettings, DataTable) == 0x000108, "Member 'UPCGLoadDataTableSettings::DataTable' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataTableSettings, OutputType) == 0x000130, "Member 'UPCGLoadDataTableSettings::OutputType' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataTableSettings, bSynchronousLoad) == 0x000131, "Member 'UPCGLoadDataTableSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGMetadataVectorSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataVectorSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataVectorOperation                   Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataVectorSettings">();
	}
	static class UPCGMetadataVectorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataVectorSettings>();
	}
};
static_assert(alignof(UPCGMetadataVectorSettings) == 0x000008, "Wrong alignment on UPCGMetadataVectorSettings");
static_assert(sizeof(UPCGMetadataVectorSettings) == 0x000168, "Wrong size on UPCGMetadataVectorSettings");
static_assert(offsetof(UPCGMetadataVectorSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataVectorSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataVectorSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataVectorSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataVectorSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataVectorSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataVectorSettings, InputSource3) == 0x000140, "Member 'UPCGMetadataVectorSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGManagedResource
// 0x0010 (0x0038 - 0x0028)
class UPCGManagedResource : public UObject
{
public:
	struct FPCGCrc                                Crc;                                               // 0x0028(0x0008)(Edit, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsMarkedUnused;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedResource">();
	}
	static class UPCGManagedResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedResource>();
	}
};
static_assert(alignof(UPCGManagedResource) == 0x000008, "Wrong alignment on UPCGManagedResource");
static_assert(sizeof(UPCGManagedResource) == 0x000038, "Wrong size on UPCGManagedResource");
static_assert(offsetof(UPCGManagedResource, Crc) == 0x000028, "Member 'UPCGManagedResource::Crc' has a wrong offset!");
static_assert(offsetof(UPCGManagedResource, bIsMarkedUnused) == 0x000030, "Member 'UPCGManagedResource::bIsMarkedUnused' has a wrong offset!");

// Class PCG.PCGManagedComponentBase
// 0x0000 (0x0038 - 0x0038)
class UPCGManagedComponentBase : public UPCGManagedResource
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedComponentBase">();
	}
	static class UPCGManagedComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedComponentBase>();
	}
};
static_assert(alignof(UPCGManagedComponentBase) == 0x000008, "Wrong alignment on UPCGManagedComponentBase");
static_assert(sizeof(UPCGManagedComponentBase) == 0x000038, "Wrong size on UPCGManagedComponentBase");

// Class PCG.PCGCreateCollisionDataSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGCreateCollisionDataSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     CollisionAttribute;                                // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCollisionQueryFlag                        CollisionQueryFlag;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnIfAttributeCouldNotBeUsed;                    // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreateCollisionDataSettings">();
	}
	static class UPCGCreateCollisionDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreateCollisionDataSettings>();
	}
};
static_assert(alignof(UPCGCreateCollisionDataSettings) == 0x000008, "Wrong alignment on UPCGCreateCollisionDataSettings");
static_assert(sizeof(UPCGCreateCollisionDataSettings) == 0x0000E8, "Wrong size on UPCGCreateCollisionDataSettings");
static_assert(offsetof(UPCGCreateCollisionDataSettings, CollisionAttribute) == 0x0000B8, "Member 'UPCGCreateCollisionDataSettings::CollisionAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCreateCollisionDataSettings, CollisionQueryFlag) == 0x0000E0, "Member 'UPCGCreateCollisionDataSettings::CollisionQueryFlag' has a wrong offset!");
static_assert(offsetof(UPCGCreateCollisionDataSettings, bWarnIfAttributeCouldNotBeUsed) == 0x0000E1, "Member 'UPCGCreateCollisionDataSettings::bWarnIfAttributeCouldNotBeUsed' has a wrong offset!");
static_assert(offsetof(UPCGCreateCollisionDataSettings, bSynchronousLoad) == 0x0000E2, "Member 'UPCGCreateCollisionDataSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGManagedComponent
// 0x0028 (0x0060 - 0x0038)
class UPCGManagedComponent : public UPCGManagedComponentBase
{
public:
	TSoftObjectPtr<class UActorComponent>         GeneratedComponent;                                // 0x0038(0x0028)(Edit, BlueprintVisible, ExportObject, InstancedReference, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetGeneratedComponentFromBP(TSoftObjectPtr<class UActorComponent> InGeneratedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedComponent">();
	}
	static class UPCGManagedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedComponent>();
	}
};
static_assert(alignof(UPCGManagedComponent) == 0x000008, "Wrong alignment on UPCGManagedComponent");
static_assert(sizeof(UPCGManagedComponent) == 0x000060, "Wrong size on UPCGManagedComponent");
static_assert(offsetof(UPCGManagedComponent, GeneratedComponent) == 0x000038, "Member 'UPCGManagedComponent::GeneratedComponent' has a wrong offset!");

// Class PCG.PCGManagedDebugDrawComponent
// 0x0000 (0x0060 - 0x0060)
class UPCGManagedDebugDrawComponent final : public UPCGManagedComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedDebugDrawComponent">();
	}
	static class UPCGManagedDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedDebugDrawComponent>();
	}
};
static_assert(alignof(UPCGManagedDebugDrawComponent) == 0x000008, "Wrong alignment on UPCGManagedDebugDrawComponent");
static_assert(sizeof(UPCGManagedDebugDrawComponent) == 0x000060, "Wrong size on UPCGManagedDebugDrawComponent");

// Class PCG.PCGSplineSamplerSettings
// 0x0138 (0x01F0 - 0x00B8)
class UPCGSplineSamplerSettings final : public UPCGSettings
{
public:
	struct FPCGSplineSamplerParams                SamplerParams;                                     // 0x00B8(0x0138)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplineSamplerSettings">();
	}
	static class UPCGSplineSamplerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplineSamplerSettings>();
	}
};
static_assert(alignof(UPCGSplineSamplerSettings) == 0x000008, "Wrong alignment on UPCGSplineSamplerSettings");
static_assert(sizeof(UPCGSplineSamplerSettings) == 0x0001F0, "Wrong size on UPCGSplineSamplerSettings");
static_assert(offsetof(UPCGSplineSamplerSettings, SamplerParams) == 0x0000B8, "Member 'UPCGSplineSamplerSettings::SamplerParams' has a wrong offset!");

// Class PCG.PCGDebugDrawComponent
// 0x0010 (0x0550 - 0x0540)
class UPCGDebugDrawComponent final : public UDebugDrawComponent
{
public:
	uint8                                         Pad_538[0x18];                                     // 0x0538(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDebugDrawComponent">();
	}
	static class UPCGDebugDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDebugDrawComponent>();
	}
};
static_assert(alignof(UPCGDebugDrawComponent) == 0x000010, "Wrong alignment on UPCGDebugDrawComponent");
static_assert(sizeof(UPCGDebugDrawComponent) == 0x000550, "Wrong size on UPCGDebugDrawComponent");

// Class PCG.PCGDeleteAttributesSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGDeleteAttributesSettings final : public UPCGSettings
{
public:
	EPCGAttributeFilterOperation                  Operation;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGStringMatchingOperator                    Operator;                                          // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedAttributes;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDeleteAttributesSettings">();
	}
	static class UPCGDeleteAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDeleteAttributesSettings>();
	}
};
static_assert(alignof(UPCGDeleteAttributesSettings) == 0x000008, "Wrong alignment on UPCGDeleteAttributesSettings");
static_assert(sizeof(UPCGDeleteAttributesSettings) == 0x0000D8, "Wrong size on UPCGDeleteAttributesSettings");
static_assert(offsetof(UPCGDeleteAttributesSettings, Operation) == 0x0000B8, "Member 'UPCGDeleteAttributesSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGDeleteAttributesSettings, Operator) == 0x0000BC, "Member 'UPCGDeleteAttributesSettings::Operator' has a wrong offset!");
static_assert(offsetof(UPCGDeleteAttributesSettings, SelectedAttributes) == 0x0000C0, "Member 'UPCGDeleteAttributesSettings::SelectedAttributes' has a wrong offset!");
static_assert(offsetof(UPCGDeleteAttributesSettings, bTokenizeOnWhiteSpace) == 0x0000D0, "Member 'UPCGDeleteAttributesSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGCreateTargetActor
// 0x00D8 (0x0190 - 0x00B8)
class UPCGCreateTargetActor final : public UPCGSettings
{
public:
	class AActor*                                 TemplateActor;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttachOptions                             AttachOptions;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  RootActor;                                         // 0x00C8(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorLabel;                                        // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ActorPivot;                                        // 0x0100(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGObjectPropertyOverrideDescription> PropertyOverrideDescriptions;               // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     TemplateActorClass;                                // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowTemplateActorEditing;                        // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreateTargetActor">();
	}
	static class UPCGCreateTargetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreateTargetActor>();
	}
};
static_assert(alignof(UPCGCreateTargetActor) == 0x000010, "Wrong alignment on UPCGCreateTargetActor");
static_assert(sizeof(UPCGCreateTargetActor) == 0x000190, "Wrong size on UPCGCreateTargetActor");
static_assert(offsetof(UPCGCreateTargetActor, TemplateActor) == 0x0000B8, "Member 'UPCGCreateTargetActor::TemplateActor' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, AttachOptions) == 0x0000C0, "Member 'UPCGCreateTargetActor::AttachOptions' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, RootActor) == 0x0000C8, "Member 'UPCGCreateTargetActor::RootActor' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, ActorLabel) == 0x0000F0, "Member 'UPCGCreateTargetActor::ActorLabel' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, ActorPivot) == 0x000100, "Member 'UPCGCreateTargetActor::ActorPivot' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, PropertyOverrideDescriptions) == 0x000160, "Member 'UPCGCreateTargetActor::PropertyOverrideDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, PostProcessFunctionNames) == 0x000170, "Member 'UPCGCreateTargetActor::PostProcessFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, TemplateActorClass) == 0x000180, "Member 'UPCGCreateTargetActor::TemplateActorClass' has a wrong offset!");
static_assert(offsetof(UPCGCreateTargetActor, bAllowTemplateActorEditing) == 0x000188, "Member 'UPCGCreateTargetActor::bAllowTemplateActorEditing' has a wrong offset!");

// Class PCG.PCGDeleteTagsSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGDeleteTagsSettings final : public UPCGSettings
{
public:
	EPCGTagFilterOperation                        Operation;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGStringMatchingOperator                    Operator;                                          // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedTags;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDeleteTagsSettings">();
	}
	static class UPCGDeleteTagsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDeleteTagsSettings>();
	}
};
static_assert(alignof(UPCGDeleteTagsSettings) == 0x000008, "Wrong alignment on UPCGDeleteTagsSettings");
static_assert(sizeof(UPCGDeleteTagsSettings) == 0x0000D8, "Wrong size on UPCGDeleteTagsSettings");
static_assert(offsetof(UPCGDeleteTagsSettings, Operation) == 0x0000B8, "Member 'UPCGDeleteTagsSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGDeleteTagsSettings, Operator) == 0x0000BC, "Member 'UPCGDeleteTagsSettings::Operator' has a wrong offset!");
static_assert(offsetof(UPCGDeleteTagsSettings, SelectedTags) == 0x0000C0, "Member 'UPCGDeleteTagsSettings::SelectedTags' has a wrong offset!");
static_assert(offsetof(UPCGDeleteTagsSettings, bTokenizeOnWhiteSpace) == 0x0000D0, "Member 'UPCGDeleteTagsSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGDistanceSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGDistanceSettings final : public UPCGSettings
{
public:
	bool                                          bOutputToAttribute;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertySelector          OutputAttribute;                                   // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputDistanceVector;                             // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDensity;                                       // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaximumDistance;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGDistanceShape                             SourceShape;                                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGDistanceShape                             TargetShape;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSourceAgainstRespectiveTarget;               // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDistanceSettings">();
	}
	static class UPCGDistanceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDistanceSettings>();
	}
};
static_assert(alignof(UPCGDistanceSettings) == 0x000008, "Wrong alignment on UPCGDistanceSettings");
static_assert(sizeof(UPCGDistanceSettings) == 0x000108, "Wrong size on UPCGDistanceSettings");
static_assert(offsetof(UPCGDistanceSettings, bOutputToAttribute) == 0x0000B8, "Member 'UPCGDistanceSettings::bOutputToAttribute' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, OutputAttribute) == 0x0000C0, "Member 'UPCGDistanceSettings::OutputAttribute' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, bOutputDistanceVector) == 0x0000E8, "Member 'UPCGDistanceSettings::bOutputDistanceVector' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, bSetDensity) == 0x0000E9, "Member 'UPCGDistanceSettings::bSetDensity' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, MaximumDistance) == 0x0000F0, "Member 'UPCGDistanceSettings::MaximumDistance' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, SourceShape) == 0x0000F8, "Member 'UPCGDistanceSettings::SourceShape' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, TargetShape) == 0x0000FC, "Member 'UPCGDistanceSettings::TargetShape' has a wrong offset!");
static_assert(offsetof(UPCGDistanceSettings, bCheckSourceAgainstRespectiveTarget) == 0x000100, "Member 'UPCGDistanceSettings::bCheckSourceAgainstRespectiveTarget' has a wrong offset!");

// Class PCG.PCGCollapseSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGCollapseSettings : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCollapseSettings">();
	}
	static class UPCGCollapseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCollapseSettings>();
	}
};
static_assert(alignof(UPCGCollapseSettings) == 0x000008, "Wrong alignment on UPCGCollapseSettings");
static_assert(sizeof(UPCGCollapseSettings) == 0x0000B8, "Wrong size on UPCGCollapseSettings");

// Class PCG.PCGConvertToPointDataSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGConvertToPointDataSettings final : public UPCGCollapseSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGConvertToPointDataSettings">();
	}
	static class UPCGConvertToPointDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGConvertToPointDataSettings>();
	}
};
static_assert(alignof(UPCGConvertToPointDataSettings) == 0x000008, "Wrong alignment on UPCGConvertToPointDataSettings");
static_assert(sizeof(UPCGConvertToPointDataSettings) == 0x0000B8, "Wrong size on UPCGConvertToPointDataSettings");

// Class PCG.PCGSubdivisionBaseSettings
// 0x00E0 (0x0198 - 0x00B8)
class UPCGSubdivisionBaseSettings : public UPCGSettings
{
public:
	bool                                          bModuleInfoAsInput;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGSubdivisionSubmodule>       ModulesInfo;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPCGSubdivisionModuleAttributeNames    ModulesInfoAttributeNames;                         // 0x00D0(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGGrammarSelection                   GrammarSelection;                                  // 0x00F8(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseSeedAttribute;                                 // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     SeedAttribute;                                     // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardAttributesFromModulesInfo;                 // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SymbolAttributeName;                               // 0x016C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputSizeAttribute;                              // 0x0174(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SizeAttributeName;                                 // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputScalableAttribute;                          // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScalableAttributeName;                             // 0x0184(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputDebugColorAttribute;                        // 0x018C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DebugColorAttributeName;                           // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubdivisionBaseSettings">();
	}
	static class UPCGSubdivisionBaseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubdivisionBaseSettings>();
	}
};
static_assert(alignof(UPCGSubdivisionBaseSettings) == 0x000008, "Wrong alignment on UPCGSubdivisionBaseSettings");
static_assert(sizeof(UPCGSubdivisionBaseSettings) == 0x000198, "Wrong size on UPCGSubdivisionBaseSettings");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bModuleInfoAsInput) == 0x0000B8, "Member 'UPCGSubdivisionBaseSettings::bModuleInfoAsInput' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, ModulesInfo) == 0x0000C0, "Member 'UPCGSubdivisionBaseSettings::ModulesInfo' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, ModulesInfoAttributeNames) == 0x0000D0, "Member 'UPCGSubdivisionBaseSettings::ModulesInfoAttributeNames' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, GrammarSelection) == 0x0000F8, "Member 'UPCGSubdivisionBaseSettings::GrammarSelection' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bUseSeedAttribute) == 0x000138, "Member 'UPCGSubdivisionBaseSettings::bUseSeedAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, SeedAttribute) == 0x000140, "Member 'UPCGSubdivisionBaseSettings::SeedAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bForwardAttributesFromModulesInfo) == 0x000168, "Member 'UPCGSubdivisionBaseSettings::bForwardAttributesFromModulesInfo' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, SymbolAttributeName) == 0x00016C, "Member 'UPCGSubdivisionBaseSettings::SymbolAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bOutputSizeAttribute) == 0x000174, "Member 'UPCGSubdivisionBaseSettings::bOutputSizeAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, SizeAttributeName) == 0x000178, "Member 'UPCGSubdivisionBaseSettings::SizeAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bOutputScalableAttribute) == 0x000180, "Member 'UPCGSubdivisionBaseSettings::bOutputScalableAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, ScalableAttributeName) == 0x000184, "Member 'UPCGSubdivisionBaseSettings::ScalableAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, bOutputDebugColorAttribute) == 0x00018C, "Member 'UPCGSubdivisionBaseSettings::bOutputDebugColorAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivisionBaseSettings, DebugColorAttributeName) == 0x000190, "Member 'UPCGSubdivisionBaseSettings::DebugColorAttributeName' has a wrong offset!");

// Class PCG.PCGDuplicateCrossSectionsSettings
// 0x0058 (0x01F0 - 0x0198)
class UPCGDuplicateCrossSectionsSettings final : public UPCGSubdivisionBaseSettings
{
public:
	bool                                          bExtrudeVectorAsAttribute;                         // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExtrudeVector;                                     // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     ExtrudeVectorAttribute;                            // 0x01B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputSplineIndexAttribute;                       // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SplineIndexAttributeName;                          // 0x01E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDuplicateCrossSectionsSettings">();
	}
	static class UPCGDuplicateCrossSectionsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDuplicateCrossSectionsSettings>();
	}
};
static_assert(alignof(UPCGDuplicateCrossSectionsSettings) == 0x000008, "Wrong alignment on UPCGDuplicateCrossSectionsSettings");
static_assert(sizeof(UPCGDuplicateCrossSectionsSettings) == 0x0001F0, "Wrong size on UPCGDuplicateCrossSectionsSettings");
static_assert(offsetof(UPCGDuplicateCrossSectionsSettings, bExtrudeVectorAsAttribute) == 0x000198, "Member 'UPCGDuplicateCrossSectionsSettings::bExtrudeVectorAsAttribute' has a wrong offset!");
static_assert(offsetof(UPCGDuplicateCrossSectionsSettings, ExtrudeVector) == 0x0001A0, "Member 'UPCGDuplicateCrossSectionsSettings::ExtrudeVector' has a wrong offset!");
static_assert(offsetof(UPCGDuplicateCrossSectionsSettings, ExtrudeVectorAttribute) == 0x0001B8, "Member 'UPCGDuplicateCrossSectionsSettings::ExtrudeVectorAttribute' has a wrong offset!");
static_assert(offsetof(UPCGDuplicateCrossSectionsSettings, bOutputSplineIndexAttribute) == 0x0001E0, "Member 'UPCGDuplicateCrossSectionsSettings::bOutputSplineIndexAttribute' has a wrong offset!");
static_assert(offsetof(UPCGDuplicateCrossSectionsSettings, SplineIndexAttributeName) == 0x0001E4, "Member 'UPCGDuplicateCrossSectionsSettings::SplineIndexAttributeName' has a wrong offset!");

// Class PCG.PCGDebugSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGDebugSettings final : public UPCGSettings
{
public:
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x00B8(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDebugSettings">();
	}
	static class UPCGDebugSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDebugSettings>();
	}
};
static_assert(alignof(UPCGDebugSettings) == 0x000008, "Wrong alignment on UPCGDebugSettings");
static_assert(sizeof(UPCGDebugSettings) == 0x0000E0, "Wrong size on UPCGDebugSettings");
static_assert(offsetof(UPCGDebugSettings, TargetActor) == 0x0000B8, "Member 'UPCGDebugSettings::TargetActor' has a wrong offset!");

// Class PCG.PCGDuplicatePointSettings
// 0x0088 (0x0140 - 0x00B8)
class UPCGDuplicatePointSettings final : public UPCGSettings
{
public:
	int32                                         Iterations;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDirectionAppliedInRelativeSpace;                  // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputSourcePoint;                                // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PointTransform;                                    // 0x00E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDuplicatePointSettings">();
	}
	static class UPCGDuplicatePointSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDuplicatePointSettings>();
	}
};
static_assert(alignof(UPCGDuplicatePointSettings) == 0x000010, "Wrong alignment on UPCGDuplicatePointSettings");
static_assert(sizeof(UPCGDuplicatePointSettings) == 0x000140, "Wrong size on UPCGDuplicatePointSettings");
static_assert(offsetof(UPCGDuplicatePointSettings, Iterations) == 0x0000B8, "Member 'UPCGDuplicatePointSettings::Iterations' has a wrong offset!");
static_assert(offsetof(UPCGDuplicatePointSettings, Direction) == 0x0000C0, "Member 'UPCGDuplicatePointSettings::Direction' has a wrong offset!");
static_assert(offsetof(UPCGDuplicatePointSettings, bDirectionAppliedInRelativeSpace) == 0x0000D8, "Member 'UPCGDuplicatePointSettings::bDirectionAppliedInRelativeSpace' has a wrong offset!");
static_assert(offsetof(UPCGDuplicatePointSettings, bOutputSourcePoint) == 0x0000D9, "Member 'UPCGDuplicatePointSettings::bOutputSourcePoint' has a wrong offset!");
static_assert(offsetof(UPCGDuplicatePointSettings, PointTransform) == 0x0000E0, "Member 'UPCGDuplicatePointSettings::PointTransform' has a wrong offset!");

// Class PCG.PCGBadOutputsNodeSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGBadOutputsNodeSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBadOutputsNodeSettings">();
	}
	static class UPCGBadOutputsNodeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBadOutputsNodeSettings>();
	}
};
static_assert(alignof(UPCGBadOutputsNodeSettings) == 0x000008, "Wrong alignment on UPCGBadOutputsNodeSettings");
static_assert(sizeof(UPCGBadOutputsNodeSettings) == 0x0000B8, "Wrong size on UPCGBadOutputsNodeSettings");

// Class PCG.PCGMetadataRotatorSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataRotatorSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataRotatorOperation                  Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataRotatorSettings">();
	}
	static class UPCGMetadataRotatorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataRotatorSettings>();
	}
};
static_assert(alignof(UPCGMetadataRotatorSettings) == 0x000008, "Wrong alignment on UPCGMetadataRotatorSettings");
static_assert(sizeof(UPCGMetadataRotatorSettings) == 0x000168, "Wrong size on UPCGMetadataRotatorSettings");
static_assert(offsetof(UPCGMetadataRotatorSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataRotatorSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataRotatorSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataRotatorSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataRotatorSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataRotatorSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataRotatorSettings, InputSource3) == 0x000140, "Member 'UPCGMetadataRotatorSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGElevationIsolinesSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGElevationIsolinesSettings final : public UPCGSettings
{
public:
	double                                        ElevationStart;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ElevationEnd;                                      // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ElevationIncrement;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Resolution;                                        // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddTagOnOutputForSameElevation;                   // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectSurfaceNormal;                             // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputAsSpline;                                   // 0x00DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinearSpline;                                     // 0x00DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGElevationIsolinesSettings">();
	}
	static class UPCGElevationIsolinesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGElevationIsolinesSettings>();
	}
};
static_assert(alignof(UPCGElevationIsolinesSettings) == 0x000008, "Wrong alignment on UPCGElevationIsolinesSettings");
static_assert(sizeof(UPCGElevationIsolinesSettings) == 0x0000E0, "Wrong size on UPCGElevationIsolinesSettings");
static_assert(offsetof(UPCGElevationIsolinesSettings, ElevationStart) == 0x0000B8, "Member 'UPCGElevationIsolinesSettings::ElevationStart' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, ElevationEnd) == 0x0000C0, "Member 'UPCGElevationIsolinesSettings::ElevationEnd' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, ElevationIncrement) == 0x0000C8, "Member 'UPCGElevationIsolinesSettings::ElevationIncrement' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, Resolution) == 0x0000D0, "Member 'UPCGElevationIsolinesSettings::Resolution' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, bAddTagOnOutputForSameElevation) == 0x0000D8, "Member 'UPCGElevationIsolinesSettings::bAddTagOnOutputForSameElevation' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, bProjectSurfaceNormal) == 0x0000D9, "Member 'UPCGElevationIsolinesSettings::bProjectSurfaceNormal' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, bOutputAsSpline) == 0x0000DA, "Member 'UPCGElevationIsolinesSettings::bOutputAsSpline' has a wrong offset!");
static_assert(offsetof(UPCGElevationIsolinesSettings, bLinearSpline) == 0x0000DB, "Member 'UPCGElevationIsolinesSettings::bLinearSpline' has a wrong offset!");

// Class PCG.PCGEngineSettings
// 0x0020 (0x0058 - 0x0038)
class UPCGEngineSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	struct FVector                                VolumeScale;                                       // 0x0038(0x0018)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateOnDrop;                                   // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayCullingStateWhenDebugging;                 // 0x0051(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGEngineSettings">();
	}
	static class UPCGEngineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGEngineSettings>();
	}
};
static_assert(alignof(UPCGEngineSettings) == 0x000008, "Wrong alignment on UPCGEngineSettings");
static_assert(sizeof(UPCGEngineSettings) == 0x000058, "Wrong size on UPCGEngineSettings");
static_assert(offsetof(UPCGEngineSettings, VolumeScale) == 0x000038, "Member 'UPCGEngineSettings::VolumeScale' has a wrong offset!");
static_assert(offsetof(UPCGEngineSettings, bGenerateOnDrop) == 0x000050, "Member 'UPCGEngineSettings::bGenerateOnDrop' has a wrong offset!");
static_assert(offsetof(UPCGEngineSettings, bDisplayCullingStateWhenDebugging) == 0x000051, "Member 'UPCGEngineSettings::bDisplayCullingStateWhenDebugging' has a wrong offset!");

// Class PCG.PCGGraphInterface
// 0x0000 (0x0028 - 0x0028)
class UPCGGraphInterface : public UObject
{
public:
	class UPCGGraph* GetMutablePCGGraph();

	const class UPCGGraph* GetConstPCGGraph() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphInterface">();
	}
	static class UPCGGraphInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphInterface>();
	}
};
static_assert(alignof(UPCGGraphInterface) == 0x000008, "Wrong alignment on UPCGGraphInterface");
static_assert(sizeof(UPCGGraphInterface) == 0x000028, "Wrong size on UPCGGraphInterface");

// Class PCG.PCGGraphInstance
// 0x0068 (0x0090 - 0x0028)
class UPCGGraphInstance final : public UPCGGraphInterface
{
public:
	class UPCGGraphInterface*                     Graph;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGOverrideInstancedPropertyBag       ParametersOverrides;                               // 0x0030(0x0060)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphInstance">();
	}
	static class UPCGGraphInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphInstance>();
	}
};
static_assert(alignof(UPCGGraphInstance) == 0x000008, "Wrong alignment on UPCGGraphInstance");
static_assert(sizeof(UPCGGraphInstance) == 0x000090, "Wrong size on UPCGGraphInstance");
static_assert(offsetof(UPCGGraphInstance, Graph) == 0x000028, "Member 'UPCGGraphInstance::Graph' has a wrong offset!");
static_assert(offsetof(UPCGGraphInstance, ParametersOverrides) == 0x000030, "Member 'UPCGGraphInstance::ParametersOverrides' has a wrong offset!");

// Class PCG.PCGFilterByAttributeSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGFilterByAttributeSettings final : public UPCGFilterDataBaseSettings
{
public:
	class FName                                   Attribute;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGStringMatchingOperator                    Operator;                                          // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreProperties;                                 // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterByAttributeSettings">();
	}
	static class UPCGFilterByAttributeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterByAttributeSettings>();
	}
};
static_assert(alignof(UPCGFilterByAttributeSettings) == 0x000008, "Wrong alignment on UPCGFilterByAttributeSettings");
static_assert(sizeof(UPCGFilterByAttributeSettings) == 0x0000C8, "Wrong size on UPCGFilterByAttributeSettings");
static_assert(offsetof(UPCGFilterByAttributeSettings, Attribute) == 0x0000B8, "Member 'UPCGFilterByAttributeSettings::Attribute' has a wrong offset!");
static_assert(offsetof(UPCGFilterByAttributeSettings, Operator) == 0x0000C0, "Member 'UPCGFilterByAttributeSettings::Operator' has a wrong offset!");
static_assert(offsetof(UPCGFilterByAttributeSettings, bIgnoreProperties) == 0x0000C1, "Member 'UPCGFilterByAttributeSettings::bIgnoreProperties' has a wrong offset!");

// Class PCG.PCGCreateSplineSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGCreateSplineSettings final : public UPCGSettings
{
public:
	EPCGCreateSplineMode                          Mode;                                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClosedLoop;                                       // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinear;                                           // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCustomTangents;                              // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArriveTangentAttribute;                            // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeaveTangentAttribute;                             // 0x00C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x00D0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreateSplineSettings">();
	}
	static class UPCGCreateSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreateSplineSettings>();
	}
};
static_assert(alignof(UPCGCreateSplineSettings) == 0x000008, "Wrong alignment on UPCGCreateSplineSettings");
static_assert(sizeof(UPCGCreateSplineSettings) == 0x000108, "Wrong size on UPCGCreateSplineSettings");
static_assert(offsetof(UPCGCreateSplineSettings, Mode) == 0x0000B8, "Member 'UPCGCreateSplineSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, bClosedLoop) == 0x0000B9, "Member 'UPCGCreateSplineSettings::bClosedLoop' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, bLinear) == 0x0000BA, "Member 'UPCGCreateSplineSettings::bLinear' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, bApplyCustomTangents) == 0x0000BB, "Member 'UPCGCreateSplineSettings::bApplyCustomTangents' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, ArriveTangentAttribute) == 0x0000BC, "Member 'UPCGCreateSplineSettings::ArriveTangentAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, LeaveTangentAttribute) == 0x0000C4, "Member 'UPCGCreateSplineSettings::LeaveTangentAttribute' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, TargetActor) == 0x0000D0, "Member 'UPCGCreateSplineSettings::TargetActor' has a wrong offset!");
static_assert(offsetof(UPCGCreateSplineSettings, PostProcessFunctionNames) == 0x0000F8, "Member 'UPCGCreateSplineSettings::PostProcessFunctionNames' has a wrong offset!");

// Class PCG.PCGFilterElementsByIndexSettings
// 0x0048 (0x0100 - 0x00B8)
class UPCGFilterElementsByIndexSettings final : public UPCGSettings
{
public:
	bool                                          bSelectIndicesByInput;                             // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     IndexSelectionAttribute;                           // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedIndices;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputDiscardedElements;                          // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertFilter;                                     // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterElementsByIndexSettings">();
	}
	static class UPCGFilterElementsByIndexSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterElementsByIndexSettings>();
	}
};
static_assert(alignof(UPCGFilterElementsByIndexSettings) == 0x000008, "Wrong alignment on UPCGFilterElementsByIndexSettings");
static_assert(sizeof(UPCGFilterElementsByIndexSettings) == 0x000100, "Wrong size on UPCGFilterElementsByIndexSettings");
static_assert(offsetof(UPCGFilterElementsByIndexSettings, bSelectIndicesByInput) == 0x0000B8, "Member 'UPCGFilterElementsByIndexSettings::bSelectIndicesByInput' has a wrong offset!");
static_assert(offsetof(UPCGFilterElementsByIndexSettings, IndexSelectionAttribute) == 0x0000C0, "Member 'UPCGFilterElementsByIndexSettings::IndexSelectionAttribute' has a wrong offset!");
static_assert(offsetof(UPCGFilterElementsByIndexSettings, SelectedIndices) == 0x0000E8, "Member 'UPCGFilterElementsByIndexSettings::SelectedIndices' has a wrong offset!");
static_assert(offsetof(UPCGFilterElementsByIndexSettings, bOutputDiscardedElements) == 0x0000F8, "Member 'UPCGFilterElementsByIndexSettings::bOutputDiscardedElements' has a wrong offset!");
static_assert(offsetof(UPCGFilterElementsByIndexSettings, bInvertFilter) == 0x0000F9, "Member 'UPCGFilterElementsByIndexSettings::bInvertFilter' has a wrong offset!");

// Class PCG.PCGGatherSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGGatherSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGatherSettings">();
	}
	static class UPCGGatherSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGatherSettings>();
	}
};
static_assert(alignof(UPCGGatherSettings) == 0x000008, "Wrong alignment on UPCGGatherSettings");
static_assert(sizeof(UPCGGatherSettings) == 0x0000B8, "Wrong size on UPCGGatherSettings");

// Class PCG.PCGManagedComponentList
// 0x0010 (0x0048 - 0x0038)
class UPCGManagedComponentList : public UPCGManagedComponentBase
{
public:
	TArray<TSoftObjectPtr<class UActorComponent>> GeneratedComponents;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void SetGeneratedComponentsFromBP(const TArray<TSoftObjectPtr<class UActorComponent>>& InGeneratedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedComponentList">();
	}
	static class UPCGManagedComponentList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedComponentList>();
	}
};
static_assert(alignof(UPCGManagedComponentList) == 0x000008, "Wrong alignment on UPCGManagedComponentList");
static_assert(sizeof(UPCGManagedComponentList) == 0x000048, "Wrong size on UPCGManagedComponentList");
static_assert(offsetof(UPCGManagedComponentList, GeneratedComponents) == 0x000038, "Member 'UPCGManagedComponentList::GeneratedComponents' has a wrong offset!");

// Class PCG.PCGManagedComponentDefaultList
// 0x0000 (0x0048 - 0x0048)
class UPCGManagedComponentDefaultList final : public UPCGManagedComponentList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedComponentDefaultList">();
	}
	static class UPCGManagedComponentDefaultList* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedComponentDefaultList>();
	}
};
static_assert(alignof(UPCGManagedComponentDefaultList) == 0x000008, "Wrong alignment on UPCGManagedComponentDefaultList");
static_assert(sizeof(UPCGManagedComponentDefaultList) == 0x000048, "Wrong size on UPCGManagedComponentDefaultList");

// Class PCG.PCGGenSourceBase
// 0x0000 (0x0000 - 0x0000)
class IPCGGenSourceBase final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenSourceBase">();
	}
	static class IPCGGenSourceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPCGGenSourceBase>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IPCGGenSourceBase) == 0x000001, "Wrong alignment on IPCGGenSourceBase");
static_assert(sizeof(IPCGGenSourceBase) == 0x000001, "Wrong size on IPCGGenSourceBase");

// Class PCG.PCGGetActorPropertySettings
// 0x0078 (0x0130 - 0x00B8)
class UPCGGetActorPropertySettings final : public UPCGSettings
{
public:
	struct FPCGActorSelectorSettings              ActorSelector;                                     // 0x00B8(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bSelectComponent;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProcessAllComponents;                             // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputComponentReference;                         // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PropertyName;                                      // 0x0114(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceObjectAndStructExtraction;                   // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutputAttributeName;                               // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputActorReference;                             // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysRequeryActors;                              // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetActorPropertySettings">();
	}
	static class UPCGGetActorPropertySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetActorPropertySettings>();
	}
};
static_assert(alignof(UPCGGetActorPropertySettings) == 0x000008, "Wrong alignment on UPCGGetActorPropertySettings");
static_assert(sizeof(UPCGGetActorPropertySettings) == 0x000130, "Wrong size on UPCGGetActorPropertySettings");
static_assert(offsetof(UPCGGetActorPropertySettings, ActorSelector) == 0x0000B8, "Member 'UPCGGetActorPropertySettings::ActorSelector' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bSelectComponent) == 0x000100, "Member 'UPCGGetActorPropertySettings::bSelectComponent' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, ComponentClass) == 0x000108, "Member 'UPCGGetActorPropertySettings::ComponentClass' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bProcessAllComponents) == 0x000110, "Member 'UPCGGetActorPropertySettings::bProcessAllComponents' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bOutputComponentReference) == 0x000111, "Member 'UPCGGetActorPropertySettings::bOutputComponentReference' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, PropertyName) == 0x000114, "Member 'UPCGGetActorPropertySettings::PropertyName' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bForceObjectAndStructExtraction) == 0x00011C, "Member 'UPCGGetActorPropertySettings::bForceObjectAndStructExtraction' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, OutputAttributeName) == 0x000120, "Member 'UPCGGetActorPropertySettings::OutputAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bOutputActorReference) == 0x000128, "Member 'UPCGGetActorPropertySettings::bOutputActorReference' has a wrong offset!");
static_assert(offsetof(UPCGGetActorPropertySettings, bAlwaysRequeryActors) == 0x000129, "Member 'UPCGGetActorPropertySettings::bAlwaysRequeryActors' has a wrong offset!");

// Class PCG.PCGAttributeReduceSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGAttributeReduceSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputAttributeName;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttributeReduceOperation                  Operation;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JoinDelimiter;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeOutputAttributes;                            // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeReduceSettings">();
	}
	static class UPCGAttributeReduceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeReduceSettings>();
	}
};
static_assert(alignof(UPCGAttributeReduceSettings) == 0x000008, "Wrong alignment on UPCGAttributeReduceSettings");
static_assert(sizeof(UPCGAttributeReduceSettings) == 0x000108, "Wrong size on UPCGAttributeReduceSettings");
static_assert(offsetof(UPCGAttributeReduceSettings, InputSource) == 0x0000B8, "Member 'UPCGAttributeReduceSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeReduceSettings, OutputAttributeName) == 0x0000E0, "Member 'UPCGAttributeReduceSettings::OutputAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGAttributeReduceSettings, Operation) == 0x0000E8, "Member 'UPCGAttributeReduceSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGAttributeReduceSettings, JoinDelimiter) == 0x0000F0, "Member 'UPCGAttributeReduceSettings::JoinDelimiter' has a wrong offset!");
static_assert(offsetof(UPCGAttributeReduceSettings, bMergeOutputAttributes) == 0x000100, "Member 'UPCGAttributeReduceSettings::bMergeOutputAttributes' has a wrong offset!");

// Class PCG.PCGDummyGetPropertyTest
// 0x0010 (0x0038 - 0x0028)
class UPCGDummyGetPropertyTest final : public UObject
{
public:
	int64                                         Int64Property;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DoubleProperty;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDummyGetPropertyTest">();
	}
	static class UPCGDummyGetPropertyTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDummyGetPropertyTest>();
	}
};
static_assert(alignof(UPCGDummyGetPropertyTest) == 0x000008, "Wrong alignment on UPCGDummyGetPropertyTest");
static_assert(sizeof(UPCGDummyGetPropertyTest) == 0x000038, "Wrong size on UPCGDummyGetPropertyTest");
static_assert(offsetof(UPCGDummyGetPropertyTest, Int64Property) == 0x000028, "Member 'UPCGDummyGetPropertyTest::Int64Property' has a wrong offset!");
static_assert(offsetof(UPCGDummyGetPropertyTest, DoubleProperty) == 0x000030, "Member 'UPCGDummyGetPropertyTest::DoubleProperty' has a wrong offset!");

// Class PCG.PCGUnitTestDummyActor
// 0x0228 (0x04D0 - 0x02A8)
class APCGUnitTestDummyActor final : public AActor
{
public:
	int32                                         IntProperty;                                       // 0x02A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatProperty;                                     // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int64Property;                                     // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DoubleProperty;                                    // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolProperty;                                      // 0x02C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NameProperty;                                      // 0x02C4(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringProperty;                                    // 0x02D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGUnitTestDummyEnum                         EnumProperty;                                      // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VectorProperty;                                    // 0x02E8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Vector4Property;                                   // 0x0300(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TransformProperty;                                 // 0x0320(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotatorProperty;                                   // 0x0380(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  QuatProperty;                                      // 0x03A0(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        SoftObjectPathProperty;                            // 0x03C0(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         SoftClassPathProperty;                             // 0x03E0(0x0020)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ClassProperty;                                     // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGDummyGetPropertyTest*               ObjectProperty;                                    // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector2Property;                                   // 0x0410(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorProperty;                                     // 0x0420(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColorProperty;                               // 0x0424(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGTestMyColorStruct                  PCGColorProperty;                                  // 0x0438(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ArrayOfIntsProperty;                               // 0x0458(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ArrayOfVectorsProperty;                            // 0x0468(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPCGTestMyColorStruct>          ArrayOfStructsProperty;                            // 0x0478(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPCGDummyGetPropertyTest*>       ArrayOfObjectsProperty;                            // 0x0488(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPCGDummyGetPropertyStruct             DummyStruct;                                       // 0x0498(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<int32>                                 SetOfIntsProperty;                                 // 0x04C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUnitTestDummyActor">();
	}
	static class APCGUnitTestDummyActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APCGUnitTestDummyActor>();
	}
};
static_assert(alignof(APCGUnitTestDummyActor) == 0x000010, "Wrong alignment on APCGUnitTestDummyActor");
static_assert(sizeof(APCGUnitTestDummyActor) == 0x0004D0, "Wrong size on APCGUnitTestDummyActor");
static_assert(offsetof(APCGUnitTestDummyActor, IntProperty) == 0x0002A8, "Member 'APCGUnitTestDummyActor::IntProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, FloatProperty) == 0x0002AC, "Member 'APCGUnitTestDummyActor::FloatProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, Int64Property) == 0x0002B0, "Member 'APCGUnitTestDummyActor::Int64Property' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, DoubleProperty) == 0x0002B8, "Member 'APCGUnitTestDummyActor::DoubleProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, BoolProperty) == 0x0002C0, "Member 'APCGUnitTestDummyActor::BoolProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, NameProperty) == 0x0002C4, "Member 'APCGUnitTestDummyActor::NameProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, StringProperty) == 0x0002D0, "Member 'APCGUnitTestDummyActor::StringProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, EnumProperty) == 0x0002E0, "Member 'APCGUnitTestDummyActor::EnumProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, VectorProperty) == 0x0002E8, "Member 'APCGUnitTestDummyActor::VectorProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, Vector4Property) == 0x000300, "Member 'APCGUnitTestDummyActor::Vector4Property' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, TransformProperty) == 0x000320, "Member 'APCGUnitTestDummyActor::TransformProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, RotatorProperty) == 0x000380, "Member 'APCGUnitTestDummyActor::RotatorProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, QuatProperty) == 0x0003A0, "Member 'APCGUnitTestDummyActor::QuatProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, SoftObjectPathProperty) == 0x0003C0, "Member 'APCGUnitTestDummyActor::SoftObjectPathProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, SoftClassPathProperty) == 0x0003E0, "Member 'APCGUnitTestDummyActor::SoftClassPathProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ClassProperty) == 0x000400, "Member 'APCGUnitTestDummyActor::ClassProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ObjectProperty) == 0x000408, "Member 'APCGUnitTestDummyActor::ObjectProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, Vector2Property) == 0x000410, "Member 'APCGUnitTestDummyActor::Vector2Property' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ColorProperty) == 0x000420, "Member 'APCGUnitTestDummyActor::ColorProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, LinearColorProperty) == 0x000424, "Member 'APCGUnitTestDummyActor::LinearColorProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, PCGColorProperty) == 0x000438, "Member 'APCGUnitTestDummyActor::PCGColorProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ArrayOfIntsProperty) == 0x000458, "Member 'APCGUnitTestDummyActor::ArrayOfIntsProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ArrayOfVectorsProperty) == 0x000468, "Member 'APCGUnitTestDummyActor::ArrayOfVectorsProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ArrayOfStructsProperty) == 0x000478, "Member 'APCGUnitTestDummyActor::ArrayOfStructsProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, ArrayOfObjectsProperty) == 0x000488, "Member 'APCGUnitTestDummyActor::ArrayOfObjectsProperty' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, DummyStruct) == 0x000498, "Member 'APCGUnitTestDummyActor::DummyStruct' has a wrong offset!");
static_assert(offsetof(APCGUnitTestDummyActor, SetOfIntsProperty) == 0x0004C0, "Member 'APCGUnitTestDummyActor::SetOfIntsProperty' has a wrong offset!");

// Class PCG.PCGBlueprintPinHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGBlueprintPinHelpers final : public UBlueprintFunctionLibrary
{
public:
	static void BreakPinProperty(const struct FPCGPinProperties& PinProperty, class FName* Label, bool* bAllowMultipleData, bool* bAllowMultipleConnections, bool* bIsAdvancedPin, EPCGExclusiveDataType* AllowedType);
	static int32 GetCorrespondingDataType(EPCGExclusiveDataType InExclusiveDataType);
	static bool IsExactlySameType(int32 AllowedTypes, EPCGExclusiveDataType TypeToCheck);
	static bool IsOfType(int32 AllowedTypes, EPCGExclusiveDataType TypeToCheck);
	static struct FPCGPinProperties MakePinProperty(class FName Label, bool bAllowMultipleData, bool bAllowMultipleConnections, bool bIsAdvancedPin, EPCGExclusiveDataType AllowedType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBlueprintPinHelpers">();
	}
	static class UPCGBlueprintPinHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBlueprintPinHelpers>();
	}
};
static_assert(alignof(UPCGBlueprintPinHelpers) == 0x000008, "Wrong alignment on UPCGBlueprintPinHelpers");
static_assert(sizeof(UPCGBlueprintPinHelpers) == 0x000028, "Wrong size on UPCGBlueprintPinHelpers");

// Class PCG.PCGUnitTestDummyComponent
// 0x0008 (0x00A8 - 0x00A0)
class UPCGUnitTestDummyComponent final : public UActorComponent
{
public:
	int32                                         IntProperty;                                       // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUnitTestDummyComponent">();
	}
	static class UPCGUnitTestDummyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGUnitTestDummyComponent>();
	}
};
static_assert(alignof(UPCGUnitTestDummyComponent) == 0x000008, "Wrong alignment on UPCGUnitTestDummyComponent");
static_assert(sizeof(UPCGUnitTestDummyComponent) == 0x0000A8, "Wrong size on UPCGUnitTestDummyComponent");
static_assert(offsetof(UPCGUnitTestDummyComponent, IntProperty) == 0x0000A0, "Member 'UPCGUnitTestDummyComponent::IntProperty' has a wrong offset!");

// Class PCG.PCGGetBoundsSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGGetBoundsSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetBoundsSettings">();
	}
	static class UPCGGetBoundsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetBoundsSettings>();
	}
};
static_assert(alignof(UPCGGetBoundsSettings) == 0x000008, "Wrong alignment on UPCGGetBoundsSettings");
static_assert(sizeof(UPCGGetBoundsSettings) == 0x0000B8, "Wrong size on UPCGGetBoundsSettings");

// Class PCG.PCGDensityRemapSettings
// 0x0018 (0x00D0 - 0x00B8)
class UPCGDensityRemapSettings final : public UPCGSettings
{
public:
	float                                         InRangeMin;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InRangeMax;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeMin;                                       // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutRangeMax;                                       // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExcludeValuesOutsideInputRange;                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDensityRemapSettings">();
	}
	static class UPCGDensityRemapSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDensityRemapSettings>();
	}
};
static_assert(alignof(UPCGDensityRemapSettings) == 0x000008, "Wrong alignment on UPCGDensityRemapSettings");
static_assert(sizeof(UPCGDensityRemapSettings) == 0x0000D0, "Wrong size on UPCGDensityRemapSettings");
static_assert(offsetof(UPCGDensityRemapSettings, InRangeMin) == 0x0000B8, "Member 'UPCGDensityRemapSettings::InRangeMin' has a wrong offset!");
static_assert(offsetof(UPCGDensityRemapSettings, InRangeMax) == 0x0000BC, "Member 'UPCGDensityRemapSettings::InRangeMax' has a wrong offset!");
static_assert(offsetof(UPCGDensityRemapSettings, OutRangeMin) == 0x0000C0, "Member 'UPCGDensityRemapSettings::OutRangeMin' has a wrong offset!");
static_assert(offsetof(UPCGDensityRemapSettings, OutRangeMax) == 0x0000C4, "Member 'UPCGDensityRemapSettings::OutRangeMax' has a wrong offset!");
static_assert(offsetof(UPCGDensityRemapSettings, bExcludeValuesOutsideInputRange) == 0x0000C8, "Member 'UPCGDensityRemapSettings::bExcludeValuesOutsideInputRange' has a wrong offset!");

// Class PCG.PCGGetPropertyFromObjectPathSettings
// 0x0050 (0x0108 - 0x00B8)
class UPCGGetPropertyFromObjectPathSettings final : public UPCGSettings
{
public:
	TArray<struct FSoftObjectPath>                ObjectPathsToExtract;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceObjectAndStructExtraction;                   // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutputAttributeName;                               // 0x00FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAllData;                                   // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceErrorOnEmptyObjectPath;                    // 0x0106(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetPropertyFromObjectPathSettings">();
	}
	static class UPCGGetPropertyFromObjectPathSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetPropertyFromObjectPathSettings>();
	}
};
static_assert(alignof(UPCGGetPropertyFromObjectPathSettings) == 0x000008, "Wrong alignment on UPCGGetPropertyFromObjectPathSettings");
static_assert(sizeof(UPCGGetPropertyFromObjectPathSettings) == 0x000108, "Wrong size on UPCGGetPropertyFromObjectPathSettings");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, ObjectPathsToExtract) == 0x0000B8, "Member 'UPCGGetPropertyFromObjectPathSettings::ObjectPathsToExtract' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, InputSource) == 0x0000C8, "Member 'UPCGGetPropertyFromObjectPathSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, PropertyName) == 0x0000F0, "Member 'UPCGGetPropertyFromObjectPathSettings::PropertyName' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, bForceObjectAndStructExtraction) == 0x0000F8, "Member 'UPCGGetPropertyFromObjectPathSettings::bForceObjectAndStructExtraction' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, OutputAttributeName) == 0x0000FC, "Member 'UPCGGetPropertyFromObjectPathSettings::OutputAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, bSynchronousLoad) == 0x000104, "Member 'UPCGGetPropertyFromObjectPathSettings::bSynchronousLoad' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, bPersistAllData) == 0x000105, "Member 'UPCGGetPropertyFromObjectPathSettings::bPersistAllData' has a wrong offset!");
static_assert(offsetof(UPCGGetPropertyFromObjectPathSettings, bSilenceErrorOnEmptyObjectPath) == 0x000106, "Member 'UPCGGetPropertyFromObjectPathSettings::bSilenceErrorOnEmptyObjectPath' has a wrong offset!");

// Class PCG.PCGGraphAuthoringTestHelperSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGGraphAuthoringTestHelperSettings final : public UPCGSettings
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphAuthoringTestHelperSettings">();
	}
	static class UPCGGraphAuthoringTestHelperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphAuthoringTestHelperSettings>();
	}
};
static_assert(alignof(UPCGGraphAuthoringTestHelperSettings) == 0x000008, "Wrong alignment on UPCGGraphAuthoringTestHelperSettings");
static_assert(sizeof(UPCGGraphAuthoringTestHelperSettings) == 0x0000C0, "Wrong size on UPCGGraphAuthoringTestHelperSettings");

// Class PCG.PCGTrivialSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGTrivialSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTrivialSettings">();
	}
	static class UPCGTrivialSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTrivialSettings>();
	}
};
static_assert(alignof(UPCGTrivialSettings) == 0x000008, "Wrong alignment on UPCGTrivialSettings");
static_assert(sizeof(UPCGTrivialSettings) == 0x0000B8, "Wrong size on UPCGTrivialSettings");

// Class PCG.PCGGraphCompilationData
// 0x00F0 (0x0118 - 0x0028)
class UPCGGraphCompilationData final : public UObject
{
public:
	TMap<uint32, struct FPCGGraphTasks>           Tasks;                                             // 0x0028(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, struct FPCGStackContext>         StackContexts;                                     // 0x0078(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, struct FPCGComputeGraphs>        ComputeGraphs;                                     // 0x00C8(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphCompilationData">();
	}
	static class UPCGGraphCompilationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphCompilationData>();
	}
};
static_assert(alignof(UPCGGraphCompilationData) == 0x000008, "Wrong alignment on UPCGGraphCompilationData");
static_assert(sizeof(UPCGGraphCompilationData) == 0x000118, "Wrong size on UPCGGraphCompilationData");
static_assert(offsetof(UPCGGraphCompilationData, Tasks) == 0x000028, "Member 'UPCGGraphCompilationData::Tasks' has a wrong offset!");
static_assert(offsetof(UPCGGraphCompilationData, StackContexts) == 0x000078, "Member 'UPCGGraphCompilationData::StackContexts' has a wrong offset!");
static_assert(offsetof(UPCGGraphCompilationData, ComputeGraphs) == 0x0000C8, "Member 'UPCGGraphCompilationData::ComputeGraphs' has a wrong offset!");

// Class PCG.PCGGraphParametersHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGGraphParametersHelpers final : public UBlueprintFunctionLibrary
{
public:
	static bool GetBoolParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static uint8 GetByteParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static class UClass* GetClassParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static double GetDoubleParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static uint8 GetEnumParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static float GetFloatParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static int32 GetInt32Parameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static int64 GetInt64Parameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static class FName GetNameParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static class UObject* GetObjectParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FQuat GetQuaternionParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FRotator GetRotatorParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static TSoftClassPtr<class UClass> GetSoftClassParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static TSoftObjectPtr<class UObject> GetSoftObjectParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FSoftObjectPath GetSoftObjectPathParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static class FString GetStringParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FTransform GetTransformParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FVector2D GetVector2DParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FVector4 GetVector4Parameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static struct FVector GetVectorParameter(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static bool IsOverridden(const class UPCGGraphInterface* GraphInterface, const class FName Name_0);
	static void SetBoolParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const bool bValue);
	static void SetByteParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const uint8 Value);
	static void SetClassParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, class UClass* Value);
	static void SetDoubleParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const double Value);
	static void SetEnumParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const uint8 Value, const class UEnum* Enum);
	static void SetFloatParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const float Value);
	static void SetInt32Parameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const int32 Value);
	static void SetInt64Parameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const int64 Value);
	static void SetNameParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const class FName Value);
	static void SetObjectParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, class UObject* Value);
	static void SetQuaternionParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FQuat& Value);
	static void SetRotatorParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FRotator& Value);
	static void SetSoftClassParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const TSoftClassPtr<class UClass>& Value);
	static void SetSoftObjectParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const TSoftObjectPtr<class UObject>& Value);
	static void SetSoftObjectPathParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FSoftObjectPath& Value);
	static void SetStringParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const class FString& Value);
	static void SetTransformParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FTransform& Value);
	static void SetVector2DParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FVector2D& Value);
	static void SetVector4Parameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FVector4& Value);
	static void SetVectorParameter(class UPCGGraphInterface* GraphInterface, const class FName Name_0, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphParametersHelpers">();
	}
	static class UPCGGraphParametersHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphParametersHelpers>();
	}
};
static_assert(alignof(UPCGGraphParametersHelpers) == 0x000008, "Wrong alignment on UPCGGraphParametersHelpers");
static_assert(sizeof(UPCGGraphParametersHelpers) == 0x000028, "Wrong size on UPCGGraphParametersHelpers");

// Class PCG.PCGAddAttributeSettings
// 0x01D8 (0x0290 - 0x00B8)
class UPCGAddAttributeSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGMetadataTypesConstantStruct        AttributeTypes;                                    // 0x0110(0x0170)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCopyAllAttributes;                                // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0xF];                                      // 0x0281(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAddAttributeSettings">();
	}
	static class UPCGAddAttributeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAddAttributeSettings>();
	}
};
static_assert(alignof(UPCGAddAttributeSettings) == 0x000010, "Wrong alignment on UPCGAddAttributeSettings");
static_assert(sizeof(UPCGAddAttributeSettings) == 0x000290, "Wrong size on UPCGAddAttributeSettings");
static_assert(offsetof(UPCGAddAttributeSettings, InputSource) == 0x0000B8, "Member 'UPCGAddAttributeSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAddAttributeSettings, OutputTarget) == 0x0000E0, "Member 'UPCGAddAttributeSettings::OutputTarget' has a wrong offset!");
static_assert(offsetof(UPCGAddAttributeSettings, AttributeTypes) == 0x000110, "Member 'UPCGAddAttributeSettings::AttributeTypes' has a wrong offset!");
static_assert(offsetof(UPCGAddAttributeSettings, bCopyAllAttributes) == 0x000280, "Member 'UPCGAddAttributeSettings::bCopyAllAttributes' has a wrong offset!");

// Class PCG.PCGFunctionPrototypes
// 0x0000 (0x0028 - 0x0028)
class UPCGFunctionPrototypes final : public UBlueprintFunctionLibrary
{
public:
	void PrototypeWithNoParams();
	void PrototypeWithPointAndMetadata(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFunctionPrototypes">();
	}
	static class UPCGFunctionPrototypes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFunctionPrototypes>();
	}
};
static_assert(alignof(UPCGFunctionPrototypes) == 0x000008, "Wrong alignment on UPCGFunctionPrototypes");
static_assert(sizeof(UPCGFunctionPrototypes) == 0x000028, "Wrong size on UPCGFunctionPrototypes");

// Class PCG.PCGHiGenGridSizeSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGHiGenGridSizeSettings final : public UPCGSettings
{
public:
	EPCGHiGenGrid                                 HiGenGridSize;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGHiGenGridSizeSettings">();
	}
	static class UPCGHiGenGridSizeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGHiGenGridSizeSettings>();
	}
};
static_assert(alignof(UPCGHiGenGridSizeSettings) == 0x000008, "Wrong alignment on UPCGHiGenGridSizeSettings");
static_assert(sizeof(UPCGHiGenGridSizeSettings) == 0x0000C0, "Wrong size on UPCGHiGenGridSizeSettings");
static_assert(offsetof(UPCGHiGenGridSizeSettings, HiGenGridSize) == 0x0000B8, "Member 'UPCGHiGenGridSizeSettings::HiGenGridSize' has a wrong offset!");

// Class PCG.PCGPointFromMeshSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGPointFromMeshSettings final : public UPCGSettings
{
public:
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x00B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MeshPathAttributeName;                             // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPointFromMeshSettings">();
	}
	static class UPCGPointFromMeshSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPointFromMeshSettings>();
	}
};
static_assert(alignof(UPCGPointFromMeshSettings) == 0x000008, "Wrong alignment on UPCGPointFromMeshSettings");
static_assert(sizeof(UPCGPointFromMeshSettings) == 0x0000F0, "Wrong size on UPCGPointFromMeshSettings");
static_assert(offsetof(UPCGPointFromMeshSettings, StaticMesh) == 0x0000B8, "Member 'UPCGPointFromMeshSettings::StaticMesh' has a wrong offset!");
static_assert(offsetof(UPCGPointFromMeshSettings, MeshPathAttributeName) == 0x0000E0, "Member 'UPCGPointFromMeshSettings::MeshPathAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGPointFromMeshSettings, bSynchronousLoad) == 0x0000E8, "Member 'UPCGPointFromMeshSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGLoadDataAssetSettings
// 0x0090 (0x0148 - 0x00B8)
class UPCGLoadDataAssetSettings final : public UPCGSettings
{
public:
	TSoftObjectPtr<class UPCGDataAsset>           Asset;                                             // 0x00B8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGPinProperties>              Pins;                                              // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 AssetName;                                         // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadFromInput;                                    // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     AssetReferenceSelector;                            // 0x0108(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputIndexTag;                                     // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DataIndexTag;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnIfNoAsset;                                    // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTagOutputsBasedOnOutputPins;                      // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0142(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLoadDataAssetSettings">();
	}
	static class UPCGLoadDataAssetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLoadDataAssetSettings>();
	}
};
static_assert(alignof(UPCGLoadDataAssetSettings) == 0x000008, "Wrong alignment on UPCGLoadDataAssetSettings");
static_assert(sizeof(UPCGLoadDataAssetSettings) == 0x000148, "Wrong size on UPCGLoadDataAssetSettings");
static_assert(offsetof(UPCGLoadDataAssetSettings, Asset) == 0x0000B8, "Member 'UPCGLoadDataAssetSettings::Asset' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, Pins) == 0x0000E0, "Member 'UPCGLoadDataAssetSettings::Pins' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, AssetName) == 0x0000F0, "Member 'UPCGLoadDataAssetSettings::AssetName' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, bLoadFromInput) == 0x000100, "Member 'UPCGLoadDataAssetSettings::bLoadFromInput' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, AssetReferenceSelector) == 0x000108, "Member 'UPCGLoadDataAssetSettings::AssetReferenceSelector' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, InputIndexTag) == 0x000130, "Member 'UPCGLoadDataAssetSettings::InputIndexTag' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, DataIndexTag) == 0x000138, "Member 'UPCGLoadDataAssetSettings::DataIndexTag' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, bWarnIfNoAsset) == 0x000140, "Member 'UPCGLoadDataAssetSettings::bWarnIfNoAsset' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, bTagOutputsBasedOnOutputPins) == 0x000141, "Member 'UPCGLoadDataAssetSettings::bTagOutputsBasedOnOutputPins' has a wrong offset!");
static_assert(offsetof(UPCGLoadDataAssetSettings, bSynchronousLoad) == 0x000142, "Member 'UPCGLoadDataAssetSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGMakeConcreteSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGMakeConcreteSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMakeConcreteSettings">();
	}
	static class UPCGMakeConcreteSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMakeConcreteSettings>();
	}
};
static_assert(alignof(UPCGMakeConcreteSettings) == 0x000008, "Wrong alignment on UPCGMakeConcreteSettings");
static_assert(sizeof(UPCGMakeConcreteSettings) == 0x0000B8, "Wrong size on UPCGMakeConcreteSettings");

// Class PCG.PCGGetAttributesSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGGetAttributesSettings final : public UPCGSettings
{
public:
	bool                                          bGetType;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDefaultValue;                                  // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetAttributesSettings">();
	}
	static class UPCGGetAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetAttributesSettings>();
	}
};
static_assert(alignof(UPCGGetAttributesSettings) == 0x000008, "Wrong alignment on UPCGGetAttributesSettings");
static_assert(sizeof(UPCGGetAttributesSettings) == 0x0000C0, "Wrong size on UPCGGetAttributesSettings");
static_assert(offsetof(UPCGGetAttributesSettings, bGetType) == 0x0000B8, "Member 'UPCGGetAttributesSettings::bGetType' has a wrong offset!");
static_assert(offsetof(UPCGGetAttributesSettings, bGetDefaultValue) == 0x0000B9, "Member 'UPCGGetAttributesSettings::bGetDefaultValue' has a wrong offset!");

// Class PCG.PCGMergeAttributesSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGMergeAttributesSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMergeAttributesSettings">();
	}
	static class UPCGMergeAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMergeAttributesSettings>();
	}
};
static_assert(alignof(UPCGMergeAttributesSettings) == 0x000008, "Wrong alignment on UPCGMergeAttributesSettings");
static_assert(sizeof(UPCGMergeAttributesSettings) == 0x0000B8, "Wrong size on UPCGMergeAttributesSettings");

// Class PCG.PCGMetadataOperationSettings
// 0x0000 (0x0110 - 0x0110)
class UPCGMetadataOperationSettings final : public UPCGCopyAttributesSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataOperationSettings">();
	}
	static class UPCGMetadataOperationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataOperationSettings>();
	}
};
static_assert(alignof(UPCGMetadataOperationSettings) == 0x000008, "Wrong alignment on UPCGMetadataOperationSettings");
static_assert(sizeof(UPCGMetadataOperationSettings) == 0x000110, "Wrong size on UPCGMetadataOperationSettings");

// Class PCG.PCGSelfPruningSettings
// 0x0068 (0x0120 - 0x00B8)
class UPCGSelfPruningSettings final : public UPCGSettings
{
public:
	struct FPCGSelfPruningParameters              Parameters;                                        // 0x00B8(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSelfPruningSettings">();
	}
	static class UPCGSelfPruningSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSelfPruningSettings>();
	}
};
static_assert(alignof(UPCGSelfPruningSettings) == 0x000008, "Wrong alignment on UPCGSelfPruningSettings");
static_assert(sizeof(UPCGSelfPruningSettings) == 0x000120, "Wrong size on UPCGSelfPruningSettings");
static_assert(offsetof(UPCGSelfPruningSettings, Parameters) == 0x0000B8, "Member 'UPCGSelfPruningSettings::Parameters' has a wrong offset!");

// Class PCG.PCGMetadataMakeRotatorSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataMakeRotatorSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0110(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0138(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataMakeRotatorOp                     Operation;                                         // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataMakeRotatorSettings">();
	}
	static class UPCGMetadataMakeRotatorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataMakeRotatorSettings>();
	}
};
static_assert(alignof(UPCGMetadataMakeRotatorSettings) == 0x000008, "Wrong alignment on UPCGMetadataMakeRotatorSettings");
static_assert(sizeof(UPCGMetadataMakeRotatorSettings) == 0x000168, "Wrong size on UPCGMetadataMakeRotatorSettings");
static_assert(offsetof(UPCGMetadataMakeRotatorSettings, InputSource1) == 0x0000E8, "Member 'UPCGMetadataMakeRotatorSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeRotatorSettings, InputSource2) == 0x000110, "Member 'UPCGMetadataMakeRotatorSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeRotatorSettings, InputSource3) == 0x000138, "Member 'UPCGMetadataMakeRotatorSettings::InputSource3' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeRotatorSettings, Operation) == 0x000160, "Member 'UPCGMetadataMakeRotatorSettings::Operation' has a wrong offset!");

// Class PCG.PCGMultiSelectSettings
// 0x0058 (0x0110 - 0x00B8)
class UPCGMultiSelectSettings final : public UPCGSettings
{
public:
	EPCGControlFlowSelectionMode                  SelectionMode;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerSelection;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntOptions;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringSelection;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringOptions;                                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEnumSelector                          EnumSelection;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CachedPinLabels;                                   // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMultiSelectSettings">();
	}
	static class UPCGMultiSelectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMultiSelectSettings>();
	}
};
static_assert(alignof(UPCGMultiSelectSettings) == 0x000008, "Wrong alignment on UPCGMultiSelectSettings");
static_assert(sizeof(UPCGMultiSelectSettings) == 0x000110, "Wrong size on UPCGMultiSelectSettings");
static_assert(offsetof(UPCGMultiSelectSettings, SelectionMode) == 0x0000B8, "Member 'UPCGMultiSelectSettings::SelectionMode' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, IntegerSelection) == 0x0000BC, "Member 'UPCGMultiSelectSettings::IntegerSelection' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, IntOptions) == 0x0000C0, "Member 'UPCGMultiSelectSettings::IntOptions' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, StringSelection) == 0x0000D0, "Member 'UPCGMultiSelectSettings::StringSelection' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, StringOptions) == 0x0000E0, "Member 'UPCGMultiSelectSettings::StringOptions' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, EnumSelection) == 0x0000F0, "Member 'UPCGMultiSelectSettings::EnumSelection' has a wrong offset!");
static_assert(offsetof(UPCGMultiSelectSettings, CachedPinLabels) == 0x000100, "Member 'UPCGMultiSelectSettings::CachedPinLabels' has a wrong offset!");

// Class PCG.PCGMutateSeedSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGMutateSeedSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMutateSeedSettings">();
	}
	static class UPCGMutateSeedSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMutateSeedSettings>();
	}
};
static_assert(alignof(UPCGMutateSeedSettings) == 0x000008, "Wrong alignment on UPCGMutateSeedSettings");
static_assert(sizeof(UPCGMutateSeedSettings) == 0x0000B8, "Wrong size on UPCGMutateSeedSettings");

// Class PCG.PCGNormalToDensitySettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGNormalToDensitySettings final : public UPCGSettings
{
public:
	struct FVector                                Normal;                                            // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Offset;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Strength;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGNormalToDensityMode                       DensityMode;                                       // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNormalToDensitySettings">();
	}
	static class UPCGNormalToDensitySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNormalToDensitySettings>();
	}
};
static_assert(alignof(UPCGNormalToDensitySettings) == 0x000008, "Wrong alignment on UPCGNormalToDensitySettings");
static_assert(sizeof(UPCGNormalToDensitySettings) == 0x0000E8, "Wrong size on UPCGNormalToDensitySettings");
static_assert(offsetof(UPCGNormalToDensitySettings, Normal) == 0x0000B8, "Member 'UPCGNormalToDensitySettings::Normal' has a wrong offset!");
static_assert(offsetof(UPCGNormalToDensitySettings, Offset) == 0x0000D0, "Member 'UPCGNormalToDensitySettings::Offset' has a wrong offset!");
static_assert(offsetof(UPCGNormalToDensitySettings, Strength) == 0x0000D8, "Member 'UPCGNormalToDensitySettings::Strength' has a wrong offset!");
static_assert(offsetof(UPCGNormalToDensitySettings, DensityMode) == 0x0000E0, "Member 'UPCGNormalToDensitySettings::DensityMode' has a wrong offset!");

// Class PCG.PCGNode
// 0x0060 (0x0088 - 0x0028)
class UPCGNode : public UObject
{
public:
	class FName                                   NodeTitle;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSettingsInterface*                  SettingsInterface;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UPCGNode*>                       OutboundNodes;                                     // 0x0038(0x0010)(ZeroConstructor, Deprecated, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UPCGEdge*>                       InboundEdges;                                      // 0x0048(0x0010)(ZeroConstructor, Deprecated, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UPCGEdge*>                       OutboundEdges;                                     // 0x0058(0x0010)(ZeroConstructor, Deprecated, Protected, TextExportTransient, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UPCGPin*>                        InputPins;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UPCGPin*>                        OutputPins;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	class UPCGNode* AddEdgeTo(class FName FromPinLabel, class UPCGNode* To, class FName ToPinLabel);
	bool RemoveEdgeTo(class FName FromPinLable, class UPCGNode* To, class FName ToPinLabel);

	class UPCGGraph* GetGraph() const;
	class UPCGSettings* GetSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNode">();
	}
	static class UPCGNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNode>();
	}
};
static_assert(alignof(UPCGNode) == 0x000008, "Wrong alignment on UPCGNode");
static_assert(sizeof(UPCGNode) == 0x000088, "Wrong size on UPCGNode");
static_assert(offsetof(UPCGNode, NodeTitle) == 0x000028, "Member 'UPCGNode::NodeTitle' has a wrong offset!");
static_assert(offsetof(UPCGNode, SettingsInterface) == 0x000030, "Member 'UPCGNode::SettingsInterface' has a wrong offset!");
static_assert(offsetof(UPCGNode, OutboundNodes) == 0x000038, "Member 'UPCGNode::OutboundNodes' has a wrong offset!");
static_assert(offsetof(UPCGNode, InboundEdges) == 0x000048, "Member 'UPCGNode::InboundEdges' has a wrong offset!");
static_assert(offsetof(UPCGNode, OutboundEdges) == 0x000058, "Member 'UPCGNode::OutboundEdges' has a wrong offset!");
static_assert(offsetof(UPCGNode, InputPins) == 0x000068, "Member 'UPCGNode::InputPins' has a wrong offset!");
static_assert(offsetof(UPCGNode, OutputPins) == 0x000078, "Member 'UPCGNode::OutputPins' has a wrong offset!");

// Class PCG.PCGBaseSubgraphNode
// 0x0000 (0x0088 - 0x0088)
class UPCGBaseSubgraphNode : public UPCGNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBaseSubgraphNode">();
	}
	static class UPCGBaseSubgraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBaseSubgraphNode>();
	}
};
static_assert(alignof(UPCGBaseSubgraphNode) == 0x000008, "Wrong alignment on UPCGBaseSubgraphNode");
static_assert(sizeof(UPCGBaseSubgraphNode) == 0x000088, "Wrong size on UPCGBaseSubgraphNode");

// Class PCG.PCGNumberOfElementsBaseSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGNumberOfElementsBaseSettings : public UPCGSettings
{
public:
	class FName                                   OutputAttributeName;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNumberOfElementsBaseSettings">();
	}
	static class UPCGNumberOfElementsBaseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNumberOfElementsBaseSettings>();
	}
};
static_assert(alignof(UPCGNumberOfElementsBaseSettings) == 0x000008, "Wrong alignment on UPCGNumberOfElementsBaseSettings");
static_assert(sizeof(UPCGNumberOfElementsBaseSettings) == 0x0000C0, "Wrong size on UPCGNumberOfElementsBaseSettings");
static_assert(offsetof(UPCGNumberOfElementsBaseSettings, OutputAttributeName) == 0x0000B8, "Member 'UPCGNumberOfElementsBaseSettings::OutputAttributeName' has a wrong offset!");

// Class PCG.PCGNumberOfPointsSettings
// 0x0000 (0x00C0 - 0x00C0)
class UPCGNumberOfPointsSettings final : public UPCGNumberOfElementsBaseSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNumberOfPointsSettings">();
	}
	static class UPCGNumberOfPointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNumberOfPointsSettings>();
	}
};
static_assert(alignof(UPCGNumberOfPointsSettings) == 0x000008, "Wrong alignment on UPCGNumberOfPointsSettings");
static_assert(sizeof(UPCGNumberOfPointsSettings) == 0x0000C0, "Wrong size on UPCGNumberOfPointsSettings");

// Class PCG.PCGMergeSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGMergeSettings final : public UPCGSettings
{
public:
	bool                                          bMergeMetadata;                                    // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMergeSettings">();
	}
	static class UPCGMergeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMergeSettings>();
	}
};
static_assert(alignof(UPCGMergeSettings) == 0x000008, "Wrong alignment on UPCGMergeSettings");
static_assert(sizeof(UPCGMergeSettings) == 0x0000C0, "Wrong size on UPCGMergeSettings");
static_assert(offsetof(UPCGMergeSettings, bMergeMetadata) == 0x0000B8, "Member 'UPCGMergeSettings::bMergeMetadata' has a wrong offset!");

// Class PCG.PCGNumberOfEntriesSettings
// 0x0000 (0x00C0 - 0x00C0)
class UPCGNumberOfEntriesSettings final : public UPCGNumberOfElementsBaseSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNumberOfEntriesSettings">();
	}
	static class UPCGNumberOfEntriesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNumberOfEntriesSettings>();
	}
};
static_assert(alignof(UPCGNumberOfEntriesSettings) == 0x000008, "Wrong alignment on UPCGNumberOfEntriesSettings");
static_assert(sizeof(UPCGNumberOfEntriesSettings) == 0x0000C0, "Wrong size on UPCGNumberOfEntriesSettings");

// Class PCG.PCGOctreeQueries
// 0x0000 (0x0028 - 0x0028)
class UPCGOctreeQueries final : public UBlueprintFunctionLibrary
{
public:
	static void GetClosestPoint(const class UPCGPointData* InPointData, const struct FVector& InCenter, const bool bInDiscardCenter, bool* bOutFound, struct FPCGPoint* OutPoint, const double InSearchDistance);
	static void GetClosestPointFromOtherPoint(const class UPCGPointData* InPointData, const int32 InPointIndex, bool* bOutFound, struct FPCGPoint* OutPoint, const double InSearchDistance);
	static void GetFarthestPoint(const class UPCGPointData* InPointData, const struct FVector& InCenter, bool* bOutFound, struct FPCGPoint* OutPoint, const double InSearchDistance);
	static void GetFarthestPointFromOtherPoint(const class UPCGPointData* InPointData, const int32 InPointIndex, bool* bOutFound, struct FPCGPoint* OutPoint, const double InSearchDistance);
	static TArray<struct FPCGPoint> GetPointsInsideBounds(const class UPCGPointData* InPointData, const struct FBox& InBounds);
	static TArray<struct FPCGPoint> GetPointsInsideSphere(const class UPCGPointData* InPointData, const struct FVector& InCenter, const double InRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGOctreeQueries">();
	}
	static class UPCGOctreeQueries* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGOctreeQueries>();
	}
};
static_assert(alignof(UPCGOctreeQueries) == 0x000008, "Wrong alignment on UPCGOctreeQueries");
static_assert(sizeof(UPCGOctreeQueries) == 0x000028, "Wrong size on UPCGOctreeQueries");

// Class PCG.PCGSurfaceSamplerSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGSurfaceSamplerSettings final : public UPCGSettings
{
public:
	float                                         PointsPerSquaredMeter;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PointExtents;                                      // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Looseness;                                         // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbounded;                                        // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDensityToPoints;                             // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointSteepness;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSurfaceSamplerSettings">();
	}
	static class UPCGSurfaceSamplerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSurfaceSamplerSettings>();
	}
};
static_assert(alignof(UPCGSurfaceSamplerSettings) == 0x000008, "Wrong alignment on UPCGSurfaceSamplerSettings");
static_assert(sizeof(UPCGSurfaceSamplerSettings) == 0x0000E8, "Wrong size on UPCGSurfaceSamplerSettings");
static_assert(offsetof(UPCGSurfaceSamplerSettings, PointsPerSquaredMeter) == 0x0000B8, "Member 'UPCGSurfaceSamplerSettings::PointsPerSquaredMeter' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceSamplerSettings, PointExtents) == 0x0000C0, "Member 'UPCGSurfaceSamplerSettings::PointExtents' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceSamplerSettings, Looseness) == 0x0000D8, "Member 'UPCGSurfaceSamplerSettings::Looseness' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceSamplerSettings, bUnbounded) == 0x0000DC, "Member 'UPCGSurfaceSamplerSettings::bUnbounded' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceSamplerSettings, bApplyDensityToPoints) == 0x0000DD, "Member 'UPCGSurfaceSamplerSettings::bApplyDensityToPoints' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceSamplerSettings, PointSteepness) == 0x0000E0, "Member 'UPCGSurfaceSamplerSettings::PointSteepness' has a wrong offset!");

// Class PCG.PCGSettingsWithDynamicInputs
// 0x0010 (0x00C8 - 0x00B8)
class UPCGSettingsWithDynamicInputs : public UPCGSettings
{
public:
	TArray<struct FPCGPinProperties>              DynamicInputPinProperties;                         // 0x00B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSettingsWithDynamicInputs">();
	}
	static class UPCGSettingsWithDynamicInputs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSettingsWithDynamicInputs>();
	}
};
static_assert(alignof(UPCGSettingsWithDynamicInputs) == 0x000008, "Wrong alignment on UPCGSettingsWithDynamicInputs");
static_assert(sizeof(UPCGSettingsWithDynamicInputs) == 0x0000C8, "Wrong size on UPCGSettingsWithDynamicInputs");
static_assert(offsetof(UPCGSettingsWithDynamicInputs, DynamicInputPinProperties) == 0x0000B8, "Member 'UPCGSettingsWithDynamicInputs::DynamicInputPinProperties' has a wrong offset!");

// Class PCG.PCGOuterIntersectionSettings
// 0x0008 (0x00D0 - 0x00C8)
class UPCGOuterIntersectionSettings final : public UPCGSettingsWithDynamicInputs
{
public:
	EPCGIntersectionDensityFunction               DensityFunction;                                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePinsWithNoInput;                            // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepZeroDensityPoints;                            // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGOuterIntersectionSettings">();
	}
	static class UPCGOuterIntersectionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGOuterIntersectionSettings>();
	}
};
static_assert(alignof(UPCGOuterIntersectionSettings) == 0x000008, "Wrong alignment on UPCGOuterIntersectionSettings");
static_assert(sizeof(UPCGOuterIntersectionSettings) == 0x0000D0, "Wrong size on UPCGOuterIntersectionSettings");
static_assert(offsetof(UPCGOuterIntersectionSettings, DensityFunction) == 0x0000C8, "Member 'UPCGOuterIntersectionSettings::DensityFunction' has a wrong offset!");
static_assert(offsetof(UPCGOuterIntersectionSettings, bIgnorePinsWithNoInput) == 0x0000C9, "Member 'UPCGOuterIntersectionSettings::bIgnorePinsWithNoInput' has a wrong offset!");
static_assert(offsetof(UPCGOuterIntersectionSettings, bKeepZeroDensityPoints) == 0x0000CA, "Member 'UPCGOuterIntersectionSettings::bKeepZeroDensityPoints' has a wrong offset!");

// Class PCG.PCGFilterByIndexSettings
// 0x0018 (0x00D0 - 0x00B8)
class UPCGFilterByIndexSettings final : public UPCGFilterDataBaseSettings
{
public:
	bool                                          bInvertFilter;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedIndices;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterByIndexSettings">();
	}
	static class UPCGFilterByIndexSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterByIndexSettings>();
	}
};
static_assert(alignof(UPCGFilterByIndexSettings) == 0x000008, "Wrong alignment on UPCGFilterByIndexSettings");
static_assert(sizeof(UPCGFilterByIndexSettings) == 0x0000D0, "Wrong size on UPCGFilterByIndexSettings");
static_assert(offsetof(UPCGFilterByIndexSettings, bInvertFilter) == 0x0000B8, "Member 'UPCGFilterByIndexSettings::bInvertFilter' has a wrong offset!");
static_assert(offsetof(UPCGFilterByIndexSettings, SelectedIndices) == 0x0000C0, "Member 'UPCGFilterByIndexSettings::SelectedIndices' has a wrong offset!");

// Class PCG.PCGParseStringSettings
// 0x0030 (0x0118 - 0x00E8)
class UPCGParseStringSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             TargetType;                                        // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGParseStringSettings">();
	}
	static class UPCGParseStringSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGParseStringSettings>();
	}
};
static_assert(alignof(UPCGParseStringSettings) == 0x000008, "Wrong alignment on UPCGParseStringSettings");
static_assert(sizeof(UPCGParseStringSettings) == 0x000118, "Wrong size on UPCGParseStringSettings");
static_assert(offsetof(UPCGParseStringSettings, InputSource) == 0x0000E8, "Member 'UPCGParseStringSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGParseStringSettings, TargetType) == 0x000110, "Member 'UPCGParseStringSettings::TargetType' has a wrong offset!");

// Class PCG.PCGPathfindingSettings
// 0x0168 (0x0220 - 0x00B8)
class UPCGPathfindingSettings final : public UPCGSettings
{
public:
	double                                        SearchDistance;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartLocationsAsInput;                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     StartLocationAttribute;                            // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGoalLocationsAsInput;                             // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     GoalLocationAttribute;                             // 0x0110(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Goal;                                              // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        HeuristicWeight;                                   // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPathfindingCostFunctionMode               CostFunctionMode;                                  // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     CostAttribute;                                     // 0x0160(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaximumFitnessPenaltyFactor;                       // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePathTraces;                                    // 0x0190(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGWorldRaycastQueryParams            PathTraceParams;                                   // 0x0198(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAcceptPartialPath;                                // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputAsSpline;                                   // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPathfindingSplineMode                     SplineMode;                                        // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyOriginatingPoints;                            // 0x021B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPathfindingSettings">();
	}
	static class UPCGPathfindingSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPathfindingSettings>();
	}
};
static_assert(alignof(UPCGPathfindingSettings) == 0x000008, "Wrong alignment on UPCGPathfindingSettings");
static_assert(sizeof(UPCGPathfindingSettings) == 0x000220, "Wrong size on UPCGPathfindingSettings");
static_assert(offsetof(UPCGPathfindingSettings, SearchDistance) == 0x0000B8, "Member 'UPCGPathfindingSettings::SearchDistance' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bStartLocationsAsInput) == 0x0000C0, "Member 'UPCGPathfindingSettings::bStartLocationsAsInput' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, StartLocationAttribute) == 0x0000C8, "Member 'UPCGPathfindingSettings::StartLocationAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, Start) == 0x0000F0, "Member 'UPCGPathfindingSettings::Start' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bGoalLocationsAsInput) == 0x000108, "Member 'UPCGPathfindingSettings::bGoalLocationsAsInput' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, GoalLocationAttribute) == 0x000110, "Member 'UPCGPathfindingSettings::GoalLocationAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, Goal) == 0x000138, "Member 'UPCGPathfindingSettings::Goal' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, HeuristicWeight) == 0x000150, "Member 'UPCGPathfindingSettings::HeuristicWeight' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, CostFunctionMode) == 0x000158, "Member 'UPCGPathfindingSettings::CostFunctionMode' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, CostAttribute) == 0x000160, "Member 'UPCGPathfindingSettings::CostAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, MaximumFitnessPenaltyFactor) == 0x000188, "Member 'UPCGPathfindingSettings::MaximumFitnessPenaltyFactor' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bUsePathTraces) == 0x000190, "Member 'UPCGPathfindingSettings::bUsePathTraces' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, PathTraceParams) == 0x000198, "Member 'UPCGPathfindingSettings::PathTraceParams' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bAcceptPartialPath) == 0x000218, "Member 'UPCGPathfindingSettings::bAcceptPartialPath' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bOutputAsSpline) == 0x000219, "Member 'UPCGPathfindingSettings::bOutputAsSpline' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, SplineMode) == 0x00021A, "Member 'UPCGPathfindingSettings::SplineMode' has a wrong offset!");
static_assert(offsetof(UPCGPathfindingSettings, bCopyOriginatingPoints) == 0x00021B, "Member 'UPCGPathfindingSettings::bCopyOriginatingPoints' has a wrong offset!");

// Class PCG.PCGMetadataPartitionSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGMetadataPartitionSettings final : public UPCGSettings
{
public:
	TArray<struct FPCGAttributePropertyInputSelector> PartitionAttributeSelectors;                   // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 PartitionAttributeNames;                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssignIndexPartition;                             // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotPartition;                                   // 0x00DA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PartitionIndexAttributeName;                       // 0x00DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataPartitionSettings">();
	}
	static class UPCGMetadataPartitionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataPartitionSettings>();
	}
};
static_assert(alignof(UPCGMetadataPartitionSettings) == 0x000008, "Wrong alignment on UPCGMetadataPartitionSettings");
static_assert(sizeof(UPCGMetadataPartitionSettings) == 0x0000E8, "Wrong size on UPCGMetadataPartitionSettings");
static_assert(offsetof(UPCGMetadataPartitionSettings, PartitionAttributeSelectors) == 0x0000B8, "Member 'UPCGMetadataPartitionSettings::PartitionAttributeSelectors' has a wrong offset!");
static_assert(offsetof(UPCGMetadataPartitionSettings, PartitionAttributeNames) == 0x0000C8, "Member 'UPCGMetadataPartitionSettings::PartitionAttributeNames' has a wrong offset!");
static_assert(offsetof(UPCGMetadataPartitionSettings, bTokenizeOnWhiteSpace) == 0x0000D8, "Member 'UPCGMetadataPartitionSettings::bTokenizeOnWhiteSpace' has a wrong offset!");
static_assert(offsetof(UPCGMetadataPartitionSettings, bAssignIndexPartition) == 0x0000D9, "Member 'UPCGMetadataPartitionSettings::bAssignIndexPartition' has a wrong offset!");
static_assert(offsetof(UPCGMetadataPartitionSettings, bDoNotPartition) == 0x0000DA, "Member 'UPCGMetadataPartitionSettings::bDoNotPartition' has a wrong offset!");
static_assert(offsetof(UPCGMetadataPartitionSettings, PartitionIndexAttributeName) == 0x0000DC, "Member 'UPCGMetadataPartitionSettings::PartitionIndexAttributeName' has a wrong offset!");

// Class PCG.PCGPointNeighborhoodSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGPointNeighborhoodSettings final : public UPCGSettings
{
public:
	double                                        SearchDistance;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDistanceToAttribute;                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DistanceAttribute;                                 // 0x00C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAveragePositionToAttribute;                    // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AveragePositionAttribute;                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPointNeighborhoodDensityMode              SetDensity;                                        // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAveragePosition;                               // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAverageColor;                                  // 0x00DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeightedAverage;                                  // 0x00DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF[0x1];                                       // 0x00DF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPointNeighborhoodSettings">();
	}
	static class UPCGPointNeighborhoodSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPointNeighborhoodSettings>();
	}
};
static_assert(alignof(UPCGPointNeighborhoodSettings) == 0x000008, "Wrong alignment on UPCGPointNeighborhoodSettings");
static_assert(sizeof(UPCGPointNeighborhoodSettings) == 0x0000E0, "Wrong size on UPCGPointNeighborhoodSettings");
static_assert(offsetof(UPCGPointNeighborhoodSettings, SearchDistance) == 0x0000B8, "Member 'UPCGPointNeighborhoodSettings::SearchDistance' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, bSetDistanceToAttribute) == 0x0000C0, "Member 'UPCGPointNeighborhoodSettings::bSetDistanceToAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, DistanceAttribute) == 0x0000C4, "Member 'UPCGPointNeighborhoodSettings::DistanceAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, bSetAveragePositionToAttribute) == 0x0000CC, "Member 'UPCGPointNeighborhoodSettings::bSetAveragePositionToAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, AveragePositionAttribute) == 0x0000D0, "Member 'UPCGPointNeighborhoodSettings::AveragePositionAttribute' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, SetDensity) == 0x0000D8, "Member 'UPCGPointNeighborhoodSettings::SetDensity' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, bSetAveragePosition) == 0x0000DC, "Member 'UPCGPointNeighborhoodSettings::bSetAveragePosition' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, bSetAverageColor) == 0x0000DD, "Member 'UPCGPointNeighborhoodSettings::bSetAverageColor' has a wrong offset!");
static_assert(offsetof(UPCGPointNeighborhoodSettings, bWeightedAverage) == 0x0000DE, "Member 'UPCGPointNeighborhoodSettings::bWeightedAverage' has a wrong offset!");

// Class PCG.PCGManagedDebugStringMessageKey
// 0x0008 (0x0040 - 0x0038)
class UPCGManagedDebugStringMessageKey final : public UPCGManagedResource
{
public:
	uint64                                        HashKey;                                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedDebugStringMessageKey">();
	}
	static class UPCGManagedDebugStringMessageKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedDebugStringMessageKey>();
	}
};
static_assert(alignof(UPCGManagedDebugStringMessageKey) == 0x000008, "Wrong alignment on UPCGManagedDebugStringMessageKey");
static_assert(sizeof(UPCGManagedDebugStringMessageKey) == 0x000040, "Wrong size on UPCGManagedDebugStringMessageKey");
static_assert(offsetof(UPCGManagedDebugStringMessageKey, HashKey) == 0x000038, "Member 'UPCGManagedDebugStringMessageKey::HashKey' has a wrong offset!");

// Class PCG.PCGSpawnActorSettings
// 0x0090 (0x0148 - 0x00B8)
class UPCGSpawnActorSettings final : public UPCGBaseSubgraphSettings
{
public:
	TArray<class FName>                           PostSpawnFunctionNames;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EPCGSpawnActorOption                          Option;                                            // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableActorParsing;                         // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSpawnActorGenerationTrigger               GenerationTrigger;                                 // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritActorTags;                                 // 0x00CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TagsToAddOnActors;                                 // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 TemplateActor;                                     // 0x00E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGObjectPropertyOverrideDescription> SpawnedActorPropertyOverrideDescriptions;   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  RootActor;                                         // 0x00F8(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttachOptions                             AttachOptions;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnByAttribute;                                 // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnAttribute;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnOnIdenticalSpawn;                             // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     TemplateActorClass;                                // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowTemplateActorEditing;                        // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpawnActorSettings">();
	}
	static class UPCGSpawnActorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpawnActorSettings>();
	}
};
static_assert(alignof(UPCGSpawnActorSettings) == 0x000008, "Wrong alignment on UPCGSpawnActorSettings");
static_assert(sizeof(UPCGSpawnActorSettings) == 0x000148, "Wrong size on UPCGSpawnActorSettings");
static_assert(offsetof(UPCGSpawnActorSettings, PostSpawnFunctionNames) == 0x0000B8, "Member 'UPCGSpawnActorSettings::PostSpawnFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, Option) == 0x0000C8, "Member 'UPCGSpawnActorSettings::Option' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, bForceDisableActorParsing) == 0x0000C9, "Member 'UPCGSpawnActorSettings::bForceDisableActorParsing' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, GenerationTrigger) == 0x0000CA, "Member 'UPCGSpawnActorSettings::GenerationTrigger' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, bInheritActorTags) == 0x0000CB, "Member 'UPCGSpawnActorSettings::bInheritActorTags' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, TagsToAddOnActors) == 0x0000D0, "Member 'UPCGSpawnActorSettings::TagsToAddOnActors' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, TemplateActor) == 0x0000E0, "Member 'UPCGSpawnActorSettings::TemplateActor' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, SpawnedActorPropertyOverrideDescriptions) == 0x0000E8, "Member 'UPCGSpawnActorSettings::SpawnedActorPropertyOverrideDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, RootActor) == 0x0000F8, "Member 'UPCGSpawnActorSettings::RootActor' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, AttachOptions) == 0x000120, "Member 'UPCGSpawnActorSettings::AttachOptions' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, bSpawnByAttribute) == 0x000124, "Member 'UPCGSpawnActorSettings::bSpawnByAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, SpawnAttribute) == 0x000128, "Member 'UPCGSpawnActorSettings::SpawnAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, bWarnOnIdenticalSpawn) == 0x000130, "Member 'UPCGSpawnActorSettings::bWarnOnIdenticalSpawn' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, TemplateActorClass) == 0x000138, "Member 'UPCGSpawnActorSettings::TemplateActorClass' has a wrong offset!");
static_assert(offsetof(UPCGSpawnActorSettings, bAllowTemplateActorEditing) == 0x000140, "Member 'UPCGSpawnActorSettings::bAllowTemplateActorEditing' has a wrong offset!");

// Class PCG.PCGPrintElementSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGPrintElementSettings final : public UPCGSettings
{
public:
	class FString                                 PrintString;                                       // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPrintVerbosity                            Verbosity;                                         // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomPrefix;                                      // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayOnNode;                                    // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrintPerComponent;                                // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithOwner;                                  // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithComponent;                              // 0x00E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithGraph;                                  // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithNode;                                   // 0x00E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePrint;                                      // 0x00E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7[0x1];                                       // 0x00E7(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPrintElementSettings">();
	}
	static class UPCGPrintElementSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPrintElementSettings>();
	}
};
static_assert(alignof(UPCGPrintElementSettings) == 0x000008, "Wrong alignment on UPCGPrintElementSettings");
static_assert(sizeof(UPCGPrintElementSettings) == 0x0000E8, "Wrong size on UPCGPrintElementSettings");
static_assert(offsetof(UPCGPrintElementSettings, PrintString) == 0x0000B8, "Member 'UPCGPrintElementSettings::PrintString' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, Verbosity) == 0x0000C8, "Member 'UPCGPrintElementSettings::Verbosity' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, CustomPrefix) == 0x0000D0, "Member 'UPCGPrintElementSettings::CustomPrefix' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bDisplayOnNode) == 0x0000E0, "Member 'UPCGPrintElementSettings::bDisplayOnNode' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bPrintPerComponent) == 0x0000E1, "Member 'UPCGPrintElementSettings::bPrintPerComponent' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bPrefixWithOwner) == 0x0000E2, "Member 'UPCGPrintElementSettings::bPrefixWithOwner' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bPrefixWithComponent) == 0x0000E3, "Member 'UPCGPrintElementSettings::bPrefixWithComponent' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bPrefixWithGraph) == 0x0000E4, "Member 'UPCGPrintElementSettings::bPrefixWithGraph' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bPrefixWithNode) == 0x0000E5, "Member 'UPCGPrintElementSettings::bPrefixWithNode' has a wrong offset!");
static_assert(offsetof(UPCGPrintElementSettings, bEnablePrint) == 0x0000E6, "Member 'UPCGPrintElementSettings::bEnablePrint' has a wrong offset!");

// Class PCG.PCGPrintGrammarSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGPrintGrammarSettings final : public UPCGSettings
{
public:
	class FString                                 Grammar;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPrintGrammarSettings">();
	}
	static class UPCGPrintGrammarSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPrintGrammarSettings>();
	}
};
static_assert(alignof(UPCGPrintGrammarSettings) == 0x000008, "Wrong alignment on UPCGPrintGrammarSettings");
static_assert(sizeof(UPCGPrintGrammarSettings) == 0x0000C8, "Wrong size on UPCGPrintGrammarSettings");
static_assert(offsetof(UPCGPrintGrammarSettings, Grammar) == 0x0000B8, "Member 'UPCGPrintGrammarSettings::Grammar' has a wrong offset!");

// Class PCG.PCGMetadataTransformSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataTransformSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataTransformOperation                Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTransformLerpMode                         TransformLerpMode;                                 // 0x00EA(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataTransformSettings">();
	}
	static class UPCGMetadataTransformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataTransformSettings>();
	}
};
static_assert(alignof(UPCGMetadataTransformSettings) == 0x000008, "Wrong alignment on UPCGMetadataTransformSettings");
static_assert(sizeof(UPCGMetadataTransformSettings) == 0x000168, "Wrong size on UPCGMetadataTransformSettings");
static_assert(offsetof(UPCGMetadataTransformSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataTransformSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTransformSettings, TransformLerpMode) == 0x0000EA, "Member 'UPCGMetadataTransformSettings::TransformLerpMode' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTransformSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataTransformSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTransformSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataTransformSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTransformSettings, InputSource3) == 0x000140, "Member 'UPCGMetadataTransformSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGProceduralISMComponent
// 0x0040 (0x0600 - 0x05C0)
class UPCGProceduralISMComponent final : public UStaticMeshComponent
{
public:
	int32                                         NumInstances;                                      // 0x05B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumCustomDataFloats;                               // 0x05BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   LocalBounds;                                       // 0x05C0(0x0038)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         InstanceStartCullDistance;                         // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InstanceEndCullDistance;                           // 0x05FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearInstances();
	void SetCullDistances(int32 InStartCullDistance, int32 InEndCullDistance);
	void SetLocalBounds(const struct FBox& InLocalBounds);
	void SetNumCustomDataFloats(int32 InNumCustomDataFloats);
	void SetNumInstances(int32 InNumInstances);

	void GetCullDistances(int32* OutStartCullDistance, int32* OutEndCullDistance) const;
	int32 GetNumCustomDataFloats() const;
	int32 GetNumInstances() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGProceduralISMComponent">();
	}
	static class UPCGProceduralISMComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGProceduralISMComponent>();
	}
};
static_assert(alignof(UPCGProceduralISMComponent) == 0x000010, "Wrong alignment on UPCGProceduralISMComponent");
static_assert(sizeof(UPCGProceduralISMComponent) == 0x000600, "Wrong size on UPCGProceduralISMComponent");
static_assert(offsetof(UPCGProceduralISMComponent, NumInstances) == 0x0005B8, "Member 'UPCGProceduralISMComponent::NumInstances' has a wrong offset!");
static_assert(offsetof(UPCGProceduralISMComponent, NumCustomDataFloats) == 0x0005BC, "Member 'UPCGProceduralISMComponent::NumCustomDataFloats' has a wrong offset!");
static_assert(offsetof(UPCGProceduralISMComponent, LocalBounds) == 0x0005C0, "Member 'UPCGProceduralISMComponent::LocalBounds' has a wrong offset!");
static_assert(offsetof(UPCGProceduralISMComponent, InstanceStartCullDistance) == 0x0005F8, "Member 'UPCGProceduralISMComponent::InstanceStartCullDistance' has a wrong offset!");
static_assert(offsetof(UPCGProceduralISMComponent, InstanceEndCullDistance) == 0x0005FC, "Member 'UPCGProceduralISMComponent::InstanceEndCullDistance' has a wrong offset!");

// Class PCG.PCGManagedProceduralISMComponent
// 0x00C8 (0x0128 - 0x0060)
class UPCGManagedProceduralISMComponent final : public UPCGManagedComponent
{
public:
	struct FPCGProceduralISMComponentDescriptor   Descriptor;                                        // 0x0060(0x0098)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRootLocation;                                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RootLocation;                                      // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SettingsUID;                                       // 0x0118(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedProceduralISMComponent">();
	}
	static class UPCGManagedProceduralISMComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedProceduralISMComponent>();
	}
};
static_assert(alignof(UPCGManagedProceduralISMComponent) == 0x000008, "Wrong alignment on UPCGManagedProceduralISMComponent");
static_assert(sizeof(UPCGManagedProceduralISMComponent) == 0x000128, "Wrong size on UPCGManagedProceduralISMComponent");
static_assert(offsetof(UPCGManagedProceduralISMComponent, Descriptor) == 0x000060, "Member 'UPCGManagedProceduralISMComponent::Descriptor' has a wrong offset!");
static_assert(offsetof(UPCGManagedProceduralISMComponent, bHasRootLocation) == 0x0000F8, "Member 'UPCGManagedProceduralISMComponent::bHasRootLocation' has a wrong offset!");
static_assert(offsetof(UPCGManagedProceduralISMComponent, RootLocation) == 0x000100, "Member 'UPCGManagedProceduralISMComponent::RootLocation' has a wrong offset!");
static_assert(offsetof(UPCGManagedProceduralISMComponent, SettingsUID) == 0x000118, "Member 'UPCGManagedProceduralISMComponent::SettingsUID' has a wrong offset!");

// Class PCG.PCGQualityBranchSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGQualityBranchSettings final : public UPCGSettings
{
public:
	bool                                          bUseLowPin;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMediumPin;                                     // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighPin;                                       // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEpicPin;                                       // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCinematicPin;                                  // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGQualityBranchSettings">();
	}
	static class UPCGQualityBranchSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGQualityBranchSettings>();
	}
};
static_assert(alignof(UPCGQualityBranchSettings) == 0x000008, "Wrong alignment on UPCGQualityBranchSettings");
static_assert(sizeof(UPCGQualityBranchSettings) == 0x0000C0, "Wrong size on UPCGQualityBranchSettings");
static_assert(offsetof(UPCGQualityBranchSettings, bUseLowPin) == 0x0000B8, "Member 'UPCGQualityBranchSettings::bUseLowPin' has a wrong offset!");
static_assert(offsetof(UPCGQualityBranchSettings, bUseMediumPin) == 0x0000B9, "Member 'UPCGQualityBranchSettings::bUseMediumPin' has a wrong offset!");
static_assert(offsetof(UPCGQualityBranchSettings, bUseHighPin) == 0x0000BA, "Member 'UPCGQualityBranchSettings::bUseHighPin' has a wrong offset!");
static_assert(offsetof(UPCGQualityBranchSettings, bUseEpicPin) == 0x0000BB, "Member 'UPCGQualityBranchSettings::bUseEpicPin' has a wrong offset!");
static_assert(offsetof(UPCGQualityBranchSettings, bUseCinematicPin) == 0x0000BC, "Member 'UPCGQualityBranchSettings::bUseCinematicPin' has a wrong offset!");

// Class PCG.PCGQualitySelectSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGQualitySelectSettings final : public UPCGSettings
{
public:
	bool                                          bUseLowPin;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMediumPin;                                     // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHighPin;                                       // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEpicPin;                                       // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCinematicPin;                                  // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGQualitySelectSettings">();
	}
	static class UPCGQualitySelectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGQualitySelectSettings>();
	}
};
static_assert(alignof(UPCGQualitySelectSettings) == 0x000008, "Wrong alignment on UPCGQualitySelectSettings");
static_assert(sizeof(UPCGQualitySelectSettings) == 0x0000C0, "Wrong size on UPCGQualitySelectSettings");
static_assert(offsetof(UPCGQualitySelectSettings, bUseLowPin) == 0x0000B8, "Member 'UPCGQualitySelectSettings::bUseLowPin' has a wrong offset!");
static_assert(offsetof(UPCGQualitySelectSettings, bUseMediumPin) == 0x0000B9, "Member 'UPCGQualitySelectSettings::bUseMediumPin' has a wrong offset!");
static_assert(offsetof(UPCGQualitySelectSettings, bUseHighPin) == 0x0000BA, "Member 'UPCGQualitySelectSettings::bUseHighPin' has a wrong offset!");
static_assert(offsetof(UPCGQualitySelectSettings, bUseEpicPin) == 0x0000BB, "Member 'UPCGQualitySelectSettings::bUseEpicPin' has a wrong offset!");
static_assert(offsetof(UPCGQualitySelectSettings, bUseCinematicPin) == 0x0000BC, "Member 'UPCGQualitySelectSettings::bUseCinematicPin' has a wrong offset!");

// Class PCG.PCGAttributeGetFromPointIndexSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGAttributeGetFromPointIndexSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputAttributeName;                               // 0x00E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeGetFromPointIndexSettings">();
	}
	static class UPCGAttributeGetFromPointIndexSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeGetFromPointIndexSettings>();
	}
};
static_assert(alignof(UPCGAttributeGetFromPointIndexSettings) == 0x000008, "Wrong alignment on UPCGAttributeGetFromPointIndexSettings");
static_assert(sizeof(UPCGAttributeGetFromPointIndexSettings) == 0x0000F0, "Wrong size on UPCGAttributeGetFromPointIndexSettings");
static_assert(offsetof(UPCGAttributeGetFromPointIndexSettings, InputSource) == 0x0000B8, "Member 'UPCGAttributeGetFromPointIndexSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeGetFromPointIndexSettings, Index_0) == 0x0000E0, "Member 'UPCGAttributeGetFromPointIndexSettings::Index_0' has a wrong offset!");
static_assert(offsetof(UPCGAttributeGetFromPointIndexSettings, OutputAttributeName) == 0x0000E4, "Member 'UPCGAttributeGetFromPointIndexSettings::OutputAttributeName' has a wrong offset!");

// Class PCG.PCGRandomChoiceSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGRandomChoiceSettings final : public UPCGSettings
{
public:
	bool                                          bFixedMode;                                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FixedNumber;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputDiscardedEntries;                           // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGRandomChoiceSettings">();
	}
	static class UPCGRandomChoiceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGRandomChoiceSettings>();
	}
};
static_assert(alignof(UPCGRandomChoiceSettings) == 0x000008, "Wrong alignment on UPCGRandomChoiceSettings");
static_assert(sizeof(UPCGRandomChoiceSettings) == 0x0000C8, "Wrong size on UPCGRandomChoiceSettings");
static_assert(offsetof(UPCGRandomChoiceSettings, bFixedMode) == 0x0000B8, "Member 'UPCGRandomChoiceSettings::bFixedMode' has a wrong offset!");
static_assert(offsetof(UPCGRandomChoiceSettings, FixedNumber) == 0x0000BC, "Member 'UPCGRandomChoiceSettings::FixedNumber' has a wrong offset!");
static_assert(offsetof(UPCGRandomChoiceSettings, Ratio) == 0x0000C0, "Member 'UPCGRandomChoiceSettings::Ratio' has a wrong offset!");
static_assert(offsetof(UPCGRandomChoiceSettings, bOutputDiscardedEntries) == 0x0000C4, "Member 'UPCGRandomChoiceSettings::bOutputDiscardedEntries' has a wrong offset!");

// Class PCG.PCGReplaceTagsSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGReplaceTagsSettings final : public UPCGSettings
{
public:
	class FString                                 SelectedTags;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplacedTags;                                      // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGReplaceTagsSettings">();
	}
	static class UPCGReplaceTagsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGReplaceTagsSettings>();
	}
};
static_assert(alignof(UPCGReplaceTagsSettings) == 0x000008, "Wrong alignment on UPCGReplaceTagsSettings");
static_assert(sizeof(UPCGReplaceTagsSettings) == 0x0000E0, "Wrong size on UPCGReplaceTagsSettings");
static_assert(offsetof(UPCGReplaceTagsSettings, SelectedTags) == 0x0000B8, "Member 'UPCGReplaceTagsSettings::SelectedTags' has a wrong offset!");
static_assert(offsetof(UPCGReplaceTagsSettings, ReplacedTags) == 0x0000C8, "Member 'UPCGReplaceTagsSettings::ReplacedTags' has a wrong offset!");
static_assert(offsetof(UPCGReplaceTagsSettings, bTokenizeOnWhiteSpace) == 0x0000D8, "Member 'UPCGReplaceTagsSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGTransformPointsSettings
// 0x00B8 (0x0170 - 0x00B8)
class UPCGTransformPointsSettings final : public UPCGSettings
{
public:
	bool                                          bApplyToAttribute;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttributeName;                                     // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetMin;                                         // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetMax;                                         // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteOffset;                                   // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationMin;                                       // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationMax;                                       // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteRotation;                                 // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ScaleMin;                                          // 0x0138(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleMax;                                          // 0x0150(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteScale;                                    // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniformScale;                                     // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecomputeSeed;                                    // 0x016A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B[0x5];                                      // 0x016B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTransformPointsSettings">();
	}
	static class UPCGTransformPointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTransformPointsSettings>();
	}
};
static_assert(alignof(UPCGTransformPointsSettings) == 0x000008, "Wrong alignment on UPCGTransformPointsSettings");
static_assert(sizeof(UPCGTransformPointsSettings) == 0x000170, "Wrong size on UPCGTransformPointsSettings");
static_assert(offsetof(UPCGTransformPointsSettings, bApplyToAttribute) == 0x0000B8, "Member 'UPCGTransformPointsSettings::bApplyToAttribute' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, AttributeName) == 0x0000BC, "Member 'UPCGTransformPointsSettings::AttributeName' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, OffsetMin) == 0x0000C8, "Member 'UPCGTransformPointsSettings::OffsetMin' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, OffsetMax) == 0x0000E0, "Member 'UPCGTransformPointsSettings::OffsetMax' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, bAbsoluteOffset) == 0x0000F8, "Member 'UPCGTransformPointsSettings::bAbsoluteOffset' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, RotationMin) == 0x000100, "Member 'UPCGTransformPointsSettings::RotationMin' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, RotationMax) == 0x000118, "Member 'UPCGTransformPointsSettings::RotationMax' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, bAbsoluteRotation) == 0x000130, "Member 'UPCGTransformPointsSettings::bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, ScaleMin) == 0x000138, "Member 'UPCGTransformPointsSettings::ScaleMin' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, ScaleMax) == 0x000150, "Member 'UPCGTransformPointsSettings::ScaleMax' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, bAbsoluteScale) == 0x000168, "Member 'UPCGTransformPointsSettings::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, bUniformScale) == 0x000169, "Member 'UPCGTransformPointsSettings::bUniformScale' has a wrong offset!");
static_assert(offsetof(UPCGTransformPointsSettings, bRecomputeSeed) == 0x00016A, "Member 'UPCGTransformPointsSettings::bRecomputeSeed' has a wrong offset!");

// Class PCG.PCGRerouteSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGRerouteSettings : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGRerouteSettings">();
	}
	static class UPCGRerouteSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGRerouteSettings>();
	}
};
static_assert(alignof(UPCGRerouteSettings) == 0x000008, "Wrong alignment on UPCGRerouteSettings");
static_assert(sizeof(UPCGRerouteSettings) == 0x0000B8, "Wrong size on UPCGRerouteSettings");

// Class PCG.PCGNamedRerouteBaseSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGNamedRerouteBaseSettings : public UPCGRerouteSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNamedRerouteBaseSettings">();
	}
	static class UPCGNamedRerouteBaseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNamedRerouteBaseSettings>();
	}
};
static_assert(alignof(UPCGNamedRerouteBaseSettings) == 0x000008, "Wrong alignment on UPCGNamedRerouteBaseSettings");
static_assert(sizeof(UPCGNamedRerouteBaseSettings) == 0x0000B8, "Wrong size on UPCGNamedRerouteBaseSettings");

// Class PCG.PCGBoundsModifierSettings
// 0x0040 (0x00F8 - 0x00B8)
class UPCGBoundsModifierSettings final : public UPCGSettings
{
public:
	EPCGBoundsModifierMode                        Mode;                                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoundsMin;                                         // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoundsMax;                                         // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectSteepness;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Steepness;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBoundsModifierSettings">();
	}
	static class UPCGBoundsModifierSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBoundsModifierSettings>();
	}
};
static_assert(alignof(UPCGBoundsModifierSettings) == 0x000008, "Wrong alignment on UPCGBoundsModifierSettings");
static_assert(sizeof(UPCGBoundsModifierSettings) == 0x0000F8, "Wrong size on UPCGBoundsModifierSettings");
static_assert(offsetof(UPCGBoundsModifierSettings, Mode) == 0x0000B8, "Member 'UPCGBoundsModifierSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGBoundsModifierSettings, BoundsMin) == 0x0000C0, "Member 'UPCGBoundsModifierSettings::BoundsMin' has a wrong offset!");
static_assert(offsetof(UPCGBoundsModifierSettings, BoundsMax) == 0x0000D8, "Member 'UPCGBoundsModifierSettings::BoundsMax' has a wrong offset!");
static_assert(offsetof(UPCGBoundsModifierSettings, bAffectSteepness) == 0x0000F0, "Member 'UPCGBoundsModifierSettings::bAffectSteepness' has a wrong offset!");
static_assert(offsetof(UPCGBoundsModifierSettings, Steepness) == 0x0000F4, "Member 'UPCGBoundsModifierSettings::Steepness' has a wrong offset!");

// Class PCG.PCGNamedRerouteDeclarationSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGNamedRerouteDeclarationSettings final : public UPCGNamedRerouteBaseSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNamedRerouteDeclarationSettings">();
	}
	static class UPCGNamedRerouteDeclarationSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNamedRerouteDeclarationSettings>();
	}
};
static_assert(alignof(UPCGNamedRerouteDeclarationSettings) == 0x000008, "Wrong alignment on UPCGNamedRerouteDeclarationSettings");
static_assert(sizeof(UPCGNamedRerouteDeclarationSettings) == 0x0000B8, "Wrong size on UPCGNamedRerouteDeclarationSettings");

// Class PCG.PCGNamedRerouteUsageSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGNamedRerouteUsageSettings final : public UPCGNamedRerouteBaseSettings
{
public:
	class UPCGNamedRerouteDeclarationSettings*    Declaration;                                       // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGNamedRerouteUsageSettings">();
	}
	static class UPCGNamedRerouteUsageSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGNamedRerouteUsageSettings>();
	}
};
static_assert(alignof(UPCGNamedRerouteUsageSettings) == 0x000008, "Wrong alignment on UPCGNamedRerouteUsageSettings");
static_assert(sizeof(UPCGNamedRerouteUsageSettings) == 0x0000C0, "Wrong size on UPCGNamedRerouteUsageSettings");
static_assert(offsetof(UPCGNamedRerouteUsageSettings, Declaration) == 0x0000B8, "Member 'UPCGNamedRerouteUsageSettings::Declaration' has a wrong offset!");

// Class PCG.PCGProjectionSettings
// 0x0028 (0x00E0 - 0x00B8)
class UPCGProjectionSettings final : public UPCGSettings
{
public:
	struct FPCGProjectionParams                   ProjectionParams;                                  // 0x00B8(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bForceCollapseToPoint;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepZeroDensityPoints;                            // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGProjectionSettings">();
	}
	static class UPCGProjectionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGProjectionSettings>();
	}
};
static_assert(alignof(UPCGProjectionSettings) == 0x000008, "Wrong alignment on UPCGProjectionSettings");
static_assert(sizeof(UPCGProjectionSettings) == 0x0000E0, "Wrong size on UPCGProjectionSettings");
static_assert(offsetof(UPCGProjectionSettings, ProjectionParams) == 0x0000B8, "Member 'UPCGProjectionSettings::ProjectionParams' has a wrong offset!");
static_assert(offsetof(UPCGProjectionSettings, bForceCollapseToPoint) == 0x0000D8, "Member 'UPCGProjectionSettings::bForceCollapseToPoint' has a wrong offset!");
static_assert(offsetof(UPCGProjectionSettings, bKeepZeroDensityPoints) == 0x0000D9, "Member 'UPCGProjectionSettings::bKeepZeroDensityPoints' has a wrong offset!");

// Class PCG.PCGResetPointCenterSettings
// 0x0018 (0x00D0 - 0x00B8)
class UPCGResetPointCenterSettings final : public UPCGSettings
{
public:
	struct FVector                                PointCenterLocation;                               // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGResetPointCenterSettings">();
	}
	static class UPCGResetPointCenterSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGResetPointCenterSettings>();
	}
};
static_assert(alignof(UPCGResetPointCenterSettings) == 0x000008, "Wrong alignment on UPCGResetPointCenterSettings");
static_assert(sizeof(UPCGResetPointCenterSettings) == 0x0000D0, "Wrong size on UPCGResetPointCenterSettings");
static_assert(offsetof(UPCGResetPointCenterSettings, PointCenterLocation) == 0x0000B8, "Member 'UPCGResetPointCenterSettings::PointCenterLocation' has a wrong offset!");

// Class PCG.PCGSampleTextureSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGSampleTextureSettings final : public UPCGSettings
{
public:
	EPCGTextureMappingMethod                      TextureMappingMethod;                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     UVCoordinatesAttribute;                            // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTextureAddressMode                        TilingMode;                                        // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGDensityMergeOperation                     DensityMergeFunction;                              // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampOutputDensity;                               // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB[0x5];                                       // 0x00EB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSampleTextureSettings">();
	}
	static class UPCGSampleTextureSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSampleTextureSettings>();
	}
};
static_assert(alignof(UPCGSampleTextureSettings) == 0x000008, "Wrong alignment on UPCGSampleTextureSettings");
static_assert(sizeof(UPCGSampleTextureSettings) == 0x0000F0, "Wrong size on UPCGSampleTextureSettings");
static_assert(offsetof(UPCGSampleTextureSettings, TextureMappingMethod) == 0x0000B8, "Member 'UPCGSampleTextureSettings::TextureMappingMethod' has a wrong offset!");
static_assert(offsetof(UPCGSampleTextureSettings, UVCoordinatesAttribute) == 0x0000C0, "Member 'UPCGSampleTextureSettings::UVCoordinatesAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSampleTextureSettings, TilingMode) == 0x0000E8, "Member 'UPCGSampleTextureSettings::TilingMode' has a wrong offset!");
static_assert(offsetof(UPCGSampleTextureSettings, DensityMergeFunction) == 0x0000E9, "Member 'UPCGSampleTextureSettings::DensityMergeFunction' has a wrong offset!");
static_assert(offsetof(UPCGSampleTextureSettings, bClampOutputDensity) == 0x0000EA, "Member 'UPCGSampleTextureSettings::bClampOutputDensity' has a wrong offset!");

// Class PCG.PCGInstanceDataPackerBase
// 0x0000 (0x0028 - 0x0028)
class UPCGInstanceDataPackerBase : public UObject
{
public:
	bool AddTypeToPacking(int32 TypeId, struct FPCGPackedCustomData* OutPackedCustomData) const;
	void PackCustomDataFromAttributes(const struct FPCGMeshInstanceList& InstanceList, const class UPCGMetadata* MetaData, const TArray<class FName>& AttributeNames, struct FPCGPackedCustomData* OutPackedCustomData) const;
	void PackInstances(struct FPCGContext* Context, const class UPCGSpatialData* InSpatialData, const struct FPCGMeshInstanceList& InstanceList, struct FPCGPackedCustomData* OutPackedCustomData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInstanceDataPackerBase">();
	}
	static class UPCGInstanceDataPackerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInstanceDataPackerBase>();
	}
};
static_assert(alignof(UPCGInstanceDataPackerBase) == 0x000008, "Wrong alignment on UPCGInstanceDataPackerBase");
static_assert(sizeof(UPCGInstanceDataPackerBase) == 0x000028, "Wrong size on UPCGInstanceDataPackerBase");

// Class PCG.PCGInstanceDataPackerByRegex
// 0x0010 (0x0038 - 0x0028)
class UPCGInstanceDataPackerByRegex final : public UPCGInstanceDataPackerBase
{
public:
	TArray<class FString>                         RegexPatterns;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInstanceDataPackerByRegex">();
	}
	static class UPCGInstanceDataPackerByRegex* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInstanceDataPackerByRegex>();
	}
};
static_assert(alignof(UPCGInstanceDataPackerByRegex) == 0x000008, "Wrong alignment on UPCGInstanceDataPackerByRegex");
static_assert(sizeof(UPCGInstanceDataPackerByRegex) == 0x000038, "Wrong size on UPCGInstanceDataPackerByRegex");
static_assert(offsetof(UPCGInstanceDataPackerByRegex, RegexPatterns) == 0x000028, "Member 'UPCGInstanceDataPackerByRegex::RegexPatterns' has a wrong offset!");

// Class PCG.PCGSanityCheckPointDataSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGSanityCheckPointDataSettings final : public UPCGSettings
{
public:
	int32                                         MinPointCount;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPointCount;                                     // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSanityCheckPointDataSettings">();
	}
	static class UPCGSanityCheckPointDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSanityCheckPointDataSettings>();
	}
};
static_assert(alignof(UPCGSanityCheckPointDataSettings) == 0x000008, "Wrong alignment on UPCGSanityCheckPointDataSettings");
static_assert(sizeof(UPCGSanityCheckPointDataSettings) == 0x0000C0, "Wrong size on UPCGSanityCheckPointDataSettings");
static_assert(offsetof(UPCGSanityCheckPointDataSettings, MinPointCount) == 0x0000B8, "Member 'UPCGSanityCheckPointDataSettings::MinPointCount' has a wrong offset!");
static_assert(offsetof(UPCGSanityCheckPointDataSettings, MaxPointCount) == 0x0000BC, "Member 'UPCGSanityCheckPointDataSettings::MaxPointCount' has a wrong offset!");

// Class PCG.PCGDataCollectionExporter
// 0x0030 (0x0058 - 0x0028)
class UPCGDataCollectionExporter final : public UPCGAssetExporter
{
public:
	struct FPCGDataCollection                     Data;                                              // 0x0028(0x0030)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataCollectionExporter">();
	}
	static class UPCGDataCollectionExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataCollectionExporter>();
	}
};
static_assert(alignof(UPCGDataCollectionExporter) == 0x000008, "Wrong alignment on UPCGDataCollectionExporter");
static_assert(sizeof(UPCGDataCollectionExporter) == 0x000058, "Wrong size on UPCGDataCollectionExporter");
static_assert(offsetof(UPCGDataCollectionExporter, Data) == 0x000028, "Member 'UPCGDataCollectionExporter::Data' has a wrong offset!");

// Class PCG.PCGWorldQuerySettings
// 0x0078 (0x0130 - 0x00B8)
class UPCGWorldQuerySettings final : public UPCGSettings
{
public:
	struct FPCGWorldVolumetricQueryParams         QueryParams;                                       // 0x00B8(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldQuerySettings">();
	}
	static class UPCGWorldQuerySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWorldQuerySettings>();
	}
};
static_assert(alignof(UPCGWorldQuerySettings) == 0x000008, "Wrong alignment on UPCGWorldQuerySettings");
static_assert(sizeof(UPCGWorldQuerySettings) == 0x000130, "Wrong size on UPCGWorldQuerySettings");
static_assert(offsetof(UPCGWorldQuerySettings, QueryParams) == 0x0000B8, "Member 'UPCGWorldQuerySettings::QueryParams' has a wrong offset!");

// Class PCG.PCGSaveDataAssetSettings
// 0x0068 (0x0120 - 0x00B8)
class UPCGSaveDataAssetSettings final : public UPCGSettings
{
public:
	TArray<struct FPCGPinProperties>              Pins;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGDataCollectionExporter> CustomDataCollectionExporterClass;                 // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAssetExporterParameters            Params_0;                                          // 0x00D0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AssetDescription;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AssetColor;                                        // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSaveDataAssetSettings">();
	}
	static class UPCGSaveDataAssetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSaveDataAssetSettings>();
	}
};
static_assert(alignof(UPCGSaveDataAssetSettings) == 0x000008, "Wrong alignment on UPCGSaveDataAssetSettings");
static_assert(sizeof(UPCGSaveDataAssetSettings) == 0x000120, "Wrong size on UPCGSaveDataAssetSettings");
static_assert(offsetof(UPCGSaveDataAssetSettings, Pins) == 0x0000B8, "Member 'UPCGSaveDataAssetSettings::Pins' has a wrong offset!");
static_assert(offsetof(UPCGSaveDataAssetSettings, CustomDataCollectionExporterClass) == 0x0000C8, "Member 'UPCGSaveDataAssetSettings::CustomDataCollectionExporterClass' has a wrong offset!");
static_assert(offsetof(UPCGSaveDataAssetSettings, Params_0) == 0x0000D0, "Member 'UPCGSaveDataAssetSettings::Params_0' has a wrong offset!");
static_assert(offsetof(UPCGSaveDataAssetSettings, AssetDescription) == 0x000100, "Member 'UPCGSaveDataAssetSettings::AssetDescription' has a wrong offset!");
static_assert(offsetof(UPCGSaveDataAssetSettings, AssetColor) == 0x000110, "Member 'UPCGSaveDataAssetSettings::AssetColor' has a wrong offset!");

// Class PCG.PCGSchedulingPolicyBase
// 0x0000 (0x0028 - 0x0028)
class UPCGSchedulingPolicyBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSchedulingPolicyBase">();
	}
	static class UPCGSchedulingPolicyBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSchedulingPolicyBase>();
	}
};
static_assert(alignof(UPCGSchedulingPolicyBase) == 0x000008, "Wrong alignment on UPCGSchedulingPolicyBase");
static_assert(sizeof(UPCGSchedulingPolicyBase) == 0x000028, "Wrong size on UPCGSchedulingPolicyBase");

// Class PCG.PCGMatchAndSetBase
// 0x0008 (0x0030 - 0x0028)
class UPCGMatchAndSetBase : public UObject
{
public:
	EPCGMetadataTypes                             Type;                                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGMetadataTypesConstantStructStringMode     StringMode;                                        // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void MatchAndSet(struct FPCGContext& Context, const class UPCGPointMatchAndSetSettings* InSettings, const class UPCGPointData* InPointData, class UPCGPointData* OutPointData) const;
	bool ValidatePreconditions(const class UPCGPointData* InPointData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMatchAndSetBase">();
	}
	static class UPCGMatchAndSetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMatchAndSetBase>();
	}
};
static_assert(alignof(UPCGMatchAndSetBase) == 0x000008, "Wrong alignment on UPCGMatchAndSetBase");
static_assert(sizeof(UPCGMatchAndSetBase) == 0x000030, "Wrong size on UPCGMatchAndSetBase");
static_assert(offsetof(UPCGMatchAndSetBase, Type) == 0x000028, "Member 'UPCGMatchAndSetBase::Type' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetBase, StringMode) == 0x00002C, "Member 'UPCGMatchAndSetBase::StringMode' has a wrong offset!");

// Class PCG.PCGMatchAndSetWeightedByCategory
// 0x0028 (0x0058 - 0x0030)
class UPCGMatchAndSetWeightedByCategory final : public UPCGMatchAndSetBase
{
public:
	class FName                                   CategoryAttribute;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             CategoryType;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGMetadataTypesConstantStructStringMode     CategoryStringMode;                                // 0x003C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGMatchAndSetWeightedByCategoryEntryList> Categories;                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldMutateSeed;                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMatchAndSetWeightedByCategory">();
	}
	static class UPCGMatchAndSetWeightedByCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMatchAndSetWeightedByCategory>();
	}
};
static_assert(alignof(UPCGMatchAndSetWeightedByCategory) == 0x000008, "Wrong alignment on UPCGMatchAndSetWeightedByCategory");
static_assert(sizeof(UPCGMatchAndSetWeightedByCategory) == 0x000058, "Wrong size on UPCGMatchAndSetWeightedByCategory");
static_assert(offsetof(UPCGMatchAndSetWeightedByCategory, CategoryAttribute) == 0x000030, "Member 'UPCGMatchAndSetWeightedByCategory::CategoryAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetWeightedByCategory, CategoryType) == 0x000038, "Member 'UPCGMatchAndSetWeightedByCategory::CategoryType' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetWeightedByCategory, CategoryStringMode) == 0x00003C, "Member 'UPCGMatchAndSetWeightedByCategory::CategoryStringMode' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetWeightedByCategory, Categories) == 0x000040, "Member 'UPCGMatchAndSetWeightedByCategory::Categories' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetWeightedByCategory, bShouldMutateSeed) == 0x000050, "Member 'UPCGMatchAndSetWeightedByCategory::bShouldMutateSeed' has a wrong offset!");

// Class PCG.PCGSelectGrammarSettings
// 0x00D0 (0x0188 - 0x00B8)
class UPCGSelectGrammarSettings final : public UPCGSettings
{
public:
	bool                                          bKeyAsAttribute;                                   // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Key;                                               // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     KeyAttribute;                                      // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     ComparedValueAttribute;                            // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCriteriaAsInput;                                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGSelectGrammarCriterion>     Criteria;                                          // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCopyKeyForUnselectedGrammar;                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemapCriteriaAttributeNames;                      // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGSelectGrammarCriteriaAttributeNames CriteriaAttributeNames;                           // 0x0134(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyOutputSelector    OutputGrammarAttribute;                            // 0x0160(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSelectGrammarSettings">();
	}
	static class UPCGSelectGrammarSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSelectGrammarSettings>();
	}
};
static_assert(alignof(UPCGSelectGrammarSettings) == 0x000008, "Wrong alignment on UPCGSelectGrammarSettings");
static_assert(sizeof(UPCGSelectGrammarSettings) == 0x000188, "Wrong size on UPCGSelectGrammarSettings");
static_assert(offsetof(UPCGSelectGrammarSettings, bKeyAsAttribute) == 0x0000B8, "Member 'UPCGSelectGrammarSettings::bKeyAsAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, Key) == 0x0000BC, "Member 'UPCGSelectGrammarSettings::Key' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, KeyAttribute) == 0x0000C8, "Member 'UPCGSelectGrammarSettings::KeyAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, ComparedValueAttribute) == 0x0000F0, "Member 'UPCGSelectGrammarSettings::ComparedValueAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, bCriteriaAsInput) == 0x000118, "Member 'UPCGSelectGrammarSettings::bCriteriaAsInput' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, Criteria) == 0x000120, "Member 'UPCGSelectGrammarSettings::Criteria' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, bCopyKeyForUnselectedGrammar) == 0x000130, "Member 'UPCGSelectGrammarSettings::bCopyKeyForUnselectedGrammar' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, bRemapCriteriaAttributeNames) == 0x000131, "Member 'UPCGSelectGrammarSettings::bRemapCriteriaAttributeNames' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, CriteriaAttributeNames) == 0x000134, "Member 'UPCGSelectGrammarSettings::CriteriaAttributeNames' has a wrong offset!");
static_assert(offsetof(UPCGSelectGrammarSettings, OutputGrammarAttribute) == 0x000160, "Member 'UPCGSelectGrammarSettings::OutputGrammarAttribute' has a wrong offset!");

// Class PCG.PCGSortAttributesSettings
// 0x0030 (0x00E8 - 0x00B8)
class UPCGSortAttributesSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSortMethod                                SortMethod;                                        // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSortAttributesSettings">();
	}
	static class UPCGSortAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSortAttributesSettings>();
	}
};
static_assert(alignof(UPCGSortAttributesSettings) == 0x000008, "Wrong alignment on UPCGSortAttributesSettings");
static_assert(sizeof(UPCGSortAttributesSettings) == 0x0000E8, "Wrong size on UPCGSortAttributesSettings");
static_assert(offsetof(UPCGSortAttributesSettings, InputSource) == 0x0000B8, "Member 'UPCGSortAttributesSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGSortAttributesSettings, SortMethod) == 0x0000E0, "Member 'UPCGSortAttributesSettings::SortMethod' has a wrong offset!");

// Class PCG.PCGSortTagsSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGSortTagsSettings final : public UPCGSettings
{
public:
	class FName                                   Tag;                                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSortMethod                                SortMethod;                                        // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSortTagsSettings">();
	}
	static class UPCGSortTagsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSortTagsSettings>();
	}
};
static_assert(alignof(UPCGSortTagsSettings) == 0x000008, "Wrong alignment on UPCGSortTagsSettings");
static_assert(sizeof(UPCGSortTagsSettings) == 0x0000C8, "Wrong size on UPCGSortTagsSettings");
static_assert(offsetof(UPCGSortTagsSettings, Tag) == 0x0000B8, "Member 'UPCGSortTagsSettings::Tag' has a wrong offset!");
static_assert(offsetof(UPCGSortTagsSettings, SortMethod) == 0x0000C0, "Member 'UPCGSortTagsSettings::SortMethod' has a wrong offset!");

// Class PCG.PCGSpawnSplineSettings
// 0x0090 (0x0148 - 0x00B8)
class UPCGSpawnSplineSettings final : public UPCGSettings
{
public:
	TSubclassOf<class USplineComponent>           SplineComponent;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnComponentFromAttribute;                      // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     SpawnComponentFromAttributeName;                   // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x00F0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPCGObjectPropertyOverrideDescription> PropertyOverrideDescriptions;               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOutputSplineComponentReference;                   // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ComponentReferenceAttributeName;                   // 0x013C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpawnSplineSettings">();
	}
	static class UPCGSpawnSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpawnSplineSettings>();
	}
};
static_assert(alignof(UPCGSpawnSplineSettings) == 0x000008, "Wrong alignment on UPCGSpawnSplineSettings");
static_assert(sizeof(UPCGSpawnSplineSettings) == 0x000148, "Wrong size on UPCGSpawnSplineSettings");
static_assert(offsetof(UPCGSpawnSplineSettings, SplineComponent) == 0x0000B8, "Member 'UPCGSpawnSplineSettings::SplineComponent' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, bSpawnComponentFromAttribute) == 0x0000C0, "Member 'UPCGSpawnSplineSettings::bSpawnComponentFromAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, SpawnComponentFromAttributeName) == 0x0000C8, "Member 'UPCGSpawnSplineSettings::SpawnComponentFromAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, TargetActor) == 0x0000F0, "Member 'UPCGSpawnSplineSettings::TargetActor' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, PostProcessFunctionNames) == 0x000118, "Member 'UPCGSpawnSplineSettings::PostProcessFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, PropertyOverrideDescriptions) == 0x000128, "Member 'UPCGSpawnSplineSettings::PropertyOverrideDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, bOutputSplineComponentReference) == 0x000138, "Member 'UPCGSpawnSplineSettings::bOutputSplineComponentReference' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineSettings, ComponentReferenceAttributeName) == 0x00013C, "Member 'UPCGSpawnSplineSettings::ComponentReferenceAttributeName' has a wrong offset!");

// Class PCG.PCGMeshSelectorBase
// 0x0000 (0x0028 - 0x0028)
class UPCGMeshSelectorBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMeshSelectorBase">();
	}
	static class UPCGMeshSelectorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMeshSelectorBase>();
	}
};
static_assert(alignof(UPCGMeshSelectorBase) == 0x000008, "Wrong alignment on UPCGMeshSelectorBase");
static_assert(sizeof(UPCGMeshSelectorBase) == 0x000028, "Wrong size on UPCGMeshSelectorBase");

// Class PCG.PCGMeshSelectorWeightedByCategory
// 0x0030 (0x0058 - 0x0028)
class UPCGMeshSelectorWeightedByCategory final : public UPCGMeshSelectorBase
{
public:
	class FName                                   CategoryAttribute;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGWeightedByCategoryEntryList> Entries;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseAttributeMaterialOverrides;                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MaterialOverrideAttributes;                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMeshSelectorWeightedByCategory">();
	}
	static class UPCGMeshSelectorWeightedByCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMeshSelectorWeightedByCategory>();
	}
};
static_assert(alignof(UPCGMeshSelectorWeightedByCategory) == 0x000008, "Wrong alignment on UPCGMeshSelectorWeightedByCategory");
static_assert(sizeof(UPCGMeshSelectorWeightedByCategory) == 0x000058, "Wrong size on UPCGMeshSelectorWeightedByCategory");
static_assert(offsetof(UPCGMeshSelectorWeightedByCategory, CategoryAttribute) == 0x000028, "Member 'UPCGMeshSelectorWeightedByCategory::CategoryAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorWeightedByCategory, Entries) == 0x000030, "Member 'UPCGMeshSelectorWeightedByCategory::Entries' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorWeightedByCategory, bUseAttributeMaterialOverrides) == 0x000040, "Member 'UPCGMeshSelectorWeightedByCategory::bUseAttributeMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorWeightedByCategory, MaterialOverrideAttributes) == 0x000048, "Member 'UPCGMeshSelectorWeightedByCategory::MaterialOverrideAttributes' has a wrong offset!");

// Class PCG.PCGSpawnSplineMeshSettings
// 0x0348 (0x0400 - 0x00B8)
class UPCGSpawnSplineMeshSettings final : public UPCGSettings
{
public:
	struct FSoftSplineMeshComponentDescriptor     SplineMeshDescriptor;                              // 0x00B8(0x0230)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGSplineMeshParams                   SplineMeshParams;                                  // 0x02E8(0x00C8)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x03B0(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGObjectPropertyOverrideDescription> SplineMeshOverrideDescriptions;             // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpawnSplineMeshSettings">();
	}
	static class UPCGSpawnSplineMeshSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpawnSplineMeshSettings>();
	}
};
static_assert(alignof(UPCGSpawnSplineMeshSettings) == 0x000008, "Wrong alignment on UPCGSpawnSplineMeshSettings");
static_assert(sizeof(UPCGSpawnSplineMeshSettings) == 0x000400, "Wrong size on UPCGSpawnSplineMeshSettings");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, SplineMeshDescriptor) == 0x0000B8, "Member 'UPCGSpawnSplineMeshSettings::SplineMeshDescriptor' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, SplineMeshParams) == 0x0002E8, "Member 'UPCGSpawnSplineMeshSettings::SplineMeshParams' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, TargetActor) == 0x0003B0, "Member 'UPCGSpawnSplineMeshSettings::TargetActor' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, PostProcessFunctionNames) == 0x0003D8, "Member 'UPCGSpawnSplineMeshSettings::PostProcessFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, bSynchronousLoad) == 0x0003E8, "Member 'UPCGSpawnSplineMeshSettings::bSynchronousLoad' has a wrong offset!");
static_assert(offsetof(UPCGSpawnSplineMeshSettings, SplineMeshOverrideDescriptions) == 0x0003F0, "Member 'UPCGSpawnSplineMeshSettings::SplineMeshOverrideDescriptions' has a wrong offset!");

// Class PCG.PCGReverseSplineSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGReverseSplineSettings final : public UPCGSettings
{
public:
	EPCGReverseSplineOperation                    Operation;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGReverseSplineSettings">();
	}
	static class UPCGReverseSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGReverseSplineSettings>();
	}
};
static_assert(alignof(UPCGReverseSplineSettings) == 0x000008, "Wrong alignment on UPCGReverseSplineSettings");
static_assert(sizeof(UPCGReverseSplineSettings) == 0x0000C0, "Wrong size on UPCGReverseSplineSettings");
static_assert(offsetof(UPCGReverseSplineSettings, Operation) == 0x0000B8, "Member 'UPCGReverseSplineSettings::Operation' has a wrong offset!");

// Class PCG.PCGSplineToSegmentSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGSplineToSegmentSettings final : public UPCGSettings
{
public:
	bool                                          bExtractTangents;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractAngles;                                    // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractConnectivityInfo;                          // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtractClockwiseInfo;                             // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplineToSegmentSettings">();
	}
	static class UPCGSplineToSegmentSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplineToSegmentSettings>();
	}
};
static_assert(alignof(UPCGSplineToSegmentSettings) == 0x000008, "Wrong alignment on UPCGSplineToSegmentSettings");
static_assert(sizeof(UPCGSplineToSegmentSettings) == 0x0000C0, "Wrong size on UPCGSplineToSegmentSettings");
static_assert(offsetof(UPCGSplineToSegmentSettings, bExtractTangents) == 0x0000B8, "Member 'UPCGSplineToSegmentSettings::bExtractTangents' has a wrong offset!");
static_assert(offsetof(UPCGSplineToSegmentSettings, bExtractAngles) == 0x0000B9, "Member 'UPCGSplineToSegmentSettings::bExtractAngles' has a wrong offset!");
static_assert(offsetof(UPCGSplineToSegmentSettings, bExtractConnectivityInfo) == 0x0000BA, "Member 'UPCGSplineToSegmentSettings::bExtractConnectivityInfo' has a wrong offset!");
static_assert(offsetof(UPCGSplineToSegmentSettings, bExtractClockwiseInfo) == 0x0000BB, "Member 'UPCGSplineToSegmentSettings::bExtractClockwiseInfo' has a wrong offset!");

// Class PCG.PCGSplitPointsSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGSplitPointsSettings final : public UPCGSettings
{
public:
	float                                         SplitPosition;                                     // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSplitAxis                                 SplitAxis;                                         // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplitPointsSettings">();
	}
	static class UPCGSplitPointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplitPointsSettings>();
	}
};
static_assert(alignof(UPCGSplitPointsSettings) == 0x000008, "Wrong alignment on UPCGSplitPointsSettings");
static_assert(sizeof(UPCGSplitPointsSettings) == 0x0000C0, "Wrong size on UPCGSplitPointsSettings");
static_assert(offsetof(UPCGSplitPointsSettings, SplitPosition) == 0x0000B8, "Member 'UPCGSplitPointsSettings::SplitPosition' has a wrong offset!");
static_assert(offsetof(UPCGSplitPointsSettings, SplitAxis) == 0x0000BC, "Member 'UPCGSplitPointsSettings::SplitAxis' has a wrong offset!");

// Class PCG.PCGDataFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPCGDataFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddToCollection(struct FPCGDataCollection& InCollection, const class UPCGData* InData, class FName InPinLabel, const TArray<class FString>& InTags);
	static TArray<struct FPCGTaggedData> GetAllSettings(const struct FPCGDataCollection& InCollection);
	static TArray<struct FPCGTaggedData> GetInputs(const struct FPCGDataCollection& InCollection);
	static TArray<struct FPCGTaggedData> GetInputsByPinLabel(const struct FPCGDataCollection& InCollection, const class FName InPinLabel);
	static TArray<struct FPCGTaggedData> GetInputsByTag(const struct FPCGDataCollection& InCollection, const class FString& InTag);
	static TArray<struct FPCGTaggedData> GetParams(const struct FPCGDataCollection& InCollection);
	static TArray<struct FPCGTaggedData> GetParamsByPinLabel(const struct FPCGDataCollection& InCollection, const class FName InPinLabel);
	static TArray<struct FPCGTaggedData> GetParamsByTag(const struct FPCGDataCollection& InCollection, const class FString& InTag);
	static TArray<class UPCGData*> GetTypedInputs(const struct FPCGDataCollection& InCollection, TArray<struct FPCGTaggedData>* OutTaggedData, TSubclassOf<class UPCGData> InDataTypeClass);
	static TArray<class UPCGData*> GetTypedInputsByPin(const struct FPCGDataCollection& InCollection, const struct FPCGPinProperties& InPin, TArray<struct FPCGTaggedData>* OutTaggedData, TSubclassOf<class UPCGData> InDataTypeClass);
	static TArray<class UPCGData*> GetTypedInputsByPinLabel(const struct FPCGDataCollection& InCollection, class FName InPinLabel, TArray<struct FPCGTaggedData>* OutTaggedData, TSubclassOf<class UPCGData> InDataTypeClass);
	static TArray<class UPCGData*> GetTypedInputsByTag(const struct FPCGDataCollection& InCollection, const class FString& InTag, TArray<struct FPCGTaggedData>* OutTaggedData, TSubclassOf<class UPCGData> InDataTypeClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataFunctionLibrary">();
	}
	static class UPCGDataFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataFunctionLibrary>();
	}
};
static_assert(alignof(UPCGDataFunctionLibrary) == 0x000008, "Wrong alignment on UPCGDataFunctionLibrary");
static_assert(sizeof(UPCGDataFunctionLibrary) == 0x000028, "Wrong size on UPCGDataFunctionLibrary");

// Class PCG.PCGStaticMeshSpawnerDataInterface
// 0x0008 (0x0050 - 0x0048)
class UPCGStaticMeshSpawnerDataInterface final : public UPCGComputeDataInterface
{
public:
	class UPCGSettings*                           Settings;                                          // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGStaticMeshSpawnerDataInterface">();
	}
	static class UPCGStaticMeshSpawnerDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGStaticMeshSpawnerDataInterface>();
	}
};
static_assert(alignof(UPCGStaticMeshSpawnerDataInterface) == 0x000008, "Wrong alignment on UPCGStaticMeshSpawnerDataInterface");
static_assert(sizeof(UPCGStaticMeshSpawnerDataInterface) == 0x000050, "Wrong size on UPCGStaticMeshSpawnerDataInterface");
static_assert(offsetof(UPCGStaticMeshSpawnerDataInterface, Settings) == 0x000048, "Member 'UPCGStaticMeshSpawnerDataInterface::Settings' has a wrong offset!");

// Class PCG.PCGStaticMeshSpawnerDataProvider
// 0x0058 (0x0080 - 0x0028)
class UPCGStaticMeshSpawnerDataProvider final : public UComputeDataProvider
{
public:
	class UPCGStaticMeshSpawnerSettings*          Settings;                                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUintVector4>                   AttributeIdOffsetStrides;                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 PrimitiveStringKeys;                               // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                           PrimitiveMeshBounds;                               // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SelectionCDF;                                      // 0x0060(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectorAttributeId;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumInputPoints;                                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedMeshAttributeId;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGStaticMeshSpawnerDataProvider">();
	}
	static class UPCGStaticMeshSpawnerDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGStaticMeshSpawnerDataProvider>();
	}
};
static_assert(alignof(UPCGStaticMeshSpawnerDataProvider) == 0x000008, "Wrong alignment on UPCGStaticMeshSpawnerDataProvider");
static_assert(sizeof(UPCGStaticMeshSpawnerDataProvider) == 0x000080, "Wrong size on UPCGStaticMeshSpawnerDataProvider");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, Settings) == 0x000028, "Member 'UPCGStaticMeshSpawnerDataProvider::Settings' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, AttributeIdOffsetStrides) == 0x000030, "Member 'UPCGStaticMeshSpawnerDataProvider::AttributeIdOffsetStrides' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, PrimitiveStringKeys) == 0x000040, "Member 'UPCGStaticMeshSpawnerDataProvider::PrimitiveStringKeys' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, PrimitiveMeshBounds) == 0x000050, "Member 'UPCGStaticMeshSpawnerDataProvider::PrimitiveMeshBounds' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, SelectionCDF) == 0x000060, "Member 'UPCGStaticMeshSpawnerDataProvider::SelectionCDF' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, SelectorAttributeId) == 0x000070, "Member 'UPCGStaticMeshSpawnerDataProvider::SelectorAttributeId' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, NumInputPoints) == 0x000074, "Member 'UPCGStaticMeshSpawnerDataProvider::NumInputPoints' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerDataProvider, SelectedMeshAttributeId) == 0x000078, "Member 'UPCGStaticMeshSpawnerDataProvider::SelectedMeshAttributeId' has a wrong offset!");

// Class PCG.PCGDataFromActorSettings
// 0x00A8 (0x0160 - 0x00B8)
class UPCGDataFromActorSettings : public UPCGSettings
{
public:
	struct FPCGActorSelectorSettings              ActorSelector;                                     // 0x00B8(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPCGComponentSelectorSettings          ComponentSelector;                                 // 0x0100(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EPCGGetDataFromActorMode                      Mode;                                              // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePCGGeneratedComponents;                     // 0x0131(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlsoOutputSinglePointData;                        // 0x0132(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComponentsMustOverlapSelf;                        // 0x0133(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGetDataOnAllGrids;                                // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AllowedGrids;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMergeSinglePointData;                             // 0x013C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ExpectedPins;                                      // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceSanitizedAttributeNameWarnings;            // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayModeSettings;                              // 0x0159(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataFromActorSettings">();
	}
	static class UPCGDataFromActorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataFromActorSettings>();
	}
};
static_assert(alignof(UPCGDataFromActorSettings) == 0x000008, "Wrong alignment on UPCGDataFromActorSettings");
static_assert(sizeof(UPCGDataFromActorSettings) == 0x000160, "Wrong size on UPCGDataFromActorSettings");
static_assert(offsetof(UPCGDataFromActorSettings, ActorSelector) == 0x0000B8, "Member 'UPCGDataFromActorSettings::ActorSelector' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, ComponentSelector) == 0x000100, "Member 'UPCGDataFromActorSettings::ComponentSelector' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, Mode) == 0x000130, "Member 'UPCGDataFromActorSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bIgnorePCGGeneratedComponents) == 0x000131, "Member 'UPCGDataFromActorSettings::bIgnorePCGGeneratedComponents' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bAlsoOutputSinglePointData) == 0x000132, "Member 'UPCGDataFromActorSettings::bAlsoOutputSinglePointData' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bComponentsMustOverlapSelf) == 0x000133, "Member 'UPCGDataFromActorSettings::bComponentsMustOverlapSelf' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bGetDataOnAllGrids) == 0x000134, "Member 'UPCGDataFromActorSettings::bGetDataOnAllGrids' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, AllowedGrids) == 0x000138, "Member 'UPCGDataFromActorSettings::AllowedGrids' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bMergeSinglePointData) == 0x00013C, "Member 'UPCGDataFromActorSettings::bMergeSinglePointData' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, ExpectedPins) == 0x000140, "Member 'UPCGDataFromActorSettings::ExpectedPins' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, PropertyName) == 0x000150, "Member 'UPCGDataFromActorSettings::PropertyName' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bSilenceSanitizedAttributeNameWarnings) == 0x000158, "Member 'UPCGDataFromActorSettings::bSilenceSanitizedAttributeNameWarnings' has a wrong offset!");
static_assert(offsetof(UPCGDataFromActorSettings, bDisplayModeSettings) == 0x000159, "Member 'UPCGDataFromActorSettings::bDisplayModeSettings' has a wrong offset!");

// Class PCG.PCGGetPrimitiveSettings
// 0x0000 (0x0160 - 0x0160)
class UPCGGetPrimitiveSettings final : public UPCGDataFromActorSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetPrimitiveSettings">();
	}
	static class UPCGGetPrimitiveSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetPrimitiveSettings>();
	}
};
static_assert(alignof(UPCGGetPrimitiveSettings) == 0x000008, "Wrong alignment on UPCGGetPrimitiveSettings");
static_assert(sizeof(UPCGGetPrimitiveSettings) == 0x000160, "Wrong size on UPCGGetPrimitiveSettings");

// Class PCG.PCGSubdivideSegmentSettings
// 0x0060 (0x01F8 - 0x0198)
class UPCGSubdivideSegmentSettings final : public UPCGSubdivisionBaseSettings
{
public:
	EPCGSplitAxis                                 SubdivisionAxis;                                   // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipAxisAsAttribute;                              // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFlipAxis;                                   // 0x019D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     FlipAxisAttribute;                                 // 0x01A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptIncompleteSubdivision;                      // 0x01C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputModuleIndexAttribute;                       // 0x01C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModuleIndexAttributeName;                          // 0x01CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputExtremityAttributes;                        // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IsFirstAttributeName;                              // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsFinalAttributeName;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputExtremityNeighborIndexAttribute;            // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExtremityNeighborIndexAttributeName;               // 0x01EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubdivideSegmentSettings">();
	}
	static class UPCGSubdivideSegmentSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubdivideSegmentSettings>();
	}
};
static_assert(alignof(UPCGSubdivideSegmentSettings) == 0x000008, "Wrong alignment on UPCGSubdivideSegmentSettings");
static_assert(sizeof(UPCGSubdivideSegmentSettings) == 0x0001F8, "Wrong size on UPCGSubdivideSegmentSettings");
static_assert(offsetof(UPCGSubdivideSegmentSettings, SubdivisionAxis) == 0x000198, "Member 'UPCGSubdivideSegmentSettings::SubdivisionAxis' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bFlipAxisAsAttribute) == 0x00019C, "Member 'UPCGSubdivideSegmentSettings::bFlipAxisAsAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bShouldFlipAxis) == 0x00019D, "Member 'UPCGSubdivideSegmentSettings::bShouldFlipAxis' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, FlipAxisAttribute) == 0x0001A0, "Member 'UPCGSubdivideSegmentSettings::FlipAxisAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bAcceptIncompleteSubdivision) == 0x0001C8, "Member 'UPCGSubdivideSegmentSettings::bAcceptIncompleteSubdivision' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bOutputModuleIndexAttribute) == 0x0001C9, "Member 'UPCGSubdivideSegmentSettings::bOutputModuleIndexAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, ModuleIndexAttributeName) == 0x0001CC, "Member 'UPCGSubdivideSegmentSettings::ModuleIndexAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bOutputExtremityAttributes) == 0x0001D4, "Member 'UPCGSubdivideSegmentSettings::bOutputExtremityAttributes' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, IsFirstAttributeName) == 0x0001D8, "Member 'UPCGSubdivideSegmentSettings::IsFirstAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, IsFinalAttributeName) == 0x0001E0, "Member 'UPCGSubdivideSegmentSettings::IsFinalAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, bOutputExtremityNeighborIndexAttribute) == 0x0001E8, "Member 'UPCGSubdivideSegmentSettings::bOutputExtremityNeighborIndexAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSegmentSettings, ExtremityNeighborIndexAttributeName) == 0x0001EC, "Member 'UPCGSubdivideSegmentSettings::ExtremityNeighborIndexAttributeName' has a wrong offset!");

// Class PCG.PCGSubdivideSplineSettings
// 0x0058 (0x01F0 - 0x0198)
class UPCGSubdivideSplineSettings final : public UPCGSubdivisionBaseSettings
{
public:
	bool                                          bAcceptIncompleteSubdivision;                      // 0x0198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModuleHeightAsAttribute;                          // 0x0199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ModuleHeight;                                      // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     ModuleHeightAttribute;                             // 0x01A8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputModuleIndexAttribute;                       // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ModuleIndexAttributeName;                          // 0x01D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutputExtremityAttributes;                        // 0x01DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IsFirstAttributeName;                              // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsFinalAttributeName;                              // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubdivideSplineSettings">();
	}
	static class UPCGSubdivideSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubdivideSplineSettings>();
	}
};
static_assert(alignof(UPCGSubdivideSplineSettings) == 0x000008, "Wrong alignment on UPCGSubdivideSplineSettings");
static_assert(sizeof(UPCGSubdivideSplineSettings) == 0x0001F0, "Wrong size on UPCGSubdivideSplineSettings");
static_assert(offsetof(UPCGSubdivideSplineSettings, bAcceptIncompleteSubdivision) == 0x000198, "Member 'UPCGSubdivideSplineSettings::bAcceptIncompleteSubdivision' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, bModuleHeightAsAttribute) == 0x000199, "Member 'UPCGSubdivideSplineSettings::bModuleHeightAsAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, ModuleHeight) == 0x0001A0, "Member 'UPCGSubdivideSplineSettings::ModuleHeight' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, ModuleHeightAttribute) == 0x0001A8, "Member 'UPCGSubdivideSplineSettings::ModuleHeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, bOutputModuleIndexAttribute) == 0x0001D0, "Member 'UPCGSubdivideSplineSettings::bOutputModuleIndexAttribute' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, ModuleIndexAttributeName) == 0x0001D4, "Member 'UPCGSubdivideSplineSettings::ModuleIndexAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, bOutputExtremityAttributes) == 0x0001DC, "Member 'UPCGSubdivideSplineSettings::bOutputExtremityAttributes' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, IsFirstAttributeName) == 0x0001E0, "Member 'UPCGSubdivideSplineSettings::IsFirstAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGSubdivideSplineSettings, IsFinalAttributeName) == 0x0001E8, "Member 'UPCGSubdivideSplineSettings::IsFinalAttributeName' has a wrong offset!");

// Class PCG.PCGSwitchSettings
// 0x0058 (0x0110 - 0x00B8)
class UPCGSwitchSettings final : public UPCGSettings
{
public:
	EPCGControlFlowSelectionMode                  SelectionMode;                                     // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntegerSelection;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IntOptions;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StringSelection;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringOptions;                                     // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEnumSelector                          EnumSelection;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSwitchSettings">();
	}
	static class UPCGSwitchSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSwitchSettings>();
	}
};
static_assert(alignof(UPCGSwitchSettings) == 0x000008, "Wrong alignment on UPCGSwitchSettings");
static_assert(sizeof(UPCGSwitchSettings) == 0x000110, "Wrong size on UPCGSwitchSettings");
static_assert(offsetof(UPCGSwitchSettings, SelectionMode) == 0x0000B8, "Member 'UPCGSwitchSettings::SelectionMode' has a wrong offset!");
static_assert(offsetof(UPCGSwitchSettings, IntegerSelection) == 0x0000BC, "Member 'UPCGSwitchSettings::IntegerSelection' has a wrong offset!");
static_assert(offsetof(UPCGSwitchSettings, IntOptions) == 0x0000C0, "Member 'UPCGSwitchSettings::IntOptions' has a wrong offset!");
static_assert(offsetof(UPCGSwitchSettings, StringSelection) == 0x0000D0, "Member 'UPCGSwitchSettings::StringSelection' has a wrong offset!");
static_assert(offsetof(UPCGSwitchSettings, StringOptions) == 0x0000E0, "Member 'UPCGSwitchSettings::StringOptions' has a wrong offset!");
static_assert(offsetof(UPCGSwitchSettings, EnumSelection) == 0x0000F0, "Member 'UPCGSwitchSettings::EnumSelection' has a wrong offset!");

// Class PCG.PCGUserParameterGetSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGUserParameterGetSettings final : public UPCGSettings
{
public:
	struct FGuid                                  PropertyGuid;                                      // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceObjectAndStructExtraction;                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUserParameterGetSettings">();
	}
	static class UPCGUserParameterGetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGUserParameterGetSettings>();
	}
};
static_assert(alignof(UPCGUserParameterGetSettings) == 0x000008, "Wrong alignment on UPCGUserParameterGetSettings");
static_assert(sizeof(UPCGUserParameterGetSettings) == 0x0000D8, "Wrong size on UPCGUserParameterGetSettings");
static_assert(offsetof(UPCGUserParameterGetSettings, PropertyGuid) == 0x0000B8, "Member 'UPCGUserParameterGetSettings::PropertyGuid' has a wrong offset!");
static_assert(offsetof(UPCGUserParameterGetSettings, PropertyName) == 0x0000C8, "Member 'UPCGUserParameterGetSettings::PropertyName' has a wrong offset!");
static_assert(offsetof(UPCGUserParameterGetSettings, bForceObjectAndStructExtraction) == 0x0000D0, "Member 'UPCGUserParameterGetSettings::bForceObjectAndStructExtraction' has a wrong offset!");

// Class PCG.PCGMeshSelectorByAttribute
// 0x0268 (0x0290 - 0x0028)
class UPCGMeshSelectorByAttribute final : public UPCGMeshSelectorBase
{
public:
	class FName                                   AttributeName;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGSoftISMComponentDescriptor         TemplateDescriptor;                                // 0x0030(0x0248)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAttributeMaterialOverrides;                    // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MaterialOverrideAttributes;                        // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMeshSelectorByAttribute">();
	}
	static class UPCGMeshSelectorByAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMeshSelectorByAttribute>();
	}
};
static_assert(alignof(UPCGMeshSelectorByAttribute) == 0x000008, "Wrong alignment on UPCGMeshSelectorByAttribute");
static_assert(sizeof(UPCGMeshSelectorByAttribute) == 0x000290, "Wrong size on UPCGMeshSelectorByAttribute");
static_assert(offsetof(UPCGMeshSelectorByAttribute, AttributeName) == 0x000028, "Member 'UPCGMeshSelectorByAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorByAttribute, TemplateDescriptor) == 0x000030, "Member 'UPCGMeshSelectorByAttribute::TemplateDescriptor' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorByAttribute, bUseAttributeMaterialOverrides) == 0x000278, "Member 'UPCGMeshSelectorByAttribute::bUseAttributeMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorByAttribute, MaterialOverrideAttributes) == 0x000280, "Member 'UPCGMeshSelectorByAttribute::MaterialOverrideAttributes' has a wrong offset!");

// Class PCG.PCGGenericUserParameterGetSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGGenericUserParameterGetSettings final : public UPCGSettings
{
public:
	class FString                                 PropertyPath;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceObjectAndStructExtraction;                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OutputAttributeName;                               // 0x00CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGUserParameterSource                       Source;                                            // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQuiet;                                            // 0x00D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenericUserParameterGetSettings">();
	}
	static class UPCGGenericUserParameterGetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGenericUserParameterGetSettings>();
	}
};
static_assert(alignof(UPCGGenericUserParameterGetSettings) == 0x000008, "Wrong alignment on UPCGGenericUserParameterGetSettings");
static_assert(sizeof(UPCGGenericUserParameterGetSettings) == 0x0000D8, "Wrong size on UPCGGenericUserParameterGetSettings");
static_assert(offsetof(UPCGGenericUserParameterGetSettings, PropertyPath) == 0x0000B8, "Member 'UPCGGenericUserParameterGetSettings::PropertyPath' has a wrong offset!");
static_assert(offsetof(UPCGGenericUserParameterGetSettings, bForceObjectAndStructExtraction) == 0x0000C8, "Member 'UPCGGenericUserParameterGetSettings::bForceObjectAndStructExtraction' has a wrong offset!");
static_assert(offsetof(UPCGGenericUserParameterGetSettings, OutputAttributeName) == 0x0000CC, "Member 'UPCGGenericUserParameterGetSettings::OutputAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGGenericUserParameterGetSettings, Source) == 0x0000D4, "Member 'UPCGGenericUserParameterGetSettings::Source' has a wrong offset!");
static_assert(offsetof(UPCGGenericUserParameterGetSettings, bQuiet) == 0x0000D5, "Member 'UPCGGenericUserParameterGetSettings::bQuiet' has a wrong offset!");

// Class PCG.PCGUserParametersData
// 0x0038 (0x0070 - 0x0038)
class UPCGUserParametersData final : public UPCGData
{
public:
	struct FInstancedStruct                       UserParameters;                                    // 0x0038(0x0010)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPCGUserParametersData>  UpstreamData;                                      // 0x0048(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUserParametersData">();
	}
	static class UPCGUserParametersData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGUserParametersData>();
	}
};
static_assert(alignof(UPCGUserParametersData) == 0x000008, "Wrong alignment on UPCGUserParametersData");
static_assert(sizeof(UPCGUserParametersData) == 0x000070, "Wrong size on UPCGUserParametersData");
static_assert(offsetof(UPCGUserParametersData, UserParameters) == 0x000038, "Member 'UPCGUserParametersData::UserParameters' has a wrong offset!");
static_assert(offsetof(UPCGUserParametersData, UpstreamData) == 0x000048, "Member 'UPCGUserParametersData::UpstreamData' has a wrong offset!");

// Class PCG.PCGVisualizeAttributeSettings
// 0x0070 (0x0128 - 0x00B8)
class UPCGVisualizeAttributeSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     AttributeSource;                                   // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomPrefixString;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithIndex;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPrefixWithAttributeName;                          // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalOffset;                                       // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Duration;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointLimit;                                        // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisualizeEnabled;                                 // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGVisualizeAttributeSettings">();
	}
	static class UPCGVisualizeAttributeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGVisualizeAttributeSettings>();
	}
};
static_assert(alignof(UPCGVisualizeAttributeSettings) == 0x000008, "Wrong alignment on UPCGVisualizeAttributeSettings");
static_assert(sizeof(UPCGVisualizeAttributeSettings) == 0x000128, "Wrong size on UPCGVisualizeAttributeSettings");
static_assert(offsetof(UPCGVisualizeAttributeSettings, AttributeSource) == 0x0000B8, "Member 'UPCGVisualizeAttributeSettings::AttributeSource' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, CustomPrefixString) == 0x0000E0, "Member 'UPCGVisualizeAttributeSettings::CustomPrefixString' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, bPrefixWithIndex) == 0x0000F0, "Member 'UPCGVisualizeAttributeSettings::bPrefixWithIndex' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, bPrefixWithAttributeName) == 0x0000F1, "Member 'UPCGVisualizeAttributeSettings::bPrefixWithAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, LocalOffset) == 0x0000F8, "Member 'UPCGVisualizeAttributeSettings::LocalOffset' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, Color) == 0x000110, "Member 'UPCGVisualizeAttributeSettings::Color' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, Duration) == 0x000118, "Member 'UPCGVisualizeAttributeSettings::Duration' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, PointLimit) == 0x000120, "Member 'UPCGVisualizeAttributeSettings::PointLimit' has a wrong offset!");
static_assert(offsetof(UPCGVisualizeAttributeSettings, bVisualizeEnabled) == 0x000124, "Member 'UPCGVisualizeAttributeSettings::bVisualizeEnabled' has a wrong offset!");

// Class PCG.PCGWaitLandscapeReadySettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGWaitLandscapeReadySettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWaitLandscapeReadySettings">();
	}
	static class UPCGWaitLandscapeReadySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWaitLandscapeReadySettings>();
	}
};
static_assert(alignof(UPCGWaitLandscapeReadySettings) == 0x000008, "Wrong alignment on UPCGWaitLandscapeReadySettings");
static_assert(sizeof(UPCGWaitLandscapeReadySettings) == 0x0000B8, "Wrong size on UPCGWaitLandscapeReadySettings");

// Class PCG.PCGLandscapeCache
// 0x00B8 (0x00E0 - 0x0028)
class UPCGLandscapeCache final : public UObject
{
public:
	EPCGLandscapeCacheSerializationMode           SerializationMode;                                 // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGLandscapeCacheSerializationContents       CookedSerializedContents;                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x56];                                      // 0x002A(0x0056)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             CachedLayerNames;                                  // 0x0080(0x0050)(Edit, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearCache();
	void PrimeCache();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLandscapeCache">();
	}
	static class UPCGLandscapeCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLandscapeCache>();
	}
};
static_assert(alignof(UPCGLandscapeCache) == 0x000008, "Wrong alignment on UPCGLandscapeCache");
static_assert(sizeof(UPCGLandscapeCache) == 0x0000E0, "Wrong size on UPCGLandscapeCache");
static_assert(offsetof(UPCGLandscapeCache, SerializationMode) == 0x000028, "Member 'UPCGLandscapeCache::SerializationMode' has a wrong offset!");
static_assert(offsetof(UPCGLandscapeCache, CookedSerializedContents) == 0x000029, "Member 'UPCGLandscapeCache::CookedSerializedContents' has a wrong offset!");
static_assert(offsetof(UPCGLandscapeCache, CachedLayerNames) == 0x000080, "Member 'UPCGLandscapeCache::CachedLayerNames' has a wrong offset!");

// Class PCG.PCGCopyPointsDataInterface
// 0x0008 (0x0050 - 0x0048)
class UPCGCopyPointsDataInterface final : public UPCGComputeDataInterface
{
public:
	class UPCGSettings*                           Settings;                                          // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCopyPointsDataInterface">();
	}
	static class UPCGCopyPointsDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCopyPointsDataInterface>();
	}
};
static_assert(alignof(UPCGCopyPointsDataInterface) == 0x000008, "Wrong alignment on UPCGCopyPointsDataInterface");
static_assert(sizeof(UPCGCopyPointsDataInterface) == 0x000050, "Wrong size on UPCGCopyPointsDataInterface");
static_assert(offsetof(UPCGCopyPointsDataInterface, Settings) == 0x000048, "Member 'UPCGCopyPointsDataInterface::Settings' has a wrong offset!");

// Class PCG.PCGCopyPointsDataProvider
// 0x0008 (0x0030 - 0x0028)
class UPCGCopyPointsDataProvider final : public UComputeDataProvider
{
public:
	class UPCGCopyPointsSettings*                 Settings;                                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCopyPointsDataProvider">();
	}
	static class UPCGCopyPointsDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCopyPointsDataProvider>();
	}
};
static_assert(alignof(UPCGCopyPointsDataProvider) == 0x000008, "Wrong alignment on UPCGCopyPointsDataProvider");
static_assert(sizeof(UPCGCopyPointsDataProvider) == 0x000030, "Wrong size on UPCGCopyPointsDataProvider");
static_assert(offsetof(UPCGCopyPointsDataProvider, Settings) == 0x000028, "Member 'UPCGCopyPointsDataProvider::Settings' has a wrong offset!");

// Class PCG.PCGCustomKernelDataInterface
// 0x0008 (0x0030 - 0x0028)
class UPCGCustomKernelDataInterface final : public UComputeDataInterface
{
public:
	class UPCGSettings*                           Settings;                                          // 0x0028(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCustomKernelDataInterface">();
	}
	static class UPCGCustomKernelDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCustomKernelDataInterface>();
	}
};
static_assert(alignof(UPCGCustomKernelDataInterface) == 0x000008, "Wrong alignment on UPCGCustomKernelDataInterface");
static_assert(sizeof(UPCGCustomKernelDataInterface) == 0x000030, "Wrong size on UPCGCustomKernelDataInterface");
static_assert(offsetof(UPCGCustomKernelDataInterface, Settings) == 0x000028, "Member 'UPCGCustomKernelDataInterface::Settings' has a wrong offset!");

// Class PCG.PCGCustomComputeKernelDataProvider
// 0x0050 (0x0078 - 0x0028)
class UPCGCustomComputeKernelDataProvider final : public UComputeDataProvider
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCustomComputeKernelDataProvider">();
	}
	static class UPCGCustomComputeKernelDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCustomComputeKernelDataProvider>();
	}
};
static_assert(alignof(UPCGCustomComputeKernelDataProvider) == 0x000008, "Wrong alignment on UPCGCustomComputeKernelDataProvider");
static_assert(sizeof(UPCGCustomComputeKernelDataProvider) == 0x000078, "Wrong size on UPCGCustomComputeKernelDataProvider");

// Class PCG.PCGDebugDataInterface
// 0x0008 (0x0030 - 0x0028)
class UPCGDebugDataInterface final : public UComputeDataInterface
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDebugDataInterface">();
	}
	static class UPCGDebugDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDebugDataInterface>();
	}
};
static_assert(alignof(UPCGDebugDataInterface) == 0x000008, "Wrong alignment on UPCGDebugDataInterface");
static_assert(sizeof(UPCGDebugDataInterface) == 0x000030, "Wrong size on UPCGDebugDataInterface");

// Class PCG.PCGDebugDataProvider
// 0x0008 (0x0030 - 0x0028)
class UPCGDebugDataProvider final : public UComputeDataProvider
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDebugDataProvider">();
	}
	static class UPCGDebugDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDebugDataProvider>();
	}
};
static_assert(alignof(UPCGDebugDataProvider) == 0x000008, "Wrong alignment on UPCGDebugDataProvider");
static_assert(sizeof(UPCGDebugDataProvider) == 0x000030, "Wrong size on UPCGDebugDataProvider");

// Class PCG.PCGInstanceDataInterface
// 0x0010 (0x0058 - 0x0048)
class UPCGInstanceDataInterface final : public UPCGComputeDataInterface
{
public:
	class FName                                   InputPinProvidingData;                             // 0x0048(0x0008)(BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSettings*                           ProducerSettings;                                  // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInstanceDataInterface">();
	}
	static class UPCGInstanceDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInstanceDataInterface>();
	}
};
static_assert(alignof(UPCGInstanceDataInterface) == 0x000008, "Wrong alignment on UPCGInstanceDataInterface");
static_assert(sizeof(UPCGInstanceDataInterface) == 0x000058, "Wrong size on UPCGInstanceDataInterface");
static_assert(offsetof(UPCGInstanceDataInterface, InputPinProvidingData) == 0x000048, "Member 'UPCGInstanceDataInterface::InputPinProvidingData' has a wrong offset!");
static_assert(offsetof(UPCGInstanceDataInterface, ProducerSettings) == 0x000050, "Member 'UPCGInstanceDataInterface::ProducerSettings' has a wrong offset!");

// Class PCG.PCGInstanceDataProvider
// 0x0018 (0x0040 - 0x0028)
class UPCGInstanceDataProvider final : public UComputeDataProvider
{
public:
	TArray<class UPrimitiveComponent*>            Primitives;                                        // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint32                                        NumInstancesAllPrimitives;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumCustomFloatsPerInstance;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInstanceDataProvider">();
	}
	static class UPCGInstanceDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInstanceDataProvider>();
	}
};
static_assert(alignof(UPCGInstanceDataProvider) == 0x000008, "Wrong alignment on UPCGInstanceDataProvider");
static_assert(sizeof(UPCGInstanceDataProvider) == 0x000040, "Wrong size on UPCGInstanceDataProvider");
static_assert(offsetof(UPCGInstanceDataProvider, Primitives) == 0x000028, "Member 'UPCGInstanceDataProvider::Primitives' has a wrong offset!");
static_assert(offsetof(UPCGInstanceDataProvider, NumInstancesAllPrimitives) == 0x000038, "Member 'UPCGInstanceDataProvider::NumInstancesAllPrimitives' has a wrong offset!");
static_assert(offsetof(UPCGInstanceDataProvider, NumCustomFloatsPerInstance) == 0x00003C, "Member 'UPCGInstanceDataProvider::NumCustomFloatsPerInstance' has a wrong offset!");

// Class PCG.PCGMatchAndSetByAttribute
// 0x0020 (0x0050 - 0x0030)
class UPCGMatchAndSetByAttribute final : public UPCGMatchAndSetBase
{
public:
	class FName                                   MatchSourceAttribute;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             MatchSourceType;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGMetadataTypesConstantStructStringMode     MatchSourceStringMode;                             // 0x003C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGMatchAndSetByAttributeEntry> Entries;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMatchAndSetByAttribute">();
	}
	static class UPCGMatchAndSetByAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMatchAndSetByAttribute>();
	}
};
static_assert(alignof(UPCGMatchAndSetByAttribute) == 0x000008, "Wrong alignment on UPCGMatchAndSetByAttribute");
static_assert(sizeof(UPCGMatchAndSetByAttribute) == 0x000050, "Wrong size on UPCGMatchAndSetByAttribute");
static_assert(offsetof(UPCGMatchAndSetByAttribute, MatchSourceAttribute) == 0x000030, "Member 'UPCGMatchAndSetByAttribute::MatchSourceAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetByAttribute, MatchSourceType) == 0x000038, "Member 'UPCGMatchAndSetByAttribute::MatchSourceType' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetByAttribute, MatchSourceStringMode) == 0x00003C, "Member 'UPCGMatchAndSetByAttribute::MatchSourceStringMode' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetByAttribute, Entries) == 0x000040, "Member 'UPCGMatchAndSetByAttribute::Entries' has a wrong offset!");

// Class PCG.PCGLandscapeDataInterface
// 0x0000 (0x0048 - 0x0048)
class UPCGLandscapeDataInterface final : public UPCGComputeDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLandscapeDataInterface">();
	}
	static class UPCGLandscapeDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLandscapeDataInterface>();
	}
};
static_assert(alignof(UPCGLandscapeDataInterface) == 0x000008, "Wrong alignment on UPCGLandscapeDataInterface");
static_assert(sizeof(UPCGLandscapeDataInterface) == 0x000048, "Wrong size on UPCGLandscapeDataInterface");

// Class PCG.PCGLandscapeDataProvider
// 0x0008 (0x0030 - 0x0028)
class UPCGLandscapeDataProvider final : public UComputeDataProvider
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLandscapeDataProvider">();
	}
	static class UPCGLandscapeDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLandscapeDataProvider>();
	}
};
static_assert(alignof(UPCGLandscapeDataProvider) == 0x000008, "Wrong alignment on UPCGLandscapeDataProvider");
static_assert(sizeof(UPCGLandscapeDataProvider) == 0x000030, "Wrong size on UPCGLandscapeDataProvider");

// Class PCG.PCGWorldActor
// 0x0010 (0x02B8 - 0x02A8)
class APCGWorldActor final : public AActor
{
public:
	uint32                                        PartitionGridSize;                                 // 0x02A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGLandscapeCache*                     LandscapeCacheObject;                              // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldActor">();
	}
	static class APCGWorldActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APCGWorldActor>();
	}
};
static_assert(alignof(APCGWorldActor) == 0x000008, "Wrong alignment on APCGWorldActor");
static_assert(sizeof(APCGWorldActor) == 0x0002B8, "Wrong size on APCGWorldActor");
static_assert(offsetof(APCGWorldActor, PartitionGridSize) == 0x0002A8, "Member 'APCGWorldActor::PartitionGridSize' has a wrong offset!");
static_assert(offsetof(APCGWorldActor, LandscapeCacheObject) == 0x0002B0, "Member 'APCGWorldActor::LandscapeCacheObject' has a wrong offset!");

// Class PCG.PCGTextureDataInterface
// 0x0000 (0x0048 - 0x0048)
class UPCGTextureDataInterface final : public UPCGComputeDataInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTextureDataInterface">();
	}
	static class UPCGTextureDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTextureDataInterface>();
	}
};
static_assert(alignof(UPCGTextureDataInterface) == 0x000008, "Wrong alignment on UPCGTextureDataInterface");
static_assert(sizeof(UPCGTextureDataInterface) == 0x000048, "Wrong size on UPCGTextureDataInterface");

// Class PCG.PCGTextureDataProvider
// 0x0008 (0x0030 - 0x0028)
class UPCGTextureDataProvider final : public UComputeDataProvider
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTextureDataProvider">();
	}
	static class UPCGTextureDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTextureDataProvider>();
	}
};
static_assert(alignof(UPCGTextureDataProvider) == 0x000008, "Wrong alignment on UPCGTextureDataProvider");
static_assert(sizeof(UPCGTextureDataProvider) == 0x000030, "Wrong size on UPCGTextureDataProvider");

// Class PCG.PCGManagedSplineMeshComponent
// 0x02C8 (0x0328 - 0x0060)
class UPCGManagedSplineMeshComponent final : public UPCGManagedComponent
{
public:
	struct FSplineMeshComponentDescriptor         Descriptor;                                        // 0x0060(0x01F0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPCGSplineMeshParams                   SplineMeshParams;                                  // 0x0250(0x00C8)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SettingsUID;                                       // 0x0318(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedSplineMeshComponent">();
	}
	static class UPCGManagedSplineMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedSplineMeshComponent>();
	}
};
static_assert(alignof(UPCGManagedSplineMeshComponent) == 0x000008, "Wrong alignment on UPCGManagedSplineMeshComponent");
static_assert(sizeof(UPCGManagedSplineMeshComponent) == 0x000328, "Wrong size on UPCGManagedSplineMeshComponent");
static_assert(offsetof(UPCGManagedSplineMeshComponent, Descriptor) == 0x000060, "Member 'UPCGManagedSplineMeshComponent::Descriptor' has a wrong offset!");
static_assert(offsetof(UPCGManagedSplineMeshComponent, SplineMeshParams) == 0x000250, "Member 'UPCGManagedSplineMeshComponent::SplineMeshParams' has a wrong offset!");
static_assert(offsetof(UPCGManagedSplineMeshComponent, SettingsUID) == 0x000318, "Member 'UPCGManagedSplineMeshComponent::SettingsUID' has a wrong offset!");

// Class PCG.PCGComputeGraphSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGComputeGraphSettings final : public UPCGSettings
{
public:
	int32                                         ComputeGraphIndex;                                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGComputeGraphSettings">();
	}
	static class UPCGComputeGraphSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGComputeGraphSettings>();
	}
};
static_assert(alignof(UPCGComputeGraphSettings) == 0x000008, "Wrong alignment on UPCGComputeGraphSettings");
static_assert(sizeof(UPCGComputeGraphSettings) == 0x0000C0, "Wrong size on UPCGComputeGraphSettings");
static_assert(offsetof(UPCGComputeGraphSettings, ComputeGraphIndex) == 0x0000B8, "Member 'UPCGComputeGraphSettings::ComputeGraphIndex' has a wrong offset!");

// Class PCG.PCGCustomHLSLSettings
// 0x0108 (0x01C0 - 0x00B8)
class UPCGCustomHLSLSettings final : public UPCGSettings
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGKernelType                                KernelType;                                        // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointCount;                                        // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGDispatchThreadCount                       DispatchThreadCount;                               // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThreadCountMultiplier;                             // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FixedThreadCount;                                  // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ThreadCountInputPinLabels;                         // 0x00D8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPCGPinProperties>              InputPins;                                         // 0x00E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPCGPinPropertiesGPU>           OutputPins;                                        // 0x00F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMuteUnwrittenPinDataErrors;                       // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShaderFunctions;                                   // 0x0110(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ShaderSource;                                      // 0x0120(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 InputDeclarations;                                 // 0x0130(0x0010)(Edit, ZeroConstructor, Transient, EditConst, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 OutputDeclarations;                                // 0x0140(0x0010)(Edit, ZeroConstructor, Transient, EditConst, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 HelperDeclarations;                                // 0x0150(0x0010)(Edit, ZeroConstructor, Transient, EditConst, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x60];                                     // 0x0160(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCustomHLSLSettings">();
	}
	static class UPCGCustomHLSLSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCustomHLSLSettings>();
	}
};
static_assert(alignof(UPCGCustomHLSLSettings) == 0x000008, "Wrong alignment on UPCGCustomHLSLSettings");
static_assert(sizeof(UPCGCustomHLSLSettings) == 0x0001C0, "Wrong size on UPCGCustomHLSLSettings");
static_assert(offsetof(UPCGCustomHLSLSettings, KernelType) == 0x0000C0, "Member 'UPCGCustomHLSLSettings::KernelType' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, PointCount) == 0x0000C4, "Member 'UPCGCustomHLSLSettings::PointCount' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, DispatchThreadCount) == 0x0000C8, "Member 'UPCGCustomHLSLSettings::DispatchThreadCount' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, ThreadCountMultiplier) == 0x0000CC, "Member 'UPCGCustomHLSLSettings::ThreadCountMultiplier' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, FixedThreadCount) == 0x0000D0, "Member 'UPCGCustomHLSLSettings::FixedThreadCount' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, ThreadCountInputPinLabels) == 0x0000D8, "Member 'UPCGCustomHLSLSettings::ThreadCountInputPinLabels' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, InputPins) == 0x0000E8, "Member 'UPCGCustomHLSLSettings::InputPins' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, OutputPins) == 0x0000F8, "Member 'UPCGCustomHLSLSettings::OutputPins' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, bMuteUnwrittenPinDataErrors) == 0x000108, "Member 'UPCGCustomHLSLSettings::bMuteUnwrittenPinDataErrors' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, ShaderFunctions) == 0x000110, "Member 'UPCGCustomHLSLSettings::ShaderFunctions' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, ShaderSource) == 0x000120, "Member 'UPCGCustomHLSLSettings::ShaderSource' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, InputDeclarations) == 0x000130, "Member 'UPCGCustomHLSLSettings::InputDeclarations' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, OutputDeclarations) == 0x000140, "Member 'UPCGCustomHLSLSettings::OutputDeclarations' has a wrong offset!");
static_assert(offsetof(UPCGCustomHLSLSettings, HelperDeclarations) == 0x000150, "Member 'UPCGCustomHLSLSettings::HelperDeclarations' has a wrong offset!");

// Class PCG.PCGGenSourceWPStreamingSource
// 0x0010 (0x0038 - 0x0028)
class UPCGGenSourceWPStreamingSource final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenSourceWPStreamingSource">();
	}
	static class UPCGGenSourceWPStreamingSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGenSourceWPStreamingSource>();
	}
};
static_assert(alignof(UPCGGenSourceWPStreamingSource) == 0x000008, "Wrong alignment on UPCGGenSourceWPStreamingSource");
static_assert(sizeof(UPCGGenSourceWPStreamingSource) == 0x000038, "Wrong size on UPCGGenSourceWPStreamingSource");

// Class PCG.PCGComputeGraph
// 0x0188 (0x0268 - 0x00E0)
class UPCGComputeGraph final : public UComputeGraph
{
public:
	uint8                                         Pad_E0[0x50];                                      // 0x00E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UPCGPin>>         PinsReceivingDataFromCPU;                          // 0x0130(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UPCGPin>, class FName> InputPinLabelAliases;                           // 0x0140(0x0050)(NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UPCGPin>, class FName> OutputCPUPinToInputGPUPinAlias;                 // 0x0190(0x0050)(NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UPCGNode>>        KernelToNode;                                      // 0x01E0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UPCGSettings>>    StaticMeshSpawners;                                // 0x01F0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bLogDataDescriptions;                              // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FPCGKernelAttributeIDAndType> GlobalAttributeLookupTable;               // 0x0208(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         StringTable;                                       // 0x0258(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGComputeGraph">();
	}
	static class UPCGComputeGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGComputeGraph>();
	}
};
static_assert(alignof(UPCGComputeGraph) == 0x000008, "Wrong alignment on UPCGComputeGraph");
static_assert(sizeof(UPCGComputeGraph) == 0x000268, "Wrong size on UPCGComputeGraph");
static_assert(offsetof(UPCGComputeGraph, PinsReceivingDataFromCPU) == 0x000130, "Member 'UPCGComputeGraph::PinsReceivingDataFromCPU' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, InputPinLabelAliases) == 0x000140, "Member 'UPCGComputeGraph::InputPinLabelAliases' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, OutputCPUPinToInputGPUPinAlias) == 0x000190, "Member 'UPCGComputeGraph::OutputCPUPinToInputGPUPinAlias' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, KernelToNode) == 0x0001E0, "Member 'UPCGComputeGraph::KernelToNode' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, StaticMeshSpawners) == 0x0001F0, "Member 'UPCGComputeGraph::StaticMeshSpawners' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, bLogDataDescriptions) == 0x000200, "Member 'UPCGComputeGraph::bLogDataDescriptions' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, GlobalAttributeLookupTable) == 0x000208, "Member 'UPCGComputeGraph::GlobalAttributeLookupTable' has a wrong offset!");
static_assert(offsetof(UPCGComputeGraph, StringTable) == 0x000258, "Member 'UPCGComputeGraph::StringTable' has a wrong offset!");

// Class PCG.PCGCollisionWrapperData
// 0x0070 (0x00F0 - 0x0080)
class UPCGCollisionWrapperData final : public UPCGSpatialData
{
public:
	class UPCGPointData*                          PointData;                                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPCGAttributePropertyInputSelector     CollisionSelector;                                 // 0x0088(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPCGCollisionQueryFlag                        CollisionQueryFlag;                                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x3F];                                      // 0x00B1(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCollisionWrapperData">();
	}
	static class UPCGCollisionWrapperData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCollisionWrapperData>();
	}
};
static_assert(alignof(UPCGCollisionWrapperData) == 0x000008, "Wrong alignment on UPCGCollisionWrapperData");
static_assert(sizeof(UPCGCollisionWrapperData) == 0x0000F0, "Wrong size on UPCGCollisionWrapperData");
static_assert(offsetof(UPCGCollisionWrapperData, PointData) == 0x000080, "Member 'UPCGCollisionWrapperData::PointData' has a wrong offset!");
static_assert(offsetof(UPCGCollisionWrapperData, CollisionSelector) == 0x000088, "Member 'UPCGCollisionWrapperData::CollisionSelector' has a wrong offset!");
static_assert(offsetof(UPCGCollisionWrapperData, CollisionQueryFlag) == 0x0000B0, "Member 'UPCGCollisionWrapperData::CollisionQueryFlag' has a wrong offset!");

// Class PCG.PCGDataNumSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGDataNumSettings final : public UPCGSettings
{
public:
	class FName                                   OutputAttributeName;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataNumSettings">();
	}
	static class UPCGDataNumSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataNumSettings>();
	}
};
static_assert(alignof(UPCGDataNumSettings) == 0x000008, "Wrong alignment on UPCGDataNumSettings");
static_assert(sizeof(UPCGDataNumSettings) == 0x0000C0, "Wrong size on UPCGDataNumSettings");
static_assert(offsetof(UPCGDataNumSettings, OutputAttributeName) == 0x0000B8, "Member 'UPCGDataNumSettings::OutputAttributeName' has a wrong offset!");

// Class PCG.PCGDifferenceData
// 0x0028 (0x00F8 - 0x00D0)
class UPCGDifferenceData final : public UPCGSpatialDataWithPointCache
{
public:
	bool                                          bDiffMetadata;                                     // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGSpatialData*                        Source;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPCGSpatialData*                        Difference;                                        // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPCGUnionData*                          DifferencesUnion;                                  // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGDifferenceDensityFunction                 DensityFunction;                                   // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(const class UPCGSpatialData* InData);
	void K2_AddDifference(const class UPCGSpatialData* InDifference);
	void SetDensityFunction(EPCGDifferenceDensityFunction InDensityFunction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDifferenceData">();
	}
	static class UPCGDifferenceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDifferenceData>();
	}
};
static_assert(alignof(UPCGDifferenceData) == 0x000008, "Wrong alignment on UPCGDifferenceData");
static_assert(sizeof(UPCGDifferenceData) == 0x0000F8, "Wrong size on UPCGDifferenceData");
static_assert(offsetof(UPCGDifferenceData, bDiffMetadata) == 0x0000D0, "Member 'UPCGDifferenceData::bDiffMetadata' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceData, Source) == 0x0000D8, "Member 'UPCGDifferenceData::Source' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceData, Difference) == 0x0000E0, "Member 'UPCGDifferenceData::Difference' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceData, DifferencesUnion) == 0x0000E8, "Member 'UPCGDifferenceData::DifferencesUnion' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceData, DensityFunction) == 0x0000F0, "Member 'UPCGDifferenceData::DensityFunction' has a wrong offset!");

// Class PCG.PCGIntersectionData
// 0x0088 (0x0158 - 0x00D0)
class UPCGIntersectionData final : public UPCGSpatialDataWithPointCache
{
public:
	EPCGIntersectionDensityFunction               DensityFunction;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGSpatialData*                        A;                                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSpatialData*                        B;                                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   CachedBounds;                                      // 0x00E8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedStrictBounds;                                // 0x0120(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	void Initialize(const class UPCGSpatialData* InA, const class UPCGSpatialData* InB);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGIntersectionData">();
	}
	static class UPCGIntersectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGIntersectionData>();
	}
};
static_assert(alignof(UPCGIntersectionData) == 0x000008, "Wrong alignment on UPCGIntersectionData");
static_assert(sizeof(UPCGIntersectionData) == 0x000158, "Wrong size on UPCGIntersectionData");
static_assert(offsetof(UPCGIntersectionData, DensityFunction) == 0x0000D0, "Member 'UPCGIntersectionData::DensityFunction' has a wrong offset!");
static_assert(offsetof(UPCGIntersectionData, A) == 0x0000D8, "Member 'UPCGIntersectionData::A' has a wrong offset!");
static_assert(offsetof(UPCGIntersectionData, B) == 0x0000E0, "Member 'UPCGIntersectionData::B' has a wrong offset!");
static_assert(offsetof(UPCGIntersectionData, CachedBounds) == 0x0000E8, "Member 'UPCGIntersectionData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGIntersectionData, CachedStrictBounds) == 0x000120, "Member 'UPCGIntersectionData::CachedStrictBounds' has a wrong offset!");

// Class PCG.PCGSurfaceData
// 0x00A0 (0x0170 - 0x00D0)
#pragma pack(push, 0x1)
class alignas(0x10) UPCGSurfaceData : public UPCGSpatialDataWithPointCache
{
public:
	struct FTransform                             Transform;                                         // 0x00D0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   LocalBounds;                                       // 0x0130(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSurfaceData">();
	}
	static class UPCGSurfaceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSurfaceData>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPCGSurfaceData) == 0x000010, "Wrong alignment on UPCGSurfaceData");
static_assert(sizeof(UPCGSurfaceData) == 0x000170, "Wrong size on UPCGSurfaceData");
static_assert(offsetof(UPCGSurfaceData, Transform) == 0x0000D0, "Member 'UPCGSurfaceData::Transform' has a wrong offset!");
static_assert(offsetof(UPCGSurfaceData, LocalBounds) == 0x000130, "Member 'UPCGSurfaceData::LocalBounds' has a wrong offset!");

// Class PCG.PCGLandscapeData
// 0x0070 (0x01E0 - 0x0170)
class UPCGLandscapeData final : public UPCGSurfaceData
{
public:
	TArray<TSoftObjectPtr<class ALandscapeProxy>> Landscapes;                                        // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0178(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPCGLandscapeDataProps                 DataProps;                                         // 0x01B0(0x0005)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B5[0x2B];                                     // 0x01B5(0x002B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLandscapeData">();
	}
	static class UPCGLandscapeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLandscapeData>();
	}
};
static_assert(alignof(UPCGLandscapeData) == 0x000010, "Wrong alignment on UPCGLandscapeData");
static_assert(sizeof(UPCGLandscapeData) == 0x0001E0, "Wrong size on UPCGLandscapeData");
static_assert(offsetof(UPCGLandscapeData, Landscapes) == 0x000168, "Member 'UPCGLandscapeData::Landscapes' has a wrong offset!");
static_assert(offsetof(UPCGLandscapeData, Bounds) == 0x000178, "Member 'UPCGLandscapeData::Bounds' has a wrong offset!");
static_assert(offsetof(UPCGLandscapeData, DataProps) == 0x0001B0, "Member 'UPCGLandscapeData::DataProps' has a wrong offset!");

// Class PCG.PCGSubsystem
// 0x0330 (0x0370 - 0x0040)
class UPCGSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x330];                                     // 0x0040(0x0330)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubsystem">();
	}
	static class UPCGSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubsystem>();
	}
};
static_assert(alignof(UPCGSubsystem) == 0x000008, "Wrong alignment on UPCGSubsystem");
static_assert(sizeof(UPCGSubsystem) == 0x000370, "Wrong size on UPCGSubsystem");

// Class PCG.PCGPolyLineData
// 0x0000 (0x00D0 - 0x00D0)
class UPCGPolyLineData : public UPCGSpatialDataWithPointCache
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPolyLineData">();
	}
	static class UPCGPolyLineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPolyLineData>();
	}
};
static_assert(alignof(UPCGPolyLineData) == 0x000008, "Wrong alignment on UPCGPolyLineData");
static_assert(sizeof(UPCGPolyLineData) == 0x0000D0, "Wrong size on UPCGPolyLineData");

// Class PCG.PCGLandscapeSplineData
// 0x0020 (0x00F0 - 0x00D0)
class UPCGLandscapeSplineData final : public UPCGPolyLineData
{
public:
	TWeakObjectPtr<class ULandscapeSplinesComponent> Spline;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGLandscapeSplineData">();
	}
	static class UPCGLandscapeSplineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGLandscapeSplineData>();
	}
};
static_assert(alignof(UPCGLandscapeSplineData) == 0x000008, "Wrong alignment on UPCGLandscapeSplineData");
static_assert(sizeof(UPCGLandscapeSplineData) == 0x0000F0, "Wrong size on UPCGLandscapeSplineData");
static_assert(offsetof(UPCGLandscapeSplineData, Spline) == 0x0000D0, "Member 'UPCGLandscapeSplineData::Spline' has a wrong offset!");

// Class PCG.PCGPointData
// 0x0130 (0x01B0 - 0x0080)
class alignas(0x10) UPCGPointData final : public UPCGSpatialData
{
public:
	TArray<struct FPCGPoint>                      Points;                                            // 0x0080(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x120];                                     // 0x0090(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyPointsFrom(const class UPCGPointData* InData, const TArray<int32>& InDataIndices);
	void SetPoints(const TArray<struct FPCGPoint>& InPoints);

	int32 GetNumPoints() const;
	struct FPCGPoint GetPoint(int32 Index_0) const;
	const TArray<struct FPCGPoint> GetPoints() const;
	TArray<struct FPCGPoint> GetPointsCopy() const;
	bool IsEmpty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPointData">();
	}
	static class UPCGPointData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPointData>();
	}
};
static_assert(alignof(UPCGPointData) == 0x000010, "Wrong alignment on UPCGPointData");
static_assert(sizeof(UPCGPointData) == 0x0001B0, "Wrong size on UPCGPointData");
static_assert(offsetof(UPCGPointData, Points) == 0x000080, "Member 'UPCGPointData::Points' has a wrong offset!");

// Class PCG.PCGPrimitiveData
// 0x0090 (0x0160 - 0x00D0)
class UPCGPrimitiveData final : public UPCGSpatialDataWithPointCache
{
public:
	struct FVector                                VoxelSize;                                         // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPrimitiveComponent>     Primitive;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   CachedBounds;                                      // 0x00F0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedStrictBounds;                                // 0x0128(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPrimitiveData">();
	}
	static class UPCGPrimitiveData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPrimitiveData>();
	}
};
static_assert(alignof(UPCGPrimitiveData) == 0x000008, "Wrong alignment on UPCGPrimitiveData");
static_assert(sizeof(UPCGPrimitiveData) == 0x000160, "Wrong size on UPCGPrimitiveData");
static_assert(offsetof(UPCGPrimitiveData, VoxelSize) == 0x0000D0, "Member 'UPCGPrimitiveData::VoxelSize' has a wrong offset!");
static_assert(offsetof(UPCGPrimitiveData, Primitive) == 0x0000E8, "Member 'UPCGPrimitiveData::Primitive' has a wrong offset!");
static_assert(offsetof(UPCGPrimitiveData, CachedBounds) == 0x0000F0, "Member 'UPCGPrimitiveData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGPrimitiveData, CachedStrictBounds) == 0x000128, "Member 'UPCGPrimitiveData::CachedStrictBounds' has a wrong offset!");

// Class PCG.PCGManagedActors
// 0x0050 (0x0088 - 0x0038)
class UPCGManagedActors final : public UPCGManagedResource
{
public:
	TSet<TSoftObjectPtr<class AActor>>            GeneratedActors;                                   // 0x0038(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedActors">();
	}
	static class UPCGManagedActors* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedActors>();
	}
};
static_assert(alignof(UPCGManagedActors) == 0x000008, "Wrong alignment on UPCGManagedActors");
static_assert(sizeof(UPCGManagedActors) == 0x000088, "Wrong size on UPCGManagedActors");
static_assert(offsetof(UPCGManagedActors, GeneratedActors) == 0x000038, "Member 'UPCGManagedActors::GeneratedActors' has a wrong offset!");

// Class PCG.PCGProjectionData
// 0x00A0 (0x0170 - 0x00D0)
class UPCGProjectionData : public UPCGSpatialDataWithPointCache
{
public:
	class UPCGSpatialData*                        Source;                                            // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPCGSpatialData*                        Target;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   CachedBounds;                                      // 0x00E0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedStrictBounds;                                // 0x0118(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPCGProjectionParams                   ProjectionParams;                                  // 0x0150(0x0020)(Edit, BlueprintVisible, EditConst, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGProjectionData">();
	}
	static class UPCGProjectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGProjectionData>();
	}
};
static_assert(alignof(UPCGProjectionData) == 0x000008, "Wrong alignment on UPCGProjectionData");
static_assert(sizeof(UPCGProjectionData) == 0x000170, "Wrong size on UPCGProjectionData");
static_assert(offsetof(UPCGProjectionData, Source) == 0x0000D0, "Member 'UPCGProjectionData::Source' has a wrong offset!");
static_assert(offsetof(UPCGProjectionData, Target) == 0x0000D8, "Member 'UPCGProjectionData::Target' has a wrong offset!");
static_assert(offsetof(UPCGProjectionData, CachedBounds) == 0x0000E0, "Member 'UPCGProjectionData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGProjectionData, CachedStrictBounds) == 0x000118, "Member 'UPCGProjectionData::CachedStrictBounds' has a wrong offset!");
static_assert(offsetof(UPCGProjectionData, ProjectionParams) == 0x000150, "Member 'UPCGProjectionData::ProjectionParams' has a wrong offset!");

// Class PCG.PCGBaseTextureData
// 0x00B0 (0x0220 - 0x0170)
#pragma pack(push, 0x1)
class alignas(0x10) UPCGBaseTextureData : public UPCGSurfaceData
{
public:
	bool                                          bUseDensitySourceChannel;                          // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTextureColorChannel                       ColorChannel;                                      // 0x0169(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTextureFilter                             Filter;                                            // 0x016A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B[0x1];                                      // 0x016B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TexelSize;                                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdvancedTiling;                                // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Tiling;                                            // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterOffset;                                      // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTileBounds;                                    // 0x019C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 TileBounds;                                        // 0x01A0(0x0028)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ColorData;                                         // 0x01C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x01D8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         Height;                                            // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Width;                                             // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDensityFunctionEquivalent(EPCGTextureDensityFunction DensityFunction);

	EPCGTextureDensityFunction GetDensityFunctionEquivalent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBaseTextureData">();
	}
	static class UPCGBaseTextureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBaseTextureData>();
	}
};
#pragma pack(pop)
static_assert(alignof(UPCGBaseTextureData) == 0x000010, "Wrong alignment on UPCGBaseTextureData");
static_assert(sizeof(UPCGBaseTextureData) == 0x000220, "Wrong size on UPCGBaseTextureData");
static_assert(offsetof(UPCGBaseTextureData, bUseDensitySourceChannel) == 0x000168, "Member 'UPCGBaseTextureData::bUseDensitySourceChannel' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, ColorChannel) == 0x000169, "Member 'UPCGBaseTextureData::ColorChannel' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Filter) == 0x00016A, "Member 'UPCGBaseTextureData::Filter' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, TexelSize) == 0x00016C, "Member 'UPCGBaseTextureData::TexelSize' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, bUseAdvancedTiling) == 0x000170, "Member 'UPCGBaseTextureData::bUseAdvancedTiling' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Tiling) == 0x000178, "Member 'UPCGBaseTextureData::Tiling' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, CenterOffset) == 0x000188, "Member 'UPCGBaseTextureData::CenterOffset' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Rotation) == 0x000198, "Member 'UPCGBaseTextureData::Rotation' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, bUseTileBounds) == 0x00019C, "Member 'UPCGBaseTextureData::bUseTileBounds' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, TileBounds) == 0x0001A0, "Member 'UPCGBaseTextureData::TileBounds' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, ColorData) == 0x0001C8, "Member 'UPCGBaseTextureData::ColorData' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Bounds) == 0x0001D8, "Member 'UPCGBaseTextureData::Bounds' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Height) == 0x000210, "Member 'UPCGBaseTextureData::Height' has a wrong offset!");
static_assert(offsetof(UPCGBaseTextureData, Width) == 0x000214, "Member 'UPCGBaseTextureData::Width' has a wrong offset!");

// Class PCG.PCGGetSplineSettings
// 0x0000 (0x0160 - 0x0160)
class UPCGGetSplineSettings final : public UPCGDataFromActorSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetSplineSettings">();
	}
	static class UPCGGetSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetSplineSettings>();
	}
};
static_assert(alignof(UPCGGetSplineSettings) == 0x000008, "Wrong alignment on UPCGGetSplineSettings");
static_assert(sizeof(UPCGGetSplineSettings) == 0x000160, "Wrong size on UPCGGetSplineSettings");

// Class PCG.PCGRenderTargetData
// 0x0000 (0x0220 - 0x0220)
class UPCGRenderTargetData final : public UPCGBaseTextureData
{
public:
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Initialize(class UTextureRenderTarget2D* InRenderTarget, const struct FTransform& InTransform);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGRenderTargetData">();
	}
	static class UPCGRenderTargetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGRenderTargetData>();
	}
};
static_assert(alignof(UPCGRenderTargetData) == 0x000010, "Wrong alignment on UPCGRenderTargetData");
static_assert(sizeof(UPCGRenderTargetData) == 0x000220, "Wrong size on UPCGRenderTargetData");
static_assert(offsetof(UPCGRenderTargetData, RenderTarget) == 0x000218, "Member 'UPCGRenderTargetData::RenderTarget' has a wrong offset!");

// Class PCG.PCGSplineData
// 0x01A0 (0x0270 - 0x00D0)
class UPCGSplineData final : public UPCGPolyLineData
{
public:
	struct FPCGSplineStruct                       SplineStruct;                                      // 0x00D0(0x0160)(NativeAccessSpecifierPublic)
	struct FBox                                   CachedBounds;                                      // 0x0230(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplineData">();
	}
	static class UPCGSplineData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplineData>();
	}
};
static_assert(alignof(UPCGSplineData) == 0x000010, "Wrong alignment on UPCGSplineData");
static_assert(sizeof(UPCGSplineData) == 0x000270, "Wrong size on UPCGSplineData");
static_assert(offsetof(UPCGSplineData, SplineStruct) == 0x0000D0, "Member 'UPCGSplineData::SplineStruct' has a wrong offset!");
static_assert(offsetof(UPCGSplineData, CachedBounds) == 0x000230, "Member 'UPCGSplineData::CachedBounds' has a wrong offset!");

// Class PCG.PCGDeterminismTestBlueprintBase
// 0x0000 (0x0028 - 0x0028)
class UPCGDeterminismTestBlueprintBase final : public UObject
{
public:
	void ExecuteTest(const class UPCGNode* InPCGNode, struct FDeterminismTestResult& InOutTestResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDeterminismTestBlueprintBase">();
	}
	static class UPCGDeterminismTestBlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDeterminismTestBlueprintBase>();
	}
};
static_assert(alignof(UPCGDeterminismTestBlueprintBase) == 0x000008, "Wrong alignment on UPCGDeterminismTestBlueprintBase");
static_assert(sizeof(UPCGDeterminismTestBlueprintBase) == 0x000028, "Wrong size on UPCGDeterminismTestBlueprintBase");

// Class PCG.PCGSplineProjectionData
// 0x0018 (0x0188 - 0x0170)
class UPCGSplineProjectionData final : public UPCGProjectionData
{
public:
	struct FInterpCurveVector2D                   ProjectedPosition;                                 // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplineProjectionData">();
	}
	static class UPCGSplineProjectionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplineProjectionData>();
	}
};
static_assert(alignof(UPCGSplineProjectionData) == 0x000008, "Wrong alignment on UPCGSplineProjectionData");
static_assert(sizeof(UPCGSplineProjectionData) == 0x000188, "Wrong size on UPCGSplineProjectionData");
static_assert(offsetof(UPCGSplineProjectionData, ProjectedPosition) == 0x000170, "Member 'UPCGSplineProjectionData::ProjectedPosition' has a wrong offset!");

// Class PCG.PCGSplineInteriorSurfaceData
// 0x01C0 (0x0330 - 0x0170)
class UPCGSplineInteriorSurfaceData final : public UPCGSurfaceData
{
public:
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGSplineStruct                       SplineStruct;                                      // 0x0170(0x0160)(Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedBounds;                                      // 0x02D0(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        CachedSplinePoints;                                // 0x0308(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      CachedSplinePoints2D;                              // 0x0318(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSplineInteriorSurfaceData">();
	}
	static class UPCGSplineInteriorSurfaceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSplineInteriorSurfaceData>();
	}
};
static_assert(alignof(UPCGSplineInteriorSurfaceData) == 0x000010, "Wrong alignment on UPCGSplineInteriorSurfaceData");
static_assert(sizeof(UPCGSplineInteriorSurfaceData) == 0x000330, "Wrong size on UPCGSplineInteriorSurfaceData");
static_assert(offsetof(UPCGSplineInteriorSurfaceData, SplineStruct) == 0x000170, "Member 'UPCGSplineInteriorSurfaceData::SplineStruct' has a wrong offset!");
static_assert(offsetof(UPCGSplineInteriorSurfaceData, CachedBounds) == 0x0002D0, "Member 'UPCGSplineInteriorSurfaceData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGSplineInteriorSurfaceData, CachedSplinePoints) == 0x000308, "Member 'UPCGSplineInteriorSurfaceData::CachedSplinePoints' has a wrong offset!");
static_assert(offsetof(UPCGSplineInteriorSurfaceData, CachedSplinePoints2D) == 0x000318, "Member 'UPCGSplineInteriorSurfaceData::CachedSplinePoints2D' has a wrong offset!");

// Class PCG.PCGUnionSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGUnionSettings final : public UPCGSettings
{
public:
	EPCGUnionType                                 Type;                                              // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGUnionDensityFunction                      DensityFunction;                                   // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUnionSettings">();
	}
	static class UPCGUnionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGUnionSettings>();
	}
};
static_assert(alignof(UPCGUnionSettings) == 0x000008, "Wrong alignment on UPCGUnionSettings");
static_assert(sizeof(UPCGUnionSettings) == 0x0000C0, "Wrong size on UPCGUnionSettings");
static_assert(offsetof(UPCGUnionSettings, Type) == 0x0000B8, "Member 'UPCGUnionSettings::Type' has a wrong offset!");
static_assert(offsetof(UPCGUnionSettings, DensityFunction) == 0x0000B9, "Member 'UPCGUnionSettings::DensityFunction' has a wrong offset!");

// Class PCG.PCGTextureData
// 0x0050 (0x0270 - 0x0220)
class UPCGTextureData final : public UPCGBaseTextureData
{
public:
	TWeakObjectPtr<class UTexture>                Texture;                                           // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureIndex;                                      // 0x0220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfullyInitialized;                          // 0x0224(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReadbackFromGPUInitiated;                         // 0x0225(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226[0x4A];                                     // 0x0226(0x004A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTextureData">();
	}
	static class UPCGTextureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTextureData>();
	}
};
static_assert(alignof(UPCGTextureData) == 0x000010, "Wrong alignment on UPCGTextureData");
static_assert(sizeof(UPCGTextureData) == 0x000270, "Wrong size on UPCGTextureData");
static_assert(offsetof(UPCGTextureData, Texture) == 0x000218, "Member 'UPCGTextureData::Texture' has a wrong offset!");
static_assert(offsetof(UPCGTextureData, TextureIndex) == 0x000220, "Member 'UPCGTextureData::TextureIndex' has a wrong offset!");
static_assert(offsetof(UPCGTextureData, bSuccessfullyInitialized) == 0x000224, "Member 'UPCGTextureData::bSuccessfullyInitialized' has a wrong offset!");
static_assert(offsetof(UPCGTextureData, bReadbackFromGPUInitiated) == 0x000225, "Member 'UPCGTextureData::bReadbackFromGPUInitiated' has a wrong offset!");

// Class PCG.PCGUnionData
// 0x0098 (0x0168 - 0x00D0)
class UPCGUnionData final : public UPCGSpatialDataWithPointCache
{
public:
	TArray<class UPCGSpatialData*>                Data;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UPCGSpatialData*                        FirstNonTrivialTransformData;                      // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGUnionType                                 UnionType;                                         // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGUnionDensityFunction                      DensityFunction;                                   // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   CachedBounds;                                      // 0x00F0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   CachedStrictBounds;                                // 0x0128(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         CachedDimension;                                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddData(const class UPCGSpatialData* InData);
	void Initialize(const class UPCGSpatialData* InA, const class UPCGSpatialData* InB);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGUnionData">();
	}
	static class UPCGUnionData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGUnionData>();
	}
};
static_assert(alignof(UPCGUnionData) == 0x000008, "Wrong alignment on UPCGUnionData");
static_assert(sizeof(UPCGUnionData) == 0x000168, "Wrong size on UPCGUnionData");
static_assert(offsetof(UPCGUnionData, Data) == 0x0000D0, "Member 'UPCGUnionData::Data' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, FirstNonTrivialTransformData) == 0x0000E0, "Member 'UPCGUnionData::FirstNonTrivialTransformData' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, UnionType) == 0x0000E8, "Member 'UPCGUnionData::UnionType' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, DensityFunction) == 0x0000E9, "Member 'UPCGUnionData::DensityFunction' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, CachedBounds) == 0x0000F0, "Member 'UPCGUnionData::CachedBounds' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, CachedStrictBounds) == 0x000128, "Member 'UPCGUnionData::CachedStrictBounds' has a wrong offset!");
static_assert(offsetof(UPCGUnionData, CachedDimension) == 0x000160, "Member 'UPCGUnionData::CachedDimension' has a wrong offset!");

// Class PCG.PCGPinPropertiesBlueprintHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGPinPropertiesBlueprintHelpers final : public UBlueprintFunctionLibrary
{
public:
	static bool AllowsMultipleConnections(const struct FPCGPinProperties& PinProperties);
	static bool IsAdvancedPin(const struct FPCGPinProperties& PinProperties);
	static bool IsNormalPin(const struct FPCGPinProperties& PinProperties);
	static bool IsRequiredPin(const struct FPCGPinProperties& PinProperties);
	static void SetAdvancedPin(struct FPCGPinProperties& PinProperties);
	static void SetAllowMultipleConnections(struct FPCGPinProperties& PinProperties, bool bAllowMultipleConnections);
	static void SetNormalPin(struct FPCGPinProperties& PinProperties);
	static void SetRequiredPin(struct FPCGPinProperties& PinProperties);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPinPropertiesBlueprintHelpers">();
	}
	static class UPCGPinPropertiesBlueprintHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPinPropertiesBlueprintHelpers>();
	}
};
static_assert(alignof(UPCGPinPropertiesBlueprintHelpers) == 0x000008, "Wrong alignment on UPCGPinPropertiesBlueprintHelpers");
static_assert(sizeof(UPCGPinPropertiesBlueprintHelpers) == 0x000028, "Wrong size on UPCGPinPropertiesBlueprintHelpers");

// Class PCG.PCGVolumeData
// 0x0098 (0x0168 - 0x00D0)
class UPCGVolumeData : public UPCGSpatialDataWithPointCache
{
public:
	struct FVector                                VoxelSize;                                         // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AVolume>                 Volume;                                            // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox                                   Bounds;                                            // 0x00F0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FBox                                   StrictBounds;                                      // 0x0128(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x8];                                      // 0x0160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGVolumeData">();
	}
	static class UPCGVolumeData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGVolumeData>();
	}
};
static_assert(alignof(UPCGVolumeData) == 0x000008, "Wrong alignment on UPCGVolumeData");
static_assert(sizeof(UPCGVolumeData) == 0x000168, "Wrong size on UPCGVolumeData");
static_assert(offsetof(UPCGVolumeData, VoxelSize) == 0x0000D0, "Member 'UPCGVolumeData::VoxelSize' has a wrong offset!");
static_assert(offsetof(UPCGVolumeData, Volume) == 0x0000E8, "Member 'UPCGVolumeData::Volume' has a wrong offset!");
static_assert(offsetof(UPCGVolumeData, Bounds) == 0x0000F0, "Member 'UPCGVolumeData::Bounds' has a wrong offset!");
static_assert(offsetof(UPCGVolumeData, StrictBounds) == 0x000128, "Member 'UPCGVolumeData::StrictBounds' has a wrong offset!");

// Class PCG.PCGWorldVolumetricData
// 0x0088 (0x01F0 - 0x0168)
class UPCGWorldVolumetricData final : public UPCGVolumeData
{
public:
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPCGComponent>           OriginatingComponent;                              // 0x0170(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGWorldVolumetricQueryParams         QueryParams;                                       // 0x0178(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldVolumetricData">();
	}
	static class UPCGWorldVolumetricData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWorldVolumetricData>();
	}
};
static_assert(alignof(UPCGWorldVolumetricData) == 0x000008, "Wrong alignment on UPCGWorldVolumetricData");
static_assert(sizeof(UPCGWorldVolumetricData) == 0x0001F0, "Wrong size on UPCGWorldVolumetricData");
static_assert(offsetof(UPCGWorldVolumetricData, World) == 0x000168, "Member 'UPCGWorldVolumetricData::World' has a wrong offset!");
static_assert(offsetof(UPCGWorldVolumetricData, OriginatingComponent) == 0x000170, "Member 'UPCGWorldVolumetricData::OriginatingComponent' has a wrong offset!");
static_assert(offsetof(UPCGWorldVolumetricData, QueryParams) == 0x000178, "Member 'UPCGWorldVolumetricData::QueryParams' has a wrong offset!");

// Class PCG.PCGWorldRaycastElementSettings
// 0x0160 (0x0218 - 0x00B8)
class UPCGWorldRaycastElementSettings final : public UPCGSettings
{
public:
	EPCGWorldRaycastMode                          RaycastMode;                                       // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     OriginInputAttribute;                              // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRayDirections;                            // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RayDirection;                                      // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     RayDirectionAttribute;                             // 0x0108(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     EndPointAttribute;                                 // 0x0130(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideRayLengths;                               // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RayLength;                                         // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     RayLengthAttribute;                                // 0x0168(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGWorldRaycastQueryParams            WorldQueryParams;                                  // 0x0190(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bKeepOriginalPointOnMiss;                          // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbounded;                                        // 0x0211(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldRaycastElementSettings">();
	}
	static class UPCGWorldRaycastElementSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWorldRaycastElementSettings>();
	}
};
static_assert(alignof(UPCGWorldRaycastElementSettings) == 0x000008, "Wrong alignment on UPCGWorldRaycastElementSettings");
static_assert(sizeof(UPCGWorldRaycastElementSettings) == 0x000218, "Wrong size on UPCGWorldRaycastElementSettings");
static_assert(offsetof(UPCGWorldRaycastElementSettings, RaycastMode) == 0x0000B8, "Member 'UPCGWorldRaycastElementSettings::RaycastMode' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, OriginInputAttribute) == 0x0000C0, "Member 'UPCGWorldRaycastElementSettings::OriginInputAttribute' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, bOverrideRayDirections) == 0x0000E8, "Member 'UPCGWorldRaycastElementSettings::bOverrideRayDirections' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, RayDirection) == 0x0000F0, "Member 'UPCGWorldRaycastElementSettings::RayDirection' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, RayDirectionAttribute) == 0x000108, "Member 'UPCGWorldRaycastElementSettings::RayDirectionAttribute' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, EndPointAttribute) == 0x000130, "Member 'UPCGWorldRaycastElementSettings::EndPointAttribute' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, bOverrideRayLengths) == 0x000158, "Member 'UPCGWorldRaycastElementSettings::bOverrideRayLengths' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, RayLength) == 0x000160, "Member 'UPCGWorldRaycastElementSettings::RayLength' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, RayLengthAttribute) == 0x000168, "Member 'UPCGWorldRaycastElementSettings::RayLengthAttribute' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, WorldQueryParams) == 0x000190, "Member 'UPCGWorldRaycastElementSettings::WorldQueryParams' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, bKeepOriginalPointOnMiss) == 0x000210, "Member 'UPCGWorldRaycastElementSettings::bKeepOriginalPointOnMiss' has a wrong offset!");
static_assert(offsetof(UPCGWorldRaycastElementSettings, bUnbounded) == 0x000211, "Member 'UPCGWorldRaycastElementSettings::bUnbounded' has a wrong offset!");

// Class PCG.PCGWorldRayHitData
// 0x0100 (0x0270 - 0x0170)
class UPCGWorldRayHitData final : public UPCGSurfaceData
{
public:
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPCGComponent>           OriginatingComponent;                              // 0x0170(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0178(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGWorldRayHitQueryParams             QueryParams;                                       // 0x01B0(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldRayHitData">();
	}
	static class UPCGWorldRayHitData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWorldRayHitData>();
	}
};
static_assert(alignof(UPCGWorldRayHitData) == 0x000010, "Wrong alignment on UPCGWorldRayHitData");
static_assert(sizeof(UPCGWorldRayHitData) == 0x000270, "Wrong size on UPCGWorldRayHitData");
static_assert(offsetof(UPCGWorldRayHitData, World) == 0x000168, "Member 'UPCGWorldRayHitData::World' has a wrong offset!");
static_assert(offsetof(UPCGWorldRayHitData, OriginatingComponent) == 0x000170, "Member 'UPCGWorldRayHitData::OriginatingComponent' has a wrong offset!");
static_assert(offsetof(UPCGWorldRayHitData, Bounds) == 0x000178, "Member 'UPCGWorldRayHitData::Bounds' has a wrong offset!");
static_assert(offsetof(UPCGWorldRayHitData, QueryParams) == 0x0001B0, "Member 'UPCGWorldRayHitData::QueryParams' has a wrong offset!");

// Class PCG.PCGMetadataBitwiseSettings
// 0x0058 (0x0140 - 0x00E8)
class UPCGMetadataBitwiseSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataBitwiseOperation                  Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataBitwiseSettings">();
	}
	static class UPCGMetadataBitwiseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataBitwiseSettings>();
	}
};
static_assert(alignof(UPCGMetadataBitwiseSettings) == 0x000008, "Wrong alignment on UPCGMetadataBitwiseSettings");
static_assert(sizeof(UPCGMetadataBitwiseSettings) == 0x000140, "Wrong size on UPCGMetadataBitwiseSettings");
static_assert(offsetof(UPCGMetadataBitwiseSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataBitwiseSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataBitwiseSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataBitwiseSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataBitwiseSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataBitwiseSettings::InputSource2' has a wrong offset!");

// Class PCG.PCGMetadataBooleanSettings
// 0x0058 (0x0140 - 0x00E8)
class UPCGMetadataBooleanSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataBooleanOperation                  Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataBooleanSettings">();
	}
	static class UPCGMetadataBooleanSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataBooleanSettings>();
	}
};
static_assert(alignof(UPCGMetadataBooleanSettings) == 0x000008, "Wrong alignment on UPCGMetadataBooleanSettings");
static_assert(sizeof(UPCGMetadataBooleanSettings) == 0x000140, "Wrong size on UPCGMetadataBooleanSettings");
static_assert(offsetof(UPCGMetadataBooleanSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataBooleanSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataBooleanSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataBooleanSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataBooleanSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataBooleanSettings::InputSource2' has a wrong offset!");

// Class PCG.PCGMetadataBreakTransformSettings
// 0x0028 (0x0110 - 0x00E8)
class UPCGMetadataBreakTransformSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataBreakTransformSettings">();
	}
	static class UPCGMetadataBreakTransformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataBreakTransformSettings>();
	}
};
static_assert(alignof(UPCGMetadataBreakTransformSettings) == 0x000008, "Wrong alignment on UPCGMetadataBreakTransformSettings");
static_assert(sizeof(UPCGMetadataBreakTransformSettings) == 0x000110, "Wrong size on UPCGMetadataBreakTransformSettings");
static_assert(offsetof(UPCGMetadataBreakTransformSettings, InputSource) == 0x0000E8, "Member 'UPCGMetadataBreakTransformSettings::InputSource' has a wrong offset!");

// Class PCG.PCGActorHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGActorHelpers final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGActorHelpers">();
	}
	static class UPCGActorHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGActorHelpers>();
	}
};
static_assert(alignof(UPCGActorHelpers) == 0x000008, "Wrong alignment on UPCGActorHelpers");
static_assert(sizeof(UPCGActorHelpers) == 0x000028, "Wrong size on UPCGActorHelpers");

// Class PCG.PCGMetadataBreakVectorSettings
// 0x0028 (0x0110 - 0x00E8)
class UPCGMetadataBreakVectorSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataBreakVectorSettings">();
	}
	static class UPCGMetadataBreakVectorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataBreakVectorSettings>();
	}
};
static_assert(alignof(UPCGMetadataBreakVectorSettings) == 0x000008, "Wrong alignment on UPCGMetadataBreakVectorSettings");
static_assert(sizeof(UPCGMetadataBreakVectorSettings) == 0x000110, "Wrong size on UPCGMetadataBreakVectorSettings");
static_assert(offsetof(UPCGMetadataBreakVectorSettings, InputSource) == 0x0000E8, "Member 'UPCGMetadataBreakVectorSettings::InputSource' has a wrong offset!");

// Class PCG.PCGMetadataCompareSettings
// 0x0060 (0x0148 - 0x00E8)
class UPCGMetadataCompareSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataCompareOperation                  Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Tolerance;                                         // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataCompareSettings">();
	}
	static class UPCGMetadataCompareSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataCompareSettings>();
	}
};
static_assert(alignof(UPCGMetadataCompareSettings) == 0x000008, "Wrong alignment on UPCGMetadataCompareSettings");
static_assert(sizeof(UPCGMetadataCompareSettings) == 0x000148, "Wrong size on UPCGMetadataCompareSettings");
static_assert(offsetof(UPCGMetadataCompareSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataCompareSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataCompareSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataCompareSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataCompareSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataCompareSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataCompareSettings, Tolerance) == 0x000140, "Member 'UPCGMetadataCompareSettings::Tolerance' has a wrong offset!");

// Class PCG.PCGGenSourceEditorCamera
// 0x0008 (0x0030 - 0x0028)
class UPCGGenSourceEditorCamera final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenSourceEditorCamera">();
	}
	static class UPCGGenSourceEditorCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGenSourceEditorCamera>();
	}
};
static_assert(alignof(UPCGGenSourceEditorCamera) == 0x000008, "Wrong alignment on UPCGGenSourceEditorCamera");
static_assert(sizeof(UPCGGenSourceEditorCamera) == 0x000030, "Wrong size on UPCGGenSourceEditorCamera");

// Class PCG.PCGMetadataMakeTransformSettings
// 0x0078 (0x0160 - 0x00E8)
class UPCGMetadataMakeTransformSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0110(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0138(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataMakeTransformSettings">();
	}
	static class UPCGMetadataMakeTransformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataMakeTransformSettings>();
	}
};
static_assert(alignof(UPCGMetadataMakeTransformSettings) == 0x000008, "Wrong alignment on UPCGMetadataMakeTransformSettings");
static_assert(sizeof(UPCGMetadataMakeTransformSettings) == 0x000160, "Wrong size on UPCGMetadataMakeTransformSettings");
static_assert(offsetof(UPCGMetadataMakeTransformSettings, InputSource1) == 0x0000E8, "Member 'UPCGMetadataMakeTransformSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeTransformSettings, InputSource2) == 0x000110, "Member 'UPCGMetadataMakeTransformSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeTransformSettings, InputSource3) == 0x000138, "Member 'UPCGMetadataMakeTransformSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGMetadataMakeVectorSettings
// 0x00A8 (0x0190 - 0x00E8)
class UPCGMetadataMakeVectorSettings final : public UPCGMetadataSettingsBase
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0110(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0138(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource4;                                      // 0x0160(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             OutputType;                                        // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataMakeVector3                       MakeVector3Op;                                     // 0x0189(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataMakeVector4                       MakeVector4Op;                                     // 0x018A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18B[0x5];                                      // 0x018B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataMakeVectorSettings">();
	}
	static class UPCGMetadataMakeVectorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataMakeVectorSettings>();
	}
};
static_assert(alignof(UPCGMetadataMakeVectorSettings) == 0x000008, "Wrong alignment on UPCGMetadataMakeVectorSettings");
static_assert(sizeof(UPCGMetadataMakeVectorSettings) == 0x000190, "Wrong size on UPCGMetadataMakeVectorSettings");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, InputSource1) == 0x0000E8, "Member 'UPCGMetadataMakeVectorSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, InputSource2) == 0x000110, "Member 'UPCGMetadataMakeVectorSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, InputSource3) == 0x000138, "Member 'UPCGMetadataMakeVectorSettings::InputSource3' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, InputSource4) == 0x000160, "Member 'UPCGMetadataMakeVectorSettings::InputSource4' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, OutputType) == 0x000188, "Member 'UPCGMetadataMakeVectorSettings::OutputType' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, MakeVector3Op) == 0x000189, "Member 'UPCGMetadataMakeVectorSettings::MakeVector3Op' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMakeVectorSettings, MakeVector4Op) == 0x00018A, "Member 'UPCGMetadataMakeVectorSettings::MakeVector4Op' has a wrong offset!");

// Class PCG.PCGMetadataMathsSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataMathsSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataMathsOperation                    Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRoundingOpToInt;                             // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceOpToDouble;                                  // 0x00EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataMathsSettings">();
	}
	static class UPCGMetadataMathsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataMathsSettings>();
	}
};
static_assert(alignof(UPCGMetadataMathsSettings) == 0x000008, "Wrong alignment on UPCGMetadataMathsSettings");
static_assert(sizeof(UPCGMetadataMathsSettings) == 0x000168, "Wrong size on UPCGMetadataMathsSettings");
static_assert(offsetof(UPCGMetadataMathsSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataMathsSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMathsSettings, bForceRoundingOpToInt) == 0x0000EA, "Member 'UPCGMetadataMathsSettings::bForceRoundingOpToInt' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMathsSettings, bForceOpToDouble) == 0x0000EB, "Member 'UPCGMetadataMathsSettings::bForceOpToDouble' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMathsSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataMathsSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMathsSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataMathsSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataMathsSettings, InputSource3) == 0x000140, "Member 'UPCGMetadataMathsSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGMetadataRenameSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGMetadataRenameSettings final : public UPCGSettings
{
public:
	class FName                                   AttributeToRename;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewAttributeName;                                  // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataRenameSettings">();
	}
	static class UPCGMetadataRenameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataRenameSettings>();
	}
};
static_assert(alignof(UPCGMetadataRenameSettings) == 0x000008, "Wrong alignment on UPCGMetadataRenameSettings");
static_assert(sizeof(UPCGMetadataRenameSettings) == 0x0000C8, "Wrong size on UPCGMetadataRenameSettings");
static_assert(offsetof(UPCGMetadataRenameSettings, AttributeToRename) == 0x0000B8, "Member 'UPCGMetadataRenameSettings::AttributeToRename' has a wrong offset!");
static_assert(offsetof(UPCGMetadataRenameSettings, NewAttributeName) == 0x0000C0, "Member 'UPCGMetadataRenameSettings::NewAttributeName' has a wrong offset!");

// Class PCG.PCGMetadataStringOpSettings
// 0x0080 (0x0168 - 0x00E8)
class UPCGMetadataStringOpSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataStringOperation                   Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource3;                                      // 0x0140(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataStringOpSettings">();
	}
	static class UPCGMetadataStringOpSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataStringOpSettings>();
	}
};
static_assert(alignof(UPCGMetadataStringOpSettings) == 0x000008, "Wrong alignment on UPCGMetadataStringOpSettings");
static_assert(sizeof(UPCGMetadataStringOpSettings) == 0x000168, "Wrong size on UPCGMetadataStringOpSettings");
static_assert(offsetof(UPCGMetadataStringOpSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataStringOpSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataStringOpSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataStringOpSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataStringOpSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataStringOpSettings::InputSource2' has a wrong offset!");
static_assert(offsetof(UPCGMetadataStringOpSettings, InputSource3) == 0x000140, "Member 'UPCGMetadataStringOpSettings::InputSource3' has a wrong offset!");

// Class PCG.PCGMetadataTrigSettings
// 0x0058 (0x0140 - 0x00E8)
class UPCGMetadataTrigSettings final : public UPCGMetadataSettingsBase
{
public:
	EPCGMetadataTrigOperation                     Operation;                                         // 0x00E8(0x0002)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputSource1;                                      // 0x00F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSource2;                                      // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataTrigSettings">();
	}
	static class UPCGMetadataTrigSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataTrigSettings>();
	}
};
static_assert(alignof(UPCGMetadataTrigSettings) == 0x000008, "Wrong alignment on UPCGMetadataTrigSettings");
static_assert(sizeof(UPCGMetadataTrigSettings) == 0x000140, "Wrong size on UPCGMetadataTrigSettings");
static_assert(offsetof(UPCGMetadataTrigSettings, Operation) == 0x0000E8, "Member 'UPCGMetadataTrigSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTrigSettings, InputSource1) == 0x0000F0, "Member 'UPCGMetadataTrigSettings::InputSource1' has a wrong offset!");
static_assert(offsetof(UPCGMetadataTrigSettings, InputSource2) == 0x000118, "Member 'UPCGMetadataTrigSettings::InputSource2' has a wrong offset!");

// Class PCG.PCGAttributeGetFromIndexSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGAttributeGetFromIndexSettings final : public UPCGSettings
{
public:
	int32                                         Index_0;                                           // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeGetFromIndexSettings">();
	}
	static class UPCGAttributeGetFromIndexSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeGetFromIndexSettings>();
	}
};
static_assert(alignof(UPCGAttributeGetFromIndexSettings) == 0x000008, "Wrong alignment on UPCGAttributeGetFromIndexSettings");
static_assert(sizeof(UPCGAttributeGetFromIndexSettings) == 0x0000C0, "Wrong size on UPCGAttributeGetFromIndexSettings");
static_assert(offsetof(UPCGAttributeGetFromIndexSettings, Index_0) == 0x0000B8, "Member 'UPCGAttributeGetFromIndexSettings::Index_0' has a wrong offset!");

// Class PCG.PCGAttributeNoiseSettings
// 0x0060 (0x0118 - 0x00B8)
class UPCGAttributeNoiseSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    OutputTarget;                                      // 0x00E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttributeNoiseMode                        Mode;                                              // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseMin;                                          // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseMax;                                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertSource;                                     // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampResult;                                      // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasSpatialToPointDeprecation;                     // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeNoiseSettings">();
	}
	static class UPCGAttributeNoiseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeNoiseSettings>();
	}
};
static_assert(alignof(UPCGAttributeNoiseSettings) == 0x000008, "Wrong alignment on UPCGAttributeNoiseSettings");
static_assert(sizeof(UPCGAttributeNoiseSettings) == 0x000118, "Wrong size on UPCGAttributeNoiseSettings");
static_assert(offsetof(UPCGAttributeNoiseSettings, InputSource) == 0x0000B8, "Member 'UPCGAttributeNoiseSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, OutputTarget) == 0x0000E0, "Member 'UPCGAttributeNoiseSettings::OutputTarget' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, Mode) == 0x000108, "Member 'UPCGAttributeNoiseSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, NoiseMin) == 0x00010C, "Member 'UPCGAttributeNoiseSettings::NoiseMin' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, NoiseMax) == 0x000110, "Member 'UPCGAttributeNoiseSettings::NoiseMax' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, bInvertSource) == 0x000114, "Member 'UPCGAttributeNoiseSettings::bInvertSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, bClampResult) == 0x000115, "Member 'UPCGAttributeNoiseSettings::bClampResult' has a wrong offset!");
static_assert(offsetof(UPCGAttributeNoiseSettings, bHasSpatialToPointDeprecation) == 0x000116, "Member 'UPCGAttributeNoiseSettings::bHasSpatialToPointDeprecation' has a wrong offset!");

// Class PCG.PCGAttributeSelectSettings
// 0x0058 (0x0110 - 0x00B8)
class UPCGAttributeSelectSettings final : public UPCGSettings
{
public:
	struct FPCGAttributePropertyInputSelector     InputSource;                                       // 0x00B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutputAttributeName;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttributeSelectOperation                  Operation;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttributeSelectAxis                       Axis;                                              // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               CustomAxis;                                        // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGAttributeSelectSettings">();
	}
	static class UPCGAttributeSelectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGAttributeSelectSettings>();
	}
};
static_assert(alignof(UPCGAttributeSelectSettings) == 0x000010, "Wrong alignment on UPCGAttributeSelectSettings");
static_assert(sizeof(UPCGAttributeSelectSettings) == 0x000110, "Wrong size on UPCGAttributeSelectSettings");
static_assert(offsetof(UPCGAttributeSelectSettings, InputSource) == 0x0000B8, "Member 'UPCGAttributeSelectSettings::InputSource' has a wrong offset!");
static_assert(offsetof(UPCGAttributeSelectSettings, OutputAttributeName) == 0x0000E0, "Member 'UPCGAttributeSelectSettings::OutputAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGAttributeSelectSettings, Operation) == 0x0000E8, "Member 'UPCGAttributeSelectSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGAttributeSelectSettings, Axis) == 0x0000EC, "Member 'UPCGAttributeSelectSettings::Axis' has a wrong offset!");
static_assert(offsetof(UPCGAttributeSelectSettings, CustomAxis) == 0x0000F0, "Member 'UPCGAttributeSelectSettings::CustomAxis' has a wrong offset!");

// Class PCG.PCGConvertToAttributeSetSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGConvertToAttributeSetSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGConvertToAttributeSetSettings">();
	}
	static class UPCGConvertToAttributeSetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGConvertToAttributeSetSettings>();
	}
};
static_assert(alignof(UPCGConvertToAttributeSetSettings) == 0x000008, "Wrong alignment on UPCGConvertToAttributeSetSettings");
static_assert(sizeof(UPCGConvertToAttributeSetSettings) == 0x0000B8, "Wrong size on UPCGConvertToAttributeSetSettings");

// Class PCG.PCGCopyPointsSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGCopyPointsSettings final : public UPCGSettings
{
public:
	EPCGCopyPointsInheritanceMode                 RotationInheritance;                               // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCopyPointsInheritanceMode                 ScaleInheritance;                                  // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCopyPointsInheritanceMode                 ColorInheritance;                                  // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCopyPointsInheritanceMode                 SeedInheritance;                                   // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCopyPointsMetadataInheritanceMode         AttributeInheritance;                              // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCopyPointsTagInheritanceMode              TagInheritance;                                    // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyEachSourceOnEveryTarget;                      // 0x00BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCopyPointsSettings">();
	}
	static class UPCGCopyPointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCopyPointsSettings>();
	}
};
static_assert(alignof(UPCGCopyPointsSettings) == 0x000008, "Wrong alignment on UPCGCopyPointsSettings");
static_assert(sizeof(UPCGCopyPointsSettings) == 0x0000C0, "Wrong size on UPCGCopyPointsSettings");
static_assert(offsetof(UPCGCopyPointsSettings, RotationInheritance) == 0x0000B8, "Member 'UPCGCopyPointsSettings::RotationInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, ScaleInheritance) == 0x0000B9, "Member 'UPCGCopyPointsSettings::ScaleInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, ColorInheritance) == 0x0000BA, "Member 'UPCGCopyPointsSettings::ColorInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, SeedInheritance) == 0x0000BB, "Member 'UPCGCopyPointsSettings::SeedInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, AttributeInheritance) == 0x0000BC, "Member 'UPCGCopyPointsSettings::AttributeInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, TagInheritance) == 0x0000BD, "Member 'UPCGCopyPointsSettings::TagInheritance' has a wrong offset!");
static_assert(offsetof(UPCGCopyPointsSettings, bCopyEachSourceOnEveryTarget) == 0x0000BE, "Member 'UPCGCopyPointsSettings::bCopyEachSourceOnEveryTarget' has a wrong offset!");

// Class PCG.PCGCreateAttributeSetSettings
// 0x01A8 (0x0260 - 0x00B8)
class UPCGCreateAttributeSetSettings final : public UPCGSettings
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGMetadataTypesConstantStruct        AttributeTypes;                                    // 0x00C0(0x0170)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputNoSourceSelector OutputTarget;                                 // 0x0230(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreateAttributeSetSettings">();
	}
	static class UPCGCreateAttributeSetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreateAttributeSetSettings>();
	}
};
static_assert(alignof(UPCGCreateAttributeSetSettings) == 0x000010, "Wrong alignment on UPCGCreateAttributeSetSettings");
static_assert(sizeof(UPCGCreateAttributeSetSettings) == 0x000260, "Wrong size on UPCGCreateAttributeSetSettings");
static_assert(offsetof(UPCGCreateAttributeSetSettings, AttributeTypes) == 0x0000C0, "Member 'UPCGCreateAttributeSetSettings::AttributeTypes' has a wrong offset!");
static_assert(offsetof(UPCGCreateAttributeSetSettings, OutputTarget) == 0x000230, "Member 'UPCGCreateAttributeSetSettings::OutputTarget' has a wrong offset!");

// Class PCG.PCGCreatePointsSphereSettings
// 0x0090 (0x0148 - 0x00B8)
class UPCGCreatePointsSphereSettings final : public UPCGSettings
{
public:
	EPCGSphereGeneration                          SphereGeneration;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGCoordinateSpace                           CoordinateSpace;                                   // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSpherePointOrientation                    PointOrientation;                                  // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Origin;                                            // 0x00C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Radius;                                            // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeodesicSubdivisions;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Theta;                                             // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Phi;                                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LatitudinalSegments;                               // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LongitudinalSegments;                              // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleCount;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PoissonDistance;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoissonMaxAttempts;                                // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LatitudinalStartAngle;                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LatitudinalEndAngle;                               // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LongitudinalStartAngle;                            // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        LongitudinalEndAngle;                              // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Jitter;                                            // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointSteepness;                                    // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullPointsOutsideVolume;                          // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreatePointsSphereSettings">();
	}
	static class UPCGCreatePointsSphereSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreatePointsSphereSettings>();
	}
};
static_assert(alignof(UPCGCreatePointsSphereSettings) == 0x000008, "Wrong alignment on UPCGCreatePointsSphereSettings");
static_assert(sizeof(UPCGCreatePointsSphereSettings) == 0x000148, "Wrong size on UPCGCreatePointsSphereSettings");
static_assert(offsetof(UPCGCreatePointsSphereSettings, SphereGeneration) == 0x0000B8, "Member 'UPCGCreatePointsSphereSettings::SphereGeneration' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, CoordinateSpace) == 0x0000B9, "Member 'UPCGCreatePointsSphereSettings::CoordinateSpace' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, PointOrientation) == 0x0000BA, "Member 'UPCGCreatePointsSphereSettings::PointOrientation' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, Origin) == 0x0000C0, "Member 'UPCGCreatePointsSphereSettings::Origin' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, Radius) == 0x0000D8, "Member 'UPCGCreatePointsSphereSettings::Radius' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, GeodesicSubdivisions) == 0x0000E0, "Member 'UPCGCreatePointsSphereSettings::GeodesicSubdivisions' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, Theta) == 0x0000E8, "Member 'UPCGCreatePointsSphereSettings::Theta' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, Phi) == 0x0000F0, "Member 'UPCGCreatePointsSphereSettings::Phi' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LatitudinalSegments) == 0x0000F8, "Member 'UPCGCreatePointsSphereSettings::LatitudinalSegments' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LongitudinalSegments) == 0x0000FC, "Member 'UPCGCreatePointsSphereSettings::LongitudinalSegments' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, SampleCount) == 0x000100, "Member 'UPCGCreatePointsSphereSettings::SampleCount' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, PoissonDistance) == 0x000108, "Member 'UPCGCreatePointsSphereSettings::PoissonDistance' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, PoissonMaxAttempts) == 0x000110, "Member 'UPCGCreatePointsSphereSettings::PoissonMaxAttempts' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LatitudinalStartAngle) == 0x000118, "Member 'UPCGCreatePointsSphereSettings::LatitudinalStartAngle' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LatitudinalEndAngle) == 0x000120, "Member 'UPCGCreatePointsSphereSettings::LatitudinalEndAngle' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LongitudinalStartAngle) == 0x000128, "Member 'UPCGCreatePointsSphereSettings::LongitudinalStartAngle' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, LongitudinalEndAngle) == 0x000130, "Member 'UPCGCreatePointsSphereSettings::LongitudinalEndAngle' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, Jitter) == 0x000138, "Member 'UPCGCreatePointsSphereSettings::Jitter' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, PointSteepness) == 0x000140, "Member 'UPCGCreatePointsSphereSettings::PointSteepness' has a wrong offset!");
static_assert(offsetof(UPCGCreatePointsSphereSettings, bCullPointsOutsideVolume) == 0x000144, "Member 'UPCGCreatePointsSphereSettings::bCullPointsOutsideVolume' has a wrong offset!");

// Class PCG.PCGCreateSurfaceFromSplineSettings
// 0x0000 (0x00B8 - 0x00B8)
class UPCGCreateSurfaceFromSplineSettings final : public UPCGSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGCreateSurfaceFromSplineSettings">();
	}
	static class UPCGCreateSurfaceFromSplineSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGCreateSurfaceFromSplineSettings>();
	}
};
static_assert(alignof(UPCGCreateSurfaceFromSplineSettings) == 0x000008, "Wrong alignment on UPCGCreateSurfaceFromSplineSettings");
static_assert(sizeof(UPCGCreateSurfaceFromSplineSettings) == 0x0000B8, "Wrong size on UPCGCreateSurfaceFromSplineSettings");

// Class PCG.PCGDataTableRowToParamDataSettings
// 0x0038 (0x00F0 - 0x00B8)
class UPCGDataTableRowToParamDataSettings final : public UPCGSettings
{
public:
	class FName                                   RowName;                                           // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              DataTable;                                         // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDataTableRowToParamDataSettings">();
	}
	static class UPCGDataTableRowToParamDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDataTableRowToParamDataSettings>();
	}
};
static_assert(alignof(UPCGDataTableRowToParamDataSettings) == 0x000008, "Wrong alignment on UPCGDataTableRowToParamDataSettings");
static_assert(sizeof(UPCGDataTableRowToParamDataSettings) == 0x0000F0, "Wrong size on UPCGDataTableRowToParamDataSettings");
static_assert(offsetof(UPCGDataTableRowToParamDataSettings, RowName) == 0x0000B8, "Member 'UPCGDataTableRowToParamDataSettings::RowName' has a wrong offset!");
static_assert(offsetof(UPCGDataTableRowToParamDataSettings, DataTable) == 0x0000C0, "Member 'UPCGDataTableRowToParamDataSettings::DataTable' has a wrong offset!");
static_assert(offsetof(UPCGDataTableRowToParamDataSettings, bSynchronousLoad) == 0x0000E8, "Member 'UPCGDataTableRowToParamDataSettings::bSynchronousLoad' has a wrong offset!");

// Class PCG.PCGDensityFilterSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGDensityFilterSettings final : public UPCGSettings
{
public:
	float                                         LowerBound;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperBound;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertFilter;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDensityFilterSettings">();
	}
	static class UPCGDensityFilterSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDensityFilterSettings>();
	}
};
static_assert(alignof(UPCGDensityFilterSettings) == 0x000008, "Wrong alignment on UPCGDensityFilterSettings");
static_assert(sizeof(UPCGDensityFilterSettings) == 0x0000C8, "Wrong size on UPCGDensityFilterSettings");
static_assert(offsetof(UPCGDensityFilterSettings, LowerBound) == 0x0000B8, "Member 'UPCGDensityFilterSettings::LowerBound' has a wrong offset!");
static_assert(offsetof(UPCGDensityFilterSettings, UpperBound) == 0x0000BC, "Member 'UPCGDensityFilterSettings::UpperBound' has a wrong offset!");
static_assert(offsetof(UPCGDensityFilterSettings, bInvertFilter) == 0x0000C0, "Member 'UPCGDensityFilterSettings::bInvertFilter' has a wrong offset!");

// Class PCG.PCGDifferenceSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGDifferenceSettings final : public UPCGSettings
{
public:
	EPCGDifferenceDensityFunction                 DensityFunction;                                   // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGDifferenceMode                            Mode;                                              // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiffMetadata;                                     // 0x00BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepZeroDensityPoints;                            // 0x00BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGDifferenceSettings">();
	}
	static class UPCGDifferenceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGDifferenceSettings>();
	}
};
static_assert(alignof(UPCGDifferenceSettings) == 0x000008, "Wrong alignment on UPCGDifferenceSettings");
static_assert(sizeof(UPCGDifferenceSettings) == 0x0000C0, "Wrong size on UPCGDifferenceSettings");
static_assert(offsetof(UPCGDifferenceSettings, DensityFunction) == 0x0000B8, "Member 'UPCGDifferenceSettings::DensityFunction' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceSettings, Mode) == 0x0000B9, "Member 'UPCGDifferenceSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceSettings, bDiffMetadata) == 0x0000BA, "Member 'UPCGDifferenceSettings::bDiffMetadata' has a wrong offset!");
static_assert(offsetof(UPCGDifferenceSettings, bKeepZeroDensityPoints) == 0x0000BB, "Member 'UPCGDifferenceSettings::bKeepZeroDensityPoints' has a wrong offset!");

// Class PCG.PCGBlueprintElement
// 0x0040 (0x0068 - 0x0028)
class UPCGBlueprintElement : public UObject
{
public:
	bool                                          bIsCacheable;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComputeFullDataCrc;                               // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresGameThread;                               // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGPinProperties>              CustomInputPins;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPCGPinProperties>              CustomOutputPins;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bHasDefaultInPin;                                  // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDefaultOutPin;                                 // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDynamicPins;                                   // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x15];                                      // 0x0053(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPreconfiguredSettings(const struct FPCGPreConfiguredSettingsInfo& InPreconfigureInfo);
	void Execute(const struct FPCGDataCollection& Input, struct FPCGDataCollection* Output);
	void ExecuteWithContext(struct FPCGContext& InContext, const struct FPCGDataCollection& Input, struct FPCGDataCollection* Output);

	TSet<class FName> CustomInputLabels() const;
	TSet<class FName> CustomOutputLabels() const;
	int32 DynamicPinTypesOverride(const class UPCGSettings* InSettings, const class UPCGPin* InPin) const;
	struct FPCGContext GetContext() const;
	bool GetInputPinByLabel(class FName InPinLabel, struct FPCGPinProperties* OutFoundPin) const;
	TArray<struct FPCGPinProperties> GetInputPins() const;
	bool GetOutputPinByLabel(class FName InPinLabel, struct FPCGPinProperties* OutFoundPin) const;
	TArray<struct FPCGPinProperties> GetOutputPins() const;
	struct FRandomStream GetRandomStream(struct FPCGContext& InContext) const;
	int32 GetSeed(struct FPCGContext& InContext) const;
	bool IsCacheableOverride() const;
	void IterationLoop(struct FPCGContext& InContext, int64 NumIterations, class UPCGPointData** OutData, const class UPCGSpatialData* OptionalA, const class UPCGSpatialData* OptionalB, class UPCGPointData* OptionalOutData) const;
	bool IterationLoopBody(const struct FPCGContext& InContext, int64 Iteration, const class UPCGSpatialData* InA, const class UPCGSpatialData* InB, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata) const;
	void NestedLoop(struct FPCGContext& InContext, const class UPCGPointData* InOuterData, const class UPCGPointData* InInnerData, class UPCGPointData** OutData, class UPCGPointData* OptionalOutData) const;
	bool NestedLoopBody(const struct FPCGContext& InContext, const class UPCGPointData* InOuterData, const class UPCGPointData* InInnerData, const struct FPCGPoint& InOuterPoint, const struct FPCGPoint& InInnerPoint, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata, int64 OuterIteration, int64 InnerIteration) const;
	struct FLinearColor NodeColorOverride() const;
	class FName NodeTitleOverride() const;
	EPCGSettingsType NodeTypeOverride() const;
	void PointLoop(struct FPCGContext& InContext, const class UPCGPointData* InData, class UPCGPointData** OutData, class UPCGPointData* OptionalOutData) const;
	bool PointLoopBody(const struct FPCGContext& InContext, const class UPCGPointData* InData, const struct FPCGPoint& InPoint, struct FPCGPoint* OutPoint, class UPCGMetadata* OutMetadata, int64 Iteration) const;
	void VariableLoop(struct FPCGContext& InContext, const class UPCGPointData* InData, class UPCGPointData** OutData, class UPCGPointData* OptionalOutData) const;
	TArray<struct FPCGPoint> VariableLoopBody(const struct FPCGContext& InContext, const class UPCGPointData* InData, const struct FPCGPoint& InPoint, class UPCGMetadata* OutMetadata, int64 Iteration) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBlueprintElement">();
	}
	static class UPCGBlueprintElement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBlueprintElement>();
	}
};
static_assert(alignof(UPCGBlueprintElement) == 0x000008, "Wrong alignment on UPCGBlueprintElement");
static_assert(sizeof(UPCGBlueprintElement) == 0x000068, "Wrong size on UPCGBlueprintElement");
static_assert(offsetof(UPCGBlueprintElement, bIsCacheable) == 0x000028, "Member 'UPCGBlueprintElement::bIsCacheable' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, bComputeFullDataCrc) == 0x000029, "Member 'UPCGBlueprintElement::bComputeFullDataCrc' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, bRequiresGameThread) == 0x00002A, "Member 'UPCGBlueprintElement::bRequiresGameThread' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, CustomInputPins) == 0x000030, "Member 'UPCGBlueprintElement::CustomInputPins' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, CustomOutputPins) == 0x000040, "Member 'UPCGBlueprintElement::CustomOutputPins' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, bHasDefaultInPin) == 0x000050, "Member 'UPCGBlueprintElement::bHasDefaultInPin' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, bHasDefaultOutPin) == 0x000051, "Member 'UPCGBlueprintElement::bHasDefaultOutPin' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintElement, bHasDynamicPins) == 0x000052, "Member 'UPCGBlueprintElement::bHasDynamicPins' has a wrong offset!");

// Class PCG.PCGBlueprintSettings
// 0x0010 (0x00C8 - 0x00B8)
class UPCGBlueprintSettings final : public UPCGSettings
{
public:
	TSubclassOf<class UPCGBlueprintElement>       BlueprintElementType;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPCGBlueprintElement*                   BlueprintElementInstance;                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetElementType(TSubclassOf<class UPCGBlueprintElement> InElementType, class UPCGBlueprintElement** ElementInstance);

	TSubclassOf<class UPCGBlueprintElement> GetElementType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBlueprintSettings">();
	}
	static class UPCGBlueprintSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBlueprintSettings>();
	}
};
static_assert(alignof(UPCGBlueprintSettings) == 0x000008, "Wrong alignment on UPCGBlueprintSettings");
static_assert(sizeof(UPCGBlueprintSettings) == 0x0000C8, "Wrong size on UPCGBlueprintSettings");
static_assert(offsetof(UPCGBlueprintSettings, BlueprintElementType) == 0x0000B8, "Member 'UPCGBlueprintSettings::BlueprintElementType' has a wrong offset!");
static_assert(offsetof(UPCGBlueprintSettings, BlueprintElementInstance) == 0x0000C0, "Member 'UPCGBlueprintSettings::BlueprintElementInstance' has a wrong offset!");

// Class PCG.PCGFilterByTagSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGFilterByTagSettings final : public UPCGFilterDataBaseSettings
{
public:
	EPCGFilterByTagOperation                      Operation;                                         // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGStringMatchingOperator                    Operator;                                          // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedTags;                                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTokenizeOnWhiteSpace;                             // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGFilterByTagSettings">();
	}
	static class UPCGFilterByTagSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGFilterByTagSettings>();
	}
};
static_assert(alignof(UPCGFilterByTagSettings) == 0x000008, "Wrong alignment on UPCGFilterByTagSettings");
static_assert(sizeof(UPCGFilterByTagSettings) == 0x0000D8, "Wrong size on UPCGFilterByTagSettings");
static_assert(offsetof(UPCGFilterByTagSettings, Operation) == 0x0000B8, "Member 'UPCGFilterByTagSettings::Operation' has a wrong offset!");
static_assert(offsetof(UPCGFilterByTagSettings, Operator) == 0x0000BC, "Member 'UPCGFilterByTagSettings::Operator' has a wrong offset!");
static_assert(offsetof(UPCGFilterByTagSettings, SelectedTags) == 0x0000C0, "Member 'UPCGFilterByTagSettings::SelectedTags' has a wrong offset!");
static_assert(offsetof(UPCGFilterByTagSettings, bTokenizeOnWhiteSpace) == 0x0000D0, "Member 'UPCGFilterByTagSettings::bTokenizeOnWhiteSpace' has a wrong offset!");

// Class PCG.PCGGetTagsSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGGetTagsSettings final : public UPCGSettings
{
public:
	bool                                          bExtractTagValues;                                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetTagsSettings">();
	}
	static class UPCGGetTagsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetTagsSettings>();
	}
};
static_assert(alignof(UPCGGetTagsSettings) == 0x000008, "Wrong alignment on UPCGGetTagsSettings");
static_assert(sizeof(UPCGGetTagsSettings) == 0x0000C0, "Wrong size on UPCGGetTagsSettings");
static_assert(offsetof(UPCGGetTagsSettings, bExtractTagValues) == 0x0000B8, "Member 'UPCGGetTagsSettings::bExtractTagValues' has a wrong offset!");

// Class PCG.PCGGetLoopIndexSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGGetLoopIndexSettings final : public UPCGSettings
{
public:
	bool                                          bWarnIfCalledOutsideOfLoop;                        // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetLoopIndexSettings">();
	}
	static class UPCGGetLoopIndexSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetLoopIndexSettings>();
	}
};
static_assert(alignof(UPCGGetLoopIndexSettings) == 0x000008, "Wrong alignment on UPCGGetLoopIndexSettings");
static_assert(sizeof(UPCGGetLoopIndexSettings) == 0x0000C0, "Wrong size on UPCGGetLoopIndexSettings");
static_assert(offsetof(UPCGGetLoopIndexSettings, bWarnIfCalledOutsideOfLoop) == 0x0000B8, "Member 'UPCGGetLoopIndexSettings::bWarnIfCalledOutsideOfLoop' has a wrong offset!");

// Class PCG.PCGInnerIntersectionSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGInnerIntersectionSettings final : public UPCGSettings
{
public:
	EPCGIntersectionDensityFunction               DensityFunction;                                   // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepZeroDensityPoints;                            // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInnerIntersectionSettings">();
	}
	static class UPCGInnerIntersectionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInnerIntersectionSettings>();
	}
};
static_assert(alignof(UPCGInnerIntersectionSettings) == 0x000008, "Wrong alignment on UPCGInnerIntersectionSettings");
static_assert(sizeof(UPCGInnerIntersectionSettings) == 0x0000C0, "Wrong size on UPCGInnerIntersectionSettings");
static_assert(offsetof(UPCGInnerIntersectionSettings, DensityFunction) == 0x0000B8, "Member 'UPCGInnerIntersectionSettings::DensityFunction' has a wrong offset!");
static_assert(offsetof(UPCGInnerIntersectionSettings, bKeepZeroDensityPoints) == 0x0000B9, "Member 'UPCGInnerIntersectionSettings::bKeepZeroDensityPoints' has a wrong offset!");

// Class PCG.PCGMatchAndSetAttributesSettings
// 0x0228 (0x02E0 - 0x00B8)
class UPCGMatchAndSetAttributesSettings final : public UPCGSettings
{
public:
	bool                                          bMatchAttributes;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputAttribute;                                    // 0x00C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MatchAttribute;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepUnmatched;                                    // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFindNearest;                                      // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGMatchMaxDistanceMode                      MaxDistanceMode;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGMetadataTypesConstantStruct        MaxDistanceForNearestMatch;                        // 0x0100(0x0170)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     MaxDistanceInputAttribute;                         // 0x0270(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInputWeightAttribute;                          // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     InputWeightAttribute;                              // 0x02A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWeightAttribute;                               // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeightAttribute;                                   // 0x02CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnIfNoMatchData;                                // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D5[0xB];                                      // 0x02D5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMatchAndSetAttributesSettings">();
	}
	static class UPCGMatchAndSetAttributesSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMatchAndSetAttributesSettings>();
	}
};
static_assert(alignof(UPCGMatchAndSetAttributesSettings) == 0x000010, "Wrong alignment on UPCGMatchAndSetAttributesSettings");
static_assert(sizeof(UPCGMatchAndSetAttributesSettings) == 0x0002E0, "Wrong size on UPCGMatchAndSetAttributesSettings");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bMatchAttributes) == 0x0000B8, "Member 'UPCGMatchAndSetAttributesSettings::bMatchAttributes' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, InputAttribute) == 0x0000C0, "Member 'UPCGMatchAndSetAttributesSettings::InputAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, MatchAttribute) == 0x0000E8, "Member 'UPCGMatchAndSetAttributesSettings::MatchAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bKeepUnmatched) == 0x0000F0, "Member 'UPCGMatchAndSetAttributesSettings::bKeepUnmatched' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bFindNearest) == 0x0000F1, "Member 'UPCGMatchAndSetAttributesSettings::bFindNearest' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, MaxDistanceMode) == 0x0000F4, "Member 'UPCGMatchAndSetAttributesSettings::MaxDistanceMode' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, MaxDistanceForNearestMatch) == 0x000100, "Member 'UPCGMatchAndSetAttributesSettings::MaxDistanceForNearestMatch' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, MaxDistanceInputAttribute) == 0x000270, "Member 'UPCGMatchAndSetAttributesSettings::MaxDistanceInputAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bUseInputWeightAttribute) == 0x000298, "Member 'UPCGMatchAndSetAttributesSettings::bUseInputWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, InputWeightAttribute) == 0x0002A0, "Member 'UPCGMatchAndSetAttributesSettings::InputWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bUseWeightAttribute) == 0x0002C8, "Member 'UPCGMatchAndSetAttributesSettings::bUseWeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, WeightAttribute) == 0x0002CC, "Member 'UPCGMatchAndSetAttributesSettings::WeightAttribute' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetAttributesSettings, bWarnIfNoMatchData) == 0x0002D4, "Member 'UPCGMatchAndSetAttributesSettings::bWarnIfNoMatchData' has a wrong offset!");

// Class PCG.PCGPointExtentsModifierSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGPointExtentsModifierSettings final : public UPCGSettings
{
public:
	struct FVector                                Extents;                                           // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPointExtentsModifierMode                  Mode;                                              // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPointExtentsModifierSettings">();
	}
	static class UPCGPointExtentsModifierSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPointExtentsModifierSettings>();
	}
};
static_assert(alignof(UPCGPointExtentsModifierSettings) == 0x000008, "Wrong alignment on UPCGPointExtentsModifierSettings");
static_assert(sizeof(UPCGPointExtentsModifierSettings) == 0x0000D8, "Wrong size on UPCGPointExtentsModifierSettings");
static_assert(offsetof(UPCGPointExtentsModifierSettings, Extents) == 0x0000B8, "Member 'UPCGPointExtentsModifierSettings::Extents' has a wrong offset!");
static_assert(offsetof(UPCGPointExtentsModifierSettings, Mode) == 0x0000D0, "Member 'UPCGPointExtentsModifierSettings::Mode' has a wrong offset!");

// Class PCG.PCGPointMatchAndSetSettings
// 0x0040 (0x00F8 - 0x00B8)
class UPCGPointMatchAndSetSettings final : public UPCGSettings
{
public:
	TSubclassOf<class UPCGMatchAndSetBase>        MatchAndSetType;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMatchAndSetBase*                    MatchAndSetInstance;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    SetTarget;                                         // 0x00C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataTypes                             SetTargetType;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMatchAndSetType(TSubclassOf<class UPCGMatchAndSetBase> InMatchAndSetType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPointMatchAndSetSettings">();
	}
	static class UPCGPointMatchAndSetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPointMatchAndSetSettings>();
	}
};
static_assert(alignof(UPCGPointMatchAndSetSettings) == 0x000008, "Wrong alignment on UPCGPointMatchAndSetSettings");
static_assert(sizeof(UPCGPointMatchAndSetSettings) == 0x0000F8, "Wrong size on UPCGPointMatchAndSetSettings");
static_assert(offsetof(UPCGPointMatchAndSetSettings, MatchAndSetType) == 0x0000B8, "Member 'UPCGPointMatchAndSetSettings::MatchAndSetType' has a wrong offset!");
static_assert(offsetof(UPCGPointMatchAndSetSettings, MatchAndSetInstance) == 0x0000C0, "Member 'UPCGPointMatchAndSetSettings::MatchAndSetInstance' has a wrong offset!");
static_assert(offsetof(UPCGPointMatchAndSetSettings, SetTarget) == 0x0000C8, "Member 'UPCGPointMatchAndSetSettings::SetTarget' has a wrong offset!");
static_assert(offsetof(UPCGPointMatchAndSetSettings, SetTargetType) == 0x0000F0, "Member 'UPCGPointMatchAndSetSettings::SetTargetType' has a wrong offset!");

// Class PCG.PCGSelectPointsSettings
// 0x0008 (0x00C0 - 0x00B8)
class UPCGSelectPointsSettings final : public UPCGSettings
{
public:
	float                                         Ratio;                                             // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSelectPointsSettings">();
	}
	static class UPCGSelectPointsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSelectPointsSettings>();
	}
};
static_assert(alignof(UPCGSelectPointsSettings) == 0x000008, "Wrong alignment on UPCGSelectPointsSettings");
static_assert(sizeof(UPCGSelectPointsSettings) == 0x0000C0, "Wrong size on UPCGSelectPointsSettings");
static_assert(offsetof(UPCGSelectPointsSettings, Ratio) == 0x0000B8, "Member 'UPCGSelectPointsSettings::Ratio' has a wrong offset!");

// Class PCG.PCGSpatialNoiseSettings
// 0x0108 (0x01C0 - 0x00B8)
class UPCGSpatialNoiseSettings final : public UPCGSettings
{
public:
	EPCGSpatialNoiseMode                          Mode;                                              // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGSpatialNoiseMask2DMode                    EdgeMask2DMode;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTiling;                                           // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Brightness;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputNoSourceSelector ValueTarget;                                  // 0x00D0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RandomOffset;                                      // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0110(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VoronoiCellRandomness;                             // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputNoSourceSelector VoronoiCellIDTarget;                          // 0x0178(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoronoiOrientSamplesToCellEdge;                   // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TiledVoronoiResolution;                            // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TiledVoronoiEdgeBlendCellCount;                    // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeBlendDistance;                                 // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeBlendCurveOffset;                              // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeBlendCurveIntensity;                           // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNoUseSeed;                                   // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpatialNoiseSettings">();
	}
	static class UPCGSpatialNoiseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpatialNoiseSettings>();
	}
};
static_assert(alignof(UPCGSpatialNoiseSettings) == 0x000010, "Wrong alignment on UPCGSpatialNoiseSettings");
static_assert(sizeof(UPCGSpatialNoiseSettings) == 0x0001C0, "Wrong size on UPCGSpatialNoiseSettings");
static_assert(offsetof(UPCGSpatialNoiseSettings, Mode) == 0x0000B8, "Member 'UPCGSpatialNoiseSettings::Mode' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, EdgeMask2DMode) == 0x0000BC, "Member 'UPCGSpatialNoiseSettings::EdgeMask2DMode' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, Iterations) == 0x0000C0, "Member 'UPCGSpatialNoiseSettings::Iterations' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, bTiling) == 0x0000C4, "Member 'UPCGSpatialNoiseSettings::bTiling' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, Brightness) == 0x0000C8, "Member 'UPCGSpatialNoiseSettings::Brightness' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, Contrast) == 0x0000CC, "Member 'UPCGSpatialNoiseSettings::Contrast' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, ValueTarget) == 0x0000D0, "Member 'UPCGSpatialNoiseSettings::ValueTarget' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, RandomOffset) == 0x0000F8, "Member 'UPCGSpatialNoiseSettings::RandomOffset' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, Transform) == 0x000110, "Member 'UPCGSpatialNoiseSettings::Transform' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, VoronoiCellRandomness) == 0x000170, "Member 'UPCGSpatialNoiseSettings::VoronoiCellRandomness' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, VoronoiCellIDTarget) == 0x000178, "Member 'UPCGSpatialNoiseSettings::VoronoiCellIDTarget' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, bVoronoiOrientSamplesToCellEdge) == 0x0001A0, "Member 'UPCGSpatialNoiseSettings::bVoronoiOrientSamplesToCellEdge' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, TiledVoronoiResolution) == 0x0001A4, "Member 'UPCGSpatialNoiseSettings::TiledVoronoiResolution' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, TiledVoronoiEdgeBlendCellCount) == 0x0001A8, "Member 'UPCGSpatialNoiseSettings::TiledVoronoiEdgeBlendCellCount' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, EdgeBlendDistance) == 0x0001AC, "Member 'UPCGSpatialNoiseSettings::EdgeBlendDistance' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, EdgeBlendCurveOffset) == 0x0001B0, "Member 'UPCGSpatialNoiseSettings::EdgeBlendCurveOffset' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, EdgeBlendCurveIntensity) == 0x0001B4, "Member 'UPCGSpatialNoiseSettings::EdgeBlendCurveIntensity' has a wrong offset!");
static_assert(offsetof(UPCGSpatialNoiseSettings, bForceNoUseSeed) == 0x0001B8, "Member 'UPCGSpatialNoiseSettings::bForceNoUseSeed' has a wrong offset!");

// Class PCG.PCGSpawnActorNode
// 0x0000 (0x0088 - 0x0088)
class UPCGSpawnActorNode final : public UPCGBaseSubgraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSpawnActorNode">();
	}
	static class UPCGSpawnActorNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSpawnActorNode>();
	}
};
static_assert(alignof(UPCGSpawnActorNode) == 0x000008, "Wrong alignment on UPCGSpawnActorNode");
static_assert(sizeof(UPCGSpawnActorNode) == 0x000088, "Wrong size on UPCGSpawnActorNode");

// Class PCG.PCGStaticMeshSpawnerSettings
// 0x0088 (0x0140 - 0x00B8)
class UPCGStaticMeshSpawnerSettings final : public UPCGSettings
{
public:
	TSubclassOf<class UPCGMeshSelectorBase>       MeshSelectorType;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMeshSelectorBase*                   MeshSelectorParameters;                            // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDescriptorChanges;                           // 0x00C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPCGInstanceDataPackerBase> InstanceDataPackerType;                            // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGInstanceDataPackerBase*             InstanceDataPackerParameters;                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGObjectPropertyOverrideDescription> StaticMeshComponentPropertyOverrides;       // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OutAttributeName;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyMeshBoundsToPoints;                          // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AActor>                  TargetActor;                                       // 0x0100(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           PostProcessFunctionNames;                          // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilenceOverrideAttributeNotFoundErrors;           // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarnOnIdenticalSpawn;                             // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B[0x5];                                      // 0x013B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetInstancePackerType(TSubclassOf<class UPCGInstanceDataPackerBase> InInstancePackerType);
	void SetMeshSelectorType(TSubclassOf<class UPCGMeshSelectorBase> InMeshSelectorType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGStaticMeshSpawnerSettings">();
	}
	static class UPCGStaticMeshSpawnerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGStaticMeshSpawnerSettings>();
	}
};
static_assert(alignof(UPCGStaticMeshSpawnerSettings) == 0x000008, "Wrong alignment on UPCGStaticMeshSpawnerSettings");
static_assert(sizeof(UPCGStaticMeshSpawnerSettings) == 0x000140, "Wrong size on UPCGStaticMeshSpawnerSettings");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, MeshSelectorType) == 0x0000B8, "Member 'UPCGStaticMeshSpawnerSettings::MeshSelectorType' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, MeshSelectorParameters) == 0x0000C0, "Member 'UPCGStaticMeshSpawnerSettings::MeshSelectorParameters' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, bAllowDescriptorChanges) == 0x0000C8, "Member 'UPCGStaticMeshSpawnerSettings::bAllowDescriptorChanges' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, InstanceDataPackerType) == 0x0000D0, "Member 'UPCGStaticMeshSpawnerSettings::InstanceDataPackerType' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, InstanceDataPackerParameters) == 0x0000D8, "Member 'UPCGStaticMeshSpawnerSettings::InstanceDataPackerParameters' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, StaticMeshComponentPropertyOverrides) == 0x0000E0, "Member 'UPCGStaticMeshSpawnerSettings::StaticMeshComponentPropertyOverrides' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, OutAttributeName) == 0x0000F0, "Member 'UPCGStaticMeshSpawnerSettings::OutAttributeName' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, bApplyMeshBoundsToPoints) == 0x0000F8, "Member 'UPCGStaticMeshSpawnerSettings::bApplyMeshBoundsToPoints' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, TargetActor) == 0x000100, "Member 'UPCGStaticMeshSpawnerSettings::TargetActor' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, PostProcessFunctionNames) == 0x000128, "Member 'UPCGStaticMeshSpawnerSettings::PostProcessFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, bSynchronousLoad) == 0x000138, "Member 'UPCGStaticMeshSpawnerSettings::bSynchronousLoad' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, bSilenceOverrideAttributeNotFoundErrors) == 0x000139, "Member 'UPCGStaticMeshSpawnerSettings::bSilenceOverrideAttributeNotFoundErrors' has a wrong offset!");
static_assert(offsetof(UPCGStaticMeshSpawnerSettings, bWarnOnIdenticalSpawn) == 0x00013A, "Member 'UPCGStaticMeshSpawnerSettings::bWarnOnIdenticalSpawn' has a wrong offset!");

// Class PCG.PCGTextureSamplerSettings
// 0x00F8 (0x01B0 - 0x00B8)
class UPCGTextureSamplerSettings final : public UPCGSettings
{
public:
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x00C0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbsoluteTransform;                             // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureArrayIndex;                                 // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDensitySourceChannel;                          // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTextureColorChannel                       ColorChannel;                                      // 0x0129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGTextureFilter                             Filter;                                            // 0x012A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B[0x1];                                      // 0x012B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TexelSize;                                         // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdvancedTiling;                                // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Tiling;                                            // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterOffset;                                      // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTileBounds;                                    // 0x015C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TileBoundsMin;                                     // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TileBoundsMax;                                     // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSynchronousLoad;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0188(0x0028)(Edit, BlueprintVisible, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDensityFunctionEquivalent(EPCGTextureDensityFunction DensityFunction);

	EPCGTextureDensityFunction GetDensityFunctionEquivalent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGTextureSamplerSettings">();
	}
	static class UPCGTextureSamplerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGTextureSamplerSettings>();
	}
};
static_assert(alignof(UPCGTextureSamplerSettings) == 0x000010, "Wrong alignment on UPCGTextureSamplerSettings");
static_assert(sizeof(UPCGTextureSamplerSettings) == 0x0001B0, "Wrong size on UPCGTextureSamplerSettings");
static_assert(offsetof(UPCGTextureSamplerSettings, Transform) == 0x0000C0, "Member 'UPCGTextureSamplerSettings::Transform' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, bUseAbsoluteTransform) == 0x000120, "Member 'UPCGTextureSamplerSettings::bUseAbsoluteTransform' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, TextureArrayIndex) == 0x000124, "Member 'UPCGTextureSamplerSettings::TextureArrayIndex' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, bUseDensitySourceChannel) == 0x000128, "Member 'UPCGTextureSamplerSettings::bUseDensitySourceChannel' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, ColorChannel) == 0x000129, "Member 'UPCGTextureSamplerSettings::ColorChannel' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, Filter) == 0x00012A, "Member 'UPCGTextureSamplerSettings::Filter' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, TexelSize) == 0x00012C, "Member 'UPCGTextureSamplerSettings::TexelSize' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, bUseAdvancedTiling) == 0x000130, "Member 'UPCGTextureSamplerSettings::bUseAdvancedTiling' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, Tiling) == 0x000138, "Member 'UPCGTextureSamplerSettings::Tiling' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, CenterOffset) == 0x000148, "Member 'UPCGTextureSamplerSettings::CenterOffset' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, Rotation) == 0x000158, "Member 'UPCGTextureSamplerSettings::Rotation' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, bUseTileBounds) == 0x00015C, "Member 'UPCGTextureSamplerSettings::bUseTileBounds' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, TileBoundsMin) == 0x000160, "Member 'UPCGTextureSamplerSettings::TileBoundsMin' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, TileBoundsMax) == 0x000170, "Member 'UPCGTextureSamplerSettings::TileBoundsMax' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, bSynchronousLoad) == 0x000180, "Member 'UPCGTextureSamplerSettings::bSynchronousLoad' has a wrong offset!");
static_assert(offsetof(UPCGTextureSamplerSettings, Texture) == 0x000188, "Member 'UPCGTextureSamplerSettings::Texture' has a wrong offset!");

// Class PCG.PCGGetLandscapeSettings
// 0x0008 (0x0168 - 0x0160)
class UPCGGetLandscapeSettings final : public UPCGDataFromActorSettings
{
public:
	struct FPCGLandscapeDataProps                 SamplingProperties;                                // 0x0160(0x0005)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetLandscapeSettings">();
	}
	static class UPCGGetLandscapeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetLandscapeSettings>();
	}
};
static_assert(alignof(UPCGGetLandscapeSettings) == 0x000008, "Wrong alignment on UPCGGetLandscapeSettings");
static_assert(sizeof(UPCGGetLandscapeSettings) == 0x000168, "Wrong size on UPCGGetLandscapeSettings");
static_assert(offsetof(UPCGGetLandscapeSettings, SamplingProperties) == 0x000160, "Member 'UPCGGetLandscapeSettings::SamplingProperties' has a wrong offset!");

// Class PCG.PCGGetVolumeSettings
// 0x0000 (0x0160 - 0x0160)
class UPCGGetVolumeSettings final : public UPCGDataFromActorSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetVolumeSettings">();
	}
	static class UPCGGetVolumeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetVolumeSettings>();
	}
};
static_assert(alignof(UPCGGetVolumeSettings) == 0x000008, "Wrong alignment on UPCGGetVolumeSettings");
static_assert(sizeof(UPCGGetVolumeSettings) == 0x000160, "Wrong size on UPCGGetVolumeSettings");

// Class PCG.PCGGetPCGComponentSettings
// 0x0000 (0x0160 - 0x0160)
class UPCGGetPCGComponentSettings final : public UPCGDataFromActorSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGetPCGComponentSettings">();
	}
	static class UPCGGetPCGComponentSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGetPCGComponentSettings>();
	}
};
static_assert(alignof(UPCGGetPCGComponentSettings) == 0x000008, "Wrong alignment on UPCGGetPCGComponentSettings");
static_assert(sizeof(UPCGGetPCGComponentSettings) == 0x000160, "Wrong size on UPCGGetPCGComponentSettings");

// Class PCG.PCGVolumeSamplerSettings
// 0x0020 (0x00D8 - 0x00B8)
class UPCGVolumeSamplerSettings final : public UPCGSettings
{
public:
	struct FVector                                VoxelSize;                                         // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbounded;                                        // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointSteepness;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGVolumeSamplerSettings">();
	}
	static class UPCGVolumeSamplerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGVolumeSamplerSettings>();
	}
};
static_assert(alignof(UPCGVolumeSamplerSettings) == 0x000008, "Wrong alignment on UPCGVolumeSamplerSettings");
static_assert(sizeof(UPCGVolumeSamplerSettings) == 0x0000D8, "Wrong size on UPCGVolumeSamplerSettings");
static_assert(offsetof(UPCGVolumeSamplerSettings, VoxelSize) == 0x0000B8, "Member 'UPCGVolumeSamplerSettings::VoxelSize' has a wrong offset!");
static_assert(offsetof(UPCGVolumeSamplerSettings, bUnbounded) == 0x0000D0, "Member 'UPCGVolumeSamplerSettings::bUnbounded' has a wrong offset!");
static_assert(offsetof(UPCGVolumeSamplerSettings, PointSteepness) == 0x0000D4, "Member 'UPCGVolumeSamplerSettings::PointSteepness' has a wrong offset!");

// Class PCG.PCGWorldRayHitSettings
// 0x00C0 (0x0178 - 0x00B8)
class UPCGWorldRayHitSettings final : public UPCGSettings
{
public:
	struct FPCGWorldRayHitQueryParams             QueryParams;                                       // 0x00B8(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGWorldRayHitSettings">();
	}
	static class UPCGWorldRayHitSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGWorldRayHitSettings>();
	}
};
static_assert(alignof(UPCGWorldRayHitSettings) == 0x000008, "Wrong alignment on UPCGWorldRayHitSettings");
static_assert(sizeof(UPCGWorldRayHitSettings) == 0x000178, "Wrong size on UPCGWorldRayHitSettings");
static_assert(offsetof(UPCGWorldRayHitSettings, QueryParams) == 0x0000B8, "Member 'UPCGWorldRayHitSettings::QueryParams' has a wrong offset!");

// Class PCG.PCGGridLinkageSettings
// 0x0048 (0x0100 - 0x00B8)
class UPCGGridLinkageSettings final : public UPCGSettings
{
public:
	EPCGHiGenGrid                                 FromGrid;                                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGHiGenGrid                                 ToGrid;                                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGHiGenGrid                                 GenerationGrid;                                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResourceKey;                                       // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPCGPin>                 UpstreamPin;                                       // 0x00D8(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGridLinkageSettings">();
	}
	static class UPCGGridLinkageSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGridLinkageSettings>();
	}
};
static_assert(alignof(UPCGGridLinkageSettings) == 0x000008, "Wrong alignment on UPCGGridLinkageSettings");
static_assert(sizeof(UPCGGridLinkageSettings) == 0x000100, "Wrong size on UPCGGridLinkageSettings");
static_assert(offsetof(UPCGGridLinkageSettings, FromGrid) == 0x0000B8, "Member 'UPCGGridLinkageSettings::FromGrid' has a wrong offset!");
static_assert(offsetof(UPCGGridLinkageSettings, ToGrid) == 0x0000BC, "Member 'UPCGGridLinkageSettings::ToGrid' has a wrong offset!");
static_assert(offsetof(UPCGGridLinkageSettings, GenerationGrid) == 0x0000C0, "Member 'UPCGGridLinkageSettings::GenerationGrid' has a wrong offset!");
static_assert(offsetof(UPCGGridLinkageSettings, ResourceKey) == 0x0000C8, "Member 'UPCGGridLinkageSettings::ResourceKey' has a wrong offset!");
static_assert(offsetof(UPCGGridLinkageSettings, UpstreamPin) == 0x0000D8, "Member 'UPCGGridLinkageSettings::UpstreamPin' has a wrong offset!");

// Class PCG.PCGPartitionActor
// 0x0110 (0x03B8 - 0x02A8)
class APCGPartitionActor final : public APartitionActor
{
public:
	struct FGuid                                  PCGGuid;                                           // 0x02A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x50];                                     // 0x02B8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UPCGComponent*, TSoftObjectPtr<class UPCGComponent>> LocalToOriginal;                 // 0x0308(0x0050)(ExportObject, NonTransactional, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class UPCGComponent*, TSoftObjectPtr<class UPCGComponent>> LoadedPreviewComponents;         // 0x0358(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint32                                        PCGGridSize;                                       // 0x03A8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUse2DGrid;                                        // 0x03AC(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RuntimeGridDescriptorHash;                         // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPCGComponent* GetLocalComponent(const class UPCGComponent* OriginalComponent) const;
	class UPCGComponent* GetOriginalComponent(const class UPCGComponent* LocalComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPartitionActor">();
	}
	static class APCGPartitionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APCGPartitionActor>();
	}
};
static_assert(alignof(APCGPartitionActor) == 0x000008, "Wrong alignment on APCGPartitionActor");
static_assert(sizeof(APCGPartitionActor) == 0x0003B8, "Wrong size on APCGPartitionActor");
static_assert(offsetof(APCGPartitionActor, PCGGuid) == 0x0002A8, "Member 'APCGPartitionActor::PCGGuid' has a wrong offset!");
static_assert(offsetof(APCGPartitionActor, LocalToOriginal) == 0x000308, "Member 'APCGPartitionActor::LocalToOriginal' has a wrong offset!");
static_assert(offsetof(APCGPartitionActor, LoadedPreviewComponents) == 0x000358, "Member 'APCGPartitionActor::LoadedPreviewComponents' has a wrong offset!");
static_assert(offsetof(APCGPartitionActor, PCGGridSize) == 0x0003A8, "Member 'APCGPartitionActor::PCGGridSize' has a wrong offset!");
static_assert(offsetof(APCGPartitionActor, bUse2DGrid) == 0x0003AC, "Member 'APCGPartitionActor::bUse2DGrid' has a wrong offset!");
static_assert(offsetof(APCGPartitionActor, RuntimeGridDescriptorHash) == 0x0003B0, "Member 'APCGPartitionActor::RuntimeGridDescriptorHash' has a wrong offset!");

// Class PCG.PCGBlueprintHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGBlueprintHelpers final : public UBlueprintFunctionLibrary
{
public:
	static int32 ComputeSeedFromPosition(const struct FVector& InPosition);
	static class UPCGData* CreatePCGDataFromActor(class AActor* InActor, bool bParseActor);
	static class UPCGData* DuplicateData(const class UPCGData* InData, struct FPCGContext& Context, bool bInitializeMetadata);
	static bool FlushPCGCache();
	static struct FBox GetActorBoundsPCG(class AActor* InActor, bool bIgnorePCGCreatedComponents);
	static class UPCGData* GetActorData(struct FPCGContext& Context);
	static struct FBox GetActorLocalBoundsPCG(class AActor* InActor, bool bIgnorePCGCreatedComponents);
	static class UPCGComponent* GetComponent(struct FPCGContext& Context);
	static struct FVector GetExtents(const struct FPCGPoint& InPoint);
	static class UPCGData* GetInputData(struct FPCGContext& Context);
	static TArray<struct FPCGLandscapeLayerWeight> GetInterpolatedPCGLandscapeLayerWeights(class UObject* WorldContextObject, const struct FVector& Location);
	static struct FVector GetLocalCenter(const struct FPCGPoint& InPoint);
	static class UPCGComponent* GetOriginalComponent(struct FPCGContext& Context);
	static struct FRandomStream GetRandomStreamFromPoint(const struct FPCGPoint& InPoint, const class UPCGSettings* OptionalSettings, const class UPCGComponent* OptionalComponent);
	static struct FRandomStream GetRandomStreamFromTwoPoints(const struct FPCGPoint& InPointA, const struct FPCGPoint& InPointB, const class UPCGSettings* OptionalSettings, const class UPCGComponent* OptionalComponent);
	static const class UPCGSettings* GetSettings(struct FPCGContext& Context);
	static class AActor* GetTargetActor(struct FPCGContext& Context, class UPCGSpatialData* SpatialData);
	static int64 GetTaskId(struct FPCGContext& Context);
	static struct FBox GetTransformedBounds(const struct FPCGPoint& InPoint);
	static void RefreshPCGRuntimeComponent(class UPCGComponent* InComponent, const bool bFlushCache);
	static void SetExtents(struct FPCGPoint& InPoint, const struct FVector& InExtents);
	static void SetLocalCenter(struct FPCGPoint& InPoint, const struct FVector& InLocalCenter);
	static void SetSeedFromPosition(struct FPCGPoint& InPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGBlueprintHelpers">();
	}
	static class UPCGBlueprintHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGBlueprintHelpers>();
	}
};
static_assert(alignof(UPCGBlueprintHelpers) == 0x000008, "Wrong alignment on UPCGBlueprintHelpers");
static_assert(sizeof(UPCGBlueprintHelpers) == 0x000028, "Wrong size on UPCGBlueprintHelpers");

// Class PCG.PCGInstanceDataPackerByAttribute
// 0x0010 (0x0038 - 0x0028)
class UPCGInstanceDataPackerByAttribute final : public UPCGInstanceDataPackerBase
{
public:
	TArray<struct FPCGAttributePropertyInputSelector> AttributeSelectors;                            // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGInstanceDataPackerByAttribute">();
	}
	static class UPCGInstanceDataPackerByAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGInstanceDataPackerByAttribute>();
	}
};
static_assert(alignof(UPCGInstanceDataPackerByAttribute) == 0x000008, "Wrong alignment on UPCGInstanceDataPackerByAttribute");
static_assert(sizeof(UPCGInstanceDataPackerByAttribute) == 0x000038, "Wrong size on UPCGInstanceDataPackerByAttribute");
static_assert(offsetof(UPCGInstanceDataPackerByAttribute, AttributeSelectors) == 0x000028, "Member 'UPCGInstanceDataPackerByAttribute::AttributeSelectors' has a wrong offset!");

// Class PCG.PCGMatchAndSetWeighted
// 0x0018 (0x0048 - 0x0030)
class UPCGMatchAndSetWeighted final : public UPCGMatchAndSetBase
{
public:
	TArray<struct FPCGMatchAndSetWeightedEntry>   Entries;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldMutateSeed;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMatchAndSetWeighted">();
	}
	static class UPCGMatchAndSetWeighted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMatchAndSetWeighted>();
	}
};
static_assert(alignof(UPCGMatchAndSetWeighted) == 0x000008, "Wrong alignment on UPCGMatchAndSetWeighted");
static_assert(sizeof(UPCGMatchAndSetWeighted) == 0x000048, "Wrong size on UPCGMatchAndSetWeighted");
static_assert(offsetof(UPCGMatchAndSetWeighted, Entries) == 0x000030, "Member 'UPCGMatchAndSetWeighted::Entries' has a wrong offset!");
static_assert(offsetof(UPCGMatchAndSetWeighted, bShouldMutateSeed) == 0x000040, "Member 'UPCGMatchAndSetWeighted::bShouldMutateSeed' has a wrong offset!");

// Class PCG.PCGMeshSelectorWeighted
// 0x0028 (0x0050 - 0x0028)
class UPCGMeshSelectorWeighted final : public UPCGMeshSelectorBase
{
public:
	TArray<struct FPCGMeshSelectorWeightedEntry>  MeshEntries;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseAttributeMaterialOverrides;                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MaterialOverrideAttributes;                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMeshSelectorWeighted">();
	}
	static class UPCGMeshSelectorWeighted* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMeshSelectorWeighted>();
	}
};
static_assert(alignof(UPCGMeshSelectorWeighted) == 0x000008, "Wrong alignment on UPCGMeshSelectorWeighted");
static_assert(sizeof(UPCGMeshSelectorWeighted) == 0x000050, "Wrong size on UPCGMeshSelectorWeighted");
static_assert(offsetof(UPCGMeshSelectorWeighted, MeshEntries) == 0x000028, "Member 'UPCGMeshSelectorWeighted::MeshEntries' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorWeighted, bUseAttributeMaterialOverrides) == 0x000038, "Member 'UPCGMeshSelectorWeighted::bUseAttributeMaterialOverrides' has a wrong offset!");
static_assert(offsetof(UPCGMeshSelectorWeighted, MaterialOverrideAttributes) == 0x000040, "Member 'UPCGMeshSelectorWeighted::MaterialOverrideAttributes' has a wrong offset!");

// Class PCG.PCGMetadata
// 0x00E0 (0x0108 - 0x0028)
class UPCGMetadata final : public UObject
{
public:
	class UPCGMetadata*                           Parent;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<TWeakObjectPtr<class UPCGMetadata>>      OtherParents;                                      // 0x0030(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x88];                                      // 0x0080(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AccumulatePointWeightedAttributes(const struct FPCGPoint& InPoint, const class UPCGMetadata* InMetaData, float Weight, bool bSetNonInterpolableAttributes, struct FPCGPoint& OutPoint);
	void AccumulateWeightedAttributesByKey(int64 Key, const class UPCGMetadata* MetaData, float Weight, bool bSetNonInterpolableAttributes, int64 TargetKey, int64* OutKey);
	void AddAttribute(const class UPCGMetadata* InOther, class FName AttributeName);
	void AddAttributes(const class UPCGMetadata* InOther);
	void AddAttributesFiltered(const class UPCGMetadata* InOther, const TSet<class FName>& InFilteredAttributes, EPCGMetadataFilterMode InFilterMode, EPCGStringMatchingOperator InMatchOperator);
	int64 AddEntry(int64 ParentEntryKey);
	void ClearAttribute(class FName AttributeToClear);
	void CopyAttribute(const class UPCGMetadata* InOther, class FName AttributeToCopy, class FName NewAttributeName);
	void CopyAttributes(const class UPCGMetadata* InOther);
	bool CopyExistingAttribute(class FName AttributeToCopy, class FName NewAttributeName, bool bKeepParent);
	class UPCGMetadata* CreateBoolAttribute(class FName AttributeName, bool DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateDoubleAttribute(class FName AttributeName, double DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateFloatAttribute(class FName AttributeName, float DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateInteger32Attribute(class FName AttributeName, int32 DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateInteger64Attribute(class FName AttributeName, int64 DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateNameAttribute(class FName AttributeName, class FName DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateQuatAttribute(class FName AttributeName, const struct FQuat& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateRotatorAttribute(class FName AttributeName, const struct FRotator& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateSoftClassPathAttribute(class FName AttributeName, const struct FSoftClassPath& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateSoftObjectPathAttribute(class FName AttributeName, const struct FSoftObjectPath& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateStringAttribute(class FName AttributeName, const class FString& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateTransformAttribute(class FName AttributeName, const struct FTransform& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateVector2Attribute(class FName AttributeName, const struct FVector2D& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateVector4Attribute(class FName AttributeName, const struct FVector4& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	class UPCGMetadata* CreateVectorAttribute(class FName AttributeName, const struct FVector& DefaultValue, bool bAllowsInterpolation, bool bOverrideParent);
	void DeleteAttribute(class FName AttributeName);
	void Flatten();
	void Initialize(const class UPCGMetadata* InParent);
	void InitializeWithAttributeFilter(const class UPCGMetadata* InParent, const TSet<class FName>& InFilteredAttributes, EPCGMetadataFilterMode InFilterMode, EPCGStringMatchingOperator InMatchOperator);
	void K2_InitializeAsCopy(const class UPCGMetadata* InMetadataToCopy, const TArray<int64>& InOptionalEntriesToCopy);
	void K2_InitializeAsCopyWithAttributeFilter(const class UPCGMetadata* InMetadataToCopy, const TSet<class FName>& InFilteredAttributes, const TArray<int64>& InOptionalEntriesToCopy, EPCGMetadataFilterMode InFilterMode);
	void MergeAttributesByKey(int64 KeyA, const class UPCGMetadata* MetadataA, int64 KeyB, const class UPCGMetadata* MetadataB, int64 TargetKey, EPCGMetadataOp Op, int64* OutKey);
	void MergePointAttributes(const struct FPCGPoint& PointA, const class UPCGMetadata* MetadataA, const struct FPCGPoint& PointB, const class UPCGMetadata* MetadataB, struct FPCGPoint& TargetPoint, EPCGMetadataOp Op);
	bool RenameAttribute(class FName AttributeToRename, class FName NewAttributeName);
	void ResetPointWeightedAttributes(struct FPCGPoint* OutPoint);
	void ResetWeightedAttributesByKey(int64 TargetKey, int64* OutKey);
	void SetAttributesByKey(int64 Key, const class UPCGMetadata* InMetaData, int64 TargetKey, int64* OutKey);
	void SetPointAttributes(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, struct FPCGPoint& OutPoint);

	int32 GetAttributeCount() const;
	void GetAttributes(TArray<class FName>* AttributeNames, TArray<EPCGMetadataTypes>* AttributeTypes) const;
	int64 GetItemCountForChild() const;
	bool HasAttribute(class FName AttributeName) const;
	bool HasCommonAttributes(const class UPCGMetadata* InMetaData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadata">();
	}
	static class UPCGMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadata>();
	}
};
static_assert(alignof(UPCGMetadata) == 0x000008, "Wrong alignment on UPCGMetadata");
static_assert(sizeof(UPCGMetadata) == 0x000108, "Wrong size on UPCGMetadata");
static_assert(offsetof(UPCGMetadata, Parent) == 0x000028, "Member 'UPCGMetadata::Parent' has a wrong offset!");
static_assert(offsetof(UPCGMetadata, OtherParents) == 0x000030, "Member 'UPCGMetadata::OtherParents' has a wrong offset!");

// Class PCG.PCGMetadataAccessorHelpers
// 0x0000 (0x0028 - 0x0028)
class UPCGMetadataAccessorHelpers final : public UBlueprintFunctionLibrary
{
public:
	static void CopyPoint(const struct FPCGPoint& InPoint, struct FPCGPoint* OutPoint, bool bCopyMetadata, const class UPCGMetadata* InMetaData, class UPCGMetadata* OutMetadata);
	static bool GetBoolAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static bool GetBoolAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static double GetDoubleAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static double GetDoubleAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static float GetFloatAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static float GetFloatAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static int32 GetInteger32Attribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static int32 GetInteger32AttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static int64 GetInteger64Attribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static int64 GetInteger64AttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static class FName GetNameAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FQuat GetQuatAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FQuat GetQuatAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FRotator GetRotatorAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FRotator GetRotatorAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FSoftClassPath GetSoftClassPathAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FSoftClassPath GetSoftClassPathAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FSoftObjectPath GetSoftObjectPathAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FSoftObjectPath GetSoftObjectPathAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static class FString GetStringAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static class FString GetStringAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FTransform GetTransformAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FTransform GetTransformAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector2D GetVector2Attribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector2D GetVector2AttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector4 GetVector4Attribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector4 GetVector4AttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector GetVectorAttribute(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static struct FVector GetVectorAttributeByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static bool HasAttributeSet(const struct FPCGPoint& Point, const class UPCGMetadata* MetaData, class FName AttributeName);
	static bool HasAttributeSetByMetadataKey(int64 Key, const class UPCGMetadata* MetaData, class FName AttributeName);
	static void InitializeMetadata(struct FPCGPoint& Point, class UPCGMetadata* MetaData, const struct FPCGPoint& ParentPoint, const class UPCGMetadata* ParentMetadata);
	static bool SetAttributeFromPropertyByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const class UObject* Object, class FName PropertyName);
	static void SetBoolAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, bool Value);
	static void SetBoolAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, bool Value);
	static void SetDoubleAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, double Value);
	static void SetDoubleAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, double Value);
	static void SetFloatAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, float Value);
	static void SetFloatAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, float Value);
	static void SetInteger32Attribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, int32 Value);
	static void SetInteger32AttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, int32 Value);
	static void SetInteger64Attribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, int64 Value);
	static void SetInteger64AttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, int64 Value);
	static void SetNameAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const class FName& Value);
	static void SetQuatAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FQuat& Value);
	static void SetQuatAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FQuat& Value);
	static void SetRotatorAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FRotator& Value);
	static void SetRotatorAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FRotator& Value);
	static void SetSoftClassPathAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FSoftClassPath& Value);
	static void SetSoftClassPathAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FSoftClassPath& Value);
	static void SetSoftObjectPathAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FSoftObjectPath& Value);
	static void SetSoftObjectPathAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FSoftObjectPath& Value);
	static void SetStringAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const class FString& Value);
	static void SetStringAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const class FString& Value);
	static void SetTransformAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FTransform& Value);
	static void SetTransformAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FTransform& Value);
	static void SetVector2Attribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector2D& Value);
	static void SetVector2AttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector2D& Value);
	static void SetVector4Attribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector4& Value);
	static void SetVector4AttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector4& Value);
	static void SetVectorAttribute(struct FPCGPoint& Point, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector& Value);
	static void SetVectorAttributeByMetadataKey(int64& Key, class UPCGMetadata* MetaData, class FName AttributeName, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGMetadataAccessorHelpers">();
	}
	static class UPCGMetadataAccessorHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGMetadataAccessorHelpers>();
	}
};
static_assert(alignof(UPCGMetadataAccessorHelpers) == 0x000008, "Wrong alignment on UPCGMetadataAccessorHelpers");
static_assert(sizeof(UPCGMetadataAccessorHelpers) == 0x000028, "Wrong size on UPCGMetadataAccessorHelpers");

// Class PCG.PCGComponent
// 0x0230 (0x02D0 - 0x00A0)
class UPCGComponent final : public UActorComponent
{
public:
	int32                                         Seed;                                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivated;                                        // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsComponentPartitioned;                           // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGComponentGenerationTrigger                GenerationTrigger;                                 // 0x00A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateOnDropWhenTriggerOnDemand;                // 0x00A7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGenerationRadii;                          // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGRuntimeGenerationRadii             GenerationRadii;                                   // 0x00B0(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGSchedulingPolicyBase>   SchedulingPolicyClass;                             // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSchedulingPolicyBase*               SchedulingPolicy;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPCGComponent* PCGComponent)> OnPCGGraphStartGeneratingExternal; // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPCGComponent* PCGComponent)> OnPCGGraphCancelledExternal;   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPCGComponent* PCGComponent)> OnPCGGraphGeneratedExternal;   // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UPCGComponent* PCGComponent)> OnPCGGraphCleanedExternal;     // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bGenerated;                                        // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRuntimeGenerated;                                 // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PostGenerateFunctionNames;                         // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UPCGGraphInstance*                      GraphInstance;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        GenerationGridSize;                                // 0x0180(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGEditorDirtyMode                           CurrentEditingMode;                                // 0x0184(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPCGEditorDirtyMode                           SerializedEditingMode;                             // 0x0185(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_186[0x1];                                      // 0x0186(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGComponentInput                            InputType;                                         // 0x0187(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParseActorComponents;                             // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RuntimeGridDescriptorHash;                         // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPCGData*                               CachedPCGData;                                     // 0x0190(0x0008)(ZeroConstructor, Transient, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPCGData*                               CachedInputData;                                   // 0x0198(0x0008)(ZeroConstructor, Transient, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPCGData*                               CachedActorData;                                   // 0x01A0(0x0008)(ZeroConstructor, Transient, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPCGData*                               CachedLandscapeData;                               // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPCGData*                               CachedLandscapeHeightData;                         // 0x01B0(0x0008)(ZeroConstructor, Transient, NoDestructor, NonPIEDuplicateTransient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UPCGManagedResource*>            GeneratedResources;                                // 0x01B8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   LastGeneratedBounds;                               // 0x01D0(0x0038)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FPCGDataCollection                     GeneratedGraphOutput;                              // 0x0208(0x0030)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FPCGDataCollection> PerPinGeneratedOutput;                            // 0x0238(0x0050)(Edit, Transient, EditConst, NonTransactional, NativeAccessSpecifierPrivate)
	uint8                                         Pad_288[0x18];                                     // 0x0288(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsComponentLocal;                                 // 0x02A0(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bProceduralInstancesInUse;                         // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A2[0x2E];                                     // 0x02A2(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActorsToManagedResources(const TArray<class AActor*>& InActors);
	void AddComponentsToManagedResources(const TArray<class UActorComponent*>& InComponents);
	void AddToManagedResources(class UPCGManagedResource* InResource);
	void Cleanup(bool bRemoveComponents, bool bSave);
	void CleanupLocal(bool bRemoveComponents, bool bSave);
	class AActor* ClearPCGLink(class UClass* TemplateActor);
	void Generate(bool bForce);
	void GenerateLocal(bool bForce);
	void NotifyPropertiesChangedFromBlueprint();
	void SetEditingMode(EPCGEditorDirtyMode InEditingMode, EPCGEditorDirtyMode InSerializedEditingMode);
	void SetGraph(class UPCGGraphInterface* InGraph);

	EPCGEditorDirtyMode GetEditingMode() const;
	const struct FPCGDataCollection GetGeneratedGraphOutput() const;
	EPCGEditorDirtyMode GetSerializedEditingMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGComponent">();
	}
	static class UPCGComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGComponent>();
	}
};
static_assert(alignof(UPCGComponent) == 0x000008, "Wrong alignment on UPCGComponent");
static_assert(sizeof(UPCGComponent) == 0x0002D0, "Wrong size on UPCGComponent");
static_assert(offsetof(UPCGComponent, Seed) == 0x0000A0, "Member 'UPCGComponent::Seed' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bActivated) == 0x0000A4, "Member 'UPCGComponent::bActivated' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bIsComponentPartitioned) == 0x0000A5, "Member 'UPCGComponent::bIsComponentPartitioned' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GenerationTrigger) == 0x0000A6, "Member 'UPCGComponent::GenerationTrigger' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bGenerateOnDropWhenTriggerOnDemand) == 0x0000A7, "Member 'UPCGComponent::bGenerateOnDropWhenTriggerOnDemand' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bOverrideGenerationRadii) == 0x0000A8, "Member 'UPCGComponent::bOverrideGenerationRadii' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GenerationRadii) == 0x0000B0, "Member 'UPCGComponent::GenerationRadii' has a wrong offset!");
static_assert(offsetof(UPCGComponent, SchedulingPolicyClass) == 0x000110, "Member 'UPCGComponent::SchedulingPolicyClass' has a wrong offset!");
static_assert(offsetof(UPCGComponent, SchedulingPolicy) == 0x000118, "Member 'UPCGComponent::SchedulingPolicy' has a wrong offset!");
static_assert(offsetof(UPCGComponent, OnPCGGraphStartGeneratingExternal) == 0x000120, "Member 'UPCGComponent::OnPCGGraphStartGeneratingExternal' has a wrong offset!");
static_assert(offsetof(UPCGComponent, OnPCGGraphCancelledExternal) == 0x000130, "Member 'UPCGComponent::OnPCGGraphCancelledExternal' has a wrong offset!");
static_assert(offsetof(UPCGComponent, OnPCGGraphGeneratedExternal) == 0x000140, "Member 'UPCGComponent::OnPCGGraphGeneratedExternal' has a wrong offset!");
static_assert(offsetof(UPCGComponent, OnPCGGraphCleanedExternal) == 0x000150, "Member 'UPCGComponent::OnPCGGraphCleanedExternal' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bGenerated) == 0x000160, "Member 'UPCGComponent::bGenerated' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bRuntimeGenerated) == 0x000161, "Member 'UPCGComponent::bRuntimeGenerated' has a wrong offset!");
static_assert(offsetof(UPCGComponent, PostGenerateFunctionNames) == 0x000168, "Member 'UPCGComponent::PostGenerateFunctionNames' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GraphInstance) == 0x000178, "Member 'UPCGComponent::GraphInstance' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GenerationGridSize) == 0x000180, "Member 'UPCGComponent::GenerationGridSize' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CurrentEditingMode) == 0x000184, "Member 'UPCGComponent::CurrentEditingMode' has a wrong offset!");
static_assert(offsetof(UPCGComponent, SerializedEditingMode) == 0x000185, "Member 'UPCGComponent::SerializedEditingMode' has a wrong offset!");
static_assert(offsetof(UPCGComponent, InputType) == 0x000187, "Member 'UPCGComponent::InputType' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bParseActorComponents) == 0x000188, "Member 'UPCGComponent::bParseActorComponents' has a wrong offset!");
static_assert(offsetof(UPCGComponent, RuntimeGridDescriptorHash) == 0x00018C, "Member 'UPCGComponent::RuntimeGridDescriptorHash' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CachedPCGData) == 0x000190, "Member 'UPCGComponent::CachedPCGData' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CachedInputData) == 0x000198, "Member 'UPCGComponent::CachedInputData' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CachedActorData) == 0x0001A0, "Member 'UPCGComponent::CachedActorData' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CachedLandscapeData) == 0x0001A8, "Member 'UPCGComponent::CachedLandscapeData' has a wrong offset!");
static_assert(offsetof(UPCGComponent, CachedLandscapeHeightData) == 0x0001B0, "Member 'UPCGComponent::CachedLandscapeHeightData' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GeneratedResources) == 0x0001B8, "Member 'UPCGComponent::GeneratedResources' has a wrong offset!");
static_assert(offsetof(UPCGComponent, LastGeneratedBounds) == 0x0001D0, "Member 'UPCGComponent::LastGeneratedBounds' has a wrong offset!");
static_assert(offsetof(UPCGComponent, GeneratedGraphOutput) == 0x000208, "Member 'UPCGComponent::GeneratedGraphOutput' has a wrong offset!");
static_assert(offsetof(UPCGComponent, PerPinGeneratedOutput) == 0x000238, "Member 'UPCGComponent::PerPinGeneratedOutput' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bIsComponentLocal) == 0x0002A0, "Member 'UPCGComponent::bIsComponentLocal' has a wrong offset!");
static_assert(offsetof(UPCGComponent, bProceduralInstancesInUse) == 0x0002A1, "Member 'UPCGComponent::bProceduralInstancesInUse' has a wrong offset!");

// Class PCG.PCGEdge
// 0x0030 (0x0058 - 0x0028)
class UPCGEdge final : public UObject
{
public:
	class FName                                   InboundLabel;                                      // 0x0028(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               InboundNode;                                       // 0x0030(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutboundLabel;                                     // 0x0038(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               OutboundNode;                                      // 0x0040(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPin*                                InputPin;                                          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPin*                                OutputPin;                                         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGEdge">();
	}
	static class UPCGEdge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGEdge>();
	}
};
static_assert(alignof(UPCGEdge) == 0x000008, "Wrong alignment on UPCGEdge");
static_assert(sizeof(UPCGEdge) == 0x000058, "Wrong size on UPCGEdge");
static_assert(offsetof(UPCGEdge, InboundLabel) == 0x000028, "Member 'UPCGEdge::InboundLabel' has a wrong offset!");
static_assert(offsetof(UPCGEdge, InboundNode) == 0x000030, "Member 'UPCGEdge::InboundNode' has a wrong offset!");
static_assert(offsetof(UPCGEdge, OutboundLabel) == 0x000038, "Member 'UPCGEdge::OutboundLabel' has a wrong offset!");
static_assert(offsetof(UPCGEdge, OutboundNode) == 0x000040, "Member 'UPCGEdge::OutboundNode' has a wrong offset!");
static_assert(offsetof(UPCGEdge, InputPin) == 0x000048, "Member 'UPCGEdge::InputPin' has a wrong offset!");
static_assert(offsetof(UPCGEdge, OutputPin) == 0x000050, "Member 'UPCGEdge::OutputPin' has a wrong offset!");

// Class PCG.PCGGraph
// 0x0110 (0x0138 - 0x0028)
class UPCGGraph final : public UPCGGraphInterface
{
public:
	bool                                          bLandscapeUsesMetadata;                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPCGNode*>                       Nodes;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UPCGNode*                               InputNode;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPCGNode*                               OutputNode;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FInstancedPropertyBag                  UserParameters;                                    // 0x0050(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseHierarchicalGeneration;                        // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPCGHiGenGrid                                 HiGenGridSize;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        HiGenExponential;                                  // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUse2DGrid;                                        // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D[0x5B];                                      // 0x006D(0x005B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEditorOnly;                                     // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGGraphCompilationData*               CookedCompilationData;                             // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPCGRuntimeGenerationRadii             GenerationRadii;                                   // 0x00D8(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	class UPCGNode* AddEdge(class UPCGNode* From, const class FName& FromPinLabel, class UPCGNode* To, const class FName& ToPinLabel);
	class UPCGNode* AddNodeCopy(const class UPCGSettings* InSettings, class UPCGSettings** DefaultNodeSettings);
	class UPCGNode* AddNodeInstance(class UPCGSettings* InSettings);
	class UPCGNode* AddNodeOfType(TSubclassOf<class UPCGSettings> InSettingsClass, class UPCGSettings** DefaultNodeSettings);
	bool RemoveEdge(class UPCGNode* From, const class FName& FromLabel, class UPCGNode* To, const class FName& ToLabel);
	void RemoveNode(class UPCGNode* InNode);
	void RemoveNodes(TArray<class UPCGNode*>* InNodes);

	class UPCGNode* GetInputNode() const;
	class UPCGNode* GetOutputNode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraph">();
	}
	static class UPCGGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraph>();
	}
};
static_assert(alignof(UPCGGraph) == 0x000008, "Wrong alignment on UPCGGraph");
static_assert(sizeof(UPCGGraph) == 0x000138, "Wrong size on UPCGGraph");
static_assert(offsetof(UPCGGraph, bLandscapeUsesMetadata) == 0x000028, "Member 'UPCGGraph::bLandscapeUsesMetadata' has a wrong offset!");
static_assert(offsetof(UPCGGraph, Nodes) == 0x000030, "Member 'UPCGGraph::Nodes' has a wrong offset!");
static_assert(offsetof(UPCGGraph, InputNode) == 0x000040, "Member 'UPCGGraph::InputNode' has a wrong offset!");
static_assert(offsetof(UPCGGraph, OutputNode) == 0x000048, "Member 'UPCGGraph::OutputNode' has a wrong offset!");
static_assert(offsetof(UPCGGraph, UserParameters) == 0x000050, "Member 'UPCGGraph::UserParameters' has a wrong offset!");
static_assert(offsetof(UPCGGraph, bUseHierarchicalGeneration) == 0x000060, "Member 'UPCGGraph::bUseHierarchicalGeneration' has a wrong offset!");
static_assert(offsetof(UPCGGraph, HiGenGridSize) == 0x000064, "Member 'UPCGGraph::HiGenGridSize' has a wrong offset!");
static_assert(offsetof(UPCGGraph, HiGenExponential) == 0x000068, "Member 'UPCGGraph::HiGenExponential' has a wrong offset!");
static_assert(offsetof(UPCGGraph, bUse2DGrid) == 0x00006C, "Member 'UPCGGraph::bUse2DGrid' has a wrong offset!");
static_assert(offsetof(UPCGGraph, bIsEditorOnly) == 0x0000C8, "Member 'UPCGGraph::bIsEditorOnly' has a wrong offset!");
static_assert(offsetof(UPCGGraph, CookedCompilationData) == 0x0000D0, "Member 'UPCGGraph::CookedCompilationData' has a wrong offset!");
static_assert(offsetof(UPCGGraph, GenerationRadii) == 0x0000D8, "Member 'UPCGGraph::GenerationRadii' has a wrong offset!");

// Class PCG.PCGGraphInputOutputSettings
// 0x0078 (0x0130 - 0x00B8)
class UPCGGraphInputOutputSettings final : public UPCGSettings
{
public:
	TArray<struct FPCGPinProperties>              Pins;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             PinLabels;                                         // 0x00C8(0x0050)(Deprecated, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPCGPinProperties>              CustomPins;                                        // 0x0118(0x0010)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasAddedDefaultPin;                               // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGraphInputOutputSettings">();
	}
	static class UPCGGraphInputOutputSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGraphInputOutputSettings>();
	}
};
static_assert(alignof(UPCGGraphInputOutputSettings) == 0x000008, "Wrong alignment on UPCGGraphInputOutputSettings");
static_assert(sizeof(UPCGGraphInputOutputSettings) == 0x000130, "Wrong size on UPCGGraphInputOutputSettings");
static_assert(offsetof(UPCGGraphInputOutputSettings, Pins) == 0x0000B8, "Member 'UPCGGraphInputOutputSettings::Pins' has a wrong offset!");
static_assert(offsetof(UPCGGraphInputOutputSettings, PinLabels) == 0x0000C8, "Member 'UPCGGraphInputOutputSettings::PinLabels' has a wrong offset!");
static_assert(offsetof(UPCGGraphInputOutputSettings, CustomPins) == 0x000118, "Member 'UPCGGraphInputOutputSettings::CustomPins' has a wrong offset!");
static_assert(offsetof(UPCGGraphInputOutputSettings, bHasAddedDefaultPin) == 0x000128, "Member 'UPCGGraphInputOutputSettings::bHasAddedDefaultPin' has a wrong offset!");

// Class PCG.PCGManagedISMComponent
// 0x0230 (0x0290 - 0x0060)
class UPCGManagedISMComponent final : public UPCGManagedComponent
{
public:
	bool                                          bHasDescriptor;                                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FISMComponentDescriptor                Descriptor;                                        // 0x0068(0x01F8)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRootLocation;                                  // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RootLocation;                                      // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SettingsUID;                                       // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGManagedISMComponent">();
	}
	static class UPCGManagedISMComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGManagedISMComponent>();
	}
};
static_assert(alignof(UPCGManagedISMComponent) == 0x000008, "Wrong alignment on UPCGManagedISMComponent");
static_assert(sizeof(UPCGManagedISMComponent) == 0x000290, "Wrong size on UPCGManagedISMComponent");
static_assert(offsetof(UPCGManagedISMComponent, bHasDescriptor) == 0x000060, "Member 'UPCGManagedISMComponent::bHasDescriptor' has a wrong offset!");
static_assert(offsetof(UPCGManagedISMComponent, Descriptor) == 0x000068, "Member 'UPCGManagedISMComponent::Descriptor' has a wrong offset!");
static_assert(offsetof(UPCGManagedISMComponent, bHasRootLocation) == 0x000260, "Member 'UPCGManagedISMComponent::bHasRootLocation' has a wrong offset!");
static_assert(offsetof(UPCGManagedISMComponent, RootLocation) == 0x000268, "Member 'UPCGManagedISMComponent::RootLocation' has a wrong offset!");
static_assert(offsetof(UPCGManagedISMComponent, SettingsUID) == 0x000280, "Member 'UPCGManagedISMComponent::SettingsUID' has a wrong offset!");

// Class PCG.PCGParamData
// 0x0088 (0x00C0 - 0x0038)
class UPCGParamData final : public UPCGData
{
public:
	class UPCGMetadata*                           MetaData;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, int64>                      NameMap;                                           // 0x0040(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bHasCachedLastSelector;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGAttributePropertyInputSelector     CachedLastSelector;                                // 0x0098(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int64 FindOrAddMetadataKey(const class FName& InName);
	class UPCGMetadata* MutableMetadata();

	const class UPCGMetadata* ConstMetadata() const;
	int64 FindMetadataKey(const class FName& InName) const;
	class UPCGParamData* K2_FilterParamsByKey(int64 InKey) const;
	class UPCGParamData* K2_FilterParamsByName(const class FName& InName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGParamData">();
	}
	static class UPCGParamData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGParamData>();
	}
};
static_assert(alignof(UPCGParamData) == 0x000008, "Wrong alignment on UPCGParamData");
static_assert(sizeof(UPCGParamData) == 0x0000C0, "Wrong size on UPCGParamData");
static_assert(offsetof(UPCGParamData, MetaData) == 0x000038, "Member 'UPCGParamData::MetaData' has a wrong offset!");
static_assert(offsetof(UPCGParamData, NameMap) == 0x000040, "Member 'UPCGParamData::NameMap' has a wrong offset!");
static_assert(offsetof(UPCGParamData, bHasCachedLastSelector) == 0x000090, "Member 'UPCGParamData::bHasCachedLastSelector' has a wrong offset!");
static_assert(offsetof(UPCGParamData, CachedLastSelector) == 0x000098, "Member 'UPCGParamData::CachedLastSelector' has a wrong offset!");

// Class PCG.PCGPin
// 0x0038 (0x0060 - 0x0028)
class UPCGPin final : public UObject
{
public:
	class UPCGNode*                               Node;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x0030(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPCGEdge*>                       Edges;                                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, TextExportTransient, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPCGPinProperties                      Properties;                                        // 0x0048(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetToolTip(const class FText& InTooltip);

	class FText GetTooltip() const;
	bool IsConnected() const;
	bool IsOutputPin() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGPin">();
	}
	static class UPCGPin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGPin>();
	}
};
static_assert(alignof(UPCGPin) == 0x000008, "Wrong alignment on UPCGPin");
static_assert(sizeof(UPCGPin) == 0x000060, "Wrong size on UPCGPin");
static_assert(offsetof(UPCGPin, Node) == 0x000028, "Member 'UPCGPin::Node' has a wrong offset!");
static_assert(offsetof(UPCGPin, Label) == 0x000030, "Member 'UPCGPin::Label' has a wrong offset!");
static_assert(offsetof(UPCGPin, Edges) == 0x000038, "Member 'UPCGPin::Edges' has a wrong offset!");
static_assert(offsetof(UPCGPin, Properties) == 0x000048, "Member 'UPCGPin::Properties' has a wrong offset!");

// Class PCG.PCGSettingsInstance
// 0x0008 (0x0048 - 0x0040)
class UPCGSettingsInstance final : public UPCGSettingsInterface
{
public:
	class UPCGSettings*                           Settings;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSettingsInstance">();
	}
	static class UPCGSettingsInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSettingsInstance>();
	}
};
static_assert(alignof(UPCGSettingsInstance) == 0x000008, "Wrong alignment on UPCGSettingsInstance");
static_assert(sizeof(UPCGSettingsInstance) == 0x000048, "Wrong size on UPCGSettingsInstance");
static_assert(offsetof(UPCGSettingsInstance, Settings) == 0x000040, "Member 'UPCGSettingsInstance::Settings' has a wrong offset!");

// Class PCG.PCGSubgraphNode
// 0x0000 (0x0088 - 0x0088)
class UPCGSubgraphNode final : public UPCGBaseSubgraphNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSubgraphNode">();
	}
	static class UPCGSubgraphNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSubgraphNode>();
	}
};
static_assert(alignof(UPCGSubgraphNode) == 0x000008, "Wrong alignment on UPCGSubgraphNode");
static_assert(sizeof(UPCGSubgraphNode) == 0x000088, "Wrong size on UPCGSubgraphNode");

// Class PCG.PCGVolume
// 0x0008 (0x02E8 - 0x02E0)
class APCGVolume final : public AVolume
{
public:
	class UPCGComponent*                          PCGComponent;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGVolume">();
	}
	static class APCGVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APCGVolume>();
	}
};
static_assert(alignof(APCGVolume) == 0x000008, "Wrong alignment on APCGVolume");
static_assert(sizeof(APCGVolume) == 0x0002E8, "Wrong size on APCGVolume");
static_assert(offsetof(APCGVolume, PCGComponent) == 0x0002E0, "Member 'APCGVolume::PCGComponent' has a wrong offset!");

// Class PCG.PCGGenSourceComponent
// 0x0008 (0x00A8 - 0x00A0)
class UPCGGenSourceComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenSourceComponent">();
	}
	static class UPCGGenSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGenSourceComponent>();
	}
};
static_assert(alignof(UPCGGenSourceComponent) == 0x000008, "Wrong alignment on UPCGGenSourceComponent");
static_assert(sizeof(UPCGGenSourceComponent) == 0x0000A8, "Wrong size on UPCGGenSourceComponent");

// Class PCG.PCGGenSourcePlayer
// 0x0010 (0x0038 - 0x0028)
class UPCGGenSourcePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGGenSourcePlayer">();
	}
	static class UPCGGenSourcePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGGenSourcePlayer>();
	}
};
static_assert(alignof(UPCGGenSourcePlayer) == 0x000008, "Wrong alignment on UPCGGenSourcePlayer");
static_assert(sizeof(UPCGGenSourcePlayer) == 0x000038, "Wrong size on UPCGGenSourcePlayer");

// Class PCG.PCGSchedulingPolicyDistanceAndDirection
// 0x0010 (0x0038 - 0x0028)
class UPCGSchedulingPolicyDistanceAndDirection final : public UPCGSchedulingPolicyBase
{
public:
	bool                                          bUseDistance;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceWeight;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDirection;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionWeight;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PCGSchedulingPolicyDistanceAndDirection">();
	}
	static class UPCGSchedulingPolicyDistanceAndDirection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPCGSchedulingPolicyDistanceAndDirection>();
	}
};
static_assert(alignof(UPCGSchedulingPolicyDistanceAndDirection) == 0x000008, "Wrong alignment on UPCGSchedulingPolicyDistanceAndDirection");
static_assert(sizeof(UPCGSchedulingPolicyDistanceAndDirection) == 0x000038, "Wrong size on UPCGSchedulingPolicyDistanceAndDirection");
static_assert(offsetof(UPCGSchedulingPolicyDistanceAndDirection, bUseDistance) == 0x000028, "Member 'UPCGSchedulingPolicyDistanceAndDirection::bUseDistance' has a wrong offset!");
static_assert(offsetof(UPCGSchedulingPolicyDistanceAndDirection, DistanceWeight) == 0x00002C, "Member 'UPCGSchedulingPolicyDistanceAndDirection::DistanceWeight' has a wrong offset!");
static_assert(offsetof(UPCGSchedulingPolicyDistanceAndDirection, bUseDirection) == 0x000030, "Member 'UPCGSchedulingPolicyDistanceAndDirection::bUseDirection' has a wrong offset!");
static_assert(offsetof(UPCGSchedulingPolicyDistanceAndDirection, DirectionWeight) == 0x000034, "Member 'UPCGSchedulingPolicyDistanceAndDirection::DirectionWeight' has a wrong offset!");

}

