#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Widget_RoomObjective

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RGame_structs.hpp"
#include "RGame_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass Widget_RoomObjective.Widget_RoomObjective_C
// 0x0068 (0x0380 - 0x0318)
class UWidget_RoomObjective_C final : public URCommonRoomObjectiveWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Enter_Animation;                                   // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Exit_Animation;                                    // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BackgroundShadow;                                  // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 FillBackground;                                    // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HBox_MiniProgressBars;                             // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ObjectiveTitleTextBlock;                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ProgressFillImage;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_ProgressBar;                               // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Thresholds;                                        // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         TargetProgress;                                    // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ProgressUpdateTimer;                               // 0x0378(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BindToChargeZoneUpdate(class ABP_RoomObjectiveObject_ChargeZone_C* ChargeZoneActor);
	void ExecuteUbergraph_Widget_RoomObjective(int32 EntryPoint);
	void GetObjectiveName(ERoomObjectiveType ObjectiveType, class FText* Name_0);
	void OnInitialized();
	void OnObjectiveEnded(const struct FGameplayTag& ObjectiveTag, bool bCompleted);
	void OnObjectiveRemoved(const struct FGameplayTag& ObjectiveTag);
	void OnObjectiveStarted(class URGObjectiveScript* ObjectiveScript);
	void OnObjectiveUpdated(const struct FGameplayTag& ObjectiveTag, const class FText& UpdateInfo);
	void OnPreLevelChanged();
	void OnRoomObjectiveObjectUpdated_Event(float AmountCompleted, float AmountRequired);
	void OnRoomObjectiveSegmentCompleted();
	void OnVisChanged(ESlateVisibility InVisibility);
	void RoomObjectiveStarted(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment, ERoomObjectiveType RoomObjectiveType);
	void SetProgressAmount(float Porgress);
	void SetProgressBarThreshold(double Thershold);
	void SetupCarryThePayloadObjective(class AREnemySpawnAreaSegment* Segment);
	void SetupDestroyAllObjectsObjective(class AREnemySpawnAreaSegment* Segment);
	void SetupMultiProgressBarObjective(class AREnemySpawnAreaSegment* Segment, TArray<class AActor*>& ActorsToKill);
	void SetupSingleProgressBarObjective(class AREnemySpawnAreaSegment* Segment);
	void UpdateFillProgress();
	void UpdateProgressBar(class AREnemySpawnAreaSegment* EnemySpawnAreaSegment, double AmountCompleted, double AmountRequired);
	void UpdateVisibility(const struct FGameplayTag& Tag);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Widget_RoomObjective_C">();
	}
	static class UWidget_RoomObjective_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_RoomObjective_C>();
	}
};
static_assert(alignof(UWidget_RoomObjective_C) == 0x000008, "Wrong alignment on UWidget_RoomObjective_C");
static_assert(sizeof(UWidget_RoomObjective_C) == 0x000380, "Wrong size on UWidget_RoomObjective_C");
static_assert(offsetof(UWidget_RoomObjective_C, UberGraphFrame) == 0x000318, "Member 'UWidget_RoomObjective_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, Enter_Animation) == 0x000320, "Member 'UWidget_RoomObjective_C::Enter_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, Exit_Animation) == 0x000328, "Member 'UWidget_RoomObjective_C::Exit_Animation' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, BackgroundShadow) == 0x000330, "Member 'UWidget_RoomObjective_C::BackgroundShadow' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, FillBackground) == 0x000338, "Member 'UWidget_RoomObjective_C::FillBackground' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, Frame) == 0x000340, "Member 'UWidget_RoomObjective_C::Frame' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, HBox_MiniProgressBars) == 0x000348, "Member 'UWidget_RoomObjective_C::HBox_MiniProgressBars' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, ObjectiveTitleTextBlock) == 0x000350, "Member 'UWidget_RoomObjective_C::ObjectiveTitleTextBlock' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, ProgressFillImage) == 0x000358, "Member 'UWidget_RoomObjective_C::ProgressFillImage' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, SizeBox_ProgressBar) == 0x000360, "Member 'UWidget_RoomObjective_C::SizeBox_ProgressBar' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, Thresholds) == 0x000368, "Member 'UWidget_RoomObjective_C::Thresholds' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, TargetProgress) == 0x000370, "Member 'UWidget_RoomObjective_C::TargetProgress' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, CurrentProgress) == 0x000374, "Member 'UWidget_RoomObjective_C::CurrentProgress' has a wrong offset!");
static_assert(offsetof(UWidget_RoomObjective_C, ProgressUpdateTimer) == 0x000378, "Member 'UWidget_RoomObjective_C::ProgressUpdateTimer' has a wrong offset!");

}

